//! Autogenerated: 'src/ExtractionOCaml/word_by_word_montgomery' --lang Rust --inline secp256k1 32 '2^256 - 2^32 - 977' mul square add sub opp from_montgomery to_montgomery nonzero selectznz to_bytes from_bytes one msat sat_from_bytes divstep divstep_precomp inner_loop inner_loop_hd update_fg update_vr jumpdivstep_precomp jumpdivstep_precomp_hd
//! curve description: secp256k1
//! machine_wordsize = 32 (from "32")
//! requested operations: mul, square, add, sub, opp, from_montgomery, to_montgomery, nonzero, selectznz, to_bytes, from_bytes, one, msat, sat_from_bytes, divstep, divstep_precomp, inner_loop, inner_loop_hd, update_fg, update_vr, jumpdivstep_precomp, jumpdivstep_precomp_hd
//! m = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f (from "2^256 - 2^32 - 977")
//!
//! NOTE: In addition to the bounds specified above each function, all
//!   functions synthesized for this Montgomery arithmetic require the
//!   input to be strictly less than the prime modulus (m), and also
//!   require the input to be in the unique saturated representation.
//!   All functions also ensure that these two properties are true of
//!   return values.
//!
//! Computed values:
//!   eval z = z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160) + (z[6] << 192) + (z[7] << 224)
//!   bytes_eval z = z[0] + (z[1] << 8) + (z[2] << 16) + (z[3] << 24) + (z[4] << 32) + (z[5] << 40) + (z[6] << 48) + (z[7] << 56) + (z[8] << 64) + (z[9] << 72) + (z[10] << 80) + (z[11] << 88) + (z[12] << 96) + (z[13] << 104) + (z[14] << 112) + (z[15] << 120) + (z[16] << 128) + (z[17] << 136) + (z[18] << 144) + (z[19] << 152) + (z[20] << 160) + (z[21] << 168) + (z[22] << 176) + (z[23] << 184) + (z[24] << 192) + (z[25] << 200) + (z[26] << 208) + (z[27] << 216) + (z[28] << 224) + (z[29] << 232) + (z[30] << 240) + (z[31] << 248)
//!   twos_complement_eval z = if (z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160) + (z[6] << 192) + (z[7] << 224)) & (2^256-1) < 2^255 then (z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160) + (z[6] << 192) + (z[7] << 224)) & (2^256-1) else ((z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160) + (z[6] << 192) + (z[7] << 224)) & (2^256-1)) - 2^256

#![allow(unused_parens)]
#![allow(non_camel_case_types)]

pub type fiat_secp256k1_u1 = u8;
pub type fiat_secp256k1_i1 = i8;
pub type fiat_secp256k1_u2 = u8;
pub type fiat_secp256k1_i2 = i8;

/* The type fiat_secp256k1_montgomery_domain_field_element is a field element in the Montgomery domain. */
/* Bounds: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]] */
pub type fiat_secp256k1_montgomery_domain_field_element = [u32; 8];

/* The type fiat_secp256k1_non_montgomery_domain_field_element is a field element NOT in the Montgomery domain. */
/* Bounds: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]] */
pub type fiat_secp256k1_non_montgomery_domain_field_element = [u32; 8];


/// The function fiat_secp256k1_addcarryx_u32 is an addition with carry.
///
/// Postconditions:
///   out1 = (arg1 + arg2 + arg3) mod 2^32
///   out2 = ⌊(arg1 + arg2 + arg3) / 2^32⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffff]
///   arg3: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [0x0 ~> 0x1]
#[inline]
pub fn fiat_secp256k1_addcarryx_u32(out1: &mut u32, out2: &mut fiat_secp256k1_u1, arg1: fiat_secp256k1_u1, arg2: u32, arg3: u32) -> () {
  let x1: u64 = (((arg1 as u64) + (arg2 as u64)) + (arg3 as u64));
  let x2: u32 = ((x1 & (0xffffffff as u64)) as u32);
  let x3: fiat_secp256k1_u1 = ((x1 >> 32) as fiat_secp256k1_u1);
  *out1 = x2;
  *out2 = x3;
}

/// The function fiat_secp256k1_subborrowx_u32 is a subtraction with borrow.
///
/// Postconditions:
///   out1 = (-arg1 + arg2 + -arg3) mod 2^32
///   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^32⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffff]
///   arg3: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [0x0 ~> 0x1]
#[inline]
pub fn fiat_secp256k1_subborrowx_u32(out1: &mut u32, out2: &mut fiat_secp256k1_u1, arg1: fiat_secp256k1_u1, arg2: u32, arg3: u32) -> () {
  let x1: i64 = (((arg2 as i64) - (arg1 as i64)) - (arg3 as i64));
  let x2: fiat_secp256k1_i1 = ((x1 >> 32) as fiat_secp256k1_i1);
  let x3: u32 = ((x1 & (0xffffffff as i64)) as u32);
  *out1 = x3;
  *out2 = (((0x0 as fiat_secp256k1_i2) - (x2 as fiat_secp256k1_i2)) as fiat_secp256k1_u1);
}

/// The function fiat_secp256k1_mulx_u32 is a multiplication, returning the full double-width result.
///
/// Postconditions:
///   out1 = (arg1 * arg2) mod 2^32
///   out2 = ⌊arg1 * arg2 / 2^32⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffff]
///   arg2: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [0x0 ~> 0xffffffff]
#[inline]
pub fn fiat_secp256k1_mulx_u32(out1: &mut u32, out2: &mut u32, arg1: u32, arg2: u32) -> () {
  let x1: u64 = ((arg1 as u64) * (arg2 as u64));
  let x2: u32 = ((x1 & (0xffffffff as u64)) as u32);
  let x3: u32 = ((x1 >> 32) as u32);
  *out1 = x2;
  *out2 = x3;
}

/// The function fiat_secp256k1_cmovznz_u32 is a single-word conditional move.
///
/// Postconditions:
///   out1 = (if arg1 = 0 then arg2 else arg3)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffff]
///   arg3: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
#[inline]
pub fn fiat_secp256k1_cmovznz_u32(out1: &mut u32, arg1: fiat_secp256k1_u1, arg2: u32, arg3: u32) -> () {
  let x1: fiat_secp256k1_u1 = (!(!arg1));
  let x2: u32 = ((((((0x0 as fiat_secp256k1_i2) - (x1 as fiat_secp256k1_i2)) as fiat_secp256k1_i1) as i64) & (0xffffffff as i64)) as u32);
  let x3: u32 = ((x2 & arg3) | ((!x2) & arg2));
  *out1 = x3;
}

/// The function fiat_secp256k1_cmovznz_u1 is a single-word conditional move.
///
/// Postconditions:
///   out1 = (if arg1 = 0 then arg2 else arg3)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0x1]
///   arg3: [0x0 ~> 0x1]
/// Output Bounds:
///   out1: [0x0 ~> 0x1]
#[inline]
pub fn fiat_secp256k1_cmovznz_u1(out1: &mut fiat_secp256k1_u1, arg1: fiat_secp256k1_u1, arg2: fiat_secp256k1_u1, arg3: fiat_secp256k1_u1) -> () {
  let x1: fiat_secp256k1_u1 = (!(!arg1));
  let x2: fiat_secp256k1_u1 = ((((((0x0 as fiat_secp256k1_i2) - (x1 as fiat_secp256k1_i2)) as fiat_secp256k1_i1) as fiat_secp256k1_i2) & (0x1 as fiat_secp256k1_i2)) as fiat_secp256k1_u1);
  let x3: fiat_secp256k1_u1 = ((x2 & arg3) | ((!x2) & arg2));
  *out1 = x3;
}

/// The function fiat_secp256k1_mul multiplies two field elements in the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
///   0 ≤ eval arg2 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m
///   0 ≤ eval out1 < m
///
#[inline]
pub fn fiat_secp256k1_mul(out1: &mut fiat_secp256k1_montgomery_domain_field_element, arg1: &fiat_secp256k1_montgomery_domain_field_element, arg2: &fiat_secp256k1_montgomery_domain_field_element) -> () {
  let x1: u32 = (arg1[1]);
  let x2: u32 = (arg1[2]);
  let x3: u32 = (arg1[3]);
  let x4: u32 = (arg1[4]);
  let x5: u32 = (arg1[5]);
  let x6: u32 = (arg1[6]);
  let x7: u32 = (arg1[7]);
  let x8: u32 = (arg1[0]);
  let mut x9: u32 = 0;
  let mut x10: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x9, &mut x10, x8, (arg2[7]));
  let mut x11: u32 = 0;
  let mut x12: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x11, &mut x12, x8, (arg2[6]));
  let mut x13: u32 = 0;
  let mut x14: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x13, &mut x14, x8, (arg2[5]));
  let mut x15: u32 = 0;
  let mut x16: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x15, &mut x16, x8, (arg2[4]));
  let mut x17: u32 = 0;
  let mut x18: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x17, &mut x18, x8, (arg2[3]));
  let mut x19: u32 = 0;
  let mut x20: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x19, &mut x20, x8, (arg2[2]));
  let mut x21: u32 = 0;
  let mut x22: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x21, &mut x22, x8, (arg2[1]));
  let mut x23: u32 = 0;
  let mut x24: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x23, &mut x24, x8, (arg2[0]));
  let mut x25: u32 = 0;
  let mut x26: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x25, &mut x26, 0x0, x24, x21);
  let mut x27: u32 = 0;
  let mut x28: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x27, &mut x28, x26, x22, x19);
  let mut x29: u32 = 0;
  let mut x30: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x29, &mut x30, x28, x20, x17);
  let mut x31: u32 = 0;
  let mut x32: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x31, &mut x32, x30, x18, x15);
  let mut x33: u32 = 0;
  let mut x34: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x33, &mut x34, x32, x16, x13);
  let mut x35: u32 = 0;
  let mut x36: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x35, &mut x36, x34, x14, x11);
  let mut x37: u32 = 0;
  let mut x38: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x37, &mut x38, x36, x12, x9);
  let x39: u32 = ((x38 as u32) + x10);
  let mut x40: u32 = 0;
  let mut x41: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x40, &mut x41, x23, 0xd2253531);
  let mut x42: u32 = 0;
  let mut x43: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x42, &mut x43, x40, 0xffffffff);
  let mut x44: u32 = 0;
  let mut x45: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x44, &mut x45, x40, 0xffffffff);
  let mut x46: u32 = 0;
  let mut x47: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x46, &mut x47, x40, 0xffffffff);
  let mut x48: u32 = 0;
  let mut x49: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x48, &mut x49, x40, 0xffffffff);
  let mut x50: u32 = 0;
  let mut x51: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x50, &mut x51, x40, 0xffffffff);
  let mut x52: u32 = 0;
  let mut x53: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x52, &mut x53, x40, 0xffffffff);
  let mut x54: u32 = 0;
  let mut x55: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x54, &mut x55, x40, 0xfffffffe);
  let mut x56: u32 = 0;
  let mut x57: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x56, &mut x57, x40, 0xfffffc2f);
  let mut x58: u32 = 0;
  let mut x59: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x58, &mut x59, 0x0, x57, x54);
  let mut x60: u32 = 0;
  let mut x61: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x60, &mut x61, x59, x55, x52);
  let mut x62: u32 = 0;
  let mut x63: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x62, &mut x63, x61, x53, x50);
  let mut x64: u32 = 0;
  let mut x65: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x64, &mut x65, x63, x51, x48);
  let mut x66: u32 = 0;
  let mut x67: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x66, &mut x67, x65, x49, x46);
  let mut x68: u32 = 0;
  let mut x69: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x68, &mut x69, x67, x47, x44);
  let mut x70: u32 = 0;
  let mut x71: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x70, &mut x71, x69, x45, x42);
  let x72: u32 = ((x71 as u32) + x43);
  let mut x73: u32 = 0;
  let mut x74: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x73, &mut x74, 0x0, x23, x56);
  let mut x75: u32 = 0;
  let mut x76: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x75, &mut x76, x74, x25, x58);
  let mut x77: u32 = 0;
  let mut x78: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x77, &mut x78, x76, x27, x60);
  let mut x79: u32 = 0;
  let mut x80: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x79, &mut x80, x78, x29, x62);
  let mut x81: u32 = 0;
  let mut x82: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x81, &mut x82, x80, x31, x64);
  let mut x83: u32 = 0;
  let mut x84: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x83, &mut x84, x82, x33, x66);
  let mut x85: u32 = 0;
  let mut x86: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x85, &mut x86, x84, x35, x68);
  let mut x87: u32 = 0;
  let mut x88: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x87, &mut x88, x86, x37, x70);
  let mut x89: u32 = 0;
  let mut x90: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x89, &mut x90, x88, x39, x72);
  let mut x91: u32 = 0;
  let mut x92: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x91, &mut x92, x1, (arg2[7]));
  let mut x93: u32 = 0;
  let mut x94: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x93, &mut x94, x1, (arg2[6]));
  let mut x95: u32 = 0;
  let mut x96: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x95, &mut x96, x1, (arg2[5]));
  let mut x97: u32 = 0;
  let mut x98: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x97, &mut x98, x1, (arg2[4]));
  let mut x99: u32 = 0;
  let mut x100: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x99, &mut x100, x1, (arg2[3]));
  let mut x101: u32 = 0;
  let mut x102: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x101, &mut x102, x1, (arg2[2]));
  let mut x103: u32 = 0;
  let mut x104: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x103, &mut x104, x1, (arg2[1]));
  let mut x105: u32 = 0;
  let mut x106: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x105, &mut x106, x1, (arg2[0]));
  let mut x107: u32 = 0;
  let mut x108: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x107, &mut x108, 0x0, x106, x103);
  let mut x109: u32 = 0;
  let mut x110: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x109, &mut x110, x108, x104, x101);
  let mut x111: u32 = 0;
  let mut x112: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x111, &mut x112, x110, x102, x99);
  let mut x113: u32 = 0;
  let mut x114: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x113, &mut x114, x112, x100, x97);
  let mut x115: u32 = 0;
  let mut x116: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x115, &mut x116, x114, x98, x95);
  let mut x117: u32 = 0;
  let mut x118: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x117, &mut x118, x116, x96, x93);
  let mut x119: u32 = 0;
  let mut x120: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x119, &mut x120, x118, x94, x91);
  let x121: u32 = ((x120 as u32) + x92);
  let mut x122: u32 = 0;
  let mut x123: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x122, &mut x123, 0x0, x75, x105);
  let mut x124: u32 = 0;
  let mut x125: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x124, &mut x125, x123, x77, x107);
  let mut x126: u32 = 0;
  let mut x127: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x126, &mut x127, x125, x79, x109);
  let mut x128: u32 = 0;
  let mut x129: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x128, &mut x129, x127, x81, x111);
  let mut x130: u32 = 0;
  let mut x131: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x130, &mut x131, x129, x83, x113);
  let mut x132: u32 = 0;
  let mut x133: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x132, &mut x133, x131, x85, x115);
  let mut x134: u32 = 0;
  let mut x135: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x134, &mut x135, x133, x87, x117);
  let mut x136: u32 = 0;
  let mut x137: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x136, &mut x137, x135, x89, x119);
  let mut x138: u32 = 0;
  let mut x139: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x138, &mut x139, x137, (x90 as u32), x121);
  let mut x140: u32 = 0;
  let mut x141: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x140, &mut x141, x122, 0xd2253531);
  let mut x142: u32 = 0;
  let mut x143: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x142, &mut x143, x140, 0xffffffff);
  let mut x144: u32 = 0;
  let mut x145: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x144, &mut x145, x140, 0xffffffff);
  let mut x146: u32 = 0;
  let mut x147: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x146, &mut x147, x140, 0xffffffff);
  let mut x148: u32 = 0;
  let mut x149: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x148, &mut x149, x140, 0xffffffff);
  let mut x150: u32 = 0;
  let mut x151: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x150, &mut x151, x140, 0xffffffff);
  let mut x152: u32 = 0;
  let mut x153: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x152, &mut x153, x140, 0xffffffff);
  let mut x154: u32 = 0;
  let mut x155: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x154, &mut x155, x140, 0xfffffffe);
  let mut x156: u32 = 0;
  let mut x157: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x156, &mut x157, x140, 0xfffffc2f);
  let mut x158: u32 = 0;
  let mut x159: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x158, &mut x159, 0x0, x157, x154);
  let mut x160: u32 = 0;
  let mut x161: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x160, &mut x161, x159, x155, x152);
  let mut x162: u32 = 0;
  let mut x163: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x162, &mut x163, x161, x153, x150);
  let mut x164: u32 = 0;
  let mut x165: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x164, &mut x165, x163, x151, x148);
  let mut x166: u32 = 0;
  let mut x167: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x166, &mut x167, x165, x149, x146);
  let mut x168: u32 = 0;
  let mut x169: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x168, &mut x169, x167, x147, x144);
  let mut x170: u32 = 0;
  let mut x171: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x170, &mut x171, x169, x145, x142);
  let x172: u32 = ((x171 as u32) + x143);
  let mut x173: u32 = 0;
  let mut x174: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x173, &mut x174, 0x0, x122, x156);
  let mut x175: u32 = 0;
  let mut x176: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x175, &mut x176, x174, x124, x158);
  let mut x177: u32 = 0;
  let mut x178: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x177, &mut x178, x176, x126, x160);
  let mut x179: u32 = 0;
  let mut x180: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x179, &mut x180, x178, x128, x162);
  let mut x181: u32 = 0;
  let mut x182: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x181, &mut x182, x180, x130, x164);
  let mut x183: u32 = 0;
  let mut x184: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x183, &mut x184, x182, x132, x166);
  let mut x185: u32 = 0;
  let mut x186: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x185, &mut x186, x184, x134, x168);
  let mut x187: u32 = 0;
  let mut x188: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x187, &mut x188, x186, x136, x170);
  let mut x189: u32 = 0;
  let mut x190: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x189, &mut x190, x188, x138, x172);
  let x191: u32 = ((x190 as u32) + (x139 as u32));
  let mut x192: u32 = 0;
  let mut x193: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x192, &mut x193, x2, (arg2[7]));
  let mut x194: u32 = 0;
  let mut x195: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x194, &mut x195, x2, (arg2[6]));
  let mut x196: u32 = 0;
  let mut x197: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x196, &mut x197, x2, (arg2[5]));
  let mut x198: u32 = 0;
  let mut x199: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x198, &mut x199, x2, (arg2[4]));
  let mut x200: u32 = 0;
  let mut x201: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x200, &mut x201, x2, (arg2[3]));
  let mut x202: u32 = 0;
  let mut x203: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x202, &mut x203, x2, (arg2[2]));
  let mut x204: u32 = 0;
  let mut x205: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x204, &mut x205, x2, (arg2[1]));
  let mut x206: u32 = 0;
  let mut x207: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x206, &mut x207, x2, (arg2[0]));
  let mut x208: u32 = 0;
  let mut x209: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x208, &mut x209, 0x0, x207, x204);
  let mut x210: u32 = 0;
  let mut x211: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x210, &mut x211, x209, x205, x202);
  let mut x212: u32 = 0;
  let mut x213: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x212, &mut x213, x211, x203, x200);
  let mut x214: u32 = 0;
  let mut x215: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x214, &mut x215, x213, x201, x198);
  let mut x216: u32 = 0;
  let mut x217: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x216, &mut x217, x215, x199, x196);
  let mut x218: u32 = 0;
  let mut x219: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x218, &mut x219, x217, x197, x194);
  let mut x220: u32 = 0;
  let mut x221: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x220, &mut x221, x219, x195, x192);
  let x222: u32 = ((x221 as u32) + x193);
  let mut x223: u32 = 0;
  let mut x224: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x223, &mut x224, 0x0, x175, x206);
  let mut x225: u32 = 0;
  let mut x226: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x225, &mut x226, x224, x177, x208);
  let mut x227: u32 = 0;
  let mut x228: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x227, &mut x228, x226, x179, x210);
  let mut x229: u32 = 0;
  let mut x230: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x229, &mut x230, x228, x181, x212);
  let mut x231: u32 = 0;
  let mut x232: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x231, &mut x232, x230, x183, x214);
  let mut x233: u32 = 0;
  let mut x234: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x233, &mut x234, x232, x185, x216);
  let mut x235: u32 = 0;
  let mut x236: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x235, &mut x236, x234, x187, x218);
  let mut x237: u32 = 0;
  let mut x238: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x237, &mut x238, x236, x189, x220);
  let mut x239: u32 = 0;
  let mut x240: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x239, &mut x240, x238, x191, x222);
  let mut x241: u32 = 0;
  let mut x242: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x241, &mut x242, x223, 0xd2253531);
  let mut x243: u32 = 0;
  let mut x244: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x243, &mut x244, x241, 0xffffffff);
  let mut x245: u32 = 0;
  let mut x246: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x245, &mut x246, x241, 0xffffffff);
  let mut x247: u32 = 0;
  let mut x248: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x247, &mut x248, x241, 0xffffffff);
  let mut x249: u32 = 0;
  let mut x250: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x249, &mut x250, x241, 0xffffffff);
  let mut x251: u32 = 0;
  let mut x252: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x251, &mut x252, x241, 0xffffffff);
  let mut x253: u32 = 0;
  let mut x254: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x253, &mut x254, x241, 0xffffffff);
  let mut x255: u32 = 0;
  let mut x256: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x255, &mut x256, x241, 0xfffffffe);
  let mut x257: u32 = 0;
  let mut x258: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x257, &mut x258, x241, 0xfffffc2f);
  let mut x259: u32 = 0;
  let mut x260: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x259, &mut x260, 0x0, x258, x255);
  let mut x261: u32 = 0;
  let mut x262: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x261, &mut x262, x260, x256, x253);
  let mut x263: u32 = 0;
  let mut x264: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x263, &mut x264, x262, x254, x251);
  let mut x265: u32 = 0;
  let mut x266: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x265, &mut x266, x264, x252, x249);
  let mut x267: u32 = 0;
  let mut x268: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x267, &mut x268, x266, x250, x247);
  let mut x269: u32 = 0;
  let mut x270: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x269, &mut x270, x268, x248, x245);
  let mut x271: u32 = 0;
  let mut x272: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x271, &mut x272, x270, x246, x243);
  let x273: u32 = ((x272 as u32) + x244);
  let mut x274: u32 = 0;
  let mut x275: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x274, &mut x275, 0x0, x223, x257);
  let mut x276: u32 = 0;
  let mut x277: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x276, &mut x277, x275, x225, x259);
  let mut x278: u32 = 0;
  let mut x279: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x278, &mut x279, x277, x227, x261);
  let mut x280: u32 = 0;
  let mut x281: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x280, &mut x281, x279, x229, x263);
  let mut x282: u32 = 0;
  let mut x283: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x282, &mut x283, x281, x231, x265);
  let mut x284: u32 = 0;
  let mut x285: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x284, &mut x285, x283, x233, x267);
  let mut x286: u32 = 0;
  let mut x287: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x286, &mut x287, x285, x235, x269);
  let mut x288: u32 = 0;
  let mut x289: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x288, &mut x289, x287, x237, x271);
  let mut x290: u32 = 0;
  let mut x291: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x290, &mut x291, x289, x239, x273);
  let x292: u32 = ((x291 as u32) + (x240 as u32));
  let mut x293: u32 = 0;
  let mut x294: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x293, &mut x294, x3, (arg2[7]));
  let mut x295: u32 = 0;
  let mut x296: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x295, &mut x296, x3, (arg2[6]));
  let mut x297: u32 = 0;
  let mut x298: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x297, &mut x298, x3, (arg2[5]));
  let mut x299: u32 = 0;
  let mut x300: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x299, &mut x300, x3, (arg2[4]));
  let mut x301: u32 = 0;
  let mut x302: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x301, &mut x302, x3, (arg2[3]));
  let mut x303: u32 = 0;
  let mut x304: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x303, &mut x304, x3, (arg2[2]));
  let mut x305: u32 = 0;
  let mut x306: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x305, &mut x306, x3, (arg2[1]));
  let mut x307: u32 = 0;
  let mut x308: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x307, &mut x308, x3, (arg2[0]));
  let mut x309: u32 = 0;
  let mut x310: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x309, &mut x310, 0x0, x308, x305);
  let mut x311: u32 = 0;
  let mut x312: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x311, &mut x312, x310, x306, x303);
  let mut x313: u32 = 0;
  let mut x314: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x313, &mut x314, x312, x304, x301);
  let mut x315: u32 = 0;
  let mut x316: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x315, &mut x316, x314, x302, x299);
  let mut x317: u32 = 0;
  let mut x318: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x317, &mut x318, x316, x300, x297);
  let mut x319: u32 = 0;
  let mut x320: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x319, &mut x320, x318, x298, x295);
  let mut x321: u32 = 0;
  let mut x322: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x321, &mut x322, x320, x296, x293);
  let x323: u32 = ((x322 as u32) + x294);
  let mut x324: u32 = 0;
  let mut x325: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x324, &mut x325, 0x0, x276, x307);
  let mut x326: u32 = 0;
  let mut x327: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x326, &mut x327, x325, x278, x309);
  let mut x328: u32 = 0;
  let mut x329: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x328, &mut x329, x327, x280, x311);
  let mut x330: u32 = 0;
  let mut x331: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x330, &mut x331, x329, x282, x313);
  let mut x332: u32 = 0;
  let mut x333: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x332, &mut x333, x331, x284, x315);
  let mut x334: u32 = 0;
  let mut x335: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x334, &mut x335, x333, x286, x317);
  let mut x336: u32 = 0;
  let mut x337: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x336, &mut x337, x335, x288, x319);
  let mut x338: u32 = 0;
  let mut x339: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x338, &mut x339, x337, x290, x321);
  let mut x340: u32 = 0;
  let mut x341: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x340, &mut x341, x339, x292, x323);
  let mut x342: u32 = 0;
  let mut x343: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x342, &mut x343, x324, 0xd2253531);
  let mut x344: u32 = 0;
  let mut x345: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x344, &mut x345, x342, 0xffffffff);
  let mut x346: u32 = 0;
  let mut x347: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x346, &mut x347, x342, 0xffffffff);
  let mut x348: u32 = 0;
  let mut x349: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x348, &mut x349, x342, 0xffffffff);
  let mut x350: u32 = 0;
  let mut x351: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x350, &mut x351, x342, 0xffffffff);
  let mut x352: u32 = 0;
  let mut x353: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x352, &mut x353, x342, 0xffffffff);
  let mut x354: u32 = 0;
  let mut x355: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x354, &mut x355, x342, 0xffffffff);
  let mut x356: u32 = 0;
  let mut x357: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x356, &mut x357, x342, 0xfffffffe);
  let mut x358: u32 = 0;
  let mut x359: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x358, &mut x359, x342, 0xfffffc2f);
  let mut x360: u32 = 0;
  let mut x361: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x360, &mut x361, 0x0, x359, x356);
  let mut x362: u32 = 0;
  let mut x363: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x362, &mut x363, x361, x357, x354);
  let mut x364: u32 = 0;
  let mut x365: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x364, &mut x365, x363, x355, x352);
  let mut x366: u32 = 0;
  let mut x367: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x366, &mut x367, x365, x353, x350);
  let mut x368: u32 = 0;
  let mut x369: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x368, &mut x369, x367, x351, x348);
  let mut x370: u32 = 0;
  let mut x371: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x370, &mut x371, x369, x349, x346);
  let mut x372: u32 = 0;
  let mut x373: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x372, &mut x373, x371, x347, x344);
  let x374: u32 = ((x373 as u32) + x345);
  let mut x375: u32 = 0;
  let mut x376: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x375, &mut x376, 0x0, x324, x358);
  let mut x377: u32 = 0;
  let mut x378: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x377, &mut x378, x376, x326, x360);
  let mut x379: u32 = 0;
  let mut x380: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x379, &mut x380, x378, x328, x362);
  let mut x381: u32 = 0;
  let mut x382: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x381, &mut x382, x380, x330, x364);
  let mut x383: u32 = 0;
  let mut x384: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x383, &mut x384, x382, x332, x366);
  let mut x385: u32 = 0;
  let mut x386: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x385, &mut x386, x384, x334, x368);
  let mut x387: u32 = 0;
  let mut x388: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x387, &mut x388, x386, x336, x370);
  let mut x389: u32 = 0;
  let mut x390: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x389, &mut x390, x388, x338, x372);
  let mut x391: u32 = 0;
  let mut x392: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x391, &mut x392, x390, x340, x374);
  let x393: u32 = ((x392 as u32) + (x341 as u32));
  let mut x394: u32 = 0;
  let mut x395: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x394, &mut x395, x4, (arg2[7]));
  let mut x396: u32 = 0;
  let mut x397: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x396, &mut x397, x4, (arg2[6]));
  let mut x398: u32 = 0;
  let mut x399: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x398, &mut x399, x4, (arg2[5]));
  let mut x400: u32 = 0;
  let mut x401: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x400, &mut x401, x4, (arg2[4]));
  let mut x402: u32 = 0;
  let mut x403: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x402, &mut x403, x4, (arg2[3]));
  let mut x404: u32 = 0;
  let mut x405: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x404, &mut x405, x4, (arg2[2]));
  let mut x406: u32 = 0;
  let mut x407: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x406, &mut x407, x4, (arg2[1]));
  let mut x408: u32 = 0;
  let mut x409: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x408, &mut x409, x4, (arg2[0]));
  let mut x410: u32 = 0;
  let mut x411: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x410, &mut x411, 0x0, x409, x406);
  let mut x412: u32 = 0;
  let mut x413: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x412, &mut x413, x411, x407, x404);
  let mut x414: u32 = 0;
  let mut x415: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x414, &mut x415, x413, x405, x402);
  let mut x416: u32 = 0;
  let mut x417: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x416, &mut x417, x415, x403, x400);
  let mut x418: u32 = 0;
  let mut x419: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x418, &mut x419, x417, x401, x398);
  let mut x420: u32 = 0;
  let mut x421: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x420, &mut x421, x419, x399, x396);
  let mut x422: u32 = 0;
  let mut x423: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x422, &mut x423, x421, x397, x394);
  let x424: u32 = ((x423 as u32) + x395);
  let mut x425: u32 = 0;
  let mut x426: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x425, &mut x426, 0x0, x377, x408);
  let mut x427: u32 = 0;
  let mut x428: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x427, &mut x428, x426, x379, x410);
  let mut x429: u32 = 0;
  let mut x430: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x429, &mut x430, x428, x381, x412);
  let mut x431: u32 = 0;
  let mut x432: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x431, &mut x432, x430, x383, x414);
  let mut x433: u32 = 0;
  let mut x434: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x433, &mut x434, x432, x385, x416);
  let mut x435: u32 = 0;
  let mut x436: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x435, &mut x436, x434, x387, x418);
  let mut x437: u32 = 0;
  let mut x438: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x437, &mut x438, x436, x389, x420);
  let mut x439: u32 = 0;
  let mut x440: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x439, &mut x440, x438, x391, x422);
  let mut x441: u32 = 0;
  let mut x442: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x441, &mut x442, x440, x393, x424);
  let mut x443: u32 = 0;
  let mut x444: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x443, &mut x444, x425, 0xd2253531);
  let mut x445: u32 = 0;
  let mut x446: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x445, &mut x446, x443, 0xffffffff);
  let mut x447: u32 = 0;
  let mut x448: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x447, &mut x448, x443, 0xffffffff);
  let mut x449: u32 = 0;
  let mut x450: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x449, &mut x450, x443, 0xffffffff);
  let mut x451: u32 = 0;
  let mut x452: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x451, &mut x452, x443, 0xffffffff);
  let mut x453: u32 = 0;
  let mut x454: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x453, &mut x454, x443, 0xffffffff);
  let mut x455: u32 = 0;
  let mut x456: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x455, &mut x456, x443, 0xffffffff);
  let mut x457: u32 = 0;
  let mut x458: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x457, &mut x458, x443, 0xfffffffe);
  let mut x459: u32 = 0;
  let mut x460: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x459, &mut x460, x443, 0xfffffc2f);
  let mut x461: u32 = 0;
  let mut x462: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x461, &mut x462, 0x0, x460, x457);
  let mut x463: u32 = 0;
  let mut x464: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x463, &mut x464, x462, x458, x455);
  let mut x465: u32 = 0;
  let mut x466: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x465, &mut x466, x464, x456, x453);
  let mut x467: u32 = 0;
  let mut x468: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x467, &mut x468, x466, x454, x451);
  let mut x469: u32 = 0;
  let mut x470: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x469, &mut x470, x468, x452, x449);
  let mut x471: u32 = 0;
  let mut x472: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x471, &mut x472, x470, x450, x447);
  let mut x473: u32 = 0;
  let mut x474: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x473, &mut x474, x472, x448, x445);
  let x475: u32 = ((x474 as u32) + x446);
  let mut x476: u32 = 0;
  let mut x477: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x476, &mut x477, 0x0, x425, x459);
  let mut x478: u32 = 0;
  let mut x479: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x478, &mut x479, x477, x427, x461);
  let mut x480: u32 = 0;
  let mut x481: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x480, &mut x481, x479, x429, x463);
  let mut x482: u32 = 0;
  let mut x483: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x482, &mut x483, x481, x431, x465);
  let mut x484: u32 = 0;
  let mut x485: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x484, &mut x485, x483, x433, x467);
  let mut x486: u32 = 0;
  let mut x487: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x486, &mut x487, x485, x435, x469);
  let mut x488: u32 = 0;
  let mut x489: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x488, &mut x489, x487, x437, x471);
  let mut x490: u32 = 0;
  let mut x491: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x490, &mut x491, x489, x439, x473);
  let mut x492: u32 = 0;
  let mut x493: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x492, &mut x493, x491, x441, x475);
  let x494: u32 = ((x493 as u32) + (x442 as u32));
  let mut x495: u32 = 0;
  let mut x496: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x495, &mut x496, x5, (arg2[7]));
  let mut x497: u32 = 0;
  let mut x498: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x497, &mut x498, x5, (arg2[6]));
  let mut x499: u32 = 0;
  let mut x500: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x499, &mut x500, x5, (arg2[5]));
  let mut x501: u32 = 0;
  let mut x502: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x501, &mut x502, x5, (arg2[4]));
  let mut x503: u32 = 0;
  let mut x504: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x503, &mut x504, x5, (arg2[3]));
  let mut x505: u32 = 0;
  let mut x506: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x505, &mut x506, x5, (arg2[2]));
  let mut x507: u32 = 0;
  let mut x508: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x507, &mut x508, x5, (arg2[1]));
  let mut x509: u32 = 0;
  let mut x510: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x509, &mut x510, x5, (arg2[0]));
  let mut x511: u32 = 0;
  let mut x512: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x511, &mut x512, 0x0, x510, x507);
  let mut x513: u32 = 0;
  let mut x514: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x513, &mut x514, x512, x508, x505);
  let mut x515: u32 = 0;
  let mut x516: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x515, &mut x516, x514, x506, x503);
  let mut x517: u32 = 0;
  let mut x518: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x517, &mut x518, x516, x504, x501);
  let mut x519: u32 = 0;
  let mut x520: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x519, &mut x520, x518, x502, x499);
  let mut x521: u32 = 0;
  let mut x522: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x521, &mut x522, x520, x500, x497);
  let mut x523: u32 = 0;
  let mut x524: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x523, &mut x524, x522, x498, x495);
  let x525: u32 = ((x524 as u32) + x496);
  let mut x526: u32 = 0;
  let mut x527: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x526, &mut x527, 0x0, x478, x509);
  let mut x528: u32 = 0;
  let mut x529: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x528, &mut x529, x527, x480, x511);
  let mut x530: u32 = 0;
  let mut x531: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x530, &mut x531, x529, x482, x513);
  let mut x532: u32 = 0;
  let mut x533: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x532, &mut x533, x531, x484, x515);
  let mut x534: u32 = 0;
  let mut x535: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x534, &mut x535, x533, x486, x517);
  let mut x536: u32 = 0;
  let mut x537: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x536, &mut x537, x535, x488, x519);
  let mut x538: u32 = 0;
  let mut x539: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x538, &mut x539, x537, x490, x521);
  let mut x540: u32 = 0;
  let mut x541: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x540, &mut x541, x539, x492, x523);
  let mut x542: u32 = 0;
  let mut x543: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x542, &mut x543, x541, x494, x525);
  let mut x544: u32 = 0;
  let mut x545: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x544, &mut x545, x526, 0xd2253531);
  let mut x546: u32 = 0;
  let mut x547: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x546, &mut x547, x544, 0xffffffff);
  let mut x548: u32 = 0;
  let mut x549: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x548, &mut x549, x544, 0xffffffff);
  let mut x550: u32 = 0;
  let mut x551: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x550, &mut x551, x544, 0xffffffff);
  let mut x552: u32 = 0;
  let mut x553: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x552, &mut x553, x544, 0xffffffff);
  let mut x554: u32 = 0;
  let mut x555: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x554, &mut x555, x544, 0xffffffff);
  let mut x556: u32 = 0;
  let mut x557: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x556, &mut x557, x544, 0xffffffff);
  let mut x558: u32 = 0;
  let mut x559: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x558, &mut x559, x544, 0xfffffffe);
  let mut x560: u32 = 0;
  let mut x561: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x560, &mut x561, x544, 0xfffffc2f);
  let mut x562: u32 = 0;
  let mut x563: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x562, &mut x563, 0x0, x561, x558);
  let mut x564: u32 = 0;
  let mut x565: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x564, &mut x565, x563, x559, x556);
  let mut x566: u32 = 0;
  let mut x567: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x566, &mut x567, x565, x557, x554);
  let mut x568: u32 = 0;
  let mut x569: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x568, &mut x569, x567, x555, x552);
  let mut x570: u32 = 0;
  let mut x571: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x570, &mut x571, x569, x553, x550);
  let mut x572: u32 = 0;
  let mut x573: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x572, &mut x573, x571, x551, x548);
  let mut x574: u32 = 0;
  let mut x575: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x574, &mut x575, x573, x549, x546);
  let x576: u32 = ((x575 as u32) + x547);
  let mut x577: u32 = 0;
  let mut x578: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x577, &mut x578, 0x0, x526, x560);
  let mut x579: u32 = 0;
  let mut x580: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x579, &mut x580, x578, x528, x562);
  let mut x581: u32 = 0;
  let mut x582: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x581, &mut x582, x580, x530, x564);
  let mut x583: u32 = 0;
  let mut x584: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x583, &mut x584, x582, x532, x566);
  let mut x585: u32 = 0;
  let mut x586: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x585, &mut x586, x584, x534, x568);
  let mut x587: u32 = 0;
  let mut x588: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x587, &mut x588, x586, x536, x570);
  let mut x589: u32 = 0;
  let mut x590: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x589, &mut x590, x588, x538, x572);
  let mut x591: u32 = 0;
  let mut x592: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x591, &mut x592, x590, x540, x574);
  let mut x593: u32 = 0;
  let mut x594: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x593, &mut x594, x592, x542, x576);
  let x595: u32 = ((x594 as u32) + (x543 as u32));
  let mut x596: u32 = 0;
  let mut x597: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x596, &mut x597, x6, (arg2[7]));
  let mut x598: u32 = 0;
  let mut x599: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x598, &mut x599, x6, (arg2[6]));
  let mut x600: u32 = 0;
  let mut x601: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x600, &mut x601, x6, (arg2[5]));
  let mut x602: u32 = 0;
  let mut x603: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x602, &mut x603, x6, (arg2[4]));
  let mut x604: u32 = 0;
  let mut x605: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x604, &mut x605, x6, (arg2[3]));
  let mut x606: u32 = 0;
  let mut x607: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x606, &mut x607, x6, (arg2[2]));
  let mut x608: u32 = 0;
  let mut x609: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x608, &mut x609, x6, (arg2[1]));
  let mut x610: u32 = 0;
  let mut x611: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x610, &mut x611, x6, (arg2[0]));
  let mut x612: u32 = 0;
  let mut x613: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x612, &mut x613, 0x0, x611, x608);
  let mut x614: u32 = 0;
  let mut x615: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x614, &mut x615, x613, x609, x606);
  let mut x616: u32 = 0;
  let mut x617: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x616, &mut x617, x615, x607, x604);
  let mut x618: u32 = 0;
  let mut x619: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x618, &mut x619, x617, x605, x602);
  let mut x620: u32 = 0;
  let mut x621: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x620, &mut x621, x619, x603, x600);
  let mut x622: u32 = 0;
  let mut x623: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x622, &mut x623, x621, x601, x598);
  let mut x624: u32 = 0;
  let mut x625: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x624, &mut x625, x623, x599, x596);
  let x626: u32 = ((x625 as u32) + x597);
  let mut x627: u32 = 0;
  let mut x628: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x627, &mut x628, 0x0, x579, x610);
  let mut x629: u32 = 0;
  let mut x630: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x629, &mut x630, x628, x581, x612);
  let mut x631: u32 = 0;
  let mut x632: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x631, &mut x632, x630, x583, x614);
  let mut x633: u32 = 0;
  let mut x634: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x633, &mut x634, x632, x585, x616);
  let mut x635: u32 = 0;
  let mut x636: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x635, &mut x636, x634, x587, x618);
  let mut x637: u32 = 0;
  let mut x638: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x637, &mut x638, x636, x589, x620);
  let mut x639: u32 = 0;
  let mut x640: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x639, &mut x640, x638, x591, x622);
  let mut x641: u32 = 0;
  let mut x642: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x641, &mut x642, x640, x593, x624);
  let mut x643: u32 = 0;
  let mut x644: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x643, &mut x644, x642, x595, x626);
  let mut x645: u32 = 0;
  let mut x646: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x645, &mut x646, x627, 0xd2253531);
  let mut x647: u32 = 0;
  let mut x648: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x647, &mut x648, x645, 0xffffffff);
  let mut x649: u32 = 0;
  let mut x650: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x649, &mut x650, x645, 0xffffffff);
  let mut x651: u32 = 0;
  let mut x652: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x651, &mut x652, x645, 0xffffffff);
  let mut x653: u32 = 0;
  let mut x654: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x653, &mut x654, x645, 0xffffffff);
  let mut x655: u32 = 0;
  let mut x656: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x655, &mut x656, x645, 0xffffffff);
  let mut x657: u32 = 0;
  let mut x658: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x657, &mut x658, x645, 0xffffffff);
  let mut x659: u32 = 0;
  let mut x660: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x659, &mut x660, x645, 0xfffffffe);
  let mut x661: u32 = 0;
  let mut x662: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x661, &mut x662, x645, 0xfffffc2f);
  let mut x663: u32 = 0;
  let mut x664: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x663, &mut x664, 0x0, x662, x659);
  let mut x665: u32 = 0;
  let mut x666: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x665, &mut x666, x664, x660, x657);
  let mut x667: u32 = 0;
  let mut x668: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x667, &mut x668, x666, x658, x655);
  let mut x669: u32 = 0;
  let mut x670: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x669, &mut x670, x668, x656, x653);
  let mut x671: u32 = 0;
  let mut x672: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x671, &mut x672, x670, x654, x651);
  let mut x673: u32 = 0;
  let mut x674: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x673, &mut x674, x672, x652, x649);
  let mut x675: u32 = 0;
  let mut x676: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x675, &mut x676, x674, x650, x647);
  let x677: u32 = ((x676 as u32) + x648);
  let mut x678: u32 = 0;
  let mut x679: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x678, &mut x679, 0x0, x627, x661);
  let mut x680: u32 = 0;
  let mut x681: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x680, &mut x681, x679, x629, x663);
  let mut x682: u32 = 0;
  let mut x683: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x682, &mut x683, x681, x631, x665);
  let mut x684: u32 = 0;
  let mut x685: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x684, &mut x685, x683, x633, x667);
  let mut x686: u32 = 0;
  let mut x687: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x686, &mut x687, x685, x635, x669);
  let mut x688: u32 = 0;
  let mut x689: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x688, &mut x689, x687, x637, x671);
  let mut x690: u32 = 0;
  let mut x691: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x690, &mut x691, x689, x639, x673);
  let mut x692: u32 = 0;
  let mut x693: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x692, &mut x693, x691, x641, x675);
  let mut x694: u32 = 0;
  let mut x695: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x694, &mut x695, x693, x643, x677);
  let x696: u32 = ((x695 as u32) + (x644 as u32));
  let mut x697: u32 = 0;
  let mut x698: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x697, &mut x698, x7, (arg2[7]));
  let mut x699: u32 = 0;
  let mut x700: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x699, &mut x700, x7, (arg2[6]));
  let mut x701: u32 = 0;
  let mut x702: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x701, &mut x702, x7, (arg2[5]));
  let mut x703: u32 = 0;
  let mut x704: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x703, &mut x704, x7, (arg2[4]));
  let mut x705: u32 = 0;
  let mut x706: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x705, &mut x706, x7, (arg2[3]));
  let mut x707: u32 = 0;
  let mut x708: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x707, &mut x708, x7, (arg2[2]));
  let mut x709: u32 = 0;
  let mut x710: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x709, &mut x710, x7, (arg2[1]));
  let mut x711: u32 = 0;
  let mut x712: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x711, &mut x712, x7, (arg2[0]));
  let mut x713: u32 = 0;
  let mut x714: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x713, &mut x714, 0x0, x712, x709);
  let mut x715: u32 = 0;
  let mut x716: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x715, &mut x716, x714, x710, x707);
  let mut x717: u32 = 0;
  let mut x718: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x717, &mut x718, x716, x708, x705);
  let mut x719: u32 = 0;
  let mut x720: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x719, &mut x720, x718, x706, x703);
  let mut x721: u32 = 0;
  let mut x722: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x721, &mut x722, x720, x704, x701);
  let mut x723: u32 = 0;
  let mut x724: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x723, &mut x724, x722, x702, x699);
  let mut x725: u32 = 0;
  let mut x726: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x725, &mut x726, x724, x700, x697);
  let x727: u32 = ((x726 as u32) + x698);
  let mut x728: u32 = 0;
  let mut x729: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x728, &mut x729, 0x0, x680, x711);
  let mut x730: u32 = 0;
  let mut x731: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x730, &mut x731, x729, x682, x713);
  let mut x732: u32 = 0;
  let mut x733: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x732, &mut x733, x731, x684, x715);
  let mut x734: u32 = 0;
  let mut x735: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x734, &mut x735, x733, x686, x717);
  let mut x736: u32 = 0;
  let mut x737: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x736, &mut x737, x735, x688, x719);
  let mut x738: u32 = 0;
  let mut x739: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x738, &mut x739, x737, x690, x721);
  let mut x740: u32 = 0;
  let mut x741: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x740, &mut x741, x739, x692, x723);
  let mut x742: u32 = 0;
  let mut x743: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x742, &mut x743, x741, x694, x725);
  let mut x744: u32 = 0;
  let mut x745: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x744, &mut x745, x743, x696, x727);
  let mut x746: u32 = 0;
  let mut x747: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x746, &mut x747, x728, 0xd2253531);
  let mut x748: u32 = 0;
  let mut x749: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x748, &mut x749, x746, 0xffffffff);
  let mut x750: u32 = 0;
  let mut x751: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x750, &mut x751, x746, 0xffffffff);
  let mut x752: u32 = 0;
  let mut x753: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x752, &mut x753, x746, 0xffffffff);
  let mut x754: u32 = 0;
  let mut x755: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x754, &mut x755, x746, 0xffffffff);
  let mut x756: u32 = 0;
  let mut x757: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x756, &mut x757, x746, 0xffffffff);
  let mut x758: u32 = 0;
  let mut x759: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x758, &mut x759, x746, 0xffffffff);
  let mut x760: u32 = 0;
  let mut x761: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x760, &mut x761, x746, 0xfffffffe);
  let mut x762: u32 = 0;
  let mut x763: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x762, &mut x763, x746, 0xfffffc2f);
  let mut x764: u32 = 0;
  let mut x765: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x764, &mut x765, 0x0, x763, x760);
  let mut x766: u32 = 0;
  let mut x767: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x766, &mut x767, x765, x761, x758);
  let mut x768: u32 = 0;
  let mut x769: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x768, &mut x769, x767, x759, x756);
  let mut x770: u32 = 0;
  let mut x771: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x770, &mut x771, x769, x757, x754);
  let mut x772: u32 = 0;
  let mut x773: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x772, &mut x773, x771, x755, x752);
  let mut x774: u32 = 0;
  let mut x775: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x774, &mut x775, x773, x753, x750);
  let mut x776: u32 = 0;
  let mut x777: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x776, &mut x777, x775, x751, x748);
  let x778: u32 = ((x777 as u32) + x749);
  let mut x779: u32 = 0;
  let mut x780: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x779, &mut x780, 0x0, x728, x762);
  let mut x781: u32 = 0;
  let mut x782: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x781, &mut x782, x780, x730, x764);
  let mut x783: u32 = 0;
  let mut x784: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x783, &mut x784, x782, x732, x766);
  let mut x785: u32 = 0;
  let mut x786: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x785, &mut x786, x784, x734, x768);
  let mut x787: u32 = 0;
  let mut x788: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x787, &mut x788, x786, x736, x770);
  let mut x789: u32 = 0;
  let mut x790: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x789, &mut x790, x788, x738, x772);
  let mut x791: u32 = 0;
  let mut x792: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x791, &mut x792, x790, x740, x774);
  let mut x793: u32 = 0;
  let mut x794: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x793, &mut x794, x792, x742, x776);
  let mut x795: u32 = 0;
  let mut x796: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x795, &mut x796, x794, x744, x778);
  let x797: u32 = ((x796 as u32) + (x745 as u32));
  let mut x798: u32 = 0;
  let mut x799: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x798, &mut x799, 0x0, x781, 0xfffffc2f);
  let mut x800: u32 = 0;
  let mut x801: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x800, &mut x801, x799, x783, 0xfffffffe);
  let mut x802: u32 = 0;
  let mut x803: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x802, &mut x803, x801, x785, 0xffffffff);
  let mut x804: u32 = 0;
  let mut x805: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x804, &mut x805, x803, x787, 0xffffffff);
  let mut x806: u32 = 0;
  let mut x807: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x806, &mut x807, x805, x789, 0xffffffff);
  let mut x808: u32 = 0;
  let mut x809: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x808, &mut x809, x807, x791, 0xffffffff);
  let mut x810: u32 = 0;
  let mut x811: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x810, &mut x811, x809, x793, 0xffffffff);
  let mut x812: u32 = 0;
  let mut x813: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x812, &mut x813, x811, x795, 0xffffffff);
  let mut x814: u32 = 0;
  let mut x815: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x814, &mut x815, x813, x797, (0x0 as u32));
  let mut x816: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x816, x815, x798, x781);
  let mut x817: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x817, x815, x800, x783);
  let mut x818: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x818, x815, x802, x785);
  let mut x819: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x819, x815, x804, x787);
  let mut x820: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x820, x815, x806, x789);
  let mut x821: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x821, x815, x808, x791);
  let mut x822: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x822, x815, x810, x793);
  let mut x823: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x823, x815, x812, x795);
  out1[0] = x816;
  out1[1] = x817;
  out1[2] = x818;
  out1[3] = x819;
  out1[4] = x820;
  out1[5] = x821;
  out1[6] = x822;
  out1[7] = x823;
}

/// The function fiat_secp256k1_square squares a field element in the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m
///   0 ≤ eval out1 < m
///
#[inline]
pub fn fiat_secp256k1_square(out1: &mut fiat_secp256k1_montgomery_domain_field_element, arg1: &fiat_secp256k1_montgomery_domain_field_element) -> () {
  let x1: u32 = (arg1[1]);
  let x2: u32 = (arg1[2]);
  let x3: u32 = (arg1[3]);
  let x4: u32 = (arg1[4]);
  let x5: u32 = (arg1[5]);
  let x6: u32 = (arg1[6]);
  let x7: u32 = (arg1[7]);
  let x8: u32 = (arg1[0]);
  let mut x9: u32 = 0;
  let mut x10: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x9, &mut x10, x8, (arg1[7]));
  let mut x11: u32 = 0;
  let mut x12: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x11, &mut x12, x8, (arg1[6]));
  let mut x13: u32 = 0;
  let mut x14: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x13, &mut x14, x8, (arg1[5]));
  let mut x15: u32 = 0;
  let mut x16: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x15, &mut x16, x8, (arg1[4]));
  let mut x17: u32 = 0;
  let mut x18: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x17, &mut x18, x8, (arg1[3]));
  let mut x19: u32 = 0;
  let mut x20: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x19, &mut x20, x8, (arg1[2]));
  let mut x21: u32 = 0;
  let mut x22: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x21, &mut x22, x8, (arg1[1]));
  let mut x23: u32 = 0;
  let mut x24: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x23, &mut x24, x8, (arg1[0]));
  let mut x25: u32 = 0;
  let mut x26: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x25, &mut x26, 0x0, x24, x21);
  let mut x27: u32 = 0;
  let mut x28: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x27, &mut x28, x26, x22, x19);
  let mut x29: u32 = 0;
  let mut x30: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x29, &mut x30, x28, x20, x17);
  let mut x31: u32 = 0;
  let mut x32: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x31, &mut x32, x30, x18, x15);
  let mut x33: u32 = 0;
  let mut x34: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x33, &mut x34, x32, x16, x13);
  let mut x35: u32 = 0;
  let mut x36: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x35, &mut x36, x34, x14, x11);
  let mut x37: u32 = 0;
  let mut x38: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x37, &mut x38, x36, x12, x9);
  let x39: u32 = ((x38 as u32) + x10);
  let mut x40: u32 = 0;
  let mut x41: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x40, &mut x41, x23, 0xd2253531);
  let mut x42: u32 = 0;
  let mut x43: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x42, &mut x43, x40, 0xffffffff);
  let mut x44: u32 = 0;
  let mut x45: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x44, &mut x45, x40, 0xffffffff);
  let mut x46: u32 = 0;
  let mut x47: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x46, &mut x47, x40, 0xffffffff);
  let mut x48: u32 = 0;
  let mut x49: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x48, &mut x49, x40, 0xffffffff);
  let mut x50: u32 = 0;
  let mut x51: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x50, &mut x51, x40, 0xffffffff);
  let mut x52: u32 = 0;
  let mut x53: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x52, &mut x53, x40, 0xffffffff);
  let mut x54: u32 = 0;
  let mut x55: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x54, &mut x55, x40, 0xfffffffe);
  let mut x56: u32 = 0;
  let mut x57: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x56, &mut x57, x40, 0xfffffc2f);
  let mut x58: u32 = 0;
  let mut x59: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x58, &mut x59, 0x0, x57, x54);
  let mut x60: u32 = 0;
  let mut x61: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x60, &mut x61, x59, x55, x52);
  let mut x62: u32 = 0;
  let mut x63: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x62, &mut x63, x61, x53, x50);
  let mut x64: u32 = 0;
  let mut x65: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x64, &mut x65, x63, x51, x48);
  let mut x66: u32 = 0;
  let mut x67: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x66, &mut x67, x65, x49, x46);
  let mut x68: u32 = 0;
  let mut x69: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x68, &mut x69, x67, x47, x44);
  let mut x70: u32 = 0;
  let mut x71: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x70, &mut x71, x69, x45, x42);
  let x72: u32 = ((x71 as u32) + x43);
  let mut x73: u32 = 0;
  let mut x74: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x73, &mut x74, 0x0, x23, x56);
  let mut x75: u32 = 0;
  let mut x76: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x75, &mut x76, x74, x25, x58);
  let mut x77: u32 = 0;
  let mut x78: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x77, &mut x78, x76, x27, x60);
  let mut x79: u32 = 0;
  let mut x80: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x79, &mut x80, x78, x29, x62);
  let mut x81: u32 = 0;
  let mut x82: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x81, &mut x82, x80, x31, x64);
  let mut x83: u32 = 0;
  let mut x84: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x83, &mut x84, x82, x33, x66);
  let mut x85: u32 = 0;
  let mut x86: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x85, &mut x86, x84, x35, x68);
  let mut x87: u32 = 0;
  let mut x88: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x87, &mut x88, x86, x37, x70);
  let mut x89: u32 = 0;
  let mut x90: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x89, &mut x90, x88, x39, x72);
  let mut x91: u32 = 0;
  let mut x92: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x91, &mut x92, x1, (arg1[7]));
  let mut x93: u32 = 0;
  let mut x94: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x93, &mut x94, x1, (arg1[6]));
  let mut x95: u32 = 0;
  let mut x96: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x95, &mut x96, x1, (arg1[5]));
  let mut x97: u32 = 0;
  let mut x98: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x97, &mut x98, x1, (arg1[4]));
  let mut x99: u32 = 0;
  let mut x100: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x99, &mut x100, x1, (arg1[3]));
  let mut x101: u32 = 0;
  let mut x102: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x101, &mut x102, x1, (arg1[2]));
  let mut x103: u32 = 0;
  let mut x104: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x103, &mut x104, x1, (arg1[1]));
  let mut x105: u32 = 0;
  let mut x106: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x105, &mut x106, x1, (arg1[0]));
  let mut x107: u32 = 0;
  let mut x108: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x107, &mut x108, 0x0, x106, x103);
  let mut x109: u32 = 0;
  let mut x110: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x109, &mut x110, x108, x104, x101);
  let mut x111: u32 = 0;
  let mut x112: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x111, &mut x112, x110, x102, x99);
  let mut x113: u32 = 0;
  let mut x114: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x113, &mut x114, x112, x100, x97);
  let mut x115: u32 = 0;
  let mut x116: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x115, &mut x116, x114, x98, x95);
  let mut x117: u32 = 0;
  let mut x118: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x117, &mut x118, x116, x96, x93);
  let mut x119: u32 = 0;
  let mut x120: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x119, &mut x120, x118, x94, x91);
  let x121: u32 = ((x120 as u32) + x92);
  let mut x122: u32 = 0;
  let mut x123: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x122, &mut x123, 0x0, x75, x105);
  let mut x124: u32 = 0;
  let mut x125: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x124, &mut x125, x123, x77, x107);
  let mut x126: u32 = 0;
  let mut x127: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x126, &mut x127, x125, x79, x109);
  let mut x128: u32 = 0;
  let mut x129: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x128, &mut x129, x127, x81, x111);
  let mut x130: u32 = 0;
  let mut x131: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x130, &mut x131, x129, x83, x113);
  let mut x132: u32 = 0;
  let mut x133: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x132, &mut x133, x131, x85, x115);
  let mut x134: u32 = 0;
  let mut x135: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x134, &mut x135, x133, x87, x117);
  let mut x136: u32 = 0;
  let mut x137: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x136, &mut x137, x135, x89, x119);
  let mut x138: u32 = 0;
  let mut x139: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x138, &mut x139, x137, (x90 as u32), x121);
  let mut x140: u32 = 0;
  let mut x141: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x140, &mut x141, x122, 0xd2253531);
  let mut x142: u32 = 0;
  let mut x143: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x142, &mut x143, x140, 0xffffffff);
  let mut x144: u32 = 0;
  let mut x145: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x144, &mut x145, x140, 0xffffffff);
  let mut x146: u32 = 0;
  let mut x147: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x146, &mut x147, x140, 0xffffffff);
  let mut x148: u32 = 0;
  let mut x149: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x148, &mut x149, x140, 0xffffffff);
  let mut x150: u32 = 0;
  let mut x151: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x150, &mut x151, x140, 0xffffffff);
  let mut x152: u32 = 0;
  let mut x153: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x152, &mut x153, x140, 0xffffffff);
  let mut x154: u32 = 0;
  let mut x155: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x154, &mut x155, x140, 0xfffffffe);
  let mut x156: u32 = 0;
  let mut x157: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x156, &mut x157, x140, 0xfffffc2f);
  let mut x158: u32 = 0;
  let mut x159: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x158, &mut x159, 0x0, x157, x154);
  let mut x160: u32 = 0;
  let mut x161: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x160, &mut x161, x159, x155, x152);
  let mut x162: u32 = 0;
  let mut x163: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x162, &mut x163, x161, x153, x150);
  let mut x164: u32 = 0;
  let mut x165: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x164, &mut x165, x163, x151, x148);
  let mut x166: u32 = 0;
  let mut x167: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x166, &mut x167, x165, x149, x146);
  let mut x168: u32 = 0;
  let mut x169: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x168, &mut x169, x167, x147, x144);
  let mut x170: u32 = 0;
  let mut x171: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x170, &mut x171, x169, x145, x142);
  let x172: u32 = ((x171 as u32) + x143);
  let mut x173: u32 = 0;
  let mut x174: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x173, &mut x174, 0x0, x122, x156);
  let mut x175: u32 = 0;
  let mut x176: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x175, &mut x176, x174, x124, x158);
  let mut x177: u32 = 0;
  let mut x178: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x177, &mut x178, x176, x126, x160);
  let mut x179: u32 = 0;
  let mut x180: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x179, &mut x180, x178, x128, x162);
  let mut x181: u32 = 0;
  let mut x182: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x181, &mut x182, x180, x130, x164);
  let mut x183: u32 = 0;
  let mut x184: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x183, &mut x184, x182, x132, x166);
  let mut x185: u32 = 0;
  let mut x186: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x185, &mut x186, x184, x134, x168);
  let mut x187: u32 = 0;
  let mut x188: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x187, &mut x188, x186, x136, x170);
  let mut x189: u32 = 0;
  let mut x190: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x189, &mut x190, x188, x138, x172);
  let x191: u32 = ((x190 as u32) + (x139 as u32));
  let mut x192: u32 = 0;
  let mut x193: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x192, &mut x193, x2, (arg1[7]));
  let mut x194: u32 = 0;
  let mut x195: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x194, &mut x195, x2, (arg1[6]));
  let mut x196: u32 = 0;
  let mut x197: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x196, &mut x197, x2, (arg1[5]));
  let mut x198: u32 = 0;
  let mut x199: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x198, &mut x199, x2, (arg1[4]));
  let mut x200: u32 = 0;
  let mut x201: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x200, &mut x201, x2, (arg1[3]));
  let mut x202: u32 = 0;
  let mut x203: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x202, &mut x203, x2, (arg1[2]));
  let mut x204: u32 = 0;
  let mut x205: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x204, &mut x205, x2, (arg1[1]));
  let mut x206: u32 = 0;
  let mut x207: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x206, &mut x207, x2, (arg1[0]));
  let mut x208: u32 = 0;
  let mut x209: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x208, &mut x209, 0x0, x207, x204);
  let mut x210: u32 = 0;
  let mut x211: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x210, &mut x211, x209, x205, x202);
  let mut x212: u32 = 0;
  let mut x213: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x212, &mut x213, x211, x203, x200);
  let mut x214: u32 = 0;
  let mut x215: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x214, &mut x215, x213, x201, x198);
  let mut x216: u32 = 0;
  let mut x217: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x216, &mut x217, x215, x199, x196);
  let mut x218: u32 = 0;
  let mut x219: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x218, &mut x219, x217, x197, x194);
  let mut x220: u32 = 0;
  let mut x221: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x220, &mut x221, x219, x195, x192);
  let x222: u32 = ((x221 as u32) + x193);
  let mut x223: u32 = 0;
  let mut x224: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x223, &mut x224, 0x0, x175, x206);
  let mut x225: u32 = 0;
  let mut x226: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x225, &mut x226, x224, x177, x208);
  let mut x227: u32 = 0;
  let mut x228: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x227, &mut x228, x226, x179, x210);
  let mut x229: u32 = 0;
  let mut x230: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x229, &mut x230, x228, x181, x212);
  let mut x231: u32 = 0;
  let mut x232: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x231, &mut x232, x230, x183, x214);
  let mut x233: u32 = 0;
  let mut x234: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x233, &mut x234, x232, x185, x216);
  let mut x235: u32 = 0;
  let mut x236: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x235, &mut x236, x234, x187, x218);
  let mut x237: u32 = 0;
  let mut x238: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x237, &mut x238, x236, x189, x220);
  let mut x239: u32 = 0;
  let mut x240: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x239, &mut x240, x238, x191, x222);
  let mut x241: u32 = 0;
  let mut x242: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x241, &mut x242, x223, 0xd2253531);
  let mut x243: u32 = 0;
  let mut x244: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x243, &mut x244, x241, 0xffffffff);
  let mut x245: u32 = 0;
  let mut x246: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x245, &mut x246, x241, 0xffffffff);
  let mut x247: u32 = 0;
  let mut x248: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x247, &mut x248, x241, 0xffffffff);
  let mut x249: u32 = 0;
  let mut x250: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x249, &mut x250, x241, 0xffffffff);
  let mut x251: u32 = 0;
  let mut x252: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x251, &mut x252, x241, 0xffffffff);
  let mut x253: u32 = 0;
  let mut x254: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x253, &mut x254, x241, 0xffffffff);
  let mut x255: u32 = 0;
  let mut x256: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x255, &mut x256, x241, 0xfffffffe);
  let mut x257: u32 = 0;
  let mut x258: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x257, &mut x258, x241, 0xfffffc2f);
  let mut x259: u32 = 0;
  let mut x260: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x259, &mut x260, 0x0, x258, x255);
  let mut x261: u32 = 0;
  let mut x262: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x261, &mut x262, x260, x256, x253);
  let mut x263: u32 = 0;
  let mut x264: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x263, &mut x264, x262, x254, x251);
  let mut x265: u32 = 0;
  let mut x266: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x265, &mut x266, x264, x252, x249);
  let mut x267: u32 = 0;
  let mut x268: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x267, &mut x268, x266, x250, x247);
  let mut x269: u32 = 0;
  let mut x270: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x269, &mut x270, x268, x248, x245);
  let mut x271: u32 = 0;
  let mut x272: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x271, &mut x272, x270, x246, x243);
  let x273: u32 = ((x272 as u32) + x244);
  let mut x274: u32 = 0;
  let mut x275: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x274, &mut x275, 0x0, x223, x257);
  let mut x276: u32 = 0;
  let mut x277: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x276, &mut x277, x275, x225, x259);
  let mut x278: u32 = 0;
  let mut x279: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x278, &mut x279, x277, x227, x261);
  let mut x280: u32 = 0;
  let mut x281: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x280, &mut x281, x279, x229, x263);
  let mut x282: u32 = 0;
  let mut x283: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x282, &mut x283, x281, x231, x265);
  let mut x284: u32 = 0;
  let mut x285: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x284, &mut x285, x283, x233, x267);
  let mut x286: u32 = 0;
  let mut x287: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x286, &mut x287, x285, x235, x269);
  let mut x288: u32 = 0;
  let mut x289: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x288, &mut x289, x287, x237, x271);
  let mut x290: u32 = 0;
  let mut x291: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x290, &mut x291, x289, x239, x273);
  let x292: u32 = ((x291 as u32) + (x240 as u32));
  let mut x293: u32 = 0;
  let mut x294: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x293, &mut x294, x3, (arg1[7]));
  let mut x295: u32 = 0;
  let mut x296: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x295, &mut x296, x3, (arg1[6]));
  let mut x297: u32 = 0;
  let mut x298: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x297, &mut x298, x3, (arg1[5]));
  let mut x299: u32 = 0;
  let mut x300: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x299, &mut x300, x3, (arg1[4]));
  let mut x301: u32 = 0;
  let mut x302: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x301, &mut x302, x3, (arg1[3]));
  let mut x303: u32 = 0;
  let mut x304: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x303, &mut x304, x3, (arg1[2]));
  let mut x305: u32 = 0;
  let mut x306: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x305, &mut x306, x3, (arg1[1]));
  let mut x307: u32 = 0;
  let mut x308: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x307, &mut x308, x3, (arg1[0]));
  let mut x309: u32 = 0;
  let mut x310: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x309, &mut x310, 0x0, x308, x305);
  let mut x311: u32 = 0;
  let mut x312: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x311, &mut x312, x310, x306, x303);
  let mut x313: u32 = 0;
  let mut x314: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x313, &mut x314, x312, x304, x301);
  let mut x315: u32 = 0;
  let mut x316: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x315, &mut x316, x314, x302, x299);
  let mut x317: u32 = 0;
  let mut x318: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x317, &mut x318, x316, x300, x297);
  let mut x319: u32 = 0;
  let mut x320: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x319, &mut x320, x318, x298, x295);
  let mut x321: u32 = 0;
  let mut x322: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x321, &mut x322, x320, x296, x293);
  let x323: u32 = ((x322 as u32) + x294);
  let mut x324: u32 = 0;
  let mut x325: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x324, &mut x325, 0x0, x276, x307);
  let mut x326: u32 = 0;
  let mut x327: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x326, &mut x327, x325, x278, x309);
  let mut x328: u32 = 0;
  let mut x329: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x328, &mut x329, x327, x280, x311);
  let mut x330: u32 = 0;
  let mut x331: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x330, &mut x331, x329, x282, x313);
  let mut x332: u32 = 0;
  let mut x333: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x332, &mut x333, x331, x284, x315);
  let mut x334: u32 = 0;
  let mut x335: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x334, &mut x335, x333, x286, x317);
  let mut x336: u32 = 0;
  let mut x337: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x336, &mut x337, x335, x288, x319);
  let mut x338: u32 = 0;
  let mut x339: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x338, &mut x339, x337, x290, x321);
  let mut x340: u32 = 0;
  let mut x341: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x340, &mut x341, x339, x292, x323);
  let mut x342: u32 = 0;
  let mut x343: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x342, &mut x343, x324, 0xd2253531);
  let mut x344: u32 = 0;
  let mut x345: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x344, &mut x345, x342, 0xffffffff);
  let mut x346: u32 = 0;
  let mut x347: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x346, &mut x347, x342, 0xffffffff);
  let mut x348: u32 = 0;
  let mut x349: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x348, &mut x349, x342, 0xffffffff);
  let mut x350: u32 = 0;
  let mut x351: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x350, &mut x351, x342, 0xffffffff);
  let mut x352: u32 = 0;
  let mut x353: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x352, &mut x353, x342, 0xffffffff);
  let mut x354: u32 = 0;
  let mut x355: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x354, &mut x355, x342, 0xffffffff);
  let mut x356: u32 = 0;
  let mut x357: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x356, &mut x357, x342, 0xfffffffe);
  let mut x358: u32 = 0;
  let mut x359: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x358, &mut x359, x342, 0xfffffc2f);
  let mut x360: u32 = 0;
  let mut x361: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x360, &mut x361, 0x0, x359, x356);
  let mut x362: u32 = 0;
  let mut x363: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x362, &mut x363, x361, x357, x354);
  let mut x364: u32 = 0;
  let mut x365: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x364, &mut x365, x363, x355, x352);
  let mut x366: u32 = 0;
  let mut x367: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x366, &mut x367, x365, x353, x350);
  let mut x368: u32 = 0;
  let mut x369: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x368, &mut x369, x367, x351, x348);
  let mut x370: u32 = 0;
  let mut x371: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x370, &mut x371, x369, x349, x346);
  let mut x372: u32 = 0;
  let mut x373: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x372, &mut x373, x371, x347, x344);
  let x374: u32 = ((x373 as u32) + x345);
  let mut x375: u32 = 0;
  let mut x376: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x375, &mut x376, 0x0, x324, x358);
  let mut x377: u32 = 0;
  let mut x378: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x377, &mut x378, x376, x326, x360);
  let mut x379: u32 = 0;
  let mut x380: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x379, &mut x380, x378, x328, x362);
  let mut x381: u32 = 0;
  let mut x382: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x381, &mut x382, x380, x330, x364);
  let mut x383: u32 = 0;
  let mut x384: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x383, &mut x384, x382, x332, x366);
  let mut x385: u32 = 0;
  let mut x386: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x385, &mut x386, x384, x334, x368);
  let mut x387: u32 = 0;
  let mut x388: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x387, &mut x388, x386, x336, x370);
  let mut x389: u32 = 0;
  let mut x390: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x389, &mut x390, x388, x338, x372);
  let mut x391: u32 = 0;
  let mut x392: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x391, &mut x392, x390, x340, x374);
  let x393: u32 = ((x392 as u32) + (x341 as u32));
  let mut x394: u32 = 0;
  let mut x395: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x394, &mut x395, x4, (arg1[7]));
  let mut x396: u32 = 0;
  let mut x397: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x396, &mut x397, x4, (arg1[6]));
  let mut x398: u32 = 0;
  let mut x399: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x398, &mut x399, x4, (arg1[5]));
  let mut x400: u32 = 0;
  let mut x401: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x400, &mut x401, x4, (arg1[4]));
  let mut x402: u32 = 0;
  let mut x403: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x402, &mut x403, x4, (arg1[3]));
  let mut x404: u32 = 0;
  let mut x405: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x404, &mut x405, x4, (arg1[2]));
  let mut x406: u32 = 0;
  let mut x407: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x406, &mut x407, x4, (arg1[1]));
  let mut x408: u32 = 0;
  let mut x409: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x408, &mut x409, x4, (arg1[0]));
  let mut x410: u32 = 0;
  let mut x411: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x410, &mut x411, 0x0, x409, x406);
  let mut x412: u32 = 0;
  let mut x413: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x412, &mut x413, x411, x407, x404);
  let mut x414: u32 = 0;
  let mut x415: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x414, &mut x415, x413, x405, x402);
  let mut x416: u32 = 0;
  let mut x417: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x416, &mut x417, x415, x403, x400);
  let mut x418: u32 = 0;
  let mut x419: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x418, &mut x419, x417, x401, x398);
  let mut x420: u32 = 0;
  let mut x421: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x420, &mut x421, x419, x399, x396);
  let mut x422: u32 = 0;
  let mut x423: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x422, &mut x423, x421, x397, x394);
  let x424: u32 = ((x423 as u32) + x395);
  let mut x425: u32 = 0;
  let mut x426: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x425, &mut x426, 0x0, x377, x408);
  let mut x427: u32 = 0;
  let mut x428: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x427, &mut x428, x426, x379, x410);
  let mut x429: u32 = 0;
  let mut x430: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x429, &mut x430, x428, x381, x412);
  let mut x431: u32 = 0;
  let mut x432: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x431, &mut x432, x430, x383, x414);
  let mut x433: u32 = 0;
  let mut x434: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x433, &mut x434, x432, x385, x416);
  let mut x435: u32 = 0;
  let mut x436: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x435, &mut x436, x434, x387, x418);
  let mut x437: u32 = 0;
  let mut x438: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x437, &mut x438, x436, x389, x420);
  let mut x439: u32 = 0;
  let mut x440: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x439, &mut x440, x438, x391, x422);
  let mut x441: u32 = 0;
  let mut x442: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x441, &mut x442, x440, x393, x424);
  let mut x443: u32 = 0;
  let mut x444: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x443, &mut x444, x425, 0xd2253531);
  let mut x445: u32 = 0;
  let mut x446: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x445, &mut x446, x443, 0xffffffff);
  let mut x447: u32 = 0;
  let mut x448: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x447, &mut x448, x443, 0xffffffff);
  let mut x449: u32 = 0;
  let mut x450: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x449, &mut x450, x443, 0xffffffff);
  let mut x451: u32 = 0;
  let mut x452: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x451, &mut x452, x443, 0xffffffff);
  let mut x453: u32 = 0;
  let mut x454: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x453, &mut x454, x443, 0xffffffff);
  let mut x455: u32 = 0;
  let mut x456: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x455, &mut x456, x443, 0xffffffff);
  let mut x457: u32 = 0;
  let mut x458: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x457, &mut x458, x443, 0xfffffffe);
  let mut x459: u32 = 0;
  let mut x460: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x459, &mut x460, x443, 0xfffffc2f);
  let mut x461: u32 = 0;
  let mut x462: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x461, &mut x462, 0x0, x460, x457);
  let mut x463: u32 = 0;
  let mut x464: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x463, &mut x464, x462, x458, x455);
  let mut x465: u32 = 0;
  let mut x466: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x465, &mut x466, x464, x456, x453);
  let mut x467: u32 = 0;
  let mut x468: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x467, &mut x468, x466, x454, x451);
  let mut x469: u32 = 0;
  let mut x470: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x469, &mut x470, x468, x452, x449);
  let mut x471: u32 = 0;
  let mut x472: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x471, &mut x472, x470, x450, x447);
  let mut x473: u32 = 0;
  let mut x474: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x473, &mut x474, x472, x448, x445);
  let x475: u32 = ((x474 as u32) + x446);
  let mut x476: u32 = 0;
  let mut x477: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x476, &mut x477, 0x0, x425, x459);
  let mut x478: u32 = 0;
  let mut x479: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x478, &mut x479, x477, x427, x461);
  let mut x480: u32 = 0;
  let mut x481: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x480, &mut x481, x479, x429, x463);
  let mut x482: u32 = 0;
  let mut x483: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x482, &mut x483, x481, x431, x465);
  let mut x484: u32 = 0;
  let mut x485: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x484, &mut x485, x483, x433, x467);
  let mut x486: u32 = 0;
  let mut x487: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x486, &mut x487, x485, x435, x469);
  let mut x488: u32 = 0;
  let mut x489: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x488, &mut x489, x487, x437, x471);
  let mut x490: u32 = 0;
  let mut x491: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x490, &mut x491, x489, x439, x473);
  let mut x492: u32 = 0;
  let mut x493: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x492, &mut x493, x491, x441, x475);
  let x494: u32 = ((x493 as u32) + (x442 as u32));
  let mut x495: u32 = 0;
  let mut x496: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x495, &mut x496, x5, (arg1[7]));
  let mut x497: u32 = 0;
  let mut x498: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x497, &mut x498, x5, (arg1[6]));
  let mut x499: u32 = 0;
  let mut x500: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x499, &mut x500, x5, (arg1[5]));
  let mut x501: u32 = 0;
  let mut x502: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x501, &mut x502, x5, (arg1[4]));
  let mut x503: u32 = 0;
  let mut x504: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x503, &mut x504, x5, (arg1[3]));
  let mut x505: u32 = 0;
  let mut x506: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x505, &mut x506, x5, (arg1[2]));
  let mut x507: u32 = 0;
  let mut x508: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x507, &mut x508, x5, (arg1[1]));
  let mut x509: u32 = 0;
  let mut x510: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x509, &mut x510, x5, (arg1[0]));
  let mut x511: u32 = 0;
  let mut x512: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x511, &mut x512, 0x0, x510, x507);
  let mut x513: u32 = 0;
  let mut x514: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x513, &mut x514, x512, x508, x505);
  let mut x515: u32 = 0;
  let mut x516: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x515, &mut x516, x514, x506, x503);
  let mut x517: u32 = 0;
  let mut x518: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x517, &mut x518, x516, x504, x501);
  let mut x519: u32 = 0;
  let mut x520: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x519, &mut x520, x518, x502, x499);
  let mut x521: u32 = 0;
  let mut x522: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x521, &mut x522, x520, x500, x497);
  let mut x523: u32 = 0;
  let mut x524: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x523, &mut x524, x522, x498, x495);
  let x525: u32 = ((x524 as u32) + x496);
  let mut x526: u32 = 0;
  let mut x527: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x526, &mut x527, 0x0, x478, x509);
  let mut x528: u32 = 0;
  let mut x529: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x528, &mut x529, x527, x480, x511);
  let mut x530: u32 = 0;
  let mut x531: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x530, &mut x531, x529, x482, x513);
  let mut x532: u32 = 0;
  let mut x533: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x532, &mut x533, x531, x484, x515);
  let mut x534: u32 = 0;
  let mut x535: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x534, &mut x535, x533, x486, x517);
  let mut x536: u32 = 0;
  let mut x537: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x536, &mut x537, x535, x488, x519);
  let mut x538: u32 = 0;
  let mut x539: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x538, &mut x539, x537, x490, x521);
  let mut x540: u32 = 0;
  let mut x541: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x540, &mut x541, x539, x492, x523);
  let mut x542: u32 = 0;
  let mut x543: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x542, &mut x543, x541, x494, x525);
  let mut x544: u32 = 0;
  let mut x545: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x544, &mut x545, x526, 0xd2253531);
  let mut x546: u32 = 0;
  let mut x547: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x546, &mut x547, x544, 0xffffffff);
  let mut x548: u32 = 0;
  let mut x549: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x548, &mut x549, x544, 0xffffffff);
  let mut x550: u32 = 0;
  let mut x551: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x550, &mut x551, x544, 0xffffffff);
  let mut x552: u32 = 0;
  let mut x553: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x552, &mut x553, x544, 0xffffffff);
  let mut x554: u32 = 0;
  let mut x555: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x554, &mut x555, x544, 0xffffffff);
  let mut x556: u32 = 0;
  let mut x557: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x556, &mut x557, x544, 0xffffffff);
  let mut x558: u32 = 0;
  let mut x559: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x558, &mut x559, x544, 0xfffffffe);
  let mut x560: u32 = 0;
  let mut x561: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x560, &mut x561, x544, 0xfffffc2f);
  let mut x562: u32 = 0;
  let mut x563: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x562, &mut x563, 0x0, x561, x558);
  let mut x564: u32 = 0;
  let mut x565: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x564, &mut x565, x563, x559, x556);
  let mut x566: u32 = 0;
  let mut x567: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x566, &mut x567, x565, x557, x554);
  let mut x568: u32 = 0;
  let mut x569: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x568, &mut x569, x567, x555, x552);
  let mut x570: u32 = 0;
  let mut x571: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x570, &mut x571, x569, x553, x550);
  let mut x572: u32 = 0;
  let mut x573: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x572, &mut x573, x571, x551, x548);
  let mut x574: u32 = 0;
  let mut x575: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x574, &mut x575, x573, x549, x546);
  let x576: u32 = ((x575 as u32) + x547);
  let mut x577: u32 = 0;
  let mut x578: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x577, &mut x578, 0x0, x526, x560);
  let mut x579: u32 = 0;
  let mut x580: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x579, &mut x580, x578, x528, x562);
  let mut x581: u32 = 0;
  let mut x582: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x581, &mut x582, x580, x530, x564);
  let mut x583: u32 = 0;
  let mut x584: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x583, &mut x584, x582, x532, x566);
  let mut x585: u32 = 0;
  let mut x586: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x585, &mut x586, x584, x534, x568);
  let mut x587: u32 = 0;
  let mut x588: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x587, &mut x588, x586, x536, x570);
  let mut x589: u32 = 0;
  let mut x590: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x589, &mut x590, x588, x538, x572);
  let mut x591: u32 = 0;
  let mut x592: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x591, &mut x592, x590, x540, x574);
  let mut x593: u32 = 0;
  let mut x594: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x593, &mut x594, x592, x542, x576);
  let x595: u32 = ((x594 as u32) + (x543 as u32));
  let mut x596: u32 = 0;
  let mut x597: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x596, &mut x597, x6, (arg1[7]));
  let mut x598: u32 = 0;
  let mut x599: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x598, &mut x599, x6, (arg1[6]));
  let mut x600: u32 = 0;
  let mut x601: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x600, &mut x601, x6, (arg1[5]));
  let mut x602: u32 = 0;
  let mut x603: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x602, &mut x603, x6, (arg1[4]));
  let mut x604: u32 = 0;
  let mut x605: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x604, &mut x605, x6, (arg1[3]));
  let mut x606: u32 = 0;
  let mut x607: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x606, &mut x607, x6, (arg1[2]));
  let mut x608: u32 = 0;
  let mut x609: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x608, &mut x609, x6, (arg1[1]));
  let mut x610: u32 = 0;
  let mut x611: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x610, &mut x611, x6, (arg1[0]));
  let mut x612: u32 = 0;
  let mut x613: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x612, &mut x613, 0x0, x611, x608);
  let mut x614: u32 = 0;
  let mut x615: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x614, &mut x615, x613, x609, x606);
  let mut x616: u32 = 0;
  let mut x617: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x616, &mut x617, x615, x607, x604);
  let mut x618: u32 = 0;
  let mut x619: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x618, &mut x619, x617, x605, x602);
  let mut x620: u32 = 0;
  let mut x621: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x620, &mut x621, x619, x603, x600);
  let mut x622: u32 = 0;
  let mut x623: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x622, &mut x623, x621, x601, x598);
  let mut x624: u32 = 0;
  let mut x625: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x624, &mut x625, x623, x599, x596);
  let x626: u32 = ((x625 as u32) + x597);
  let mut x627: u32 = 0;
  let mut x628: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x627, &mut x628, 0x0, x579, x610);
  let mut x629: u32 = 0;
  let mut x630: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x629, &mut x630, x628, x581, x612);
  let mut x631: u32 = 0;
  let mut x632: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x631, &mut x632, x630, x583, x614);
  let mut x633: u32 = 0;
  let mut x634: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x633, &mut x634, x632, x585, x616);
  let mut x635: u32 = 0;
  let mut x636: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x635, &mut x636, x634, x587, x618);
  let mut x637: u32 = 0;
  let mut x638: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x637, &mut x638, x636, x589, x620);
  let mut x639: u32 = 0;
  let mut x640: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x639, &mut x640, x638, x591, x622);
  let mut x641: u32 = 0;
  let mut x642: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x641, &mut x642, x640, x593, x624);
  let mut x643: u32 = 0;
  let mut x644: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x643, &mut x644, x642, x595, x626);
  let mut x645: u32 = 0;
  let mut x646: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x645, &mut x646, x627, 0xd2253531);
  let mut x647: u32 = 0;
  let mut x648: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x647, &mut x648, x645, 0xffffffff);
  let mut x649: u32 = 0;
  let mut x650: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x649, &mut x650, x645, 0xffffffff);
  let mut x651: u32 = 0;
  let mut x652: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x651, &mut x652, x645, 0xffffffff);
  let mut x653: u32 = 0;
  let mut x654: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x653, &mut x654, x645, 0xffffffff);
  let mut x655: u32 = 0;
  let mut x656: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x655, &mut x656, x645, 0xffffffff);
  let mut x657: u32 = 0;
  let mut x658: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x657, &mut x658, x645, 0xffffffff);
  let mut x659: u32 = 0;
  let mut x660: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x659, &mut x660, x645, 0xfffffffe);
  let mut x661: u32 = 0;
  let mut x662: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x661, &mut x662, x645, 0xfffffc2f);
  let mut x663: u32 = 0;
  let mut x664: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x663, &mut x664, 0x0, x662, x659);
  let mut x665: u32 = 0;
  let mut x666: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x665, &mut x666, x664, x660, x657);
  let mut x667: u32 = 0;
  let mut x668: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x667, &mut x668, x666, x658, x655);
  let mut x669: u32 = 0;
  let mut x670: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x669, &mut x670, x668, x656, x653);
  let mut x671: u32 = 0;
  let mut x672: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x671, &mut x672, x670, x654, x651);
  let mut x673: u32 = 0;
  let mut x674: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x673, &mut x674, x672, x652, x649);
  let mut x675: u32 = 0;
  let mut x676: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x675, &mut x676, x674, x650, x647);
  let x677: u32 = ((x676 as u32) + x648);
  let mut x678: u32 = 0;
  let mut x679: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x678, &mut x679, 0x0, x627, x661);
  let mut x680: u32 = 0;
  let mut x681: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x680, &mut x681, x679, x629, x663);
  let mut x682: u32 = 0;
  let mut x683: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x682, &mut x683, x681, x631, x665);
  let mut x684: u32 = 0;
  let mut x685: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x684, &mut x685, x683, x633, x667);
  let mut x686: u32 = 0;
  let mut x687: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x686, &mut x687, x685, x635, x669);
  let mut x688: u32 = 0;
  let mut x689: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x688, &mut x689, x687, x637, x671);
  let mut x690: u32 = 0;
  let mut x691: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x690, &mut x691, x689, x639, x673);
  let mut x692: u32 = 0;
  let mut x693: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x692, &mut x693, x691, x641, x675);
  let mut x694: u32 = 0;
  let mut x695: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x694, &mut x695, x693, x643, x677);
  let x696: u32 = ((x695 as u32) + (x644 as u32));
  let mut x697: u32 = 0;
  let mut x698: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x697, &mut x698, x7, (arg1[7]));
  let mut x699: u32 = 0;
  let mut x700: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x699, &mut x700, x7, (arg1[6]));
  let mut x701: u32 = 0;
  let mut x702: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x701, &mut x702, x7, (arg1[5]));
  let mut x703: u32 = 0;
  let mut x704: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x703, &mut x704, x7, (arg1[4]));
  let mut x705: u32 = 0;
  let mut x706: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x705, &mut x706, x7, (arg1[3]));
  let mut x707: u32 = 0;
  let mut x708: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x707, &mut x708, x7, (arg1[2]));
  let mut x709: u32 = 0;
  let mut x710: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x709, &mut x710, x7, (arg1[1]));
  let mut x711: u32 = 0;
  let mut x712: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x711, &mut x712, x7, (arg1[0]));
  let mut x713: u32 = 0;
  let mut x714: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x713, &mut x714, 0x0, x712, x709);
  let mut x715: u32 = 0;
  let mut x716: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x715, &mut x716, x714, x710, x707);
  let mut x717: u32 = 0;
  let mut x718: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x717, &mut x718, x716, x708, x705);
  let mut x719: u32 = 0;
  let mut x720: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x719, &mut x720, x718, x706, x703);
  let mut x721: u32 = 0;
  let mut x722: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x721, &mut x722, x720, x704, x701);
  let mut x723: u32 = 0;
  let mut x724: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x723, &mut x724, x722, x702, x699);
  let mut x725: u32 = 0;
  let mut x726: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x725, &mut x726, x724, x700, x697);
  let x727: u32 = ((x726 as u32) + x698);
  let mut x728: u32 = 0;
  let mut x729: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x728, &mut x729, 0x0, x680, x711);
  let mut x730: u32 = 0;
  let mut x731: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x730, &mut x731, x729, x682, x713);
  let mut x732: u32 = 0;
  let mut x733: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x732, &mut x733, x731, x684, x715);
  let mut x734: u32 = 0;
  let mut x735: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x734, &mut x735, x733, x686, x717);
  let mut x736: u32 = 0;
  let mut x737: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x736, &mut x737, x735, x688, x719);
  let mut x738: u32 = 0;
  let mut x739: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x738, &mut x739, x737, x690, x721);
  let mut x740: u32 = 0;
  let mut x741: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x740, &mut x741, x739, x692, x723);
  let mut x742: u32 = 0;
  let mut x743: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x742, &mut x743, x741, x694, x725);
  let mut x744: u32 = 0;
  let mut x745: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x744, &mut x745, x743, x696, x727);
  let mut x746: u32 = 0;
  let mut x747: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x746, &mut x747, x728, 0xd2253531);
  let mut x748: u32 = 0;
  let mut x749: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x748, &mut x749, x746, 0xffffffff);
  let mut x750: u32 = 0;
  let mut x751: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x750, &mut x751, x746, 0xffffffff);
  let mut x752: u32 = 0;
  let mut x753: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x752, &mut x753, x746, 0xffffffff);
  let mut x754: u32 = 0;
  let mut x755: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x754, &mut x755, x746, 0xffffffff);
  let mut x756: u32 = 0;
  let mut x757: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x756, &mut x757, x746, 0xffffffff);
  let mut x758: u32 = 0;
  let mut x759: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x758, &mut x759, x746, 0xffffffff);
  let mut x760: u32 = 0;
  let mut x761: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x760, &mut x761, x746, 0xfffffffe);
  let mut x762: u32 = 0;
  let mut x763: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x762, &mut x763, x746, 0xfffffc2f);
  let mut x764: u32 = 0;
  let mut x765: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x764, &mut x765, 0x0, x763, x760);
  let mut x766: u32 = 0;
  let mut x767: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x766, &mut x767, x765, x761, x758);
  let mut x768: u32 = 0;
  let mut x769: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x768, &mut x769, x767, x759, x756);
  let mut x770: u32 = 0;
  let mut x771: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x770, &mut x771, x769, x757, x754);
  let mut x772: u32 = 0;
  let mut x773: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x772, &mut x773, x771, x755, x752);
  let mut x774: u32 = 0;
  let mut x775: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x774, &mut x775, x773, x753, x750);
  let mut x776: u32 = 0;
  let mut x777: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x776, &mut x777, x775, x751, x748);
  let x778: u32 = ((x777 as u32) + x749);
  let mut x779: u32 = 0;
  let mut x780: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x779, &mut x780, 0x0, x728, x762);
  let mut x781: u32 = 0;
  let mut x782: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x781, &mut x782, x780, x730, x764);
  let mut x783: u32 = 0;
  let mut x784: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x783, &mut x784, x782, x732, x766);
  let mut x785: u32 = 0;
  let mut x786: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x785, &mut x786, x784, x734, x768);
  let mut x787: u32 = 0;
  let mut x788: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x787, &mut x788, x786, x736, x770);
  let mut x789: u32 = 0;
  let mut x790: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x789, &mut x790, x788, x738, x772);
  let mut x791: u32 = 0;
  let mut x792: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x791, &mut x792, x790, x740, x774);
  let mut x793: u32 = 0;
  let mut x794: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x793, &mut x794, x792, x742, x776);
  let mut x795: u32 = 0;
  let mut x796: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x795, &mut x796, x794, x744, x778);
  let x797: u32 = ((x796 as u32) + (x745 as u32));
  let mut x798: u32 = 0;
  let mut x799: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x798, &mut x799, 0x0, x781, 0xfffffc2f);
  let mut x800: u32 = 0;
  let mut x801: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x800, &mut x801, x799, x783, 0xfffffffe);
  let mut x802: u32 = 0;
  let mut x803: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x802, &mut x803, x801, x785, 0xffffffff);
  let mut x804: u32 = 0;
  let mut x805: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x804, &mut x805, x803, x787, 0xffffffff);
  let mut x806: u32 = 0;
  let mut x807: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x806, &mut x807, x805, x789, 0xffffffff);
  let mut x808: u32 = 0;
  let mut x809: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x808, &mut x809, x807, x791, 0xffffffff);
  let mut x810: u32 = 0;
  let mut x811: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x810, &mut x811, x809, x793, 0xffffffff);
  let mut x812: u32 = 0;
  let mut x813: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x812, &mut x813, x811, x795, 0xffffffff);
  let mut x814: u32 = 0;
  let mut x815: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x814, &mut x815, x813, x797, (0x0 as u32));
  let mut x816: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x816, x815, x798, x781);
  let mut x817: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x817, x815, x800, x783);
  let mut x818: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x818, x815, x802, x785);
  let mut x819: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x819, x815, x804, x787);
  let mut x820: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x820, x815, x806, x789);
  let mut x821: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x821, x815, x808, x791);
  let mut x822: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x822, x815, x810, x793);
  let mut x823: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x823, x815, x812, x795);
  out1[0] = x816;
  out1[1] = x817;
  out1[2] = x818;
  out1[3] = x819;
  out1[4] = x820;
  out1[5] = x821;
  out1[6] = x822;
  out1[7] = x823;
}

/// The function fiat_secp256k1_add adds two field elements in the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
///   0 ≤ eval arg2 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m
///   0 ≤ eval out1 < m
///
#[inline]
pub fn fiat_secp256k1_add(out1: &mut fiat_secp256k1_montgomery_domain_field_element, arg1: &fiat_secp256k1_montgomery_domain_field_element, arg2: &fiat_secp256k1_montgomery_domain_field_element) -> () {
  let mut x1: u32 = 0;
  let mut x2: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1, &mut x2, 0x0, (arg1[0]), (arg2[0]));
  let mut x3: u32 = 0;
  let mut x4: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3, &mut x4, x2, (arg1[1]), (arg2[1]));
  let mut x5: u32 = 0;
  let mut x6: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x5, &mut x6, x4, (arg1[2]), (arg2[2]));
  let mut x7: u32 = 0;
  let mut x8: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x7, &mut x8, x6, (arg1[3]), (arg2[3]));
  let mut x9: u32 = 0;
  let mut x10: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x9, &mut x10, x8, (arg1[4]), (arg2[4]));
  let mut x11: u32 = 0;
  let mut x12: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x11, &mut x12, x10, (arg1[5]), (arg2[5]));
  let mut x13: u32 = 0;
  let mut x14: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x13, &mut x14, x12, (arg1[6]), (arg2[6]));
  let mut x15: u32 = 0;
  let mut x16: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x15, &mut x16, x14, (arg1[7]), (arg2[7]));
  let mut x17: u32 = 0;
  let mut x18: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x17, &mut x18, 0x0, x1, 0xfffffc2f);
  let mut x19: u32 = 0;
  let mut x20: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x19, &mut x20, x18, x3, 0xfffffffe);
  let mut x21: u32 = 0;
  let mut x22: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x21, &mut x22, x20, x5, 0xffffffff);
  let mut x23: u32 = 0;
  let mut x24: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x23, &mut x24, x22, x7, 0xffffffff);
  let mut x25: u32 = 0;
  let mut x26: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x25, &mut x26, x24, x9, 0xffffffff);
  let mut x27: u32 = 0;
  let mut x28: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x27, &mut x28, x26, x11, 0xffffffff);
  let mut x29: u32 = 0;
  let mut x30: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x29, &mut x30, x28, x13, 0xffffffff);
  let mut x31: u32 = 0;
  let mut x32: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x31, &mut x32, x30, x15, 0xffffffff);
  let mut x33: u32 = 0;
  let mut x34: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x33, &mut x34, x32, (x16 as u32), (0x0 as u32));
  let mut x35: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x35, x34, x17, x1);
  let mut x36: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x36, x34, x19, x3);
  let mut x37: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x37, x34, x21, x5);
  let mut x38: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x38, x34, x23, x7);
  let mut x39: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x39, x34, x25, x9);
  let mut x40: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x40, x34, x27, x11);
  let mut x41: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x41, x34, x29, x13);
  let mut x42: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x42, x34, x31, x15);
  out1[0] = x35;
  out1[1] = x36;
  out1[2] = x37;
  out1[3] = x38;
  out1[4] = x39;
  out1[5] = x40;
  out1[6] = x41;
  out1[7] = x42;
}

/// The function fiat_secp256k1_sub subtracts two field elements in the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
///   0 ≤ eval arg2 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m
///   0 ≤ eval out1 < m
///
#[inline]
pub fn fiat_secp256k1_sub(out1: &mut fiat_secp256k1_montgomery_domain_field_element, arg1: &fiat_secp256k1_montgomery_domain_field_element, arg2: &fiat_secp256k1_montgomery_domain_field_element) -> () {
  let mut x1: u32 = 0;
  let mut x2: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x1, &mut x2, 0x0, (arg1[0]), (arg2[0]));
  let mut x3: u32 = 0;
  let mut x4: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3, &mut x4, x2, (arg1[1]), (arg2[1]));
  let mut x5: u32 = 0;
  let mut x6: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x5, &mut x6, x4, (arg1[2]), (arg2[2]));
  let mut x7: u32 = 0;
  let mut x8: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x7, &mut x8, x6, (arg1[3]), (arg2[3]));
  let mut x9: u32 = 0;
  let mut x10: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x9, &mut x10, x8, (arg1[4]), (arg2[4]));
  let mut x11: u32 = 0;
  let mut x12: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x11, &mut x12, x10, (arg1[5]), (arg2[5]));
  let mut x13: u32 = 0;
  let mut x14: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x13, &mut x14, x12, (arg1[6]), (arg2[6]));
  let mut x15: u32 = 0;
  let mut x16: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x15, &mut x16, x14, (arg1[7]), (arg2[7]));
  let mut x17: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x17, x16, (0x0 as u32), 0xffffffff);
  let mut x18: u32 = 0;
  let mut x19: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x18, &mut x19, 0x0, x1, (x17 & 0xfffffc2f));
  let mut x20: u32 = 0;
  let mut x21: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x20, &mut x21, x19, x3, (x17 & 0xfffffffe));
  let mut x22: u32 = 0;
  let mut x23: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x22, &mut x23, x21, x5, x17);
  let mut x24: u32 = 0;
  let mut x25: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x24, &mut x25, x23, x7, x17);
  let mut x26: u32 = 0;
  let mut x27: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x26, &mut x27, x25, x9, x17);
  let mut x28: u32 = 0;
  let mut x29: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x28, &mut x29, x27, x11, x17);
  let mut x30: u32 = 0;
  let mut x31: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x30, &mut x31, x29, x13, x17);
  let mut x32: u32 = 0;
  let mut x33: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x32, &mut x33, x31, x15, x17);
  out1[0] = x18;
  out1[1] = x20;
  out1[2] = x22;
  out1[3] = x24;
  out1[4] = x26;
  out1[5] = x28;
  out1[6] = x30;
  out1[7] = x32;
}

/// The function fiat_secp256k1_opp negates a field element in the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m
///   0 ≤ eval out1 < m
///
#[inline]
pub fn fiat_secp256k1_opp(out1: &mut fiat_secp256k1_montgomery_domain_field_element, arg1: &fiat_secp256k1_montgomery_domain_field_element) -> () {
  let mut x1: u32 = 0;
  let mut x2: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x1, &mut x2, 0x0, (0x0 as u32), (arg1[0]));
  let mut x3: u32 = 0;
  let mut x4: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3, &mut x4, x2, (0x0 as u32), (arg1[1]));
  let mut x5: u32 = 0;
  let mut x6: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x5, &mut x6, x4, (0x0 as u32), (arg1[2]));
  let mut x7: u32 = 0;
  let mut x8: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x7, &mut x8, x6, (0x0 as u32), (arg1[3]));
  let mut x9: u32 = 0;
  let mut x10: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x9, &mut x10, x8, (0x0 as u32), (arg1[4]));
  let mut x11: u32 = 0;
  let mut x12: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x11, &mut x12, x10, (0x0 as u32), (arg1[5]));
  let mut x13: u32 = 0;
  let mut x14: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x13, &mut x14, x12, (0x0 as u32), (arg1[6]));
  let mut x15: u32 = 0;
  let mut x16: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x15, &mut x16, x14, (0x0 as u32), (arg1[7]));
  let mut x17: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x17, x16, (0x0 as u32), 0xffffffff);
  let mut x18: u32 = 0;
  let mut x19: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x18, &mut x19, 0x0, x1, (x17 & 0xfffffc2f));
  let mut x20: u32 = 0;
  let mut x21: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x20, &mut x21, x19, x3, (x17 & 0xfffffffe));
  let mut x22: u32 = 0;
  let mut x23: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x22, &mut x23, x21, x5, x17);
  let mut x24: u32 = 0;
  let mut x25: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x24, &mut x25, x23, x7, x17);
  let mut x26: u32 = 0;
  let mut x27: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x26, &mut x27, x25, x9, x17);
  let mut x28: u32 = 0;
  let mut x29: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x28, &mut x29, x27, x11, x17);
  let mut x30: u32 = 0;
  let mut x31: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x30, &mut x31, x29, x13, x17);
  let mut x32: u32 = 0;
  let mut x33: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x32, &mut x33, x31, x15, x17);
  out1[0] = x18;
  out1[1] = x20;
  out1[2] = x22;
  out1[3] = x24;
  out1[4] = x26;
  out1[5] = x28;
  out1[6] = x30;
  out1[7] = x32;
}

/// The function fiat_secp256k1_from_montgomery translates a field element out of the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval out1 mod m = (eval arg1 * ((2^32)⁻¹ mod m)^8) mod m
///   0 ≤ eval out1 < m
///
#[inline]
pub fn fiat_secp256k1_from_montgomery(out1: &mut fiat_secp256k1_non_montgomery_domain_field_element, arg1: &fiat_secp256k1_montgomery_domain_field_element) -> () {
  let x1: u32 = (arg1[0]);
  let mut x2: u32 = 0;
  let mut x3: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2, &mut x3, x1, 0xd2253531);
  let mut x4: u32 = 0;
  let mut x5: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x4, &mut x5, x2, 0xffffffff);
  let mut x6: u32 = 0;
  let mut x7: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x6, &mut x7, x2, 0xffffffff);
  let mut x8: u32 = 0;
  let mut x9: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x8, &mut x9, x2, 0xffffffff);
  let mut x10: u32 = 0;
  let mut x11: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x10, &mut x11, x2, 0xffffffff);
  let mut x12: u32 = 0;
  let mut x13: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x12, &mut x13, x2, 0xffffffff);
  let mut x14: u32 = 0;
  let mut x15: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x14, &mut x15, x2, 0xffffffff);
  let mut x16: u32 = 0;
  let mut x17: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x16, &mut x17, x2, 0xfffffffe);
  let mut x18: u32 = 0;
  let mut x19: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x18, &mut x19, x2, 0xfffffc2f);
  let mut x20: u32 = 0;
  let mut x21: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x20, &mut x21, 0x0, x19, x16);
  let mut x22: u32 = 0;
  let mut x23: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x22, &mut x23, x21, x17, x14);
  let mut x24: u32 = 0;
  let mut x25: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x24, &mut x25, x23, x15, x12);
  let mut x26: u32 = 0;
  let mut x27: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x26, &mut x27, x25, x13, x10);
  let mut x28: u32 = 0;
  let mut x29: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x28, &mut x29, x27, x11, x8);
  let mut x30: u32 = 0;
  let mut x31: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x30, &mut x31, x29, x9, x6);
  let mut x32: u32 = 0;
  let mut x33: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x32, &mut x33, x31, x7, x4);
  let mut x34: u32 = 0;
  let mut x35: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x34, &mut x35, 0x0, x1, x18);
  let mut x36: u32 = 0;
  let mut x37: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x36, &mut x37, x35, (0x0 as u32), x20);
  let mut x38: u32 = 0;
  let mut x39: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x38, &mut x39, x37, (0x0 as u32), x22);
  let mut x40: u32 = 0;
  let mut x41: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x40, &mut x41, x39, (0x0 as u32), x24);
  let mut x42: u32 = 0;
  let mut x43: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x42, &mut x43, x41, (0x0 as u32), x26);
  let mut x44: u32 = 0;
  let mut x45: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x44, &mut x45, x43, (0x0 as u32), x28);
  let mut x46: u32 = 0;
  let mut x47: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x46, &mut x47, x45, (0x0 as u32), x30);
  let mut x48: u32 = 0;
  let mut x49: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x48, &mut x49, x47, (0x0 as u32), x32);
  let mut x50: u32 = 0;
  let mut x51: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x50, &mut x51, x49, (0x0 as u32), ((x33 as u32) + x5));
  let mut x52: u32 = 0;
  let mut x53: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x52, &mut x53, 0x0, x36, (arg1[1]));
  let mut x54: u32 = 0;
  let mut x55: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x54, &mut x55, x53, x38, (0x0 as u32));
  let mut x56: u32 = 0;
  let mut x57: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x56, &mut x57, x55, x40, (0x0 as u32));
  let mut x58: u32 = 0;
  let mut x59: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x58, &mut x59, x57, x42, (0x0 as u32));
  let mut x60: u32 = 0;
  let mut x61: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x60, &mut x61, x59, x44, (0x0 as u32));
  let mut x62: u32 = 0;
  let mut x63: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x62, &mut x63, x61, x46, (0x0 as u32));
  let mut x64: u32 = 0;
  let mut x65: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x64, &mut x65, x63, x48, (0x0 as u32));
  let mut x66: u32 = 0;
  let mut x67: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x66, &mut x67, x65, x50, (0x0 as u32));
  let mut x68: u32 = 0;
  let mut x69: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x68, &mut x69, x52, 0xd2253531);
  let mut x70: u32 = 0;
  let mut x71: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x70, &mut x71, x68, 0xffffffff);
  let mut x72: u32 = 0;
  let mut x73: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x72, &mut x73, x68, 0xffffffff);
  let mut x74: u32 = 0;
  let mut x75: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x74, &mut x75, x68, 0xffffffff);
  let mut x76: u32 = 0;
  let mut x77: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x76, &mut x77, x68, 0xffffffff);
  let mut x78: u32 = 0;
  let mut x79: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x78, &mut x79, x68, 0xffffffff);
  let mut x80: u32 = 0;
  let mut x81: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x80, &mut x81, x68, 0xffffffff);
  let mut x82: u32 = 0;
  let mut x83: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x82, &mut x83, x68, 0xfffffffe);
  let mut x84: u32 = 0;
  let mut x85: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x84, &mut x85, x68, 0xfffffc2f);
  let mut x86: u32 = 0;
  let mut x87: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x86, &mut x87, 0x0, x85, x82);
  let mut x88: u32 = 0;
  let mut x89: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x88, &mut x89, x87, x83, x80);
  let mut x90: u32 = 0;
  let mut x91: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x90, &mut x91, x89, x81, x78);
  let mut x92: u32 = 0;
  let mut x93: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x92, &mut x93, x91, x79, x76);
  let mut x94: u32 = 0;
  let mut x95: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x94, &mut x95, x93, x77, x74);
  let mut x96: u32 = 0;
  let mut x97: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x96, &mut x97, x95, x75, x72);
  let mut x98: u32 = 0;
  let mut x99: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x98, &mut x99, x97, x73, x70);
  let mut x100: u32 = 0;
  let mut x101: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x100, &mut x101, 0x0, x52, x84);
  let mut x102: u32 = 0;
  let mut x103: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x102, &mut x103, x101, x54, x86);
  let mut x104: u32 = 0;
  let mut x105: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x104, &mut x105, x103, x56, x88);
  let mut x106: u32 = 0;
  let mut x107: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x106, &mut x107, x105, x58, x90);
  let mut x108: u32 = 0;
  let mut x109: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x108, &mut x109, x107, x60, x92);
  let mut x110: u32 = 0;
  let mut x111: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x110, &mut x111, x109, x62, x94);
  let mut x112: u32 = 0;
  let mut x113: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x112, &mut x113, x111, x64, x96);
  let mut x114: u32 = 0;
  let mut x115: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x114, &mut x115, x113, x66, x98);
  let mut x116: u32 = 0;
  let mut x117: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x116, &mut x117, x115, ((x67 as u32) + (x51 as u32)), ((x99 as u32) + x71));
  let mut x118: u32 = 0;
  let mut x119: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x118, &mut x119, 0x0, x102, (arg1[2]));
  let mut x120: u32 = 0;
  let mut x121: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x120, &mut x121, x119, x104, (0x0 as u32));
  let mut x122: u32 = 0;
  let mut x123: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x122, &mut x123, x121, x106, (0x0 as u32));
  let mut x124: u32 = 0;
  let mut x125: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x124, &mut x125, x123, x108, (0x0 as u32));
  let mut x126: u32 = 0;
  let mut x127: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x126, &mut x127, x125, x110, (0x0 as u32));
  let mut x128: u32 = 0;
  let mut x129: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x128, &mut x129, x127, x112, (0x0 as u32));
  let mut x130: u32 = 0;
  let mut x131: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x130, &mut x131, x129, x114, (0x0 as u32));
  let mut x132: u32 = 0;
  let mut x133: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x132, &mut x133, x131, x116, (0x0 as u32));
  let mut x134: u32 = 0;
  let mut x135: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x134, &mut x135, x118, 0xd2253531);
  let mut x136: u32 = 0;
  let mut x137: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x136, &mut x137, x134, 0xffffffff);
  let mut x138: u32 = 0;
  let mut x139: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x138, &mut x139, x134, 0xffffffff);
  let mut x140: u32 = 0;
  let mut x141: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x140, &mut x141, x134, 0xffffffff);
  let mut x142: u32 = 0;
  let mut x143: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x142, &mut x143, x134, 0xffffffff);
  let mut x144: u32 = 0;
  let mut x145: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x144, &mut x145, x134, 0xffffffff);
  let mut x146: u32 = 0;
  let mut x147: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x146, &mut x147, x134, 0xffffffff);
  let mut x148: u32 = 0;
  let mut x149: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x148, &mut x149, x134, 0xfffffffe);
  let mut x150: u32 = 0;
  let mut x151: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x150, &mut x151, x134, 0xfffffc2f);
  let mut x152: u32 = 0;
  let mut x153: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x152, &mut x153, 0x0, x151, x148);
  let mut x154: u32 = 0;
  let mut x155: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x154, &mut x155, x153, x149, x146);
  let mut x156: u32 = 0;
  let mut x157: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x156, &mut x157, x155, x147, x144);
  let mut x158: u32 = 0;
  let mut x159: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x158, &mut x159, x157, x145, x142);
  let mut x160: u32 = 0;
  let mut x161: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x160, &mut x161, x159, x143, x140);
  let mut x162: u32 = 0;
  let mut x163: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x162, &mut x163, x161, x141, x138);
  let mut x164: u32 = 0;
  let mut x165: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x164, &mut x165, x163, x139, x136);
  let mut x166: u32 = 0;
  let mut x167: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x166, &mut x167, 0x0, x118, x150);
  let mut x168: u32 = 0;
  let mut x169: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x168, &mut x169, x167, x120, x152);
  let mut x170: u32 = 0;
  let mut x171: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x170, &mut x171, x169, x122, x154);
  let mut x172: u32 = 0;
  let mut x173: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x172, &mut x173, x171, x124, x156);
  let mut x174: u32 = 0;
  let mut x175: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x174, &mut x175, x173, x126, x158);
  let mut x176: u32 = 0;
  let mut x177: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x176, &mut x177, x175, x128, x160);
  let mut x178: u32 = 0;
  let mut x179: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x178, &mut x179, x177, x130, x162);
  let mut x180: u32 = 0;
  let mut x181: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x180, &mut x181, x179, x132, x164);
  let mut x182: u32 = 0;
  let mut x183: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x182, &mut x183, x181, ((x133 as u32) + (x117 as u32)), ((x165 as u32) + x137));
  let mut x184: u32 = 0;
  let mut x185: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x184, &mut x185, 0x0, x168, (arg1[3]));
  let mut x186: u32 = 0;
  let mut x187: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x186, &mut x187, x185, x170, (0x0 as u32));
  let mut x188: u32 = 0;
  let mut x189: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x188, &mut x189, x187, x172, (0x0 as u32));
  let mut x190: u32 = 0;
  let mut x191: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x190, &mut x191, x189, x174, (0x0 as u32));
  let mut x192: u32 = 0;
  let mut x193: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x192, &mut x193, x191, x176, (0x0 as u32));
  let mut x194: u32 = 0;
  let mut x195: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x194, &mut x195, x193, x178, (0x0 as u32));
  let mut x196: u32 = 0;
  let mut x197: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x196, &mut x197, x195, x180, (0x0 as u32));
  let mut x198: u32 = 0;
  let mut x199: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x198, &mut x199, x197, x182, (0x0 as u32));
  let mut x200: u32 = 0;
  let mut x201: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x200, &mut x201, x184, 0xd2253531);
  let mut x202: u32 = 0;
  let mut x203: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x202, &mut x203, x200, 0xffffffff);
  let mut x204: u32 = 0;
  let mut x205: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x204, &mut x205, x200, 0xffffffff);
  let mut x206: u32 = 0;
  let mut x207: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x206, &mut x207, x200, 0xffffffff);
  let mut x208: u32 = 0;
  let mut x209: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x208, &mut x209, x200, 0xffffffff);
  let mut x210: u32 = 0;
  let mut x211: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x210, &mut x211, x200, 0xffffffff);
  let mut x212: u32 = 0;
  let mut x213: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x212, &mut x213, x200, 0xffffffff);
  let mut x214: u32 = 0;
  let mut x215: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x214, &mut x215, x200, 0xfffffffe);
  let mut x216: u32 = 0;
  let mut x217: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x216, &mut x217, x200, 0xfffffc2f);
  let mut x218: u32 = 0;
  let mut x219: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x218, &mut x219, 0x0, x217, x214);
  let mut x220: u32 = 0;
  let mut x221: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x220, &mut x221, x219, x215, x212);
  let mut x222: u32 = 0;
  let mut x223: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x222, &mut x223, x221, x213, x210);
  let mut x224: u32 = 0;
  let mut x225: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x224, &mut x225, x223, x211, x208);
  let mut x226: u32 = 0;
  let mut x227: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x226, &mut x227, x225, x209, x206);
  let mut x228: u32 = 0;
  let mut x229: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x228, &mut x229, x227, x207, x204);
  let mut x230: u32 = 0;
  let mut x231: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x230, &mut x231, x229, x205, x202);
  let mut x232: u32 = 0;
  let mut x233: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x232, &mut x233, 0x0, x184, x216);
  let mut x234: u32 = 0;
  let mut x235: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x234, &mut x235, x233, x186, x218);
  let mut x236: u32 = 0;
  let mut x237: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x236, &mut x237, x235, x188, x220);
  let mut x238: u32 = 0;
  let mut x239: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x238, &mut x239, x237, x190, x222);
  let mut x240: u32 = 0;
  let mut x241: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x240, &mut x241, x239, x192, x224);
  let mut x242: u32 = 0;
  let mut x243: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x242, &mut x243, x241, x194, x226);
  let mut x244: u32 = 0;
  let mut x245: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x244, &mut x245, x243, x196, x228);
  let mut x246: u32 = 0;
  let mut x247: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x246, &mut x247, x245, x198, x230);
  let mut x248: u32 = 0;
  let mut x249: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x248, &mut x249, x247, ((x199 as u32) + (x183 as u32)), ((x231 as u32) + x203));
  let mut x250: u32 = 0;
  let mut x251: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x250, &mut x251, 0x0, x234, (arg1[4]));
  let mut x252: u32 = 0;
  let mut x253: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x252, &mut x253, x251, x236, (0x0 as u32));
  let mut x254: u32 = 0;
  let mut x255: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x254, &mut x255, x253, x238, (0x0 as u32));
  let mut x256: u32 = 0;
  let mut x257: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x256, &mut x257, x255, x240, (0x0 as u32));
  let mut x258: u32 = 0;
  let mut x259: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x258, &mut x259, x257, x242, (0x0 as u32));
  let mut x260: u32 = 0;
  let mut x261: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x260, &mut x261, x259, x244, (0x0 as u32));
  let mut x262: u32 = 0;
  let mut x263: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x262, &mut x263, x261, x246, (0x0 as u32));
  let mut x264: u32 = 0;
  let mut x265: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x264, &mut x265, x263, x248, (0x0 as u32));
  let mut x266: u32 = 0;
  let mut x267: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x266, &mut x267, x250, 0xd2253531);
  let mut x268: u32 = 0;
  let mut x269: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x268, &mut x269, x266, 0xffffffff);
  let mut x270: u32 = 0;
  let mut x271: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x270, &mut x271, x266, 0xffffffff);
  let mut x272: u32 = 0;
  let mut x273: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x272, &mut x273, x266, 0xffffffff);
  let mut x274: u32 = 0;
  let mut x275: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x274, &mut x275, x266, 0xffffffff);
  let mut x276: u32 = 0;
  let mut x277: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x276, &mut x277, x266, 0xffffffff);
  let mut x278: u32 = 0;
  let mut x279: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x278, &mut x279, x266, 0xffffffff);
  let mut x280: u32 = 0;
  let mut x281: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x280, &mut x281, x266, 0xfffffffe);
  let mut x282: u32 = 0;
  let mut x283: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x282, &mut x283, x266, 0xfffffc2f);
  let mut x284: u32 = 0;
  let mut x285: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x284, &mut x285, 0x0, x283, x280);
  let mut x286: u32 = 0;
  let mut x287: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x286, &mut x287, x285, x281, x278);
  let mut x288: u32 = 0;
  let mut x289: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x288, &mut x289, x287, x279, x276);
  let mut x290: u32 = 0;
  let mut x291: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x290, &mut x291, x289, x277, x274);
  let mut x292: u32 = 0;
  let mut x293: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x292, &mut x293, x291, x275, x272);
  let mut x294: u32 = 0;
  let mut x295: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x294, &mut x295, x293, x273, x270);
  let mut x296: u32 = 0;
  let mut x297: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x296, &mut x297, x295, x271, x268);
  let mut x298: u32 = 0;
  let mut x299: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x298, &mut x299, 0x0, x250, x282);
  let mut x300: u32 = 0;
  let mut x301: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x300, &mut x301, x299, x252, x284);
  let mut x302: u32 = 0;
  let mut x303: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x302, &mut x303, x301, x254, x286);
  let mut x304: u32 = 0;
  let mut x305: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x304, &mut x305, x303, x256, x288);
  let mut x306: u32 = 0;
  let mut x307: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x306, &mut x307, x305, x258, x290);
  let mut x308: u32 = 0;
  let mut x309: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x308, &mut x309, x307, x260, x292);
  let mut x310: u32 = 0;
  let mut x311: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x310, &mut x311, x309, x262, x294);
  let mut x312: u32 = 0;
  let mut x313: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x312, &mut x313, x311, x264, x296);
  let mut x314: u32 = 0;
  let mut x315: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x314, &mut x315, x313, ((x265 as u32) + (x249 as u32)), ((x297 as u32) + x269));
  let mut x316: u32 = 0;
  let mut x317: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x316, &mut x317, 0x0, x300, (arg1[5]));
  let mut x318: u32 = 0;
  let mut x319: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x318, &mut x319, x317, x302, (0x0 as u32));
  let mut x320: u32 = 0;
  let mut x321: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x320, &mut x321, x319, x304, (0x0 as u32));
  let mut x322: u32 = 0;
  let mut x323: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x322, &mut x323, x321, x306, (0x0 as u32));
  let mut x324: u32 = 0;
  let mut x325: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x324, &mut x325, x323, x308, (0x0 as u32));
  let mut x326: u32 = 0;
  let mut x327: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x326, &mut x327, x325, x310, (0x0 as u32));
  let mut x328: u32 = 0;
  let mut x329: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x328, &mut x329, x327, x312, (0x0 as u32));
  let mut x330: u32 = 0;
  let mut x331: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x330, &mut x331, x329, x314, (0x0 as u32));
  let mut x332: u32 = 0;
  let mut x333: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x332, &mut x333, x316, 0xd2253531);
  let mut x334: u32 = 0;
  let mut x335: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x334, &mut x335, x332, 0xffffffff);
  let mut x336: u32 = 0;
  let mut x337: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x336, &mut x337, x332, 0xffffffff);
  let mut x338: u32 = 0;
  let mut x339: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x338, &mut x339, x332, 0xffffffff);
  let mut x340: u32 = 0;
  let mut x341: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x340, &mut x341, x332, 0xffffffff);
  let mut x342: u32 = 0;
  let mut x343: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x342, &mut x343, x332, 0xffffffff);
  let mut x344: u32 = 0;
  let mut x345: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x344, &mut x345, x332, 0xffffffff);
  let mut x346: u32 = 0;
  let mut x347: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x346, &mut x347, x332, 0xfffffffe);
  let mut x348: u32 = 0;
  let mut x349: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x348, &mut x349, x332, 0xfffffc2f);
  let mut x350: u32 = 0;
  let mut x351: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x350, &mut x351, 0x0, x349, x346);
  let mut x352: u32 = 0;
  let mut x353: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x352, &mut x353, x351, x347, x344);
  let mut x354: u32 = 0;
  let mut x355: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x354, &mut x355, x353, x345, x342);
  let mut x356: u32 = 0;
  let mut x357: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x356, &mut x357, x355, x343, x340);
  let mut x358: u32 = 0;
  let mut x359: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x358, &mut x359, x357, x341, x338);
  let mut x360: u32 = 0;
  let mut x361: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x360, &mut x361, x359, x339, x336);
  let mut x362: u32 = 0;
  let mut x363: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x362, &mut x363, x361, x337, x334);
  let mut x364: u32 = 0;
  let mut x365: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x364, &mut x365, 0x0, x316, x348);
  let mut x366: u32 = 0;
  let mut x367: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x366, &mut x367, x365, x318, x350);
  let mut x368: u32 = 0;
  let mut x369: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x368, &mut x369, x367, x320, x352);
  let mut x370: u32 = 0;
  let mut x371: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x370, &mut x371, x369, x322, x354);
  let mut x372: u32 = 0;
  let mut x373: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x372, &mut x373, x371, x324, x356);
  let mut x374: u32 = 0;
  let mut x375: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x374, &mut x375, x373, x326, x358);
  let mut x376: u32 = 0;
  let mut x377: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x376, &mut x377, x375, x328, x360);
  let mut x378: u32 = 0;
  let mut x379: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x378, &mut x379, x377, x330, x362);
  let mut x380: u32 = 0;
  let mut x381: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x380, &mut x381, x379, ((x331 as u32) + (x315 as u32)), ((x363 as u32) + x335));
  let mut x382: u32 = 0;
  let mut x383: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x382, &mut x383, 0x0, x366, (arg1[6]));
  let mut x384: u32 = 0;
  let mut x385: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x384, &mut x385, x383, x368, (0x0 as u32));
  let mut x386: u32 = 0;
  let mut x387: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x386, &mut x387, x385, x370, (0x0 as u32));
  let mut x388: u32 = 0;
  let mut x389: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x388, &mut x389, x387, x372, (0x0 as u32));
  let mut x390: u32 = 0;
  let mut x391: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x390, &mut x391, x389, x374, (0x0 as u32));
  let mut x392: u32 = 0;
  let mut x393: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x392, &mut x393, x391, x376, (0x0 as u32));
  let mut x394: u32 = 0;
  let mut x395: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x394, &mut x395, x393, x378, (0x0 as u32));
  let mut x396: u32 = 0;
  let mut x397: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x396, &mut x397, x395, x380, (0x0 as u32));
  let mut x398: u32 = 0;
  let mut x399: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x398, &mut x399, x382, 0xd2253531);
  let mut x400: u32 = 0;
  let mut x401: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x400, &mut x401, x398, 0xffffffff);
  let mut x402: u32 = 0;
  let mut x403: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x402, &mut x403, x398, 0xffffffff);
  let mut x404: u32 = 0;
  let mut x405: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x404, &mut x405, x398, 0xffffffff);
  let mut x406: u32 = 0;
  let mut x407: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x406, &mut x407, x398, 0xffffffff);
  let mut x408: u32 = 0;
  let mut x409: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x408, &mut x409, x398, 0xffffffff);
  let mut x410: u32 = 0;
  let mut x411: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x410, &mut x411, x398, 0xffffffff);
  let mut x412: u32 = 0;
  let mut x413: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x412, &mut x413, x398, 0xfffffffe);
  let mut x414: u32 = 0;
  let mut x415: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x414, &mut x415, x398, 0xfffffc2f);
  let mut x416: u32 = 0;
  let mut x417: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x416, &mut x417, 0x0, x415, x412);
  let mut x418: u32 = 0;
  let mut x419: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x418, &mut x419, x417, x413, x410);
  let mut x420: u32 = 0;
  let mut x421: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x420, &mut x421, x419, x411, x408);
  let mut x422: u32 = 0;
  let mut x423: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x422, &mut x423, x421, x409, x406);
  let mut x424: u32 = 0;
  let mut x425: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x424, &mut x425, x423, x407, x404);
  let mut x426: u32 = 0;
  let mut x427: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x426, &mut x427, x425, x405, x402);
  let mut x428: u32 = 0;
  let mut x429: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x428, &mut x429, x427, x403, x400);
  let mut x430: u32 = 0;
  let mut x431: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x430, &mut x431, 0x0, x382, x414);
  let mut x432: u32 = 0;
  let mut x433: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x432, &mut x433, x431, x384, x416);
  let mut x434: u32 = 0;
  let mut x435: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x434, &mut x435, x433, x386, x418);
  let mut x436: u32 = 0;
  let mut x437: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x436, &mut x437, x435, x388, x420);
  let mut x438: u32 = 0;
  let mut x439: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x438, &mut x439, x437, x390, x422);
  let mut x440: u32 = 0;
  let mut x441: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x440, &mut x441, x439, x392, x424);
  let mut x442: u32 = 0;
  let mut x443: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x442, &mut x443, x441, x394, x426);
  let mut x444: u32 = 0;
  let mut x445: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x444, &mut x445, x443, x396, x428);
  let mut x446: u32 = 0;
  let mut x447: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x446, &mut x447, x445, ((x397 as u32) + (x381 as u32)), ((x429 as u32) + x401));
  let mut x448: u32 = 0;
  let mut x449: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x448, &mut x449, 0x0, x432, (arg1[7]));
  let mut x450: u32 = 0;
  let mut x451: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x450, &mut x451, x449, x434, (0x0 as u32));
  let mut x452: u32 = 0;
  let mut x453: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x452, &mut x453, x451, x436, (0x0 as u32));
  let mut x454: u32 = 0;
  let mut x455: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x454, &mut x455, x453, x438, (0x0 as u32));
  let mut x456: u32 = 0;
  let mut x457: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x456, &mut x457, x455, x440, (0x0 as u32));
  let mut x458: u32 = 0;
  let mut x459: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x458, &mut x459, x457, x442, (0x0 as u32));
  let mut x460: u32 = 0;
  let mut x461: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x460, &mut x461, x459, x444, (0x0 as u32));
  let mut x462: u32 = 0;
  let mut x463: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x462, &mut x463, x461, x446, (0x0 as u32));
  let mut x464: u32 = 0;
  let mut x465: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x464, &mut x465, x448, 0xd2253531);
  let mut x466: u32 = 0;
  let mut x467: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x466, &mut x467, x464, 0xffffffff);
  let mut x468: u32 = 0;
  let mut x469: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x468, &mut x469, x464, 0xffffffff);
  let mut x470: u32 = 0;
  let mut x471: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x470, &mut x471, x464, 0xffffffff);
  let mut x472: u32 = 0;
  let mut x473: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x472, &mut x473, x464, 0xffffffff);
  let mut x474: u32 = 0;
  let mut x475: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x474, &mut x475, x464, 0xffffffff);
  let mut x476: u32 = 0;
  let mut x477: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x476, &mut x477, x464, 0xffffffff);
  let mut x478: u32 = 0;
  let mut x479: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x478, &mut x479, x464, 0xfffffffe);
  let mut x480: u32 = 0;
  let mut x481: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x480, &mut x481, x464, 0xfffffc2f);
  let mut x482: u32 = 0;
  let mut x483: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x482, &mut x483, 0x0, x481, x478);
  let mut x484: u32 = 0;
  let mut x485: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x484, &mut x485, x483, x479, x476);
  let mut x486: u32 = 0;
  let mut x487: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x486, &mut x487, x485, x477, x474);
  let mut x488: u32 = 0;
  let mut x489: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x488, &mut x489, x487, x475, x472);
  let mut x490: u32 = 0;
  let mut x491: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x490, &mut x491, x489, x473, x470);
  let mut x492: u32 = 0;
  let mut x493: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x492, &mut x493, x491, x471, x468);
  let mut x494: u32 = 0;
  let mut x495: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x494, &mut x495, x493, x469, x466);
  let mut x496: u32 = 0;
  let mut x497: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x496, &mut x497, 0x0, x448, x480);
  let mut x498: u32 = 0;
  let mut x499: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x498, &mut x499, x497, x450, x482);
  let mut x500: u32 = 0;
  let mut x501: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x500, &mut x501, x499, x452, x484);
  let mut x502: u32 = 0;
  let mut x503: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x502, &mut x503, x501, x454, x486);
  let mut x504: u32 = 0;
  let mut x505: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x504, &mut x505, x503, x456, x488);
  let mut x506: u32 = 0;
  let mut x507: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x506, &mut x507, x505, x458, x490);
  let mut x508: u32 = 0;
  let mut x509: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x508, &mut x509, x507, x460, x492);
  let mut x510: u32 = 0;
  let mut x511: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x510, &mut x511, x509, x462, x494);
  let mut x512: u32 = 0;
  let mut x513: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x512, &mut x513, x511, ((x463 as u32) + (x447 as u32)), ((x495 as u32) + x467));
  let mut x514: u32 = 0;
  let mut x515: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x514, &mut x515, 0x0, x498, 0xfffffc2f);
  let mut x516: u32 = 0;
  let mut x517: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x516, &mut x517, x515, x500, 0xfffffffe);
  let mut x518: u32 = 0;
  let mut x519: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x518, &mut x519, x517, x502, 0xffffffff);
  let mut x520: u32 = 0;
  let mut x521: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x520, &mut x521, x519, x504, 0xffffffff);
  let mut x522: u32 = 0;
  let mut x523: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x522, &mut x523, x521, x506, 0xffffffff);
  let mut x524: u32 = 0;
  let mut x525: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x524, &mut x525, x523, x508, 0xffffffff);
  let mut x526: u32 = 0;
  let mut x527: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x526, &mut x527, x525, x510, 0xffffffff);
  let mut x528: u32 = 0;
  let mut x529: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x528, &mut x529, x527, x512, 0xffffffff);
  let mut x530: u32 = 0;
  let mut x531: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x530, &mut x531, x529, (x513 as u32), (0x0 as u32));
  let mut x532: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x532, x531, x514, x498);
  let mut x533: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x533, x531, x516, x500);
  let mut x534: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x534, x531, x518, x502);
  let mut x535: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x535, x531, x520, x504);
  let mut x536: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x536, x531, x522, x506);
  let mut x537: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x537, x531, x524, x508);
  let mut x538: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x538, x531, x526, x510);
  let mut x539: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x539, x531, x528, x512);
  out1[0] = x532;
  out1[1] = x533;
  out1[2] = x534;
  out1[3] = x535;
  out1[4] = x536;
  out1[5] = x537;
  out1[6] = x538;
  out1[7] = x539;
}

/// The function fiat_secp256k1_to_montgomery translates a field element into the Montgomery domain.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = eval arg1 mod m
///   0 ≤ eval out1 < m
///
#[inline]
pub fn fiat_secp256k1_to_montgomery(out1: &mut fiat_secp256k1_montgomery_domain_field_element, arg1: &fiat_secp256k1_non_montgomery_domain_field_element) -> () {
  let x1: u32 = (arg1[1]);
  let x2: u32 = (arg1[2]);
  let x3: u32 = (arg1[3]);
  let x4: u32 = (arg1[4]);
  let x5: u32 = (arg1[5]);
  let x6: u32 = (arg1[6]);
  let x7: u32 = (arg1[7]);
  let x8: u32 = (arg1[0]);
  let mut x9: u32 = 0;
  let mut x10: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x9, &mut x10, x8, 0x7a2);
  let mut x11: u32 = 0;
  let mut x12: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x11, &mut x12, x8, 0xe90a1);
  let mut x13: u32 = 0;
  let mut x14: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x13, &mut x14, 0x0, x12, x9);
  let mut x15: u32 = 0;
  let mut x16: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x15, &mut x16, x14, x10, x8);
  let mut x17: u32 = 0;
  let mut x18: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x17, &mut x18, x11, 0xd2253531);
  let mut x19: u32 = 0;
  let mut x20: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x19, &mut x20, x17, 0xffffffff);
  let mut x21: u32 = 0;
  let mut x22: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x21, &mut x22, x17, 0xffffffff);
  let mut x23: u32 = 0;
  let mut x24: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x23, &mut x24, x17, 0xffffffff);
  let mut x25: u32 = 0;
  let mut x26: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x25, &mut x26, x17, 0xffffffff);
  let mut x27: u32 = 0;
  let mut x28: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x27, &mut x28, x17, 0xffffffff);
  let mut x29: u32 = 0;
  let mut x30: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x29, &mut x30, x17, 0xffffffff);
  let mut x31: u32 = 0;
  let mut x32: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x31, &mut x32, x17, 0xfffffffe);
  let mut x33: u32 = 0;
  let mut x34: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x33, &mut x34, x17, 0xfffffc2f);
  let mut x35: u32 = 0;
  let mut x36: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x35, &mut x36, 0x0, x34, x31);
  let mut x37: u32 = 0;
  let mut x38: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x37, &mut x38, x36, x32, x29);
  let mut x39: u32 = 0;
  let mut x40: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x39, &mut x40, x38, x30, x27);
  let mut x41: u32 = 0;
  let mut x42: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x41, &mut x42, x40, x28, x25);
  let mut x43: u32 = 0;
  let mut x44: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x43, &mut x44, x42, x26, x23);
  let mut x45: u32 = 0;
  let mut x46: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x45, &mut x46, x44, x24, x21);
  let mut x47: u32 = 0;
  let mut x48: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x47, &mut x48, x46, x22, x19);
  let mut x49: u32 = 0;
  let mut x50: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x49, &mut x50, 0x0, x11, x33);
  let mut x51: u32 = 0;
  let mut x52: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x51, &mut x52, x50, x13, x35);
  let mut x53: u32 = 0;
  let mut x54: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x53, &mut x54, x52, x15, x37);
  let mut x55: u32 = 0;
  let mut x56: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x55, &mut x56, x54, (x16 as u32), x39);
  let mut x57: u32 = 0;
  let mut x58: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x57, &mut x58, x56, (0x0 as u32), x41);
  let mut x59: u32 = 0;
  let mut x60: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x59, &mut x60, x58, (0x0 as u32), x43);
  let mut x61: u32 = 0;
  let mut x62: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x61, &mut x62, x60, (0x0 as u32), x45);
  let mut x63: u32 = 0;
  let mut x64: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x63, &mut x64, x62, (0x0 as u32), x47);
  let mut x65: u32 = 0;
  let mut x66: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x65, &mut x66, x64, (0x0 as u32), ((x48 as u32) + x20));
  let mut x67: u32 = 0;
  let mut x68: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x67, &mut x68, x1, 0x7a2);
  let mut x69: u32 = 0;
  let mut x70: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x69, &mut x70, x1, 0xe90a1);
  let mut x71: u32 = 0;
  let mut x72: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x71, &mut x72, 0x0, x70, x67);
  let mut x73: u32 = 0;
  let mut x74: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x73, &mut x74, x72, x68, x1);
  let mut x75: u32 = 0;
  let mut x76: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x75, &mut x76, 0x0, x51, x69);
  let mut x77: u32 = 0;
  let mut x78: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x77, &mut x78, x76, x53, x71);
  let mut x79: u32 = 0;
  let mut x80: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x79, &mut x80, x78, x55, x73);
  let mut x81: u32 = 0;
  let mut x82: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x81, &mut x82, x80, x57, (x74 as u32));
  let mut x83: u32 = 0;
  let mut x84: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x83, &mut x84, x82, x59, (0x0 as u32));
  let mut x85: u32 = 0;
  let mut x86: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x85, &mut x86, x84, x61, (0x0 as u32));
  let mut x87: u32 = 0;
  let mut x88: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x87, &mut x88, x86, x63, (0x0 as u32));
  let mut x89: u32 = 0;
  let mut x90: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x89, &mut x90, x88, x65, (0x0 as u32));
  let mut x91: u32 = 0;
  let mut x92: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x91, &mut x92, x75, 0xd2253531);
  let mut x93: u32 = 0;
  let mut x94: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x93, &mut x94, x91, 0xffffffff);
  let mut x95: u32 = 0;
  let mut x96: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x95, &mut x96, x91, 0xffffffff);
  let mut x97: u32 = 0;
  let mut x98: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x97, &mut x98, x91, 0xffffffff);
  let mut x99: u32 = 0;
  let mut x100: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x99, &mut x100, x91, 0xffffffff);
  let mut x101: u32 = 0;
  let mut x102: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x101, &mut x102, x91, 0xffffffff);
  let mut x103: u32 = 0;
  let mut x104: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x103, &mut x104, x91, 0xffffffff);
  let mut x105: u32 = 0;
  let mut x106: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x105, &mut x106, x91, 0xfffffffe);
  let mut x107: u32 = 0;
  let mut x108: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x107, &mut x108, x91, 0xfffffc2f);
  let mut x109: u32 = 0;
  let mut x110: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x109, &mut x110, 0x0, x108, x105);
  let mut x111: u32 = 0;
  let mut x112: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x111, &mut x112, x110, x106, x103);
  let mut x113: u32 = 0;
  let mut x114: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x113, &mut x114, x112, x104, x101);
  let mut x115: u32 = 0;
  let mut x116: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x115, &mut x116, x114, x102, x99);
  let mut x117: u32 = 0;
  let mut x118: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x117, &mut x118, x116, x100, x97);
  let mut x119: u32 = 0;
  let mut x120: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x119, &mut x120, x118, x98, x95);
  let mut x121: u32 = 0;
  let mut x122: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x121, &mut x122, x120, x96, x93);
  let mut x123: u32 = 0;
  let mut x124: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x123, &mut x124, 0x0, x75, x107);
  let mut x125: u32 = 0;
  let mut x126: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x125, &mut x126, x124, x77, x109);
  let mut x127: u32 = 0;
  let mut x128: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x127, &mut x128, x126, x79, x111);
  let mut x129: u32 = 0;
  let mut x130: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x129, &mut x130, x128, x81, x113);
  let mut x131: u32 = 0;
  let mut x132: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x131, &mut x132, x130, x83, x115);
  let mut x133: u32 = 0;
  let mut x134: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x133, &mut x134, x132, x85, x117);
  let mut x135: u32 = 0;
  let mut x136: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x135, &mut x136, x134, x87, x119);
  let mut x137: u32 = 0;
  let mut x138: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x137, &mut x138, x136, x89, x121);
  let mut x139: u32 = 0;
  let mut x140: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x139, &mut x140, x138, ((x90 as u32) + (x66 as u32)), ((x122 as u32) + x94));
  let mut x141: u32 = 0;
  let mut x142: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x141, &mut x142, x2, 0x7a2);
  let mut x143: u32 = 0;
  let mut x144: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x143, &mut x144, x2, 0xe90a1);
  let mut x145: u32 = 0;
  let mut x146: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x145, &mut x146, 0x0, x144, x141);
  let mut x147: u32 = 0;
  let mut x148: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x147, &mut x148, x146, x142, x2);
  let mut x149: u32 = 0;
  let mut x150: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x149, &mut x150, 0x0, x125, x143);
  let mut x151: u32 = 0;
  let mut x152: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x151, &mut x152, x150, x127, x145);
  let mut x153: u32 = 0;
  let mut x154: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x153, &mut x154, x152, x129, x147);
  let mut x155: u32 = 0;
  let mut x156: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x155, &mut x156, x154, x131, (x148 as u32));
  let mut x157: u32 = 0;
  let mut x158: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x157, &mut x158, x156, x133, (0x0 as u32));
  let mut x159: u32 = 0;
  let mut x160: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x159, &mut x160, x158, x135, (0x0 as u32));
  let mut x161: u32 = 0;
  let mut x162: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x161, &mut x162, x160, x137, (0x0 as u32));
  let mut x163: u32 = 0;
  let mut x164: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x163, &mut x164, x162, x139, (0x0 as u32));
  let mut x165: u32 = 0;
  let mut x166: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x165, &mut x166, x149, 0xd2253531);
  let mut x167: u32 = 0;
  let mut x168: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x167, &mut x168, x165, 0xffffffff);
  let mut x169: u32 = 0;
  let mut x170: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x169, &mut x170, x165, 0xffffffff);
  let mut x171: u32 = 0;
  let mut x172: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x171, &mut x172, x165, 0xffffffff);
  let mut x173: u32 = 0;
  let mut x174: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x173, &mut x174, x165, 0xffffffff);
  let mut x175: u32 = 0;
  let mut x176: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x175, &mut x176, x165, 0xffffffff);
  let mut x177: u32 = 0;
  let mut x178: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x177, &mut x178, x165, 0xffffffff);
  let mut x179: u32 = 0;
  let mut x180: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x179, &mut x180, x165, 0xfffffffe);
  let mut x181: u32 = 0;
  let mut x182: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x181, &mut x182, x165, 0xfffffc2f);
  let mut x183: u32 = 0;
  let mut x184: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x183, &mut x184, 0x0, x182, x179);
  let mut x185: u32 = 0;
  let mut x186: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x185, &mut x186, x184, x180, x177);
  let mut x187: u32 = 0;
  let mut x188: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x187, &mut x188, x186, x178, x175);
  let mut x189: u32 = 0;
  let mut x190: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x189, &mut x190, x188, x176, x173);
  let mut x191: u32 = 0;
  let mut x192: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x191, &mut x192, x190, x174, x171);
  let mut x193: u32 = 0;
  let mut x194: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x193, &mut x194, x192, x172, x169);
  let mut x195: u32 = 0;
  let mut x196: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x195, &mut x196, x194, x170, x167);
  let mut x197: u32 = 0;
  let mut x198: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x197, &mut x198, 0x0, x149, x181);
  let mut x199: u32 = 0;
  let mut x200: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x199, &mut x200, x198, x151, x183);
  let mut x201: u32 = 0;
  let mut x202: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x201, &mut x202, x200, x153, x185);
  let mut x203: u32 = 0;
  let mut x204: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x203, &mut x204, x202, x155, x187);
  let mut x205: u32 = 0;
  let mut x206: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x205, &mut x206, x204, x157, x189);
  let mut x207: u32 = 0;
  let mut x208: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x207, &mut x208, x206, x159, x191);
  let mut x209: u32 = 0;
  let mut x210: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x209, &mut x210, x208, x161, x193);
  let mut x211: u32 = 0;
  let mut x212: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x211, &mut x212, x210, x163, x195);
  let mut x213: u32 = 0;
  let mut x214: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x213, &mut x214, x212, ((x164 as u32) + (x140 as u32)), ((x196 as u32) + x168));
  let mut x215: u32 = 0;
  let mut x216: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x215, &mut x216, x3, 0x7a2);
  let mut x217: u32 = 0;
  let mut x218: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x217, &mut x218, x3, 0xe90a1);
  let mut x219: u32 = 0;
  let mut x220: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x219, &mut x220, 0x0, x218, x215);
  let mut x221: u32 = 0;
  let mut x222: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x221, &mut x222, x220, x216, x3);
  let mut x223: u32 = 0;
  let mut x224: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x223, &mut x224, 0x0, x199, x217);
  let mut x225: u32 = 0;
  let mut x226: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x225, &mut x226, x224, x201, x219);
  let mut x227: u32 = 0;
  let mut x228: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x227, &mut x228, x226, x203, x221);
  let mut x229: u32 = 0;
  let mut x230: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x229, &mut x230, x228, x205, (x222 as u32));
  let mut x231: u32 = 0;
  let mut x232: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x231, &mut x232, x230, x207, (0x0 as u32));
  let mut x233: u32 = 0;
  let mut x234: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x233, &mut x234, x232, x209, (0x0 as u32));
  let mut x235: u32 = 0;
  let mut x236: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x235, &mut x236, x234, x211, (0x0 as u32));
  let mut x237: u32 = 0;
  let mut x238: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x237, &mut x238, x236, x213, (0x0 as u32));
  let mut x239: u32 = 0;
  let mut x240: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x239, &mut x240, x223, 0xd2253531);
  let mut x241: u32 = 0;
  let mut x242: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x241, &mut x242, x239, 0xffffffff);
  let mut x243: u32 = 0;
  let mut x244: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x243, &mut x244, x239, 0xffffffff);
  let mut x245: u32 = 0;
  let mut x246: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x245, &mut x246, x239, 0xffffffff);
  let mut x247: u32 = 0;
  let mut x248: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x247, &mut x248, x239, 0xffffffff);
  let mut x249: u32 = 0;
  let mut x250: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x249, &mut x250, x239, 0xffffffff);
  let mut x251: u32 = 0;
  let mut x252: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x251, &mut x252, x239, 0xffffffff);
  let mut x253: u32 = 0;
  let mut x254: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x253, &mut x254, x239, 0xfffffffe);
  let mut x255: u32 = 0;
  let mut x256: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x255, &mut x256, x239, 0xfffffc2f);
  let mut x257: u32 = 0;
  let mut x258: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x257, &mut x258, 0x0, x256, x253);
  let mut x259: u32 = 0;
  let mut x260: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x259, &mut x260, x258, x254, x251);
  let mut x261: u32 = 0;
  let mut x262: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x261, &mut x262, x260, x252, x249);
  let mut x263: u32 = 0;
  let mut x264: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x263, &mut x264, x262, x250, x247);
  let mut x265: u32 = 0;
  let mut x266: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x265, &mut x266, x264, x248, x245);
  let mut x267: u32 = 0;
  let mut x268: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x267, &mut x268, x266, x246, x243);
  let mut x269: u32 = 0;
  let mut x270: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x269, &mut x270, x268, x244, x241);
  let mut x271: u32 = 0;
  let mut x272: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x271, &mut x272, 0x0, x223, x255);
  let mut x273: u32 = 0;
  let mut x274: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x273, &mut x274, x272, x225, x257);
  let mut x275: u32 = 0;
  let mut x276: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x275, &mut x276, x274, x227, x259);
  let mut x277: u32 = 0;
  let mut x278: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x277, &mut x278, x276, x229, x261);
  let mut x279: u32 = 0;
  let mut x280: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x279, &mut x280, x278, x231, x263);
  let mut x281: u32 = 0;
  let mut x282: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x281, &mut x282, x280, x233, x265);
  let mut x283: u32 = 0;
  let mut x284: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x283, &mut x284, x282, x235, x267);
  let mut x285: u32 = 0;
  let mut x286: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x285, &mut x286, x284, x237, x269);
  let mut x287: u32 = 0;
  let mut x288: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x287, &mut x288, x286, ((x238 as u32) + (x214 as u32)), ((x270 as u32) + x242));
  let mut x289: u32 = 0;
  let mut x290: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x289, &mut x290, x4, 0x7a2);
  let mut x291: u32 = 0;
  let mut x292: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x291, &mut x292, x4, 0xe90a1);
  let mut x293: u32 = 0;
  let mut x294: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x293, &mut x294, 0x0, x292, x289);
  let mut x295: u32 = 0;
  let mut x296: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x295, &mut x296, x294, x290, x4);
  let mut x297: u32 = 0;
  let mut x298: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x297, &mut x298, 0x0, x273, x291);
  let mut x299: u32 = 0;
  let mut x300: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x299, &mut x300, x298, x275, x293);
  let mut x301: u32 = 0;
  let mut x302: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x301, &mut x302, x300, x277, x295);
  let mut x303: u32 = 0;
  let mut x304: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x303, &mut x304, x302, x279, (x296 as u32));
  let mut x305: u32 = 0;
  let mut x306: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x305, &mut x306, x304, x281, (0x0 as u32));
  let mut x307: u32 = 0;
  let mut x308: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x307, &mut x308, x306, x283, (0x0 as u32));
  let mut x309: u32 = 0;
  let mut x310: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x309, &mut x310, x308, x285, (0x0 as u32));
  let mut x311: u32 = 0;
  let mut x312: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x311, &mut x312, x310, x287, (0x0 as u32));
  let mut x313: u32 = 0;
  let mut x314: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x313, &mut x314, x297, 0xd2253531);
  let mut x315: u32 = 0;
  let mut x316: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x315, &mut x316, x313, 0xffffffff);
  let mut x317: u32 = 0;
  let mut x318: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x317, &mut x318, x313, 0xffffffff);
  let mut x319: u32 = 0;
  let mut x320: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x319, &mut x320, x313, 0xffffffff);
  let mut x321: u32 = 0;
  let mut x322: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x321, &mut x322, x313, 0xffffffff);
  let mut x323: u32 = 0;
  let mut x324: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x323, &mut x324, x313, 0xffffffff);
  let mut x325: u32 = 0;
  let mut x326: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x325, &mut x326, x313, 0xffffffff);
  let mut x327: u32 = 0;
  let mut x328: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x327, &mut x328, x313, 0xfffffffe);
  let mut x329: u32 = 0;
  let mut x330: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x329, &mut x330, x313, 0xfffffc2f);
  let mut x331: u32 = 0;
  let mut x332: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x331, &mut x332, 0x0, x330, x327);
  let mut x333: u32 = 0;
  let mut x334: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x333, &mut x334, x332, x328, x325);
  let mut x335: u32 = 0;
  let mut x336: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x335, &mut x336, x334, x326, x323);
  let mut x337: u32 = 0;
  let mut x338: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x337, &mut x338, x336, x324, x321);
  let mut x339: u32 = 0;
  let mut x340: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x339, &mut x340, x338, x322, x319);
  let mut x341: u32 = 0;
  let mut x342: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x341, &mut x342, x340, x320, x317);
  let mut x343: u32 = 0;
  let mut x344: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x343, &mut x344, x342, x318, x315);
  let mut x345: u32 = 0;
  let mut x346: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x345, &mut x346, 0x0, x297, x329);
  let mut x347: u32 = 0;
  let mut x348: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x347, &mut x348, x346, x299, x331);
  let mut x349: u32 = 0;
  let mut x350: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x349, &mut x350, x348, x301, x333);
  let mut x351: u32 = 0;
  let mut x352: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x351, &mut x352, x350, x303, x335);
  let mut x353: u32 = 0;
  let mut x354: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x353, &mut x354, x352, x305, x337);
  let mut x355: u32 = 0;
  let mut x356: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x355, &mut x356, x354, x307, x339);
  let mut x357: u32 = 0;
  let mut x358: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x357, &mut x358, x356, x309, x341);
  let mut x359: u32 = 0;
  let mut x360: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x359, &mut x360, x358, x311, x343);
  let mut x361: u32 = 0;
  let mut x362: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x361, &mut x362, x360, ((x312 as u32) + (x288 as u32)), ((x344 as u32) + x316));
  let mut x363: u32 = 0;
  let mut x364: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x363, &mut x364, x5, 0x7a2);
  let mut x365: u32 = 0;
  let mut x366: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x365, &mut x366, x5, 0xe90a1);
  let mut x367: u32 = 0;
  let mut x368: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x367, &mut x368, 0x0, x366, x363);
  let mut x369: u32 = 0;
  let mut x370: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x369, &mut x370, x368, x364, x5);
  let mut x371: u32 = 0;
  let mut x372: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x371, &mut x372, 0x0, x347, x365);
  let mut x373: u32 = 0;
  let mut x374: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x373, &mut x374, x372, x349, x367);
  let mut x375: u32 = 0;
  let mut x376: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x375, &mut x376, x374, x351, x369);
  let mut x377: u32 = 0;
  let mut x378: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x377, &mut x378, x376, x353, (x370 as u32));
  let mut x379: u32 = 0;
  let mut x380: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x379, &mut x380, x378, x355, (0x0 as u32));
  let mut x381: u32 = 0;
  let mut x382: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x381, &mut x382, x380, x357, (0x0 as u32));
  let mut x383: u32 = 0;
  let mut x384: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x383, &mut x384, x382, x359, (0x0 as u32));
  let mut x385: u32 = 0;
  let mut x386: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x385, &mut x386, x384, x361, (0x0 as u32));
  let mut x387: u32 = 0;
  let mut x388: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x387, &mut x388, x371, 0xd2253531);
  let mut x389: u32 = 0;
  let mut x390: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x389, &mut x390, x387, 0xffffffff);
  let mut x391: u32 = 0;
  let mut x392: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x391, &mut x392, x387, 0xffffffff);
  let mut x393: u32 = 0;
  let mut x394: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x393, &mut x394, x387, 0xffffffff);
  let mut x395: u32 = 0;
  let mut x396: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x395, &mut x396, x387, 0xffffffff);
  let mut x397: u32 = 0;
  let mut x398: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x397, &mut x398, x387, 0xffffffff);
  let mut x399: u32 = 0;
  let mut x400: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x399, &mut x400, x387, 0xffffffff);
  let mut x401: u32 = 0;
  let mut x402: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x401, &mut x402, x387, 0xfffffffe);
  let mut x403: u32 = 0;
  let mut x404: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x403, &mut x404, x387, 0xfffffc2f);
  let mut x405: u32 = 0;
  let mut x406: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x405, &mut x406, 0x0, x404, x401);
  let mut x407: u32 = 0;
  let mut x408: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x407, &mut x408, x406, x402, x399);
  let mut x409: u32 = 0;
  let mut x410: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x409, &mut x410, x408, x400, x397);
  let mut x411: u32 = 0;
  let mut x412: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x411, &mut x412, x410, x398, x395);
  let mut x413: u32 = 0;
  let mut x414: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x413, &mut x414, x412, x396, x393);
  let mut x415: u32 = 0;
  let mut x416: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x415, &mut x416, x414, x394, x391);
  let mut x417: u32 = 0;
  let mut x418: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x417, &mut x418, x416, x392, x389);
  let mut x419: u32 = 0;
  let mut x420: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x419, &mut x420, 0x0, x371, x403);
  let mut x421: u32 = 0;
  let mut x422: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x421, &mut x422, x420, x373, x405);
  let mut x423: u32 = 0;
  let mut x424: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x423, &mut x424, x422, x375, x407);
  let mut x425: u32 = 0;
  let mut x426: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x425, &mut x426, x424, x377, x409);
  let mut x427: u32 = 0;
  let mut x428: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x427, &mut x428, x426, x379, x411);
  let mut x429: u32 = 0;
  let mut x430: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x429, &mut x430, x428, x381, x413);
  let mut x431: u32 = 0;
  let mut x432: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x431, &mut x432, x430, x383, x415);
  let mut x433: u32 = 0;
  let mut x434: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x433, &mut x434, x432, x385, x417);
  let mut x435: u32 = 0;
  let mut x436: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x435, &mut x436, x434, ((x386 as u32) + (x362 as u32)), ((x418 as u32) + x390));
  let mut x437: u32 = 0;
  let mut x438: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x437, &mut x438, x6, 0x7a2);
  let mut x439: u32 = 0;
  let mut x440: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x439, &mut x440, x6, 0xe90a1);
  let mut x441: u32 = 0;
  let mut x442: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x441, &mut x442, 0x0, x440, x437);
  let mut x443: u32 = 0;
  let mut x444: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x443, &mut x444, x442, x438, x6);
  let mut x445: u32 = 0;
  let mut x446: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x445, &mut x446, 0x0, x421, x439);
  let mut x447: u32 = 0;
  let mut x448: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x447, &mut x448, x446, x423, x441);
  let mut x449: u32 = 0;
  let mut x450: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x449, &mut x450, x448, x425, x443);
  let mut x451: u32 = 0;
  let mut x452: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x451, &mut x452, x450, x427, (x444 as u32));
  let mut x453: u32 = 0;
  let mut x454: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x453, &mut x454, x452, x429, (0x0 as u32));
  let mut x455: u32 = 0;
  let mut x456: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x455, &mut x456, x454, x431, (0x0 as u32));
  let mut x457: u32 = 0;
  let mut x458: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x457, &mut x458, x456, x433, (0x0 as u32));
  let mut x459: u32 = 0;
  let mut x460: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x459, &mut x460, x458, x435, (0x0 as u32));
  let mut x461: u32 = 0;
  let mut x462: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x461, &mut x462, x445, 0xd2253531);
  let mut x463: u32 = 0;
  let mut x464: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x463, &mut x464, x461, 0xffffffff);
  let mut x465: u32 = 0;
  let mut x466: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x465, &mut x466, x461, 0xffffffff);
  let mut x467: u32 = 0;
  let mut x468: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x467, &mut x468, x461, 0xffffffff);
  let mut x469: u32 = 0;
  let mut x470: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x469, &mut x470, x461, 0xffffffff);
  let mut x471: u32 = 0;
  let mut x472: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x471, &mut x472, x461, 0xffffffff);
  let mut x473: u32 = 0;
  let mut x474: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x473, &mut x474, x461, 0xffffffff);
  let mut x475: u32 = 0;
  let mut x476: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x475, &mut x476, x461, 0xfffffffe);
  let mut x477: u32 = 0;
  let mut x478: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x477, &mut x478, x461, 0xfffffc2f);
  let mut x479: u32 = 0;
  let mut x480: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x479, &mut x480, 0x0, x478, x475);
  let mut x481: u32 = 0;
  let mut x482: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x481, &mut x482, x480, x476, x473);
  let mut x483: u32 = 0;
  let mut x484: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x483, &mut x484, x482, x474, x471);
  let mut x485: u32 = 0;
  let mut x486: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x485, &mut x486, x484, x472, x469);
  let mut x487: u32 = 0;
  let mut x488: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x487, &mut x488, x486, x470, x467);
  let mut x489: u32 = 0;
  let mut x490: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x489, &mut x490, x488, x468, x465);
  let mut x491: u32 = 0;
  let mut x492: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x491, &mut x492, x490, x466, x463);
  let mut x493: u32 = 0;
  let mut x494: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x493, &mut x494, 0x0, x445, x477);
  let mut x495: u32 = 0;
  let mut x496: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x495, &mut x496, x494, x447, x479);
  let mut x497: u32 = 0;
  let mut x498: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x497, &mut x498, x496, x449, x481);
  let mut x499: u32 = 0;
  let mut x500: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x499, &mut x500, x498, x451, x483);
  let mut x501: u32 = 0;
  let mut x502: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x501, &mut x502, x500, x453, x485);
  let mut x503: u32 = 0;
  let mut x504: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x503, &mut x504, x502, x455, x487);
  let mut x505: u32 = 0;
  let mut x506: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x505, &mut x506, x504, x457, x489);
  let mut x507: u32 = 0;
  let mut x508: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x507, &mut x508, x506, x459, x491);
  let mut x509: u32 = 0;
  let mut x510: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x509, &mut x510, x508, ((x460 as u32) + (x436 as u32)), ((x492 as u32) + x464));
  let mut x511: u32 = 0;
  let mut x512: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x511, &mut x512, x7, 0x7a2);
  let mut x513: u32 = 0;
  let mut x514: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x513, &mut x514, x7, 0xe90a1);
  let mut x515: u32 = 0;
  let mut x516: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x515, &mut x516, 0x0, x514, x511);
  let mut x517: u32 = 0;
  let mut x518: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x517, &mut x518, x516, x512, x7);
  let mut x519: u32 = 0;
  let mut x520: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x519, &mut x520, 0x0, x495, x513);
  let mut x521: u32 = 0;
  let mut x522: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x521, &mut x522, x520, x497, x515);
  let mut x523: u32 = 0;
  let mut x524: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x523, &mut x524, x522, x499, x517);
  let mut x525: u32 = 0;
  let mut x526: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x525, &mut x526, x524, x501, (x518 as u32));
  let mut x527: u32 = 0;
  let mut x528: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x527, &mut x528, x526, x503, (0x0 as u32));
  let mut x529: u32 = 0;
  let mut x530: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x529, &mut x530, x528, x505, (0x0 as u32));
  let mut x531: u32 = 0;
  let mut x532: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x531, &mut x532, x530, x507, (0x0 as u32));
  let mut x533: u32 = 0;
  let mut x534: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x533, &mut x534, x532, x509, (0x0 as u32));
  let mut x535: u32 = 0;
  let mut x536: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x535, &mut x536, x519, 0xd2253531);
  let mut x537: u32 = 0;
  let mut x538: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x537, &mut x538, x535, 0xffffffff);
  let mut x539: u32 = 0;
  let mut x540: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x539, &mut x540, x535, 0xffffffff);
  let mut x541: u32 = 0;
  let mut x542: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x541, &mut x542, x535, 0xffffffff);
  let mut x543: u32 = 0;
  let mut x544: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x543, &mut x544, x535, 0xffffffff);
  let mut x545: u32 = 0;
  let mut x546: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x545, &mut x546, x535, 0xffffffff);
  let mut x547: u32 = 0;
  let mut x548: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x547, &mut x548, x535, 0xffffffff);
  let mut x549: u32 = 0;
  let mut x550: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x549, &mut x550, x535, 0xfffffffe);
  let mut x551: u32 = 0;
  let mut x552: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x551, &mut x552, x535, 0xfffffc2f);
  let mut x553: u32 = 0;
  let mut x554: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x553, &mut x554, 0x0, x552, x549);
  let mut x555: u32 = 0;
  let mut x556: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x555, &mut x556, x554, x550, x547);
  let mut x557: u32 = 0;
  let mut x558: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x557, &mut x558, x556, x548, x545);
  let mut x559: u32 = 0;
  let mut x560: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x559, &mut x560, x558, x546, x543);
  let mut x561: u32 = 0;
  let mut x562: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x561, &mut x562, x560, x544, x541);
  let mut x563: u32 = 0;
  let mut x564: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x563, &mut x564, x562, x542, x539);
  let mut x565: u32 = 0;
  let mut x566: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x565, &mut x566, x564, x540, x537);
  let mut x567: u32 = 0;
  let mut x568: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x567, &mut x568, 0x0, x519, x551);
  let mut x569: u32 = 0;
  let mut x570: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x569, &mut x570, x568, x521, x553);
  let mut x571: u32 = 0;
  let mut x572: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x571, &mut x572, x570, x523, x555);
  let mut x573: u32 = 0;
  let mut x574: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x573, &mut x574, x572, x525, x557);
  let mut x575: u32 = 0;
  let mut x576: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x575, &mut x576, x574, x527, x559);
  let mut x577: u32 = 0;
  let mut x578: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x577, &mut x578, x576, x529, x561);
  let mut x579: u32 = 0;
  let mut x580: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x579, &mut x580, x578, x531, x563);
  let mut x581: u32 = 0;
  let mut x582: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x581, &mut x582, x580, x533, x565);
  let mut x583: u32 = 0;
  let mut x584: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x583, &mut x584, x582, ((x534 as u32) + (x510 as u32)), ((x566 as u32) + x538));
  let mut x585: u32 = 0;
  let mut x586: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x585, &mut x586, 0x0, x569, 0xfffffc2f);
  let mut x587: u32 = 0;
  let mut x588: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x587, &mut x588, x586, x571, 0xfffffffe);
  let mut x589: u32 = 0;
  let mut x590: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x589, &mut x590, x588, x573, 0xffffffff);
  let mut x591: u32 = 0;
  let mut x592: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x591, &mut x592, x590, x575, 0xffffffff);
  let mut x593: u32 = 0;
  let mut x594: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x593, &mut x594, x592, x577, 0xffffffff);
  let mut x595: u32 = 0;
  let mut x596: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x595, &mut x596, x594, x579, 0xffffffff);
  let mut x597: u32 = 0;
  let mut x598: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x597, &mut x598, x596, x581, 0xffffffff);
  let mut x599: u32 = 0;
  let mut x600: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x599, &mut x600, x598, x583, 0xffffffff);
  let mut x601: u32 = 0;
  let mut x602: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x601, &mut x602, x600, (x584 as u32), (0x0 as u32));
  let mut x603: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x603, x602, x585, x569);
  let mut x604: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x604, x602, x587, x571);
  let mut x605: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x605, x602, x589, x573);
  let mut x606: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x606, x602, x591, x575);
  let mut x607: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x607, x602, x593, x577);
  let mut x608: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x608, x602, x595, x579);
  let mut x609: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x609, x602, x597, x581);
  let mut x610: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x610, x602, x599, x583);
  out1[0] = x603;
  out1[1] = x604;
  out1[2] = x605;
  out1[3] = x606;
  out1[4] = x607;
  out1[5] = x608;
  out1[6] = x609;
  out1[7] = x610;
}

/// The function fiat_secp256k1_nonzero outputs a single non-zero word if the input is non-zero and zero otherwise.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
#[inline]
pub fn fiat_secp256k1_nonzero(out1: &mut u32, arg1: &[u32; 8]) -> () {
  let x1: u32 = ((arg1[0]) | ((arg1[1]) | ((arg1[2]) | ((arg1[3]) | ((arg1[4]) | ((arg1[5]) | ((arg1[6]) | (arg1[7]))))))));
  *out1 = x1;
}

/// The function fiat_secp256k1_selectznz is a multi-limb conditional select.
///
/// Postconditions:
///   out1 = (if arg1 = 0 then arg2 else arg3)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_secp256k1_selectznz(out1: &mut [u32; 8], arg1: fiat_secp256k1_u1, arg2: &[u32; 8], arg3: &[u32; 8]) -> () {
  let mut x1: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x1, arg1, (arg2[0]), (arg3[0]));
  let mut x2: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x2, arg1, (arg2[1]), (arg3[1]));
  let mut x3: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x3, arg1, (arg2[2]), (arg3[2]));
  let mut x4: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x4, arg1, (arg2[3]), (arg3[3]));
  let mut x5: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x5, arg1, (arg2[4]), (arg3[4]));
  let mut x6: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x6, arg1, (arg2[5]), (arg3[5]));
  let mut x7: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x7, arg1, (arg2[6]), (arg3[6]));
  let mut x8: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x8, arg1, (arg2[7]), (arg3[7]));
  out1[0] = x1;
  out1[1] = x2;
  out1[2] = x3;
  out1[3] = x4;
  out1[4] = x5;
  out1[5] = x6;
  out1[6] = x7;
  out1[7] = x8;
}

/// The function fiat_secp256k1_to_bytes serializes a field element NOT in the Montgomery domain to bytes in little-endian order.
///
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..31]
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
#[inline]
pub fn fiat_secp256k1_to_bytes(out1: &mut [u8; 32], arg1: &[u32; 8]) -> () {
  let x1: u32 = (arg1[7]);
  let x2: u32 = (arg1[6]);
  let x3: u32 = (arg1[5]);
  let x4: u32 = (arg1[4]);
  let x5: u32 = (arg1[3]);
  let x6: u32 = (arg1[2]);
  let x7: u32 = (arg1[1]);
  let x8: u32 = (arg1[0]);
  let x9: u8 = ((x8 & (0xff as u32)) as u8);
  let x10: u32 = (x8 >> 8);
  let x11: u8 = ((x10 & (0xff as u32)) as u8);
  let x12: u32 = (x10 >> 8);
  let x13: u8 = ((x12 & (0xff as u32)) as u8);
  let x14: u8 = ((x12 >> 8) as u8);
  let x15: u8 = ((x7 & (0xff as u32)) as u8);
  let x16: u32 = (x7 >> 8);
  let x17: u8 = ((x16 & (0xff as u32)) as u8);
  let x18: u32 = (x16 >> 8);
  let x19: u8 = ((x18 & (0xff as u32)) as u8);
  let x20: u8 = ((x18 >> 8) as u8);
  let x21: u8 = ((x6 & (0xff as u32)) as u8);
  let x22: u32 = (x6 >> 8);
  let x23: u8 = ((x22 & (0xff as u32)) as u8);
  let x24: u32 = (x22 >> 8);
  let x25: u8 = ((x24 & (0xff as u32)) as u8);
  let x26: u8 = ((x24 >> 8) as u8);
  let x27: u8 = ((x5 & (0xff as u32)) as u8);
  let x28: u32 = (x5 >> 8);
  let x29: u8 = ((x28 & (0xff as u32)) as u8);
  let x30: u32 = (x28 >> 8);
  let x31: u8 = ((x30 & (0xff as u32)) as u8);
  let x32: u8 = ((x30 >> 8) as u8);
  let x33: u8 = ((x4 & (0xff as u32)) as u8);
  let x34: u32 = (x4 >> 8);
  let x35: u8 = ((x34 & (0xff as u32)) as u8);
  let x36: u32 = (x34 >> 8);
  let x37: u8 = ((x36 & (0xff as u32)) as u8);
  let x38: u8 = ((x36 >> 8) as u8);
  let x39: u8 = ((x3 & (0xff as u32)) as u8);
  let x40: u32 = (x3 >> 8);
  let x41: u8 = ((x40 & (0xff as u32)) as u8);
  let x42: u32 = (x40 >> 8);
  let x43: u8 = ((x42 & (0xff as u32)) as u8);
  let x44: u8 = ((x42 >> 8) as u8);
  let x45: u8 = ((x2 & (0xff as u32)) as u8);
  let x46: u32 = (x2 >> 8);
  let x47: u8 = ((x46 & (0xff as u32)) as u8);
  let x48: u32 = (x46 >> 8);
  let x49: u8 = ((x48 & (0xff as u32)) as u8);
  let x50: u8 = ((x48 >> 8) as u8);
  let x51: u8 = ((x1 & (0xff as u32)) as u8);
  let x52: u32 = (x1 >> 8);
  let x53: u8 = ((x52 & (0xff as u32)) as u8);
  let x54: u32 = (x52 >> 8);
  let x55: u8 = ((x54 & (0xff as u32)) as u8);
  let x56: u8 = ((x54 >> 8) as u8);
  out1[0] = x9;
  out1[1] = x11;
  out1[2] = x13;
  out1[3] = x14;
  out1[4] = x15;
  out1[5] = x17;
  out1[6] = x19;
  out1[7] = x20;
  out1[8] = x21;
  out1[9] = x23;
  out1[10] = x25;
  out1[11] = x26;
  out1[12] = x27;
  out1[13] = x29;
  out1[14] = x31;
  out1[15] = x32;
  out1[16] = x33;
  out1[17] = x35;
  out1[18] = x37;
  out1[19] = x38;
  out1[20] = x39;
  out1[21] = x41;
  out1[22] = x43;
  out1[23] = x44;
  out1[24] = x45;
  out1[25] = x47;
  out1[26] = x49;
  out1[27] = x50;
  out1[28] = x51;
  out1[29] = x53;
  out1[30] = x55;
  out1[31] = x56;
}

/// The function fiat_secp256k1_from_bytes deserializes a field element NOT in the Montgomery domain from bytes in little-endian order.
///
/// Preconditions:
///   0 ≤ bytes_eval arg1 < m
/// Postconditions:
///   eval out1 mod m = bytes_eval arg1 mod m
///   0 ≤ eval out1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_secp256k1_from_bytes(out1: &mut [u32; 8], arg1: &[u8; 32]) -> () {
  let x1: u32 = (((arg1[31]) as u32) << 24);
  let x2: u32 = (((arg1[30]) as u32) << 16);
  let x3: u32 = (((arg1[29]) as u32) << 8);
  let x4: u8 = (arg1[28]);
  let x5: u32 = (((arg1[27]) as u32) << 24);
  let x6: u32 = (((arg1[26]) as u32) << 16);
  let x7: u32 = (((arg1[25]) as u32) << 8);
  let x8: u8 = (arg1[24]);
  let x9: u32 = (((arg1[23]) as u32) << 24);
  let x10: u32 = (((arg1[22]) as u32) << 16);
  let x11: u32 = (((arg1[21]) as u32) << 8);
  let x12: u8 = (arg1[20]);
  let x13: u32 = (((arg1[19]) as u32) << 24);
  let x14: u32 = (((arg1[18]) as u32) << 16);
  let x15: u32 = (((arg1[17]) as u32) << 8);
  let x16: u8 = (arg1[16]);
  let x17: u32 = (((arg1[15]) as u32) << 24);
  let x18: u32 = (((arg1[14]) as u32) << 16);
  let x19: u32 = (((arg1[13]) as u32) << 8);
  let x20: u8 = (arg1[12]);
  let x21: u32 = (((arg1[11]) as u32) << 24);
  let x22: u32 = (((arg1[10]) as u32) << 16);
  let x23: u32 = (((arg1[9]) as u32) << 8);
  let x24: u8 = (arg1[8]);
  let x25: u32 = (((arg1[7]) as u32) << 24);
  let x26: u32 = (((arg1[6]) as u32) << 16);
  let x27: u32 = (((arg1[5]) as u32) << 8);
  let x28: u8 = (arg1[4]);
  let x29: u32 = (((arg1[3]) as u32) << 24);
  let x30: u32 = (((arg1[2]) as u32) << 16);
  let x31: u32 = (((arg1[1]) as u32) << 8);
  let x32: u8 = (arg1[0]);
  let x33: u32 = (x31 + (x32 as u32));
  let x34: u32 = (x30 + x33);
  let x35: u32 = (x29 + x34);
  let x36: u32 = (x27 + (x28 as u32));
  let x37: u32 = (x26 + x36);
  let x38: u32 = (x25 + x37);
  let x39: u32 = (x23 + (x24 as u32));
  let x40: u32 = (x22 + x39);
  let x41: u32 = (x21 + x40);
  let x42: u32 = (x19 + (x20 as u32));
  let x43: u32 = (x18 + x42);
  let x44: u32 = (x17 + x43);
  let x45: u32 = (x15 + (x16 as u32));
  let x46: u32 = (x14 + x45);
  let x47: u32 = (x13 + x46);
  let x48: u32 = (x11 + (x12 as u32));
  let x49: u32 = (x10 + x48);
  let x50: u32 = (x9 + x49);
  let x51: u32 = (x7 + (x8 as u32));
  let x52: u32 = (x6 + x51);
  let x53: u32 = (x5 + x52);
  let x54: u32 = (x3 + (x4 as u32));
  let x55: u32 = (x2 + x54);
  let x56: u32 = (x1 + x55);
  out1[0] = x35;
  out1[1] = x38;
  out1[2] = x41;
  out1[3] = x44;
  out1[4] = x47;
  out1[5] = x50;
  out1[6] = x53;
  out1[7] = x56;
}

/// The function fiat_secp256k1_set_one returns the field element one in the Montgomery domain.
///
/// Postconditions:
///   eval (from_montgomery out1) mod m = 1 mod m
///   0 ≤ eval out1 < m
///
#[inline]
pub fn fiat_secp256k1_set_one(out1: &mut fiat_secp256k1_montgomery_domain_field_element) -> () {
  out1[0] = 0x3d1;
  out1[1] = (0x1 as u32);
  out1[2] = (0x0 as u32);
  out1[3] = (0x0 as u32);
  out1[4] = (0x0 as u32);
  out1[5] = (0x0 as u32);
  out1[6] = (0x0 as u32);
  out1[7] = (0x0 as u32);
}

/// The function fiat_secp256k1_msat returns the saturated representation of the prime modulus.
///
/// Postconditions:
///   twos_complement_eval out1 = m
///   0 ≤ eval out1 < m
///
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_secp256k1_msat(out1: &mut [u32; 9]) -> () {
  out1[0] = 0xfffffc2f;
  out1[1] = 0xfffffffe;
  out1[2] = 0xffffffff;
  out1[3] = 0xffffffff;
  out1[4] = 0xffffffff;
  out1[5] = 0xffffffff;
  out1[6] = 0xffffffff;
  out1[7] = 0xffffffff;
  out1[8] = (0x0 as u32);
}

/// The function fiat_secp256k1_sat_from_bytes deserializes a field element NOT in the Montgomery domain from bytes in little-endian order.
///
/// Postconditions:
///   0 ≤ eval arg1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_secp256k1_sat_from_bytes(out1: &mut [u32; 9], arg1: &[u8; 32]) -> () {
  let x1: u32 = (((arg1[31]) as u32) << 24);
  let x2: u32 = (((arg1[30]) as u32) << 16);
  let x3: u32 = (((arg1[29]) as u32) << 8);
  let x4: u8 = (arg1[28]);
  let x5: u32 = (((arg1[27]) as u32) << 24);
  let x6: u32 = (((arg1[26]) as u32) << 16);
  let x7: u32 = (((arg1[25]) as u32) << 8);
  let x8: u8 = (arg1[24]);
  let x9: u32 = (((arg1[23]) as u32) << 24);
  let x10: u32 = (((arg1[22]) as u32) << 16);
  let x11: u32 = (((arg1[21]) as u32) << 8);
  let x12: u8 = (arg1[20]);
  let x13: u32 = (((arg1[19]) as u32) << 24);
  let x14: u32 = (((arg1[18]) as u32) << 16);
  let x15: u32 = (((arg1[17]) as u32) << 8);
  let x16: u8 = (arg1[16]);
  let x17: u32 = (((arg1[15]) as u32) << 24);
  let x18: u32 = (((arg1[14]) as u32) << 16);
  let x19: u32 = (((arg1[13]) as u32) << 8);
  let x20: u8 = (arg1[12]);
  let x21: u32 = (((arg1[11]) as u32) << 24);
  let x22: u32 = (((arg1[10]) as u32) << 16);
  let x23: u32 = (((arg1[9]) as u32) << 8);
  let x24: u8 = (arg1[8]);
  let x25: u32 = (((arg1[7]) as u32) << 24);
  let x26: u32 = (((arg1[6]) as u32) << 16);
  let x27: u32 = (((arg1[5]) as u32) << 8);
  let x28: u8 = (arg1[4]);
  let x29: u32 = (((arg1[3]) as u32) << 24);
  let x30: u32 = (((arg1[2]) as u32) << 16);
  let x31: u32 = (((arg1[1]) as u32) << 8);
  let x32: u8 = (arg1[0]);
  let x33: u32 = (x31 + (x32 as u32));
  let x34: u32 = (x30 + x33);
  let x35: u32 = (x29 + x34);
  let x36: u32 = (x27 + (x28 as u32));
  let x37: u32 = (x26 + x36);
  let x38: u32 = (x25 + x37);
  let x39: u32 = (x23 + (x24 as u32));
  let x40: u32 = (x22 + x39);
  let x41: u32 = (x21 + x40);
  let x42: u32 = (x19 + (x20 as u32));
  let x43: u32 = (x18 + x42);
  let x44: u32 = (x17 + x43);
  let x45: u32 = (x15 + (x16 as u32));
  let x46: u32 = (x14 + x45);
  let x47: u32 = (x13 + x46);
  let x48: u32 = (x11 + (x12 as u32));
  let x49: u32 = (x10 + x48);
  let x50: u32 = (x9 + x49);
  let x51: u32 = (x7 + (x8 as u32));
  let x52: u32 = (x6 + x51);
  let x53: u32 = (x5 + x52);
  let x54: u32 = (x3 + (x4 as u32));
  let x55: u32 = (x2 + x54);
  let x56: u32 = (x1 + x55);
  out1[0] = x35;
  out1[1] = x38;
  out1[2] = x41;
  out1[3] = x44;
  out1[4] = x47;
  out1[5] = x50;
  out1[6] = x53;
  out1[7] = x56;
  out1[8] = (0x0 as u32);
}

/// The function fiat_secp256k1_divstep computes a divstep.
///
/// Preconditions:
///   0 ≤ eval arg4 < m
///   0 ≤ eval arg5 < m
/// Postconditions:
///   out1 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then 1 - arg1 else 1 + arg1)
///   twos_complement_eval out2 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then twos_complement_eval arg3 else twos_complement_eval arg2)
///   twos_complement_eval out3 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then ⌊(twos_complement_eval arg3 - twos_complement_eval arg2) / 2⌋ else ⌊(twos_complement_eval arg3 + (twos_complement_eval arg3 mod 2) * twos_complement_eval arg2) / 2⌋)
///   eval (from_montgomery out4) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (2 * eval (from_montgomery arg5)) mod m else (2 * eval (from_montgomery arg4)) mod m)
///   eval (from_montgomery out5) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (eval (from_montgomery arg4) - eval (from_montgomery arg4)) mod m else (eval (from_montgomery arg5) + (twos_complement_eval arg3 mod 2) * eval (from_montgomery arg4)) mod m)
///   0 ≤ eval out5 < m
///   0 ≤ eval out4 < m
///   0 ≤ eval out2 < m
///   0 ≤ eval out3 < m
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffff]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg5: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out5: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_secp256k1_divstep(out1: &mut u32, out2: &mut [u32; 9], out3: &mut [u32; 9], out4: &mut [u32; 8], out5: &mut [u32; 8], arg1: u32, arg2: &[u32; 9], arg3: &[u32; 9], arg4: &[u32; 8], arg5: &[u32; 8]) -> () {
  let mut x1: u32 = 0;
  let mut x2: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1, &mut x2, 0x0, (!arg1), (0x1 as u32));
  let x3: fiat_secp256k1_u1 = (((x1 >> 31) as fiat_secp256k1_u1) & (((arg3[0]) & (0x1 as u32)) as fiat_secp256k1_u1));
  let mut x4: u32 = 0;
  let mut x5: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x4, &mut x5, 0x0, (!arg1), (0x1 as u32));
  let mut x6: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x6, x3, arg1, x4);
  let mut x7: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x7, x3, (arg2[0]), (arg3[0]));
  let mut x8: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x8, x3, (arg2[1]), (arg3[1]));
  let mut x9: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x9, x3, (arg2[2]), (arg3[2]));
  let mut x10: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x10, x3, (arg2[3]), (arg3[3]));
  let mut x11: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x11, x3, (arg2[4]), (arg3[4]));
  let mut x12: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x12, x3, (arg2[5]), (arg3[5]));
  let mut x13: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x13, x3, (arg2[6]), (arg3[6]));
  let mut x14: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x14, x3, (arg2[7]), (arg3[7]));
  let mut x15: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x15, x3, (arg2[8]), (arg3[8]));
  let mut x16: u32 = 0;
  let mut x17: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x16, &mut x17, 0x0, (0x1 as u32), (!(arg2[0])));
  let mut x18: u32 = 0;
  let mut x19: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x18, &mut x19, x17, (0x0 as u32), (!(arg2[1])));
  let mut x20: u32 = 0;
  let mut x21: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x20, &mut x21, x19, (0x0 as u32), (!(arg2[2])));
  let mut x22: u32 = 0;
  let mut x23: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x22, &mut x23, x21, (0x0 as u32), (!(arg2[3])));
  let mut x24: u32 = 0;
  let mut x25: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x24, &mut x25, x23, (0x0 as u32), (!(arg2[4])));
  let mut x26: u32 = 0;
  let mut x27: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x26, &mut x27, x25, (0x0 as u32), (!(arg2[5])));
  let mut x28: u32 = 0;
  let mut x29: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x28, &mut x29, x27, (0x0 as u32), (!(arg2[6])));
  let mut x30: u32 = 0;
  let mut x31: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x30, &mut x31, x29, (0x0 as u32), (!(arg2[7])));
  let mut x32: u32 = 0;
  let mut x33: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x32, &mut x33, x31, (0x0 as u32), (!(arg2[8])));
  let mut x34: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x34, x3, (arg3[0]), x16);
  let mut x35: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x35, x3, (arg3[1]), x18);
  let mut x36: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x36, x3, (arg3[2]), x20);
  let mut x37: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x37, x3, (arg3[3]), x22);
  let mut x38: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x38, x3, (arg3[4]), x24);
  let mut x39: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x39, x3, (arg3[5]), x26);
  let mut x40: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x40, x3, (arg3[6]), x28);
  let mut x41: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x41, x3, (arg3[7]), x30);
  let mut x42: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x42, x3, (arg3[8]), x32);
  let mut x43: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x43, x3, (arg4[0]), (arg5[0]));
  let mut x44: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x44, x3, (arg4[1]), (arg5[1]));
  let mut x45: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x45, x3, (arg4[2]), (arg5[2]));
  let mut x46: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x46, x3, (arg4[3]), (arg5[3]));
  let mut x47: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x47, x3, (arg4[4]), (arg5[4]));
  let mut x48: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x48, x3, (arg4[5]), (arg5[5]));
  let mut x49: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x49, x3, (arg4[6]), (arg5[6]));
  let mut x50: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x50, x3, (arg4[7]), (arg5[7]));
  let mut x51: u32 = 0;
  let mut x52: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x51, &mut x52, 0x0, x43, x43);
  let mut x53: u32 = 0;
  let mut x54: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x53, &mut x54, x52, x44, x44);
  let mut x55: u32 = 0;
  let mut x56: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x55, &mut x56, x54, x45, x45);
  let mut x57: u32 = 0;
  let mut x58: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x57, &mut x58, x56, x46, x46);
  let mut x59: u32 = 0;
  let mut x60: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x59, &mut x60, x58, x47, x47);
  let mut x61: u32 = 0;
  let mut x62: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x61, &mut x62, x60, x48, x48);
  let mut x63: u32 = 0;
  let mut x64: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x63, &mut x64, x62, x49, x49);
  let mut x65: u32 = 0;
  let mut x66: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x65, &mut x66, x64, x50, x50);
  let mut x67: u32 = 0;
  let mut x68: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x67, &mut x68, 0x0, x51, 0xfffffc2f);
  let mut x69: u32 = 0;
  let mut x70: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x69, &mut x70, x68, x53, 0xfffffffe);
  let mut x71: u32 = 0;
  let mut x72: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x71, &mut x72, x70, x55, 0xffffffff);
  let mut x73: u32 = 0;
  let mut x74: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x73, &mut x74, x72, x57, 0xffffffff);
  let mut x75: u32 = 0;
  let mut x76: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x75, &mut x76, x74, x59, 0xffffffff);
  let mut x77: u32 = 0;
  let mut x78: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x77, &mut x78, x76, x61, 0xffffffff);
  let mut x79: u32 = 0;
  let mut x80: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x79, &mut x80, x78, x63, 0xffffffff);
  let mut x81: u32 = 0;
  let mut x82: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x81, &mut x82, x80, x65, 0xffffffff);
  let mut x83: u32 = 0;
  let mut x84: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x83, &mut x84, x82, (x66 as u32), (0x0 as u32));
  let x85: u32 = (arg4[7]);
  let x86: u32 = (arg4[6]);
  let x87: u32 = (arg4[5]);
  let x88: u32 = (arg4[4]);
  let x89: u32 = (arg4[3]);
  let x90: u32 = (arg4[2]);
  let x91: u32 = (arg4[1]);
  let x92: u32 = (arg4[0]);
  let mut x93: u32 = 0;
  let mut x94: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x93, &mut x94, 0x0, (0x0 as u32), x92);
  let mut x95: u32 = 0;
  let mut x96: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x95, &mut x96, x94, (0x0 as u32), x91);
  let mut x97: u32 = 0;
  let mut x98: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x97, &mut x98, x96, (0x0 as u32), x90);
  let mut x99: u32 = 0;
  let mut x100: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x99, &mut x100, x98, (0x0 as u32), x89);
  let mut x101: u32 = 0;
  let mut x102: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x101, &mut x102, x100, (0x0 as u32), x88);
  let mut x103: u32 = 0;
  let mut x104: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x103, &mut x104, x102, (0x0 as u32), x87);
  let mut x105: u32 = 0;
  let mut x106: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x105, &mut x106, x104, (0x0 as u32), x86);
  let mut x107: u32 = 0;
  let mut x108: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x107, &mut x108, x106, (0x0 as u32), x85);
  let mut x109: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x109, x108, (0x0 as u32), 0xffffffff);
  let mut x110: u32 = 0;
  let mut x111: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x110, &mut x111, 0x0, x93, (x109 & 0xfffffc2f));
  let mut x112: u32 = 0;
  let mut x113: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x112, &mut x113, x111, x95, (x109 & 0xfffffffe));
  let mut x114: u32 = 0;
  let mut x115: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x114, &mut x115, x113, x97, x109);
  let mut x116: u32 = 0;
  let mut x117: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x116, &mut x117, x115, x99, x109);
  let mut x118: u32 = 0;
  let mut x119: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x118, &mut x119, x117, x101, x109);
  let mut x120: u32 = 0;
  let mut x121: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x120, &mut x121, x119, x103, x109);
  let mut x122: u32 = 0;
  let mut x123: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x122, &mut x123, x121, x105, x109);
  let mut x124: u32 = 0;
  let mut x125: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x124, &mut x125, x123, x107, x109);
  let mut x126: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x126, x3, (arg5[0]), x110);
  let mut x127: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x127, x3, (arg5[1]), x112);
  let mut x128: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x128, x3, (arg5[2]), x114);
  let mut x129: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x129, x3, (arg5[3]), x116);
  let mut x130: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x130, x3, (arg5[4]), x118);
  let mut x131: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x131, x3, (arg5[5]), x120);
  let mut x132: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x132, x3, (arg5[6]), x122);
  let mut x133: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x133, x3, (arg5[7]), x124);
  let x134: fiat_secp256k1_u1 = ((x34 & (0x1 as u32)) as fiat_secp256k1_u1);
  let mut x135: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x135, x134, (0x0 as u32), x7);
  let mut x136: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x136, x134, (0x0 as u32), x8);
  let mut x137: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x137, x134, (0x0 as u32), x9);
  let mut x138: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x138, x134, (0x0 as u32), x10);
  let mut x139: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x139, x134, (0x0 as u32), x11);
  let mut x140: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x140, x134, (0x0 as u32), x12);
  let mut x141: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x141, x134, (0x0 as u32), x13);
  let mut x142: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x142, x134, (0x0 as u32), x14);
  let mut x143: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x143, x134, (0x0 as u32), x15);
  let mut x144: u32 = 0;
  let mut x145: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x144, &mut x145, 0x0, x34, x135);
  let mut x146: u32 = 0;
  let mut x147: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x146, &mut x147, x145, x35, x136);
  let mut x148: u32 = 0;
  let mut x149: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x148, &mut x149, x147, x36, x137);
  let mut x150: u32 = 0;
  let mut x151: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x150, &mut x151, x149, x37, x138);
  let mut x152: u32 = 0;
  let mut x153: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x152, &mut x153, x151, x38, x139);
  let mut x154: u32 = 0;
  let mut x155: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x154, &mut x155, x153, x39, x140);
  let mut x156: u32 = 0;
  let mut x157: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x156, &mut x157, x155, x40, x141);
  let mut x158: u32 = 0;
  let mut x159: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x158, &mut x159, x157, x41, x142);
  let mut x160: u32 = 0;
  let mut x161: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x160, &mut x161, x159, x42, x143);
  let mut x162: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x162, x134, (0x0 as u32), x43);
  let mut x163: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x163, x134, (0x0 as u32), x44);
  let mut x164: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x164, x134, (0x0 as u32), x45);
  let mut x165: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x165, x134, (0x0 as u32), x46);
  let mut x166: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x166, x134, (0x0 as u32), x47);
  let mut x167: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x167, x134, (0x0 as u32), x48);
  let mut x168: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x168, x134, (0x0 as u32), x49);
  let mut x169: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x169, x134, (0x0 as u32), x50);
  let mut x170: u32 = 0;
  let mut x171: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x170, &mut x171, 0x0, x126, x162);
  let mut x172: u32 = 0;
  let mut x173: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x172, &mut x173, x171, x127, x163);
  let mut x174: u32 = 0;
  let mut x175: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x174, &mut x175, x173, x128, x164);
  let mut x176: u32 = 0;
  let mut x177: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x176, &mut x177, x175, x129, x165);
  let mut x178: u32 = 0;
  let mut x179: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x178, &mut x179, x177, x130, x166);
  let mut x180: u32 = 0;
  let mut x181: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x180, &mut x181, x179, x131, x167);
  let mut x182: u32 = 0;
  let mut x183: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x182, &mut x183, x181, x132, x168);
  let mut x184: u32 = 0;
  let mut x185: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x184, &mut x185, x183, x133, x169);
  let mut x186: u32 = 0;
  let mut x187: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x186, &mut x187, 0x0, x170, 0xfffffc2f);
  let mut x188: u32 = 0;
  let mut x189: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x188, &mut x189, x187, x172, 0xfffffffe);
  let mut x190: u32 = 0;
  let mut x191: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x190, &mut x191, x189, x174, 0xffffffff);
  let mut x192: u32 = 0;
  let mut x193: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x192, &mut x193, x191, x176, 0xffffffff);
  let mut x194: u32 = 0;
  let mut x195: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x194, &mut x195, x193, x178, 0xffffffff);
  let mut x196: u32 = 0;
  let mut x197: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x196, &mut x197, x195, x180, 0xffffffff);
  let mut x198: u32 = 0;
  let mut x199: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x198, &mut x199, x197, x182, 0xffffffff);
  let mut x200: u32 = 0;
  let mut x201: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x200, &mut x201, x199, x184, 0xffffffff);
  let mut x202: u32 = 0;
  let mut x203: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x202, &mut x203, x201, (x185 as u32), (0x0 as u32));
  let x204: u32 = ((((x6 as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let x205: u32 = ((x144 >> 1) | ((x146 << 31) & 0xffffffff));
  let x206: u32 = ((x146 >> 1) | ((x148 << 31) & 0xffffffff));
  let x207: u32 = ((x148 >> 1) | ((x150 << 31) & 0xffffffff));
  let x208: u32 = ((x150 >> 1) | ((x152 << 31) & 0xffffffff));
  let x209: u32 = ((x152 >> 1) | ((x154 << 31) & 0xffffffff));
  let x210: u32 = ((x154 >> 1) | ((x156 << 31) & 0xffffffff));
  let x211: u32 = ((x156 >> 1) | ((x158 << 31) & 0xffffffff));
  let x212: u32 = ((x158 >> 1) | ((x160 << 31) & 0xffffffff));
  let x213: u32 = ((x160 & 0x80000000) | (x160 >> 1));
  let mut x214: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x214, x84, x67, x51);
  let mut x215: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x215, x84, x69, x53);
  let mut x216: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x216, x84, x71, x55);
  let mut x217: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x217, x84, x73, x57);
  let mut x218: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x218, x84, x75, x59);
  let mut x219: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x219, x84, x77, x61);
  let mut x220: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x220, x84, x79, x63);
  let mut x221: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x221, x84, x81, x65);
  let mut x222: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x222, x203, x186, x170);
  let mut x223: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x223, x203, x188, x172);
  let mut x224: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x224, x203, x190, x174);
  let mut x225: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x225, x203, x192, x176);
  let mut x226: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x226, x203, x194, x178);
  let mut x227: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x227, x203, x196, x180);
  let mut x228: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x228, x203, x198, x182);
  let mut x229: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x229, x203, x200, x184);
  *out1 = x204;
  out2[0] = x7;
  out2[1] = x8;
  out2[2] = x9;
  out2[3] = x10;
  out2[4] = x11;
  out2[5] = x12;
  out2[6] = x13;
  out2[7] = x14;
  out2[8] = x15;
  out3[0] = x205;
  out3[1] = x206;
  out3[2] = x207;
  out3[3] = x208;
  out3[4] = x209;
  out3[5] = x210;
  out3[6] = x211;
  out3[7] = x212;
  out3[8] = x213;
  out4[0] = x214;
  out4[1] = x215;
  out4[2] = x216;
  out4[3] = x217;
  out4[4] = x218;
  out4[5] = x219;
  out4[6] = x220;
  out4[7] = x221;
  out5[0] = x222;
  out5[1] = x223;
  out5[2] = x224;
  out5[3] = x225;
  out5[4] = x226;
  out5[5] = x227;
  out5[6] = x228;
  out5[7] = x229;
}

/// The function fiat_secp256k1_divstep_precomp returns the precomputed value for Bernstein-Yang-inversion (in montgomery form).
///
/// Postconditions:
///   eval (from_montgomery out1) = ⌊(m - 1) / 2⌋^(if ⌊log2 m⌋ + 1 < 46 then ⌊(49 * (⌊log2 m⌋ + 1) + 80) / 17⌋ else ⌊(49 * (⌊log2 m⌋ + 1) + 57) / 17⌋)
///   0 ≤ eval out1 < m
///
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_secp256k1_divstep_precomp(out1: &mut [u32; 8]) -> () {
  out1[0] = 0x8000000;
  out1[1] = (0x0 as u32);
  out1[2] = (0x0 as u32);
  out1[3] = (0x0 as u32);
  out1[4] = (0x0 as u32);
  out1[5] = (0x0 as u32);
  out1[6] = (0x0 as u32);
  out1[7] = (0x0 as u32);
}

/// The function fiat_secp256k1_inner_loop computes a inner_loop.
///
/// Postconditions:
///   0 ≤ eval arg1 < m
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffff]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [0x0 ~> 0xffffffff]
///   out3: [0x0 ~> 0xffffffff]
///   out4: [0x0 ~> 0xffffffff]
///   out5: [0x0 ~> 0xffffffff]
#[inline]
pub fn fiat_secp256k1_inner_loop(out1: &mut u32, out2: &mut u32, out3: &mut u32, out4: &mut u32, out5: &mut u32, arg1: u32, arg2: &[u32; 9], arg3: &[u32; 9]) -> () {
  let x1: u32 = (((((!arg1) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x2: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x2, (((x1 >> 31) as fiat_secp256k1_u1) & (((arg3[0]) & (0x1 as u32)) as fiat_secp256k1_u1)), arg1, (((((!arg1) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x3: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x3, (((x1 >> 31) as fiat_secp256k1_u1) & (((arg3[0]) & (0x1 as u32)) as fiat_secp256k1_u1)), (arg2[0]), (arg3[0]));
  let mut x4: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x4, (((x1 >> 31) as fiat_secp256k1_u1) & (((arg3[0]) & (0x1 as u32)) as fiat_secp256k1_u1)), (arg3[0]), (((((!(arg2[0])) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x5: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_cmovznz_u1(&mut x5, (((x1 >> 31) as fiat_secp256k1_u1) & (((arg3[0]) & (0x1 as u32)) as fiat_secp256k1_u1)), 0x1, 0x0);
  let mut x6: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_cmovznz_u1(&mut x6, (((x1 >> 31) as fiat_secp256k1_u1) & (((arg3[0]) & (0x1 as u32)) as fiat_secp256k1_u1)), 0x0, 0x1);
  let mut x7: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x7, (((x1 >> 31) as fiat_secp256k1_u1) & (((arg3[0]) & (0x1 as u32)) as fiat_secp256k1_u1)), (0x0 as u32), 0xffffffff);
  let mut x8: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_cmovznz_u1(&mut x8, (((x1 >> 31) as fiat_secp256k1_u1) & (((arg3[0]) & (0x1 as u32)) as fiat_secp256k1_u1)), 0x1, 0x0);
  let mut x9: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x9, ((x4 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x3);
  let mut x10: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_cmovznz_u1(&mut x10, ((x4 & (0x1 as u32)) as fiat_secp256k1_u1), 0x0, x5);
  let mut x11: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_cmovznz_u1(&mut x11, ((x4 & (0x1 as u32)) as fiat_secp256k1_u1), 0x0, x6);
  let x12: u32 = (((((!((((0x1 as u64) + (x2 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x13: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x13, (((x12 >> 31) as fiat_secp256k1_u1) & ((((((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x1 as u64) + (x2 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x2 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x14: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x14, (((x12 >> 31) as fiat_secp256k1_u1) & ((((((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x3, ((((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x15: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x15, (((x12 >> 31) as fiat_secp256k1_u1) & ((((((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x3) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x16: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x16, (((x12 >> 31) as fiat_secp256k1_u1) & ((((((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((x5 as u32) + (x5 as u32)), ((((x7 as u64) + (x10 as u64)) & (0xffffffff as u64)) as u32));
  let mut x17: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x17, (((x12 >> 31) as fiat_secp256k1_u1) & ((((((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((x6 as u32) + (x6 as u32)), ((x8 as u32) + (x11 as u32)));
  let mut x18: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x18, (((x12 >> 31) as fiat_secp256k1_u1) & ((((((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x7 as u64) + (x10 as u64)) & (0xffffffff as u64)) as u32), (((((!((x5 as u32) + (x5 as u32))) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x19: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x19, (((x12 >> 31) as fiat_secp256k1_u1) & ((((((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((x8 as u32) + (x11 as u32)), (((((!((x6 as u32) + (x6 as u32))) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x20: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x20, ((x15 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x14);
  let mut x21: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x21, ((x15 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x16);
  let mut x22: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x22, ((x15 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x17);
  let x23: u32 = (((((!((((0x1 as u64) + (x13 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x24: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x24, (((x23 >> 31) as fiat_secp256k1_u1) & ((((((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x1 as u64) + (x13 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x13 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x25: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x25, (((x23 >> 31) as fiat_secp256k1_u1) & ((((((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x14, ((((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x26: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x26, (((x23 >> 31) as fiat_secp256k1_u1) & ((((((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x14) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x27: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x27, (((x23 >> 31) as fiat_secp256k1_u1) & ((((((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x16 as u64) + (x16 as u64)) & (0xffffffff as u64)) as u32), ((((x18 as u64) + (x21 as u64)) & (0xffffffff as u64)) as u32));
  let mut x28: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x28, (((x23 >> 31) as fiat_secp256k1_u1) & ((((((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), (x17 + x17), ((((x19 as u64) + (x22 as u64)) & (0xffffffff as u64)) as u32));
  let mut x29: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x29, (((x23 >> 31) as fiat_secp256k1_u1) & ((((((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x18 as u64) + (x21 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x16 as u64) + (x16 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x30: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x30, (((x23 >> 31) as fiat_secp256k1_u1) & ((((((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x19 as u64) + (x22 as u64)) & (0xffffffff as u64)) as u32), (((((!(x17 + x17)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x31: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x31, ((x26 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x25);
  let mut x32: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x32, ((x26 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x27);
  let mut x33: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x33, ((x26 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x28);
  let x34: u32 = (((((!((((0x1 as u64) + (x24 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x35: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x35, (((x34 >> 31) as fiat_secp256k1_u1) & ((((((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x1 as u64) + (x24 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x24 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x36: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x36, (((x34 >> 31) as fiat_secp256k1_u1) & ((((((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x25, ((((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x37: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x37, (((x34 >> 31) as fiat_secp256k1_u1) & ((((((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x25) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x38: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x38, (((x34 >> 31) as fiat_secp256k1_u1) & ((((((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x27 as u64) + (x27 as u64)) & (0xffffffff as u64)) as u32), ((((x29 as u64) + (x32 as u64)) & (0xffffffff as u64)) as u32));
  let mut x39: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x39, (((x34 >> 31) as fiat_secp256k1_u1) & ((((((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x28 as u64) + (x28 as u64)) & (0xffffffff as u64)) as u32), ((((x30 as u64) + (x33 as u64)) & (0xffffffff as u64)) as u32));
  let mut x40: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x40, (((x34 >> 31) as fiat_secp256k1_u1) & ((((((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x29 as u64) + (x32 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x27 as u64) + (x27 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x41: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x41, (((x34 >> 31) as fiat_secp256k1_u1) & ((((((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x30 as u64) + (x33 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x28 as u64) + (x28 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x42: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x42, ((x37 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x36);
  let mut x43: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x43, ((x37 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x38);
  let mut x44: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x44, ((x37 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x39);
  let x45: u32 = (((((!((((0x1 as u64) + (x35 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x46: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x46, (((x45 >> 31) as fiat_secp256k1_u1) & ((((((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x1 as u64) + (x35 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x35 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x47: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x47, (((x45 >> 31) as fiat_secp256k1_u1) & ((((((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x36, ((((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x48: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x48, (((x45 >> 31) as fiat_secp256k1_u1) & ((((((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x36) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x49: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x49, (((x45 >> 31) as fiat_secp256k1_u1) & ((((((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x38 as u64) + (x38 as u64)) & (0xffffffff as u64)) as u32), ((((x40 as u64) + (x43 as u64)) & (0xffffffff as u64)) as u32));
  let mut x50: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x50, (((x45 >> 31) as fiat_secp256k1_u1) & ((((((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x39 as u64) + (x39 as u64)) & (0xffffffff as u64)) as u32), ((((x41 as u64) + (x44 as u64)) & (0xffffffff as u64)) as u32));
  let mut x51: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x51, (((x45 >> 31) as fiat_secp256k1_u1) & ((((((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x40 as u64) + (x43 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x38 as u64) + (x38 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x52: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x52, (((x45 >> 31) as fiat_secp256k1_u1) & ((((((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x41 as u64) + (x44 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x39 as u64) + (x39 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x53: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x53, ((x48 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x47);
  let mut x54: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x54, ((x48 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x49);
  let mut x55: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x55, ((x48 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x50);
  let x56: u32 = (((((!((((0x1 as u64) + (x46 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x57: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x57, (((x56 >> 31) as fiat_secp256k1_u1) & ((((((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x1 as u64) + (x46 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x46 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x58: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x58, (((x56 >> 31) as fiat_secp256k1_u1) & ((((((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x47, ((((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x59: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x59, (((x56 >> 31) as fiat_secp256k1_u1) & ((((((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x47) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x60: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x60, (((x56 >> 31) as fiat_secp256k1_u1) & ((((((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x49 as u64) + (x49 as u64)) & (0xffffffff as u64)) as u32), ((((x51 as u64) + (x54 as u64)) & (0xffffffff as u64)) as u32));
  let mut x61: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x61, (((x56 >> 31) as fiat_secp256k1_u1) & ((((((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x50 as u64) + (x50 as u64)) & (0xffffffff as u64)) as u32), ((((x52 as u64) + (x55 as u64)) & (0xffffffff as u64)) as u32));
  let mut x62: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x62, (((x56 >> 31) as fiat_secp256k1_u1) & ((((((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x51 as u64) + (x54 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x49 as u64) + (x49 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x63: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x63, (((x56 >> 31) as fiat_secp256k1_u1) & ((((((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x52 as u64) + (x55 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x50 as u64) + (x50 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x64: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x64, ((x59 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x58);
  let mut x65: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x65, ((x59 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x60);
  let mut x66: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x66, ((x59 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x61);
  let x67: u32 = (((((!((((0x1 as u64) + (x57 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x68: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x68, (((x67 >> 31) as fiat_secp256k1_u1) & ((((((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x1 as u64) + (x57 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x57 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x69: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x69, (((x67 >> 31) as fiat_secp256k1_u1) & ((((((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x58, ((((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x70: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x70, (((x67 >> 31) as fiat_secp256k1_u1) & ((((((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x58) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x71: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x71, (((x67 >> 31) as fiat_secp256k1_u1) & ((((((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x60 as u64) + (x60 as u64)) & (0xffffffff as u64)) as u32), ((((x62 as u64) + (x65 as u64)) & (0xffffffff as u64)) as u32));
  let mut x72: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x72, (((x67 >> 31) as fiat_secp256k1_u1) & ((((((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x61 as u64) + (x61 as u64)) & (0xffffffff as u64)) as u32), ((((x63 as u64) + (x66 as u64)) & (0xffffffff as u64)) as u32));
  let mut x73: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x73, (((x67 >> 31) as fiat_secp256k1_u1) & ((((((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x62 as u64) + (x65 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x60 as u64) + (x60 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x74: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x74, (((x67 >> 31) as fiat_secp256k1_u1) & ((((((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x63 as u64) + (x66 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x61 as u64) + (x61 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x75: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x75, ((x70 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x69);
  let mut x76: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x76, ((x70 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x71);
  let mut x77: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x77, ((x70 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x72);
  let x78: u32 = (((((!((((0x1 as u64) + (x68 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x79: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x79, (((x78 >> 31) as fiat_secp256k1_u1) & ((((((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x1 as u64) + (x68 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x68 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x80: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x80, (((x78 >> 31) as fiat_secp256k1_u1) & ((((((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x69, ((((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x81: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x81, (((x78 >> 31) as fiat_secp256k1_u1) & ((((((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x69) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x82: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x82, (((x78 >> 31) as fiat_secp256k1_u1) & ((((((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x71 as u64) + (x71 as u64)) & (0xffffffff as u64)) as u32), ((((x73 as u64) + (x76 as u64)) & (0xffffffff as u64)) as u32));
  let mut x83: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x83, (((x78 >> 31) as fiat_secp256k1_u1) & ((((((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x72 as u64) + (x72 as u64)) & (0xffffffff as u64)) as u32), ((((x74 as u64) + (x77 as u64)) & (0xffffffff as u64)) as u32));
  let mut x84: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x84, (((x78 >> 31) as fiat_secp256k1_u1) & ((((((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x73 as u64) + (x76 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x71 as u64) + (x71 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x85: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x85, (((x78 >> 31) as fiat_secp256k1_u1) & ((((((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x74 as u64) + (x77 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x72 as u64) + (x72 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x86: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x86, ((x81 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x80);
  let mut x87: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x87, ((x81 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x82);
  let mut x88: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x88, ((x81 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x83);
  let x89: u32 = (((((!((((0x1 as u64) + (x79 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x90: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x90, (((x89 >> 31) as fiat_secp256k1_u1) & ((((((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x1 as u64) + (x79 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x79 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x91: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x91, (((x89 >> 31) as fiat_secp256k1_u1) & ((((((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x80, ((((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x92: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x92, (((x89 >> 31) as fiat_secp256k1_u1) & ((((((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x80) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x93: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x93, (((x89 >> 31) as fiat_secp256k1_u1) & ((((((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x82 as u64) + (x82 as u64)) & (0xffffffff as u64)) as u32), ((((x84 as u64) + (x87 as u64)) & (0xffffffff as u64)) as u32));
  let mut x94: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x94, (((x89 >> 31) as fiat_secp256k1_u1) & ((((((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x83 as u64) + (x83 as u64)) & (0xffffffff as u64)) as u32), ((((x85 as u64) + (x88 as u64)) & (0xffffffff as u64)) as u32));
  let mut x95: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x95, (((x89 >> 31) as fiat_secp256k1_u1) & ((((((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x84 as u64) + (x87 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x82 as u64) + (x82 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x96: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x96, (((x89 >> 31) as fiat_secp256k1_u1) & ((((((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x85 as u64) + (x88 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x83 as u64) + (x83 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x97: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x97, ((x92 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x91);
  let mut x98: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x98, ((x92 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x93);
  let mut x99: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x99, ((x92 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x94);
  let x100: u32 = (((((!((((0x1 as u64) + (x90 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x101: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x101, (((x100 >> 31) as fiat_secp256k1_u1) & ((((((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x1 as u64) + (x90 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x90 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x102: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x102, (((x100 >> 31) as fiat_secp256k1_u1) & ((((((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x91, ((((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x103: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x103, (((x100 >> 31) as fiat_secp256k1_u1) & ((((((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x91) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x104: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x104, (((x100 >> 31) as fiat_secp256k1_u1) & ((((((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x93 as u64) + (x93 as u64)) & (0xffffffff as u64)) as u32), ((((x95 as u64) + (x98 as u64)) & (0xffffffff as u64)) as u32));
  let mut x105: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x105, (((x100 >> 31) as fiat_secp256k1_u1) & ((((((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x94 as u64) + (x94 as u64)) & (0xffffffff as u64)) as u32), ((((x96 as u64) + (x99 as u64)) & (0xffffffff as u64)) as u32));
  let mut x106: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x106, (((x100 >> 31) as fiat_secp256k1_u1) & ((((((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x95 as u64) + (x98 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x93 as u64) + (x93 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x107: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x107, (((x100 >> 31) as fiat_secp256k1_u1) & ((((((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x96 as u64) + (x99 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x94 as u64) + (x94 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x108: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x108, ((x103 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x102);
  let mut x109: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x109, ((x103 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x104);
  let mut x110: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x110, ((x103 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x105);
  let x111: u32 = (((((!((((0x1 as u64) + (x101 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x112: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x112, (((x111 >> 31) as fiat_secp256k1_u1) & ((((((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x1 as u64) + (x101 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x101 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x113: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x113, (((x111 >> 31) as fiat_secp256k1_u1) & ((((((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x102, ((((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x114: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x114, (((x111 >> 31) as fiat_secp256k1_u1) & ((((((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x102) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x115: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x115, (((x111 >> 31) as fiat_secp256k1_u1) & ((((((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x104 as u64) + (x104 as u64)) & (0xffffffff as u64)) as u32), ((((x106 as u64) + (x109 as u64)) & (0xffffffff as u64)) as u32));
  let mut x116: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x116, (((x111 >> 31) as fiat_secp256k1_u1) & ((((((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x105 as u64) + (x105 as u64)) & (0xffffffff as u64)) as u32), ((((x107 as u64) + (x110 as u64)) & (0xffffffff as u64)) as u32));
  let mut x117: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x117, (((x111 >> 31) as fiat_secp256k1_u1) & ((((((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x106 as u64) + (x109 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x104 as u64) + (x104 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x118: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x118, (((x111 >> 31) as fiat_secp256k1_u1) & ((((((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x107 as u64) + (x110 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x105 as u64) + (x105 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x119: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x119, ((x114 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x113);
  let mut x120: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x120, ((x114 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x115);
  let mut x121: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x121, ((x114 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x116);
  let x122: u32 = (((((!((((0x1 as u64) + (x112 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x123: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x123, (((x122 >> 31) as fiat_secp256k1_u1) & ((((((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x1 as u64) + (x112 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x112 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x124: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x124, (((x122 >> 31) as fiat_secp256k1_u1) & ((((((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x113, ((((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x125: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x125, (((x122 >> 31) as fiat_secp256k1_u1) & ((((((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x113) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x126: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x126, (((x122 >> 31) as fiat_secp256k1_u1) & ((((((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x115 as u64) + (x115 as u64)) & (0xffffffff as u64)) as u32), ((((x117 as u64) + (x120 as u64)) & (0xffffffff as u64)) as u32));
  let mut x127: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x127, (((x122 >> 31) as fiat_secp256k1_u1) & ((((((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x116 as u64) + (x116 as u64)) & (0xffffffff as u64)) as u32), ((((x118 as u64) + (x121 as u64)) & (0xffffffff as u64)) as u32));
  let mut x128: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x128, (((x122 >> 31) as fiat_secp256k1_u1) & ((((((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x117 as u64) + (x120 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x115 as u64) + (x115 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x129: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x129, (((x122 >> 31) as fiat_secp256k1_u1) & ((((((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x118 as u64) + (x121 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x116 as u64) + (x116 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x130: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x130, ((x125 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x124);
  let mut x131: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x131, ((x125 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x126);
  let mut x132: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x132, ((x125 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x127);
  let x133: u32 = (((((!((((0x1 as u64) + (x123 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x134: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x134, (((x133 >> 31) as fiat_secp256k1_u1) & ((((((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x1 as u64) + (x123 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x123 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x135: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x135, (((x133 >> 31) as fiat_secp256k1_u1) & ((((((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x124, ((((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x136: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x136, (((x133 >> 31) as fiat_secp256k1_u1) & ((((((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x124) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x137: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x137, (((x133 >> 31) as fiat_secp256k1_u1) & ((((((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x126 as u64) + (x126 as u64)) & (0xffffffff as u64)) as u32), ((((x128 as u64) + (x131 as u64)) & (0xffffffff as u64)) as u32));
  let mut x138: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x138, (((x133 >> 31) as fiat_secp256k1_u1) & ((((((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x127 as u64) + (x127 as u64)) & (0xffffffff as u64)) as u32), ((((x129 as u64) + (x132 as u64)) & (0xffffffff as u64)) as u32));
  let mut x139: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x139, (((x133 >> 31) as fiat_secp256k1_u1) & ((((((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x128 as u64) + (x131 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x126 as u64) + (x126 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x140: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x140, (((x133 >> 31) as fiat_secp256k1_u1) & ((((((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x129 as u64) + (x132 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x127 as u64) + (x127 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x141: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x141, ((x136 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x135);
  let mut x142: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x142, ((x136 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x137);
  let mut x143: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x143, ((x136 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x138);
  let x144: u32 = (((((!((((0x1 as u64) + (x134 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x145: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x145, (((x144 >> 31) as fiat_secp256k1_u1) & ((((((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x1 as u64) + (x134 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x134 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x146: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x146, (((x144 >> 31) as fiat_secp256k1_u1) & ((((((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x135, ((((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x147: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x147, (((x144 >> 31) as fiat_secp256k1_u1) & ((((((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x135) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x148: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x148, (((x144 >> 31) as fiat_secp256k1_u1) & ((((((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x137 as u64) + (x137 as u64)) & (0xffffffff as u64)) as u32), ((((x139 as u64) + (x142 as u64)) & (0xffffffff as u64)) as u32));
  let mut x149: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x149, (((x144 >> 31) as fiat_secp256k1_u1) & ((((((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x138 as u64) + (x138 as u64)) & (0xffffffff as u64)) as u32), ((((x140 as u64) + (x143 as u64)) & (0xffffffff as u64)) as u32));
  let mut x150: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x150, (((x144 >> 31) as fiat_secp256k1_u1) & ((((((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x139 as u64) + (x142 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x137 as u64) + (x137 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x151: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x151, (((x144 >> 31) as fiat_secp256k1_u1) & ((((((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x140 as u64) + (x143 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x138 as u64) + (x138 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x152: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x152, ((x147 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x146);
  let mut x153: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x153, ((x147 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x148);
  let mut x154: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x154, ((x147 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x149);
  let x155: u32 = (((((!((((0x1 as u64) + (x145 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x156: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x156, (((x155 >> 31) as fiat_secp256k1_u1) & ((((((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x1 as u64) + (x145 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x145 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x157: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x157, (((x155 >> 31) as fiat_secp256k1_u1) & ((((((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x146, ((((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x158: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x158, (((x155 >> 31) as fiat_secp256k1_u1) & ((((((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x146) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x159: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x159, (((x155 >> 31) as fiat_secp256k1_u1) & ((((((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x148 as u64) + (x148 as u64)) & (0xffffffff as u64)) as u32), ((((x150 as u64) + (x153 as u64)) & (0xffffffff as u64)) as u32));
  let mut x160: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x160, (((x155 >> 31) as fiat_secp256k1_u1) & ((((((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x149 as u64) + (x149 as u64)) & (0xffffffff as u64)) as u32), ((((x151 as u64) + (x154 as u64)) & (0xffffffff as u64)) as u32));
  let mut x161: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x161, (((x155 >> 31) as fiat_secp256k1_u1) & ((((((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x150 as u64) + (x153 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x148 as u64) + (x148 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x162: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x162, (((x155 >> 31) as fiat_secp256k1_u1) & ((((((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x151 as u64) + (x154 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x149 as u64) + (x149 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x163: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x163, ((x158 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x157);
  let mut x164: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x164, ((x158 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x159);
  let mut x165: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x165, ((x158 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x160);
  let x166: u32 = (((((!((((0x1 as u64) + (x156 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x167: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x167, (((x166 >> 31) as fiat_secp256k1_u1) & ((((((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x1 as u64) + (x156 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x156 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x168: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x168, (((x166 >> 31) as fiat_secp256k1_u1) & ((((((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x157, ((((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x169: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x169, (((x166 >> 31) as fiat_secp256k1_u1) & ((((((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x157) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x170: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x170, (((x166 >> 31) as fiat_secp256k1_u1) & ((((((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x159 as u64) + (x159 as u64)) & (0xffffffff as u64)) as u32), ((((x161 as u64) + (x164 as u64)) & (0xffffffff as u64)) as u32));
  let mut x171: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x171, (((x166 >> 31) as fiat_secp256k1_u1) & ((((((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x160 as u64) + (x160 as u64)) & (0xffffffff as u64)) as u32), ((((x162 as u64) + (x165 as u64)) & (0xffffffff as u64)) as u32));
  let mut x172: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x172, (((x166 >> 31) as fiat_secp256k1_u1) & ((((((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x161 as u64) + (x164 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x159 as u64) + (x159 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x173: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x173, (((x166 >> 31) as fiat_secp256k1_u1) & ((((((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x162 as u64) + (x165 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x160 as u64) + (x160 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x174: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x174, ((x169 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x168);
  let mut x175: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x175, ((x169 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x170);
  let mut x176: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x176, ((x169 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x171);
  let x177: u32 = (((((!((((0x1 as u64) + (x167 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x178: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x178, (((x177 >> 31) as fiat_secp256k1_u1) & ((((((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x1 as u64) + (x167 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x167 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x179: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x179, (((x177 >> 31) as fiat_secp256k1_u1) & ((((((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x168, ((((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x180: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x180, (((x177 >> 31) as fiat_secp256k1_u1) & ((((((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x168) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x181: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x181, (((x177 >> 31) as fiat_secp256k1_u1) & ((((((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x170 as u64) + (x170 as u64)) & (0xffffffff as u64)) as u32), ((((x172 as u64) + (x175 as u64)) & (0xffffffff as u64)) as u32));
  let mut x182: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x182, (((x177 >> 31) as fiat_secp256k1_u1) & ((((((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x171 as u64) + (x171 as u64)) & (0xffffffff as u64)) as u32), ((((x173 as u64) + (x176 as u64)) & (0xffffffff as u64)) as u32));
  let mut x183: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x183, (((x177 >> 31) as fiat_secp256k1_u1) & ((((((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x172 as u64) + (x175 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x170 as u64) + (x170 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x184: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x184, (((x177 >> 31) as fiat_secp256k1_u1) & ((((((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x173 as u64) + (x176 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x171 as u64) + (x171 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x185: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x185, ((x180 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x179);
  let mut x186: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x186, ((x180 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x181);
  let mut x187: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x187, ((x180 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x182);
  let x188: u32 = (((((!((((0x1 as u64) + (x178 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x189: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x189, (((x188 >> 31) as fiat_secp256k1_u1) & ((((((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x1 as u64) + (x178 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x178 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x190: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x190, (((x188 >> 31) as fiat_secp256k1_u1) & ((((((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x179, ((((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x191: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x191, (((x188 >> 31) as fiat_secp256k1_u1) & ((((((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x179) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x192: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x192, (((x188 >> 31) as fiat_secp256k1_u1) & ((((((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x181 as u64) + (x181 as u64)) & (0xffffffff as u64)) as u32), ((((x183 as u64) + (x186 as u64)) & (0xffffffff as u64)) as u32));
  let mut x193: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x193, (((x188 >> 31) as fiat_secp256k1_u1) & ((((((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x182 as u64) + (x182 as u64)) & (0xffffffff as u64)) as u32), ((((x184 as u64) + (x187 as u64)) & (0xffffffff as u64)) as u32));
  let mut x194: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x194, (((x188 >> 31) as fiat_secp256k1_u1) & ((((((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x183 as u64) + (x186 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x181 as u64) + (x181 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x195: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x195, (((x188 >> 31) as fiat_secp256k1_u1) & ((((((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x184 as u64) + (x187 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x182 as u64) + (x182 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x196: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x196, ((x191 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x190);
  let mut x197: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x197, ((x191 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x192);
  let mut x198: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x198, ((x191 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x193);
  let x199: u32 = (((((!((((0x1 as u64) + (x189 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x200: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x200, (((x199 >> 31) as fiat_secp256k1_u1) & ((((((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x1 as u64) + (x189 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x189 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x201: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x201, (((x199 >> 31) as fiat_secp256k1_u1) & ((((((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x190, ((((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x202: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x202, (((x199 >> 31) as fiat_secp256k1_u1) & ((((((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x190) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x203: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x203, (((x199 >> 31) as fiat_secp256k1_u1) & ((((((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x192 as u64) + (x192 as u64)) & (0xffffffff as u64)) as u32), ((((x194 as u64) + (x197 as u64)) & (0xffffffff as u64)) as u32));
  let mut x204: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x204, (((x199 >> 31) as fiat_secp256k1_u1) & ((((((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x193 as u64) + (x193 as u64)) & (0xffffffff as u64)) as u32), ((((x195 as u64) + (x198 as u64)) & (0xffffffff as u64)) as u32));
  let mut x205: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x205, (((x199 >> 31) as fiat_secp256k1_u1) & ((((((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x194 as u64) + (x197 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x192 as u64) + (x192 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x206: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x206, (((x199 >> 31) as fiat_secp256k1_u1) & ((((((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x195 as u64) + (x198 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x193 as u64) + (x193 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x207: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x207, ((x202 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x201);
  let mut x208: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x208, ((x202 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x203);
  let mut x209: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x209, ((x202 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x204);
  let x210: u32 = (((((!((((0x1 as u64) + (x200 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x211: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x211, (((x210 >> 31) as fiat_secp256k1_u1) & ((((((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x1 as u64) + (x200 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x200 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x212: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x212, (((x210 >> 31) as fiat_secp256k1_u1) & ((((((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x201, ((((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x213: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x213, (((x210 >> 31) as fiat_secp256k1_u1) & ((((((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x201) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x214: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x214, (((x210 >> 31) as fiat_secp256k1_u1) & ((((((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x203 as u64) + (x203 as u64)) & (0xffffffff as u64)) as u32), ((((x205 as u64) + (x208 as u64)) & (0xffffffff as u64)) as u32));
  let mut x215: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x215, (((x210 >> 31) as fiat_secp256k1_u1) & ((((((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x204 as u64) + (x204 as u64)) & (0xffffffff as u64)) as u32), ((((x206 as u64) + (x209 as u64)) & (0xffffffff as u64)) as u32));
  let mut x216: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x216, (((x210 >> 31) as fiat_secp256k1_u1) & ((((((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x205 as u64) + (x208 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x203 as u64) + (x203 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x217: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x217, (((x210 >> 31) as fiat_secp256k1_u1) & ((((((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x206 as u64) + (x209 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x204 as u64) + (x204 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x218: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x218, ((x213 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x212);
  let mut x219: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x219, ((x213 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x214);
  let mut x220: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x220, ((x213 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x215);
  let x221: u32 = (((((!((((0x1 as u64) + (x211 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x222: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x222, (((x221 >> 31) as fiat_secp256k1_u1) & ((((((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x1 as u64) + (x211 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x211 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x223: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x223, (((x221 >> 31) as fiat_secp256k1_u1) & ((((((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x212, ((((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x224: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x224, (((x221 >> 31) as fiat_secp256k1_u1) & ((((((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x212) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x225: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x225, (((x221 >> 31) as fiat_secp256k1_u1) & ((((((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x214 as u64) + (x214 as u64)) & (0xffffffff as u64)) as u32), ((((x216 as u64) + (x219 as u64)) & (0xffffffff as u64)) as u32));
  let mut x226: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x226, (((x221 >> 31) as fiat_secp256k1_u1) & ((((((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x215 as u64) + (x215 as u64)) & (0xffffffff as u64)) as u32), ((((x217 as u64) + (x220 as u64)) & (0xffffffff as u64)) as u32));
  let mut x227: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x227, (((x221 >> 31) as fiat_secp256k1_u1) & ((((((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x216 as u64) + (x219 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x214 as u64) + (x214 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x228: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x228, (((x221 >> 31) as fiat_secp256k1_u1) & ((((((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x217 as u64) + (x220 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x215 as u64) + (x215 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x229: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x229, ((x224 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x223);
  let mut x230: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x230, ((x224 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x225);
  let mut x231: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x231, ((x224 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x226);
  let x232: u32 = (((((!((((0x1 as u64) + (x222 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x233: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x233, (((x232 >> 31) as fiat_secp256k1_u1) & ((((((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x1 as u64) + (x222 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x222 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x234: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x234, (((x232 >> 31) as fiat_secp256k1_u1) & ((((((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x223, ((((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x235: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x235, (((x232 >> 31) as fiat_secp256k1_u1) & ((((((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x223) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x236: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x236, (((x232 >> 31) as fiat_secp256k1_u1) & ((((((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x225 as u64) + (x225 as u64)) & (0xffffffff as u64)) as u32), ((((x227 as u64) + (x230 as u64)) & (0xffffffff as u64)) as u32));
  let mut x237: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x237, (((x232 >> 31) as fiat_secp256k1_u1) & ((((((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x226 as u64) + (x226 as u64)) & (0xffffffff as u64)) as u32), ((((x228 as u64) + (x231 as u64)) & (0xffffffff as u64)) as u32));
  let mut x238: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x238, (((x232 >> 31) as fiat_secp256k1_u1) & ((((((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x227 as u64) + (x230 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x225 as u64) + (x225 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x239: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x239, (((x232 >> 31) as fiat_secp256k1_u1) & ((((((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x228 as u64) + (x231 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x226 as u64) + (x226 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x240: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x240, ((x235 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x234);
  let mut x241: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x241, ((x235 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x236);
  let mut x242: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x242, ((x235 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x237);
  let x243: u32 = (((((!((((0x1 as u64) + (x233 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x244: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x244, (((x243 >> 31) as fiat_secp256k1_u1) & ((((((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x1 as u64) + (x233 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x233 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x245: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x245, (((x243 >> 31) as fiat_secp256k1_u1) & ((((((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x234, ((((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x246: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x246, (((x243 >> 31) as fiat_secp256k1_u1) & ((((((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x234) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x247: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x247, (((x243 >> 31) as fiat_secp256k1_u1) & ((((((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x236 as u64) + (x236 as u64)) & (0xffffffff as u64)) as u32), ((((x238 as u64) + (x241 as u64)) & (0xffffffff as u64)) as u32));
  let mut x248: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x248, (((x243 >> 31) as fiat_secp256k1_u1) & ((((((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x237 as u64) + (x237 as u64)) & (0xffffffff as u64)) as u32), ((((x239 as u64) + (x242 as u64)) & (0xffffffff as u64)) as u32));
  let mut x249: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x249, (((x243 >> 31) as fiat_secp256k1_u1) & ((((((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x238 as u64) + (x241 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x236 as u64) + (x236 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x250: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x250, (((x243 >> 31) as fiat_secp256k1_u1) & ((((((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x239 as u64) + (x242 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x237 as u64) + (x237 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x251: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x251, ((x246 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x245);
  let mut x252: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x252, ((x246 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x247);
  let mut x253: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x253, ((x246 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x248);
  let x254: u32 = (((((!((((0x1 as u64) + (x244 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x255: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x255, (((x254 >> 31) as fiat_secp256k1_u1) & ((((((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x1 as u64) + (x244 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x244 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x256: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x256, (((x254 >> 31) as fiat_secp256k1_u1) & ((((((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x245, ((((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x257: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x257, (((x254 >> 31) as fiat_secp256k1_u1) & ((((((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x245) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x258: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x258, (((x254 >> 31) as fiat_secp256k1_u1) & ((((((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x247 as u64) + (x247 as u64)) & (0xffffffff as u64)) as u32), ((((x249 as u64) + (x252 as u64)) & (0xffffffff as u64)) as u32));
  let mut x259: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x259, (((x254 >> 31) as fiat_secp256k1_u1) & ((((((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x248 as u64) + (x248 as u64)) & (0xffffffff as u64)) as u32), ((((x250 as u64) + (x253 as u64)) & (0xffffffff as u64)) as u32));
  let mut x260: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x260, (((x254 >> 31) as fiat_secp256k1_u1) & ((((((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x249 as u64) + (x252 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x247 as u64) + (x247 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x261: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x261, (((x254 >> 31) as fiat_secp256k1_u1) & ((((((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x250 as u64) + (x253 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x248 as u64) + (x248 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x262: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x262, ((x257 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x256);
  let mut x263: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x263, ((x257 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x258);
  let mut x264: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x264, ((x257 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x259);
  let x265: u32 = (((((!((((0x1 as u64) + (x255 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x266: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x266, (((x265 >> 31) as fiat_secp256k1_u1) & ((((((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x1 as u64) + (x255 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x255 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x267: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x267, (((x265 >> 31) as fiat_secp256k1_u1) & ((((((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x256, ((((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x268: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x268, (((x265 >> 31) as fiat_secp256k1_u1) & ((((((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x256) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x269: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x269, (((x265 >> 31) as fiat_secp256k1_u1) & ((((((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x258 as u64) + (x258 as u64)) & (0xffffffff as u64)) as u32), ((((x260 as u64) + (x263 as u64)) & (0xffffffff as u64)) as u32));
  let mut x270: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x270, (((x265 >> 31) as fiat_secp256k1_u1) & ((((((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x259 as u64) + (x259 as u64)) & (0xffffffff as u64)) as u32), ((((x261 as u64) + (x264 as u64)) & (0xffffffff as u64)) as u32));
  let mut x271: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x271, (((x265 >> 31) as fiat_secp256k1_u1) & ((((((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x260 as u64) + (x263 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x258 as u64) + (x258 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x272: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x272, (((x265 >> 31) as fiat_secp256k1_u1) & ((((((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x261 as u64) + (x264 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x259 as u64) + (x259 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x273: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x273, ((x268 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x267);
  let mut x274: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x274, ((x268 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x269);
  let mut x275: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x275, ((x268 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x270);
  let x276: u32 = (((((!((((0x1 as u64) + (x266 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x277: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x277, (((x276 >> 31) as fiat_secp256k1_u1) & ((((((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x1 as u64) + (x266 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x266 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x278: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x278, (((x276 >> 31) as fiat_secp256k1_u1) & ((((((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x267, ((((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x279: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x279, (((x276 >> 31) as fiat_secp256k1_u1) & ((((((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x267) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x280: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x280, (((x276 >> 31) as fiat_secp256k1_u1) & ((((((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x269 as u64) + (x269 as u64)) & (0xffffffff as u64)) as u32), ((((x271 as u64) + (x274 as u64)) & (0xffffffff as u64)) as u32));
  let mut x281: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x281, (((x276 >> 31) as fiat_secp256k1_u1) & ((((((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x270 as u64) + (x270 as u64)) & (0xffffffff as u64)) as u32), ((((x272 as u64) + (x275 as u64)) & (0xffffffff as u64)) as u32));
  let mut x282: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x282, (((x276 >> 31) as fiat_secp256k1_u1) & ((((((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x271 as u64) + (x274 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x269 as u64) + (x269 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x283: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x283, (((x276 >> 31) as fiat_secp256k1_u1) & ((((((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x272 as u64) + (x275 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x270 as u64) + (x270 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x284: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x284, ((x279 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x278);
  let mut x285: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x285, ((x279 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x280);
  let mut x286: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x286, ((x279 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x281);
  let x287: u32 = (((((!((((0x1 as u64) + (x277 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x288: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x288, (((x287 >> 31) as fiat_secp256k1_u1) & ((((((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x1 as u64) + (x277 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x277 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x289: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x289, (((x287 >> 31) as fiat_secp256k1_u1) & ((((((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x278, ((((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x290: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x290, (((x287 >> 31) as fiat_secp256k1_u1) & ((((((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x278) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x291: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x291, (((x287 >> 31) as fiat_secp256k1_u1) & ((((((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x280 as u64) + (x280 as u64)) & (0xffffffff as u64)) as u32), ((((x282 as u64) + (x285 as u64)) & (0xffffffff as u64)) as u32));
  let mut x292: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x292, (((x287 >> 31) as fiat_secp256k1_u1) & ((((((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x281 as u64) + (x281 as u64)) & (0xffffffff as u64)) as u32), ((((x283 as u64) + (x286 as u64)) & (0xffffffff as u64)) as u32));
  let mut x293: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x293, (((x287 >> 31) as fiat_secp256k1_u1) & ((((((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x282 as u64) + (x285 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x280 as u64) + (x280 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x294: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x294, (((x287 >> 31) as fiat_secp256k1_u1) & ((((((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x283 as u64) + (x286 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x281 as u64) + (x281 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x295: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x295, ((x290 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x289);
  let mut x296: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x296, ((x290 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x291);
  let mut x297: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x297, ((x290 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x292);
  let x298: u32 = (((((!((((0x1 as u64) + (x288 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x299: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x299, (((x298 >> 31) as fiat_secp256k1_u1) & ((((((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x1 as u64) + (x288 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x288 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x300: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x300, (((x298 >> 31) as fiat_secp256k1_u1) & ((((((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x289, ((((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x301: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x301, (((x298 >> 31) as fiat_secp256k1_u1) & ((((((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x289) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x302: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x302, (((x298 >> 31) as fiat_secp256k1_u1) & ((((((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x291 as u64) + (x291 as u64)) & (0xffffffff as u64)) as u32), ((((x293 as u64) + (x296 as u64)) & (0xffffffff as u64)) as u32));
  let mut x303: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x303, (((x298 >> 31) as fiat_secp256k1_u1) & ((((((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x292 as u64) + (x292 as u64)) & (0xffffffff as u64)) as u32), ((((x294 as u64) + (x297 as u64)) & (0xffffffff as u64)) as u32));
  let mut x304: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x304, (((x298 >> 31) as fiat_secp256k1_u1) & ((((((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x293 as u64) + (x296 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x291 as u64) + (x291 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x305: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x305, (((x298 >> 31) as fiat_secp256k1_u1) & ((((((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x294 as u64) + (x297 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x292 as u64) + (x292 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x306: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x306, ((x301 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x300);
  let mut x307: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x307, ((x301 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x302);
  let mut x308: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x308, ((x301 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x303);
  let x309: u32 = (((((!((((0x1 as u64) + (x299 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x310: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x310, (((x309 >> 31) as fiat_secp256k1_u1) & ((((((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x1 as u64) + (x299 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x299 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x311: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x311, (((x309 >> 31) as fiat_secp256k1_u1) & ((((((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x300, ((((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x312: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x312, (((x309 >> 31) as fiat_secp256k1_u1) & ((((((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x300) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x313: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x313, (((x309 >> 31) as fiat_secp256k1_u1) & ((((((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x302 as u64) + (x302 as u64)) & (0xffffffff as u64)) as u32), ((((x304 as u64) + (x307 as u64)) & (0xffffffff as u64)) as u32));
  let mut x314: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x314, (((x309 >> 31) as fiat_secp256k1_u1) & ((((((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x303 as u64) + (x303 as u64)) & (0xffffffff as u64)) as u32), ((((x305 as u64) + (x308 as u64)) & (0xffffffff as u64)) as u32));
  let mut x315: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x315, (((x309 >> 31) as fiat_secp256k1_u1) & ((((((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x304 as u64) + (x307 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x302 as u64) + (x302 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x316: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x316, (((x309 >> 31) as fiat_secp256k1_u1) & ((((((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x305 as u64) + (x308 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x303 as u64) + (x303 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x317: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x317, ((x312 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x311);
  let mut x318: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x318, ((x312 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x313);
  let mut x319: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x319, ((x312 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x314);
  let x320: u32 = (((((!((((0x1 as u64) + (x310 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x321: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x321, (((x320 >> 31) as fiat_secp256k1_u1) & ((((((((x312 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x312 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x1 as u64) + (x310 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x310 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x322: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x322, (((x320 >> 31) as fiat_secp256k1_u1) & ((((((((x312 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x312 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x312 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x312 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x311) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x323: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x323, (((x320 >> 31) as fiat_secp256k1_u1) & ((((((((x312 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x312 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x313 as u64) + (x313 as u64)) & (0xffffffff as u64)) as u32), ((((x315 as u64) + (x318 as u64)) & (0xffffffff as u64)) as u32));
  let mut x324: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x324, (((x320 >> 31) as fiat_secp256k1_u1) & ((((((((x312 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x312 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x314 as u64) + (x314 as u64)) & (0xffffffff as u64)) as u32), ((((x316 as u64) + (x319 as u64)) & (0xffffffff as u64)) as u32));
  let mut x325: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x325, (((x320 >> 31) as fiat_secp256k1_u1) & ((((((((x312 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x312 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x315 as u64) + (x318 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x313 as u64) + (x313 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x326: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x326, (((x320 >> 31) as fiat_secp256k1_u1) & ((((((((x312 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x312 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x316 as u64) + (x319 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x314 as u64) + (x314 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x327: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x327, ((x322 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x323);
  let mut x328: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x328, ((x322 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x324);
  let x329: u32 = ((((0x1 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32);
  let x330: u32 = ((((x323 as u64) + (x323 as u64)) & (0xffffffff as u64)) as u32);
  let x331: u32 = ((((x324 as u64) + (x324 as u64)) & (0xffffffff as u64)) as u32);
  let x332: u32 = ((((x325 as u64) + (x327 as u64)) & (0xffffffff as u64)) as u32);
  let x333: u32 = ((((x326 as u64) + (x328 as u64)) & (0xffffffff as u64)) as u32);
  *out1 = x329;
  *out2 = x330;
  *out3 = x331;
  *out4 = x332;
  *out5 = x333;
}

/// The function fiat_secp256k1_inner_loop_hd computes a inner_loop_hd.
///
/// Postconditions:
///   0 ≤ eval arg1 < m
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffff]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [0x0 ~> 0xffffffff]
///   out3: [0x0 ~> 0xffffffff]
///   out4: [0x0 ~> 0xffffffff]
///   out5: [0x0 ~> 0xffffffff]
#[inline]
pub fn fiat_secp256k1_inner_loop_hd(out1: &mut u32, out2: &mut u32, out3: &mut u32, out4: &mut u32, out5: &mut u32, arg1: u32, arg2: &[u32; 9], arg3: &[u32; 9]) -> () {
  let x1: u32 = (((((!arg1) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x2: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x2, (((x1 >> 31) as fiat_secp256k1_u1) & (((arg3[0]) & (0x1 as u32)) as fiat_secp256k1_u1)), arg1, (((((!arg1) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x3: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x3, (((x1 >> 31) as fiat_secp256k1_u1) & (((arg3[0]) & (0x1 as u32)) as fiat_secp256k1_u1)), (arg2[0]), (arg3[0]));
  let mut x4: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x4, (((x1 >> 31) as fiat_secp256k1_u1) & (((arg3[0]) & (0x1 as u32)) as fiat_secp256k1_u1)), (arg3[0]), (((((!(arg2[0])) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x5: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_cmovznz_u1(&mut x5, (((x1 >> 31) as fiat_secp256k1_u1) & (((arg3[0]) & (0x1 as u32)) as fiat_secp256k1_u1)), 0x1, 0x0);
  let mut x6: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_cmovznz_u1(&mut x6, (((x1 >> 31) as fiat_secp256k1_u1) & (((arg3[0]) & (0x1 as u32)) as fiat_secp256k1_u1)), 0x0, 0x1);
  let mut x7: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x7, (((x1 >> 31) as fiat_secp256k1_u1) & (((arg3[0]) & (0x1 as u32)) as fiat_secp256k1_u1)), (0x0 as u32), 0xffffffff);
  let mut x8: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_cmovznz_u1(&mut x8, (((x1 >> 31) as fiat_secp256k1_u1) & (((arg3[0]) & (0x1 as u32)) as fiat_secp256k1_u1)), 0x1, 0x0);
  let mut x9: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x9, ((x4 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x3);
  let mut x10: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_cmovznz_u1(&mut x10, ((x4 & (0x1 as u32)) as fiat_secp256k1_u1), 0x0, x5);
  let mut x11: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_cmovznz_u1(&mut x11, ((x4 & (0x1 as u32)) as fiat_secp256k1_u1), 0x0, x6);
  let x12: u32 = (((((!((((0x2 as u64) + (x2 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x13: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x13, (((x12 >> 31) as fiat_secp256k1_u1) & ((((((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x2 as u64) + (x2 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x2 as u64) + (x2 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x14: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x14, (((x12 >> 31) as fiat_secp256k1_u1) & ((((((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x3, ((((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x15: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x15, (((x12 >> 31) as fiat_secp256k1_u1) & ((((((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x3) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x16: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x16, (((x12 >> 31) as fiat_secp256k1_u1) & ((((((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((x5 as u32) + (x5 as u32)), ((((x7 as u64) + (x10 as u64)) & (0xffffffff as u64)) as u32));
  let mut x17: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x17, (((x12 >> 31) as fiat_secp256k1_u1) & ((((((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((x6 as u32) + (x6 as u32)), ((x8 as u32) + (x11 as u32)));
  let mut x18: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x18, (((x12 >> 31) as fiat_secp256k1_u1) & ((((((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x7 as u64) + (x10 as u64)) & (0xffffffff as u64)) as u32), (((((!((x5 as u32) + (x5 as u32))) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x19: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x19, (((x12 >> 31) as fiat_secp256k1_u1) & ((((((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((x8 as u32) + (x11 as u32)), (((((!((x6 as u32) + (x6 as u32))) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x20: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x20, ((x15 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x14);
  let mut x21: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x21, ((x15 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x16);
  let mut x22: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x22, ((x15 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x17);
  let x23: u32 = (((((!((((0x2 as u64) + (x13 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x24: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x24, (((x23 >> 31) as fiat_secp256k1_u1) & ((((((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x2 as u64) + (x13 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x2 as u64) + (x13 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x25: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x25, (((x23 >> 31) as fiat_secp256k1_u1) & ((((((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x14, ((((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x26: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x26, (((x23 >> 31) as fiat_secp256k1_u1) & ((((((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x14) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x27: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x27, (((x23 >> 31) as fiat_secp256k1_u1) & ((((((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x16 as u64) + (x16 as u64)) & (0xffffffff as u64)) as u32), ((((x18 as u64) + (x21 as u64)) & (0xffffffff as u64)) as u32));
  let mut x28: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x28, (((x23 >> 31) as fiat_secp256k1_u1) & ((((((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), (x17 + x17), ((((x19 as u64) + (x22 as u64)) & (0xffffffff as u64)) as u32));
  let mut x29: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x29, (((x23 >> 31) as fiat_secp256k1_u1) & ((((((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x18 as u64) + (x21 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x16 as u64) + (x16 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x30: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x30, (((x23 >> 31) as fiat_secp256k1_u1) & ((((((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x15 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x19 as u64) + (x22 as u64)) & (0xffffffff as u64)) as u32), (((((!(x17 + x17)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x31: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x31, ((x26 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x25);
  let mut x32: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x32, ((x26 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x27);
  let mut x33: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x33, ((x26 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x28);
  let x34: u32 = (((((!((((0x2 as u64) + (x24 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x35: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x35, (((x34 >> 31) as fiat_secp256k1_u1) & ((((((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x2 as u64) + (x24 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x2 as u64) + (x24 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x36: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x36, (((x34 >> 31) as fiat_secp256k1_u1) & ((((((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x25, ((((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x37: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x37, (((x34 >> 31) as fiat_secp256k1_u1) & ((((((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x25) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x38: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x38, (((x34 >> 31) as fiat_secp256k1_u1) & ((((((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x27 as u64) + (x27 as u64)) & (0xffffffff as u64)) as u32), ((((x29 as u64) + (x32 as u64)) & (0xffffffff as u64)) as u32));
  let mut x39: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x39, (((x34 >> 31) as fiat_secp256k1_u1) & ((((((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x28 as u64) + (x28 as u64)) & (0xffffffff as u64)) as u32), ((((x30 as u64) + (x33 as u64)) & (0xffffffff as u64)) as u32));
  let mut x40: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x40, (((x34 >> 31) as fiat_secp256k1_u1) & ((((((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x29 as u64) + (x32 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x27 as u64) + (x27 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x41: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x41, (((x34 >> 31) as fiat_secp256k1_u1) & ((((((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x26 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x30 as u64) + (x33 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x28 as u64) + (x28 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x42: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x42, ((x37 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x36);
  let mut x43: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x43, ((x37 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x38);
  let mut x44: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x44, ((x37 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x39);
  let x45: u32 = (((((!((((0x2 as u64) + (x35 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x46: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x46, (((x45 >> 31) as fiat_secp256k1_u1) & ((((((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x2 as u64) + (x35 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x2 as u64) + (x35 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x47: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x47, (((x45 >> 31) as fiat_secp256k1_u1) & ((((((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x36, ((((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x48: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x48, (((x45 >> 31) as fiat_secp256k1_u1) & ((((((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x36) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x49: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x49, (((x45 >> 31) as fiat_secp256k1_u1) & ((((((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x38 as u64) + (x38 as u64)) & (0xffffffff as u64)) as u32), ((((x40 as u64) + (x43 as u64)) & (0xffffffff as u64)) as u32));
  let mut x50: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x50, (((x45 >> 31) as fiat_secp256k1_u1) & ((((((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x39 as u64) + (x39 as u64)) & (0xffffffff as u64)) as u32), ((((x41 as u64) + (x44 as u64)) & (0xffffffff as u64)) as u32));
  let mut x51: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x51, (((x45 >> 31) as fiat_secp256k1_u1) & ((((((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x40 as u64) + (x43 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x38 as u64) + (x38 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x52: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x52, (((x45 >> 31) as fiat_secp256k1_u1) & ((((((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x37 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x41 as u64) + (x44 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x39 as u64) + (x39 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x53: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x53, ((x48 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x47);
  let mut x54: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x54, ((x48 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x49);
  let mut x55: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x55, ((x48 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x50);
  let x56: u32 = (((((!((((0x2 as u64) + (x46 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x57: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x57, (((x56 >> 31) as fiat_secp256k1_u1) & ((((((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x2 as u64) + (x46 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x2 as u64) + (x46 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x58: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x58, (((x56 >> 31) as fiat_secp256k1_u1) & ((((((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x47, ((((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x59: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x59, (((x56 >> 31) as fiat_secp256k1_u1) & ((((((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x47) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x60: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x60, (((x56 >> 31) as fiat_secp256k1_u1) & ((((((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x49 as u64) + (x49 as u64)) & (0xffffffff as u64)) as u32), ((((x51 as u64) + (x54 as u64)) & (0xffffffff as u64)) as u32));
  let mut x61: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x61, (((x56 >> 31) as fiat_secp256k1_u1) & ((((((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x50 as u64) + (x50 as u64)) & (0xffffffff as u64)) as u32), ((((x52 as u64) + (x55 as u64)) & (0xffffffff as u64)) as u32));
  let mut x62: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x62, (((x56 >> 31) as fiat_secp256k1_u1) & ((((((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x51 as u64) + (x54 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x49 as u64) + (x49 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x63: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x63, (((x56 >> 31) as fiat_secp256k1_u1) & ((((((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x48 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x52 as u64) + (x55 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x50 as u64) + (x50 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x64: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x64, ((x59 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x58);
  let mut x65: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x65, ((x59 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x60);
  let mut x66: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x66, ((x59 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x61);
  let x67: u32 = (((((!((((0x2 as u64) + (x57 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x68: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x68, (((x67 >> 31) as fiat_secp256k1_u1) & ((((((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x2 as u64) + (x57 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x2 as u64) + (x57 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x69: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x69, (((x67 >> 31) as fiat_secp256k1_u1) & ((((((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x58, ((((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x70: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x70, (((x67 >> 31) as fiat_secp256k1_u1) & ((((((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x58) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x71: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x71, (((x67 >> 31) as fiat_secp256k1_u1) & ((((((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x60 as u64) + (x60 as u64)) & (0xffffffff as u64)) as u32), ((((x62 as u64) + (x65 as u64)) & (0xffffffff as u64)) as u32));
  let mut x72: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x72, (((x67 >> 31) as fiat_secp256k1_u1) & ((((((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x61 as u64) + (x61 as u64)) & (0xffffffff as u64)) as u32), ((((x63 as u64) + (x66 as u64)) & (0xffffffff as u64)) as u32));
  let mut x73: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x73, (((x67 >> 31) as fiat_secp256k1_u1) & ((((((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x62 as u64) + (x65 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x60 as u64) + (x60 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x74: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x74, (((x67 >> 31) as fiat_secp256k1_u1) & ((((((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x59 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x63 as u64) + (x66 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x61 as u64) + (x61 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x75: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x75, ((x70 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x69);
  let mut x76: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x76, ((x70 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x71);
  let mut x77: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x77, ((x70 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x72);
  let x78: u32 = (((((!((((0x2 as u64) + (x68 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x79: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x79, (((x78 >> 31) as fiat_secp256k1_u1) & ((((((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x2 as u64) + (x68 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x2 as u64) + (x68 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x80: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x80, (((x78 >> 31) as fiat_secp256k1_u1) & ((((((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x69, ((((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x81: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x81, (((x78 >> 31) as fiat_secp256k1_u1) & ((((((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x69) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x82: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x82, (((x78 >> 31) as fiat_secp256k1_u1) & ((((((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x71 as u64) + (x71 as u64)) & (0xffffffff as u64)) as u32), ((((x73 as u64) + (x76 as u64)) & (0xffffffff as u64)) as u32));
  let mut x83: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x83, (((x78 >> 31) as fiat_secp256k1_u1) & ((((((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x72 as u64) + (x72 as u64)) & (0xffffffff as u64)) as u32), ((((x74 as u64) + (x77 as u64)) & (0xffffffff as u64)) as u32));
  let mut x84: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x84, (((x78 >> 31) as fiat_secp256k1_u1) & ((((((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x73 as u64) + (x76 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x71 as u64) + (x71 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x85: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x85, (((x78 >> 31) as fiat_secp256k1_u1) & ((((((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x70 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x74 as u64) + (x77 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x72 as u64) + (x72 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x86: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x86, ((x81 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x80);
  let mut x87: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x87, ((x81 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x82);
  let mut x88: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x88, ((x81 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x83);
  let x89: u32 = (((((!((((0x2 as u64) + (x79 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x90: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x90, (((x89 >> 31) as fiat_secp256k1_u1) & ((((((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x2 as u64) + (x79 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x2 as u64) + (x79 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x91: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x91, (((x89 >> 31) as fiat_secp256k1_u1) & ((((((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x80, ((((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x92: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x92, (((x89 >> 31) as fiat_secp256k1_u1) & ((((((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x80) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x93: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x93, (((x89 >> 31) as fiat_secp256k1_u1) & ((((((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x82 as u64) + (x82 as u64)) & (0xffffffff as u64)) as u32), ((((x84 as u64) + (x87 as u64)) & (0xffffffff as u64)) as u32));
  let mut x94: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x94, (((x89 >> 31) as fiat_secp256k1_u1) & ((((((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x83 as u64) + (x83 as u64)) & (0xffffffff as u64)) as u32), ((((x85 as u64) + (x88 as u64)) & (0xffffffff as u64)) as u32));
  let mut x95: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x95, (((x89 >> 31) as fiat_secp256k1_u1) & ((((((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x84 as u64) + (x87 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x82 as u64) + (x82 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x96: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x96, (((x89 >> 31) as fiat_secp256k1_u1) & ((((((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x81 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x85 as u64) + (x88 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x83 as u64) + (x83 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x97: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x97, ((x92 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x91);
  let mut x98: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x98, ((x92 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x93);
  let mut x99: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x99, ((x92 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x94);
  let x100: u32 = (((((!((((0x2 as u64) + (x90 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x101: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x101, (((x100 >> 31) as fiat_secp256k1_u1) & ((((((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x2 as u64) + (x90 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x2 as u64) + (x90 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x102: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x102, (((x100 >> 31) as fiat_secp256k1_u1) & ((((((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x91, ((((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x103: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x103, (((x100 >> 31) as fiat_secp256k1_u1) & ((((((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x91) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x104: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x104, (((x100 >> 31) as fiat_secp256k1_u1) & ((((((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x93 as u64) + (x93 as u64)) & (0xffffffff as u64)) as u32), ((((x95 as u64) + (x98 as u64)) & (0xffffffff as u64)) as u32));
  let mut x105: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x105, (((x100 >> 31) as fiat_secp256k1_u1) & ((((((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x94 as u64) + (x94 as u64)) & (0xffffffff as u64)) as u32), ((((x96 as u64) + (x99 as u64)) & (0xffffffff as u64)) as u32));
  let mut x106: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x106, (((x100 >> 31) as fiat_secp256k1_u1) & ((((((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x95 as u64) + (x98 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x93 as u64) + (x93 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x107: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x107, (((x100 >> 31) as fiat_secp256k1_u1) & ((((((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x92 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x96 as u64) + (x99 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x94 as u64) + (x94 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x108: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x108, ((x103 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x102);
  let mut x109: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x109, ((x103 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x104);
  let mut x110: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x110, ((x103 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x105);
  let x111: u32 = (((((!((((0x2 as u64) + (x101 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x112: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x112, (((x111 >> 31) as fiat_secp256k1_u1) & ((((((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x2 as u64) + (x101 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x2 as u64) + (x101 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x113: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x113, (((x111 >> 31) as fiat_secp256k1_u1) & ((((((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x102, ((((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x114: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x114, (((x111 >> 31) as fiat_secp256k1_u1) & ((((((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x102) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x115: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x115, (((x111 >> 31) as fiat_secp256k1_u1) & ((((((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x104 as u64) + (x104 as u64)) & (0xffffffff as u64)) as u32), ((((x106 as u64) + (x109 as u64)) & (0xffffffff as u64)) as u32));
  let mut x116: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x116, (((x111 >> 31) as fiat_secp256k1_u1) & ((((((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x105 as u64) + (x105 as u64)) & (0xffffffff as u64)) as u32), ((((x107 as u64) + (x110 as u64)) & (0xffffffff as u64)) as u32));
  let mut x117: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x117, (((x111 >> 31) as fiat_secp256k1_u1) & ((((((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x106 as u64) + (x109 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x104 as u64) + (x104 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x118: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x118, (((x111 >> 31) as fiat_secp256k1_u1) & ((((((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x103 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x107 as u64) + (x110 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x105 as u64) + (x105 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x119: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x119, ((x114 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x113);
  let mut x120: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x120, ((x114 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x115);
  let mut x121: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x121, ((x114 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x116);
  let x122: u32 = (((((!((((0x2 as u64) + (x112 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x123: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x123, (((x122 >> 31) as fiat_secp256k1_u1) & ((((((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x2 as u64) + (x112 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x2 as u64) + (x112 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x124: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x124, (((x122 >> 31) as fiat_secp256k1_u1) & ((((((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x113, ((((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x125: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x125, (((x122 >> 31) as fiat_secp256k1_u1) & ((((((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x113) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x126: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x126, (((x122 >> 31) as fiat_secp256k1_u1) & ((((((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x115 as u64) + (x115 as u64)) & (0xffffffff as u64)) as u32), ((((x117 as u64) + (x120 as u64)) & (0xffffffff as u64)) as u32));
  let mut x127: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x127, (((x122 >> 31) as fiat_secp256k1_u1) & ((((((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x116 as u64) + (x116 as u64)) & (0xffffffff as u64)) as u32), ((((x118 as u64) + (x121 as u64)) & (0xffffffff as u64)) as u32));
  let mut x128: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x128, (((x122 >> 31) as fiat_secp256k1_u1) & ((((((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x117 as u64) + (x120 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x115 as u64) + (x115 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x129: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x129, (((x122 >> 31) as fiat_secp256k1_u1) & ((((((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x114 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x118 as u64) + (x121 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x116 as u64) + (x116 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x130: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x130, ((x125 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x124);
  let mut x131: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x131, ((x125 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x126);
  let mut x132: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x132, ((x125 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x127);
  let x133: u32 = (((((!((((0x2 as u64) + (x123 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x134: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x134, (((x133 >> 31) as fiat_secp256k1_u1) & ((((((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x2 as u64) + (x123 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x2 as u64) + (x123 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x135: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x135, (((x133 >> 31) as fiat_secp256k1_u1) & ((((((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x124, ((((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x136: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x136, (((x133 >> 31) as fiat_secp256k1_u1) & ((((((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x124) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x137: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x137, (((x133 >> 31) as fiat_secp256k1_u1) & ((((((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x126 as u64) + (x126 as u64)) & (0xffffffff as u64)) as u32), ((((x128 as u64) + (x131 as u64)) & (0xffffffff as u64)) as u32));
  let mut x138: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x138, (((x133 >> 31) as fiat_secp256k1_u1) & ((((((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x127 as u64) + (x127 as u64)) & (0xffffffff as u64)) as u32), ((((x129 as u64) + (x132 as u64)) & (0xffffffff as u64)) as u32));
  let mut x139: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x139, (((x133 >> 31) as fiat_secp256k1_u1) & ((((((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x128 as u64) + (x131 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x126 as u64) + (x126 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x140: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x140, (((x133 >> 31) as fiat_secp256k1_u1) & ((((((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x125 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x129 as u64) + (x132 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x127 as u64) + (x127 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x141: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x141, ((x136 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x135);
  let mut x142: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x142, ((x136 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x137);
  let mut x143: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x143, ((x136 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x138);
  let x144: u32 = (((((!((((0x2 as u64) + (x134 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x145: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x145, (((x144 >> 31) as fiat_secp256k1_u1) & ((((((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x2 as u64) + (x134 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x2 as u64) + (x134 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x146: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x146, (((x144 >> 31) as fiat_secp256k1_u1) & ((((((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x135, ((((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x147: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x147, (((x144 >> 31) as fiat_secp256k1_u1) & ((((((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x135) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x148: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x148, (((x144 >> 31) as fiat_secp256k1_u1) & ((((((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x137 as u64) + (x137 as u64)) & (0xffffffff as u64)) as u32), ((((x139 as u64) + (x142 as u64)) & (0xffffffff as u64)) as u32));
  let mut x149: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x149, (((x144 >> 31) as fiat_secp256k1_u1) & ((((((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x138 as u64) + (x138 as u64)) & (0xffffffff as u64)) as u32), ((((x140 as u64) + (x143 as u64)) & (0xffffffff as u64)) as u32));
  let mut x150: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x150, (((x144 >> 31) as fiat_secp256k1_u1) & ((((((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x139 as u64) + (x142 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x137 as u64) + (x137 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x151: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x151, (((x144 >> 31) as fiat_secp256k1_u1) & ((((((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x136 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x140 as u64) + (x143 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x138 as u64) + (x138 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x152: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x152, ((x147 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x146);
  let mut x153: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x153, ((x147 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x148);
  let mut x154: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x154, ((x147 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x149);
  let x155: u32 = (((((!((((0x2 as u64) + (x145 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x156: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x156, (((x155 >> 31) as fiat_secp256k1_u1) & ((((((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x2 as u64) + (x145 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x2 as u64) + (x145 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x157: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x157, (((x155 >> 31) as fiat_secp256k1_u1) & ((((((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x146, ((((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x158: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x158, (((x155 >> 31) as fiat_secp256k1_u1) & ((((((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x146) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x159: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x159, (((x155 >> 31) as fiat_secp256k1_u1) & ((((((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x148 as u64) + (x148 as u64)) & (0xffffffff as u64)) as u32), ((((x150 as u64) + (x153 as u64)) & (0xffffffff as u64)) as u32));
  let mut x160: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x160, (((x155 >> 31) as fiat_secp256k1_u1) & ((((((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x149 as u64) + (x149 as u64)) & (0xffffffff as u64)) as u32), ((((x151 as u64) + (x154 as u64)) & (0xffffffff as u64)) as u32));
  let mut x161: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x161, (((x155 >> 31) as fiat_secp256k1_u1) & ((((((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x150 as u64) + (x153 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x148 as u64) + (x148 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x162: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x162, (((x155 >> 31) as fiat_secp256k1_u1) & ((((((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x147 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x151 as u64) + (x154 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x149 as u64) + (x149 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x163: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x163, ((x158 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x157);
  let mut x164: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x164, ((x158 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x159);
  let mut x165: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x165, ((x158 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x160);
  let x166: u32 = (((((!((((0x2 as u64) + (x156 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x167: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x167, (((x166 >> 31) as fiat_secp256k1_u1) & ((((((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x2 as u64) + (x156 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x2 as u64) + (x156 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x168: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x168, (((x166 >> 31) as fiat_secp256k1_u1) & ((((((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x157, ((((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x169: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x169, (((x166 >> 31) as fiat_secp256k1_u1) & ((((((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x157) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x170: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x170, (((x166 >> 31) as fiat_secp256k1_u1) & ((((((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x159 as u64) + (x159 as u64)) & (0xffffffff as u64)) as u32), ((((x161 as u64) + (x164 as u64)) & (0xffffffff as u64)) as u32));
  let mut x171: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x171, (((x166 >> 31) as fiat_secp256k1_u1) & ((((((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x160 as u64) + (x160 as u64)) & (0xffffffff as u64)) as u32), ((((x162 as u64) + (x165 as u64)) & (0xffffffff as u64)) as u32));
  let mut x172: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x172, (((x166 >> 31) as fiat_secp256k1_u1) & ((((((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x161 as u64) + (x164 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x159 as u64) + (x159 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x173: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x173, (((x166 >> 31) as fiat_secp256k1_u1) & ((((((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x158 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x162 as u64) + (x165 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x160 as u64) + (x160 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x174: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x174, ((x169 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x168);
  let mut x175: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x175, ((x169 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x170);
  let mut x176: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x176, ((x169 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x171);
  let x177: u32 = (((((!((((0x2 as u64) + (x167 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x178: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x178, (((x177 >> 31) as fiat_secp256k1_u1) & ((((((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x2 as u64) + (x167 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x2 as u64) + (x167 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x179: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x179, (((x177 >> 31) as fiat_secp256k1_u1) & ((((((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x168, ((((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x180: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x180, (((x177 >> 31) as fiat_secp256k1_u1) & ((((((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x168) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x181: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x181, (((x177 >> 31) as fiat_secp256k1_u1) & ((((((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x170 as u64) + (x170 as u64)) & (0xffffffff as u64)) as u32), ((((x172 as u64) + (x175 as u64)) & (0xffffffff as u64)) as u32));
  let mut x182: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x182, (((x177 >> 31) as fiat_secp256k1_u1) & ((((((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x171 as u64) + (x171 as u64)) & (0xffffffff as u64)) as u32), ((((x173 as u64) + (x176 as u64)) & (0xffffffff as u64)) as u32));
  let mut x183: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x183, (((x177 >> 31) as fiat_secp256k1_u1) & ((((((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x172 as u64) + (x175 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x170 as u64) + (x170 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x184: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x184, (((x177 >> 31) as fiat_secp256k1_u1) & ((((((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x169 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x173 as u64) + (x176 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x171 as u64) + (x171 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x185: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x185, ((x180 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x179);
  let mut x186: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x186, ((x180 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x181);
  let mut x187: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x187, ((x180 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x182);
  let x188: u32 = (((((!((((0x2 as u64) + (x178 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x189: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x189, (((x188 >> 31) as fiat_secp256k1_u1) & ((((((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x2 as u64) + (x178 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x2 as u64) + (x178 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x190: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x190, (((x188 >> 31) as fiat_secp256k1_u1) & ((((((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x179, ((((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x191: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x191, (((x188 >> 31) as fiat_secp256k1_u1) & ((((((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x179) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x192: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x192, (((x188 >> 31) as fiat_secp256k1_u1) & ((((((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x181 as u64) + (x181 as u64)) & (0xffffffff as u64)) as u32), ((((x183 as u64) + (x186 as u64)) & (0xffffffff as u64)) as u32));
  let mut x193: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x193, (((x188 >> 31) as fiat_secp256k1_u1) & ((((((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x182 as u64) + (x182 as u64)) & (0xffffffff as u64)) as u32), ((((x184 as u64) + (x187 as u64)) & (0xffffffff as u64)) as u32));
  let mut x194: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x194, (((x188 >> 31) as fiat_secp256k1_u1) & ((((((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x183 as u64) + (x186 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x181 as u64) + (x181 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x195: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x195, (((x188 >> 31) as fiat_secp256k1_u1) & ((((((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x180 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x184 as u64) + (x187 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x182 as u64) + (x182 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x196: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x196, ((x191 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x190);
  let mut x197: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x197, ((x191 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x192);
  let mut x198: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x198, ((x191 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x193);
  let x199: u32 = (((((!((((0x2 as u64) + (x189 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x200: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x200, (((x199 >> 31) as fiat_secp256k1_u1) & ((((((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x2 as u64) + (x189 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x2 as u64) + (x189 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x201: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x201, (((x199 >> 31) as fiat_secp256k1_u1) & ((((((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x190, ((((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x202: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x202, (((x199 >> 31) as fiat_secp256k1_u1) & ((((((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x190) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x203: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x203, (((x199 >> 31) as fiat_secp256k1_u1) & ((((((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x192 as u64) + (x192 as u64)) & (0xffffffff as u64)) as u32), ((((x194 as u64) + (x197 as u64)) & (0xffffffff as u64)) as u32));
  let mut x204: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x204, (((x199 >> 31) as fiat_secp256k1_u1) & ((((((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x193 as u64) + (x193 as u64)) & (0xffffffff as u64)) as u32), ((((x195 as u64) + (x198 as u64)) & (0xffffffff as u64)) as u32));
  let mut x205: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x205, (((x199 >> 31) as fiat_secp256k1_u1) & ((((((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x194 as u64) + (x197 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x192 as u64) + (x192 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x206: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x206, (((x199 >> 31) as fiat_secp256k1_u1) & ((((((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x191 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x195 as u64) + (x198 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x193 as u64) + (x193 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x207: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x207, ((x202 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x201);
  let mut x208: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x208, ((x202 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x203);
  let mut x209: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x209, ((x202 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x204);
  let x210: u32 = (((((!((((0x2 as u64) + (x200 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x211: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x211, (((x210 >> 31) as fiat_secp256k1_u1) & ((((((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x2 as u64) + (x200 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x2 as u64) + (x200 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x212: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x212, (((x210 >> 31) as fiat_secp256k1_u1) & ((((((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x201, ((((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x213: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x213, (((x210 >> 31) as fiat_secp256k1_u1) & ((((((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x201) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x214: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x214, (((x210 >> 31) as fiat_secp256k1_u1) & ((((((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x203 as u64) + (x203 as u64)) & (0xffffffff as u64)) as u32), ((((x205 as u64) + (x208 as u64)) & (0xffffffff as u64)) as u32));
  let mut x215: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x215, (((x210 >> 31) as fiat_secp256k1_u1) & ((((((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x204 as u64) + (x204 as u64)) & (0xffffffff as u64)) as u32), ((((x206 as u64) + (x209 as u64)) & (0xffffffff as u64)) as u32));
  let mut x216: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x216, (((x210 >> 31) as fiat_secp256k1_u1) & ((((((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x205 as u64) + (x208 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x203 as u64) + (x203 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x217: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x217, (((x210 >> 31) as fiat_secp256k1_u1) & ((((((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x202 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x206 as u64) + (x209 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x204 as u64) + (x204 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x218: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x218, ((x213 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x212);
  let mut x219: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x219, ((x213 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x214);
  let mut x220: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x220, ((x213 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x215);
  let x221: u32 = (((((!((((0x2 as u64) + (x211 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x222: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x222, (((x221 >> 31) as fiat_secp256k1_u1) & ((((((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x2 as u64) + (x211 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x2 as u64) + (x211 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x223: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x223, (((x221 >> 31) as fiat_secp256k1_u1) & ((((((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x212, ((((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x224: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x224, (((x221 >> 31) as fiat_secp256k1_u1) & ((((((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x212) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x225: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x225, (((x221 >> 31) as fiat_secp256k1_u1) & ((((((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x214 as u64) + (x214 as u64)) & (0xffffffff as u64)) as u32), ((((x216 as u64) + (x219 as u64)) & (0xffffffff as u64)) as u32));
  let mut x226: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x226, (((x221 >> 31) as fiat_secp256k1_u1) & ((((((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x215 as u64) + (x215 as u64)) & (0xffffffff as u64)) as u32), ((((x217 as u64) + (x220 as u64)) & (0xffffffff as u64)) as u32));
  let mut x227: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x227, (((x221 >> 31) as fiat_secp256k1_u1) & ((((((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x216 as u64) + (x219 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x214 as u64) + (x214 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x228: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x228, (((x221 >> 31) as fiat_secp256k1_u1) & ((((((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x213 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x217 as u64) + (x220 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x215 as u64) + (x215 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x229: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x229, ((x224 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x223);
  let mut x230: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x230, ((x224 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x225);
  let mut x231: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x231, ((x224 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x226);
  let x232: u32 = (((((!((((0x2 as u64) + (x222 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x233: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x233, (((x232 >> 31) as fiat_secp256k1_u1) & ((((((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x2 as u64) + (x222 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x2 as u64) + (x222 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x234: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x234, (((x232 >> 31) as fiat_secp256k1_u1) & ((((((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x223, ((((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x235: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x235, (((x232 >> 31) as fiat_secp256k1_u1) & ((((((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x223) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x236: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x236, (((x232 >> 31) as fiat_secp256k1_u1) & ((((((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x225 as u64) + (x225 as u64)) & (0xffffffff as u64)) as u32), ((((x227 as u64) + (x230 as u64)) & (0xffffffff as u64)) as u32));
  let mut x237: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x237, (((x232 >> 31) as fiat_secp256k1_u1) & ((((((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x226 as u64) + (x226 as u64)) & (0xffffffff as u64)) as u32), ((((x228 as u64) + (x231 as u64)) & (0xffffffff as u64)) as u32));
  let mut x238: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x238, (((x232 >> 31) as fiat_secp256k1_u1) & ((((((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x227 as u64) + (x230 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x225 as u64) + (x225 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x239: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x239, (((x232 >> 31) as fiat_secp256k1_u1) & ((((((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x224 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x228 as u64) + (x231 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x226 as u64) + (x226 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x240: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x240, ((x235 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x234);
  let mut x241: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x241, ((x235 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x236);
  let mut x242: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x242, ((x235 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x237);
  let x243: u32 = (((((!((((0x2 as u64) + (x233 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x244: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x244, (((x243 >> 31) as fiat_secp256k1_u1) & ((((((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x2 as u64) + (x233 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x2 as u64) + (x233 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x245: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x245, (((x243 >> 31) as fiat_secp256k1_u1) & ((((((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x234, ((((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x246: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x246, (((x243 >> 31) as fiat_secp256k1_u1) & ((((((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x234) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x247: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x247, (((x243 >> 31) as fiat_secp256k1_u1) & ((((((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x236 as u64) + (x236 as u64)) & (0xffffffff as u64)) as u32), ((((x238 as u64) + (x241 as u64)) & (0xffffffff as u64)) as u32));
  let mut x248: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x248, (((x243 >> 31) as fiat_secp256k1_u1) & ((((((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x237 as u64) + (x237 as u64)) & (0xffffffff as u64)) as u32), ((((x239 as u64) + (x242 as u64)) & (0xffffffff as u64)) as u32));
  let mut x249: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x249, (((x243 >> 31) as fiat_secp256k1_u1) & ((((((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x238 as u64) + (x241 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x236 as u64) + (x236 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x250: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x250, (((x243 >> 31) as fiat_secp256k1_u1) & ((((((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x235 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x239 as u64) + (x242 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x237 as u64) + (x237 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x251: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x251, ((x246 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x245);
  let mut x252: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x252, ((x246 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x247);
  let mut x253: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x253, ((x246 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x248);
  let x254: u32 = (((((!((((0x2 as u64) + (x244 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x255: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x255, (((x254 >> 31) as fiat_secp256k1_u1) & ((((((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x2 as u64) + (x244 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x2 as u64) + (x244 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x256: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x256, (((x254 >> 31) as fiat_secp256k1_u1) & ((((((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x245, ((((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x257: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x257, (((x254 >> 31) as fiat_secp256k1_u1) & ((((((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x245) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x258: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x258, (((x254 >> 31) as fiat_secp256k1_u1) & ((((((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x247 as u64) + (x247 as u64)) & (0xffffffff as u64)) as u32), ((((x249 as u64) + (x252 as u64)) & (0xffffffff as u64)) as u32));
  let mut x259: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x259, (((x254 >> 31) as fiat_secp256k1_u1) & ((((((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x248 as u64) + (x248 as u64)) & (0xffffffff as u64)) as u32), ((((x250 as u64) + (x253 as u64)) & (0xffffffff as u64)) as u32));
  let mut x260: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x260, (((x254 >> 31) as fiat_secp256k1_u1) & ((((((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x249 as u64) + (x252 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x247 as u64) + (x247 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x261: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x261, (((x254 >> 31) as fiat_secp256k1_u1) & ((((((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x246 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x250 as u64) + (x253 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x248 as u64) + (x248 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x262: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x262, ((x257 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x256);
  let mut x263: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x263, ((x257 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x258);
  let mut x264: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x264, ((x257 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x259);
  let x265: u32 = (((((!((((0x2 as u64) + (x255 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x266: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x266, (((x265 >> 31) as fiat_secp256k1_u1) & ((((((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x2 as u64) + (x255 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x2 as u64) + (x255 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x267: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x267, (((x265 >> 31) as fiat_secp256k1_u1) & ((((((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x256, ((((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x268: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x268, (((x265 >> 31) as fiat_secp256k1_u1) & ((((((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x256) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x269: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x269, (((x265 >> 31) as fiat_secp256k1_u1) & ((((((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x258 as u64) + (x258 as u64)) & (0xffffffff as u64)) as u32), ((((x260 as u64) + (x263 as u64)) & (0xffffffff as u64)) as u32));
  let mut x270: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x270, (((x265 >> 31) as fiat_secp256k1_u1) & ((((((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x259 as u64) + (x259 as u64)) & (0xffffffff as u64)) as u32), ((((x261 as u64) + (x264 as u64)) & (0xffffffff as u64)) as u32));
  let mut x271: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x271, (((x265 >> 31) as fiat_secp256k1_u1) & ((((((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x260 as u64) + (x263 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x258 as u64) + (x258 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x272: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x272, (((x265 >> 31) as fiat_secp256k1_u1) & ((((((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x257 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x261 as u64) + (x264 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x259 as u64) + (x259 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x273: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x273, ((x268 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x267);
  let mut x274: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x274, ((x268 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x269);
  let mut x275: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x275, ((x268 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x270);
  let x276: u32 = (((((!((((0x2 as u64) + (x266 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x277: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x277, (((x276 >> 31) as fiat_secp256k1_u1) & ((((((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x2 as u64) + (x266 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x2 as u64) + (x266 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x278: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x278, (((x276 >> 31) as fiat_secp256k1_u1) & ((((((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x267, ((((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x279: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x279, (((x276 >> 31) as fiat_secp256k1_u1) & ((((((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x267) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x280: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x280, (((x276 >> 31) as fiat_secp256k1_u1) & ((((((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x269 as u64) + (x269 as u64)) & (0xffffffff as u64)) as u32), ((((x271 as u64) + (x274 as u64)) & (0xffffffff as u64)) as u32));
  let mut x281: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x281, (((x276 >> 31) as fiat_secp256k1_u1) & ((((((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x270 as u64) + (x270 as u64)) & (0xffffffff as u64)) as u32), ((((x272 as u64) + (x275 as u64)) & (0xffffffff as u64)) as u32));
  let mut x282: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x282, (((x276 >> 31) as fiat_secp256k1_u1) & ((((((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x271 as u64) + (x274 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x269 as u64) + (x269 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x283: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x283, (((x276 >> 31) as fiat_secp256k1_u1) & ((((((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x268 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x272 as u64) + (x275 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x270 as u64) + (x270 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x284: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x284, ((x279 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x278);
  let mut x285: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x285, ((x279 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x280);
  let mut x286: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x286, ((x279 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x281);
  let x287: u32 = (((((!((((0x2 as u64) + (x277 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x288: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x288, (((x287 >> 31) as fiat_secp256k1_u1) & ((((((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x2 as u64) + (x277 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x2 as u64) + (x277 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x289: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x289, (((x287 >> 31) as fiat_secp256k1_u1) & ((((((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x278, ((((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x290: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x290, (((x287 >> 31) as fiat_secp256k1_u1) & ((((((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x278) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x291: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x291, (((x287 >> 31) as fiat_secp256k1_u1) & ((((((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x280 as u64) + (x280 as u64)) & (0xffffffff as u64)) as u32), ((((x282 as u64) + (x285 as u64)) & (0xffffffff as u64)) as u32));
  let mut x292: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x292, (((x287 >> 31) as fiat_secp256k1_u1) & ((((((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x281 as u64) + (x281 as u64)) & (0xffffffff as u64)) as u32), ((((x283 as u64) + (x286 as u64)) & (0xffffffff as u64)) as u32));
  let mut x293: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x293, (((x287 >> 31) as fiat_secp256k1_u1) & ((((((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x282 as u64) + (x285 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x280 as u64) + (x280 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x294: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x294, (((x287 >> 31) as fiat_secp256k1_u1) & ((((((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x279 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x283 as u64) + (x286 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x281 as u64) + (x281 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x295: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x295, ((x290 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x289);
  let mut x296: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x296, ((x290 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x291);
  let mut x297: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x297, ((x290 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x292);
  let x298: u32 = (((((!((((0x2 as u64) + (x288 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x299: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x299, (((x298 >> 31) as fiat_secp256k1_u1) & ((((((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x2 as u64) + (x288 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x2 as u64) + (x288 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x300: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x300, (((x298 >> 31) as fiat_secp256k1_u1) & ((((((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x289, ((((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x301: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x301, (((x298 >> 31) as fiat_secp256k1_u1) & ((((((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x289) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x302: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x302, (((x298 >> 31) as fiat_secp256k1_u1) & ((((((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x291 as u64) + (x291 as u64)) & (0xffffffff as u64)) as u32), ((((x293 as u64) + (x296 as u64)) & (0xffffffff as u64)) as u32));
  let mut x303: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x303, (((x298 >> 31) as fiat_secp256k1_u1) & ((((((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x292 as u64) + (x292 as u64)) & (0xffffffff as u64)) as u32), ((((x294 as u64) + (x297 as u64)) & (0xffffffff as u64)) as u32));
  let mut x304: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x304, (((x298 >> 31) as fiat_secp256k1_u1) & ((((((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x293 as u64) + (x296 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x291 as u64) + (x291 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x305: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x305, (((x298 >> 31) as fiat_secp256k1_u1) & ((((((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x290 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x294 as u64) + (x297 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x292 as u64) + (x292 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x306: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x306, ((x301 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x300);
  let mut x307: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x307, ((x301 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x302);
  let mut x308: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x308, ((x301 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x303);
  let x309: u32 = (((((!((((0x2 as u64) + (x299 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x310: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x310, (((x309 >> 31) as fiat_secp256k1_u1) & ((((((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x2 as u64) + (x299 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x2 as u64) + (x299 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x311: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x311, (((x309 >> 31) as fiat_secp256k1_u1) & ((((((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), x300, ((((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x312: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x312, (((x309 >> 31) as fiat_secp256k1_u1) & ((((((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x300) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x313: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x313, (((x309 >> 31) as fiat_secp256k1_u1) & ((((((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x302 as u64) + (x302 as u64)) & (0xffffffff as u64)) as u32), ((((x304 as u64) + (x307 as u64)) & (0xffffffff as u64)) as u32));
  let mut x314: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x314, (((x309 >> 31) as fiat_secp256k1_u1) & ((((((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x303 as u64) + (x303 as u64)) & (0xffffffff as u64)) as u32), ((((x305 as u64) + (x308 as u64)) & (0xffffffff as u64)) as u32));
  let mut x315: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x315, (((x309 >> 31) as fiat_secp256k1_u1) & ((((((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x304 as u64) + (x307 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x302 as u64) + (x302 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x316: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x316, (((x309 >> 31) as fiat_secp256k1_u1) & ((((((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x301 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x305 as u64) + (x308 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x303 as u64) + (x303 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x317: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x317, ((x312 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x311);
  let mut x318: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x318, ((x312 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x313);
  let mut x319: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x319, ((x312 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x314);
  let x320: u32 = (((((!((((0x2 as u64) + (x310 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x321: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x321, (((x320 >> 31) as fiat_secp256k1_u1) & ((((((((x312 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x312 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((0x2 as u64) + (x310 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x2 as u64) + (x310 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x322: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x322, (((x320 >> 31) as fiat_secp256k1_u1) & ((((((((x312 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x312 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((((x312 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x312 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x311) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x323: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x323, (((x320 >> 31) as fiat_secp256k1_u1) & ((((((((x312 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x312 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x313 as u64) + (x313 as u64)) & (0xffffffff as u64)) as u32), ((((x315 as u64) + (x318 as u64)) & (0xffffffff as u64)) as u32));
  let mut x324: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x324, (((x320 >> 31) as fiat_secp256k1_u1) & ((((((((x312 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x312 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x314 as u64) + (x314 as u64)) & (0xffffffff as u64)) as u32), ((((x316 as u64) + (x319 as u64)) & (0xffffffff as u64)) as u32));
  let mut x325: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x325, (((x320 >> 31) as fiat_secp256k1_u1) & ((((((((x312 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x312 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x315 as u64) + (x318 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x313 as u64) + (x313 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x326: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x326, (((x320 >> 31) as fiat_secp256k1_u1) & ((((((((x312 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x312 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_secp256k1_u1)), ((((x316 as u64) + (x319 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x314 as u64) + (x314 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x327: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x327, ((x322 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x323);
  let mut x328: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x328, ((x322 & (0x1 as u32)) as fiat_secp256k1_u1), (0x0 as u32), x324);
  let x329: u32 = ((((0x2 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32);
  let x330: u32 = ((((x323 as u64) + (x323 as u64)) & (0xffffffff as u64)) as u32);
  let x331: u32 = ((((x324 as u64) + (x324 as u64)) & (0xffffffff as u64)) as u32);
  let x332: u32 = ((((x325 as u64) + (x327 as u64)) & (0xffffffff as u64)) as u32);
  let x333: u32 = ((((x326 as u64) + (x328 as u64)) & (0xffffffff as u64)) as u32);
  *out1 = x329;
  *out2 = x330;
  *out3 = x331;
  *out4 = x332;
  *out5 = x333;
}

/// The function fiat_secp256k1_update_fg computes a update_fg.
///
/// Postconditions:
///   0 ≤ eval arg1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg3: [0x0 ~> 0xffffffff]
///   arg4: [0x0 ~> 0xffffffff]
///   arg5: [0x0 ~> 0xffffffff]
///   arg6: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_secp256k1_update_fg(out1: &mut [u32; 9], out2: &mut [u32; 9], arg1: &[u32; 9], arg2: &[u32; 9], arg3: u32, arg4: u32, arg5: u32, arg6: u32) -> () {
  let mut x1: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x1, (((arg1[8]) >> 31) as fiat_secp256k1_u1), (0x0 as u32), 0xffffffff);
  let mut x2: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x2, ((arg3 >> 31) as fiat_secp256k1_u1), (0x0 as u32), 0xffffffff);
  let mut x3: u32 = 0;
  let mut x4: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3, &mut x4, x2, (arg1[0]));
  let mut x5: u32 = 0;
  let mut x6: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x5, &mut x6, x2, (arg1[1]));
  let mut x7: u32 = 0;
  let mut x8: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x7, &mut x8, x2, (arg1[0]));
  let mut x9: u32 = 0;
  let mut x10: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x9, &mut x10, x2, (arg1[2]));
  let mut x11: u32 = 0;
  let mut x12: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x11, &mut x12, x2, (arg1[1]));
  let mut x13: u32 = 0;
  let mut x14: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x13, &mut x14, x2, (arg1[0]));
  let mut x15: u32 = 0;
  let mut x16: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x15, &mut x16, x2, (arg1[3]));
  let mut x17: u32 = 0;
  let mut x18: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x17, &mut x18, x2, (arg1[2]));
  let mut x19: u32 = 0;
  let mut x20: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x19, &mut x20, x2, (arg1[1]));
  let mut x21: u32 = 0;
  let mut x22: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x21, &mut x22, x2, (arg1[0]));
  let mut x23: u32 = 0;
  let mut x24: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x23, &mut x24, x2, (arg1[4]));
  let mut x25: u32 = 0;
  let mut x26: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x25, &mut x26, x2, (arg1[3]));
  let mut x27: u32 = 0;
  let mut x28: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x27, &mut x28, x2, (arg1[2]));
  let mut x29: u32 = 0;
  let mut x30: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x29, &mut x30, x2, (arg1[1]));
  let mut x31: u32 = 0;
  let mut x32: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x31, &mut x32, x2, (arg1[0]));
  let mut x33: u32 = 0;
  let mut x34: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x33, &mut x34, x2, (arg1[5]));
  let mut x35: u32 = 0;
  let mut x36: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x35, &mut x36, x2, (arg1[4]));
  let mut x37: u32 = 0;
  let mut x38: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x37, &mut x38, x2, (arg1[3]));
  let mut x39: u32 = 0;
  let mut x40: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x39, &mut x40, x2, (arg1[2]));
  let mut x41: u32 = 0;
  let mut x42: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x41, &mut x42, x2, (arg1[1]));
  let mut x43: u32 = 0;
  let mut x44: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x43, &mut x44, x2, (arg1[0]));
  let mut x45: u32 = 0;
  let mut x46: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x45, &mut x46, x2, (arg1[6]));
  let mut x47: u32 = 0;
  let mut x48: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x47, &mut x48, x2, (arg1[5]));
  let mut x49: u32 = 0;
  let mut x50: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x49, &mut x50, x2, (arg1[4]));
  let mut x51: u32 = 0;
  let mut x52: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x51, &mut x52, x2, (arg1[3]));
  let mut x53: u32 = 0;
  let mut x54: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x53, &mut x54, x2, (arg1[2]));
  let mut x55: u32 = 0;
  let mut x56: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x55, &mut x56, x2, (arg1[1]));
  let mut x57: u32 = 0;
  let mut x58: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x57, &mut x58, x2, (arg1[0]));
  let mut x59: u32 = 0;
  let mut x60: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x59, &mut x60, x2, (arg1[7]));
  let mut x61: u32 = 0;
  let mut x62: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x61, &mut x62, x2, (arg1[6]));
  let mut x63: u32 = 0;
  let mut x64: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x63, &mut x64, x2, (arg1[5]));
  let mut x65: u32 = 0;
  let mut x66: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x65, &mut x66, x2, (arg1[4]));
  let mut x67: u32 = 0;
  let mut x68: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x67, &mut x68, x2, (arg1[3]));
  let mut x69: u32 = 0;
  let mut x70: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x69, &mut x70, x2, (arg1[2]));
  let mut x71: u32 = 0;
  let mut x72: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x71, &mut x72, x2, (arg1[1]));
  let mut x73: u32 = 0;
  let mut x74: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x73, &mut x74, x2, (arg1[0]));
  let mut x75: u32 = 0;
  let mut x76: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x75, &mut x76, x2, (arg1[8]));
  let mut x77: u32 = 0;
  let mut x78: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x77, &mut x78, x2, (arg1[7]));
  let mut x79: u32 = 0;
  let mut x80: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x79, &mut x80, x2, (arg1[6]));
  let mut x81: u32 = 0;
  let mut x82: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x81, &mut x82, x2, (arg1[5]));
  let mut x83: u32 = 0;
  let mut x84: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x83, &mut x84, x2, (arg1[4]));
  let mut x85: u32 = 0;
  let mut x86: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x85, &mut x86, x2, (arg1[3]));
  let mut x87: u32 = 0;
  let mut x88: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x87, &mut x88, x2, (arg1[2]));
  let mut x89: u32 = 0;
  let mut x90: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x89, &mut x90, x2, (arg1[1]));
  let mut x91: u32 = 0;
  let mut x92: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x91, &mut x92, x2, (arg1[0]));
  let mut x93: u32 = 0;
  let mut x94: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x93, &mut x94, arg3, x1);
  let mut x95: u32 = 0;
  let mut x96: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x95, &mut x96, arg3, (arg1[8]));
  let mut x97: u32 = 0;
  let mut x98: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x97, &mut x98, arg3, (arg1[7]));
  let mut x99: u32 = 0;
  let mut x100: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x99, &mut x100, arg3, (arg1[6]));
  let mut x101: u32 = 0;
  let mut x102: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x101, &mut x102, arg3, (arg1[5]));
  let mut x103: u32 = 0;
  let mut x104: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x103, &mut x104, arg3, (arg1[4]));
  let mut x105: u32 = 0;
  let mut x106: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x105, &mut x106, arg3, (arg1[3]));
  let mut x107: u32 = 0;
  let mut x108: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x107, &mut x108, arg3, (arg1[2]));
  let mut x109: u32 = 0;
  let mut x110: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x109, &mut x110, arg3, (arg1[1]));
  let mut x111: u32 = 0;
  let mut x112: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x111, &mut x112, arg3, (arg1[0]));
  let mut x113: u32 = 0;
  let mut x114: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x113, &mut x114, 0x0, x96, x3);
  let mut x115: u32 = 0;
  let mut x116: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x115, &mut x116, 0x0, x113, x5);
  let mut x117: u32 = 0;
  let mut x118: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x117, &mut x118, 0x0, x98, x7);
  let mut x119: u32 = 0;
  let mut x120: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x119, &mut x120, x118, x115, x8);
  let mut x121: u32 = 0;
  let mut x122: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x121, &mut x122, 0x0, x117, x11);
  let mut x123: u32 = 0;
  let mut x124: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x123, &mut x124, x122, x119, x9);
  let mut x125: u32 = 0;
  let mut x126: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x125, &mut x126, 0x0, x100, x13);
  let mut x127: u32 = 0;
  let mut x128: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x127, &mut x128, x126, x121, x14);
  let mut x129: u32 = 0;
  let mut x130: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x129, &mut x130, x128, x123, x12);
  let mut x131: u32 = 0;
  let mut x132: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x131, &mut x132, 0x0, x125, x19);
  let mut x133: u32 = 0;
  let mut x134: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x133, &mut x134, x132, x127, x17);
  let mut x135: u32 = 0;
  let mut x136: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x135, &mut x136, x134, x129, x15);
  let mut x137: u32 = 0;
  let mut x138: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x137, &mut x138, 0x0, x102, x21);
  let mut x139: u32 = 0;
  let mut x140: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x139, &mut x140, x138, x131, x22);
  let mut x141: u32 = 0;
  let mut x142: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x141, &mut x142, x140, x133, x20);
  let mut x143: u32 = 0;
  let mut x144: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x143, &mut x144, x142, x135, x18);
  let mut x145: u32 = 0;
  let mut x146: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x145, &mut x146, 0x0, x137, x29);
  let mut x147: u32 = 0;
  let mut x148: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x147, &mut x148, x146, x139, x27);
  let mut x149: u32 = 0;
  let mut x150: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x149, &mut x150, x148, x141, x25);
  let mut x151: u32 = 0;
  let mut x152: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x151, &mut x152, x150, x143, x23);
  let mut x153: u32 = 0;
  let mut x154: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x153, &mut x154, 0x0, x104, x31);
  let mut x155: u32 = 0;
  let mut x156: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x155, &mut x156, x154, x145, x32);
  let mut x157: u32 = 0;
  let mut x158: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x157, &mut x158, x156, x147, x30);
  let mut x159: u32 = 0;
  let mut x160: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x159, &mut x160, x158, x149, x28);
  let mut x161: u32 = 0;
  let mut x162: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x161, &mut x162, x160, x151, x26);
  let mut x163: u32 = 0;
  let mut x164: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x163, &mut x164, 0x0, x153, x41);
  let mut x165: u32 = 0;
  let mut x166: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x165, &mut x166, x164, x155, x39);
  let mut x167: u32 = 0;
  let mut x168: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x167, &mut x168, x166, x157, x37);
  let mut x169: u32 = 0;
  let mut x170: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x169, &mut x170, x168, x159, x35);
  let mut x171: u32 = 0;
  let mut x172: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x171, &mut x172, x170, x161, x33);
  let mut x173: u32 = 0;
  let mut x174: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x173, &mut x174, 0x0, x106, x43);
  let mut x175: u32 = 0;
  let mut x176: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x175, &mut x176, x174, x163, x44);
  let mut x177: u32 = 0;
  let mut x178: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x177, &mut x178, x176, x165, x42);
  let mut x179: u32 = 0;
  let mut x180: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x179, &mut x180, x178, x167, x40);
  let mut x181: u32 = 0;
  let mut x182: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x181, &mut x182, x180, x169, x38);
  let mut x183: u32 = 0;
  let mut x184: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x183, &mut x184, x182, x171, x36);
  let mut x185: u32 = 0;
  let mut x186: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x185, &mut x186, 0x0, x173, x55);
  let mut x187: u32 = 0;
  let mut x188: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x187, &mut x188, x186, x175, x53);
  let mut x189: u32 = 0;
  let mut x190: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x189, &mut x190, x188, x177, x51);
  let mut x191: u32 = 0;
  let mut x192: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x191, &mut x192, x190, x179, x49);
  let mut x193: u32 = 0;
  let mut x194: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x193, &mut x194, x192, x181, x47);
  let mut x195: u32 = 0;
  let mut x196: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x195, &mut x196, x194, x183, x45);
  let mut x197: u32 = 0;
  let mut x198: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x197, &mut x198, 0x0, x108, x57);
  let mut x199: u32 = 0;
  let mut x200: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x199, &mut x200, x198, x185, x58);
  let mut x201: u32 = 0;
  let mut x202: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x201, &mut x202, x200, x187, x56);
  let mut x203: u32 = 0;
  let mut x204: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x203, &mut x204, x202, x189, x54);
  let mut x205: u32 = 0;
  let mut x206: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x205, &mut x206, x204, x191, x52);
  let mut x207: u32 = 0;
  let mut x208: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x207, &mut x208, x206, x193, x50);
  let mut x209: u32 = 0;
  let mut x210: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x209, &mut x210, x208, x195, x48);
  let mut x211: u32 = 0;
  let mut x212: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x211, &mut x212, 0x0, x197, x71);
  let mut x213: u32 = 0;
  let mut x214: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x213, &mut x214, x212, x199, x69);
  let mut x215: u32 = 0;
  let mut x216: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x215, &mut x216, x214, x201, x67);
  let mut x217: u32 = 0;
  let mut x218: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x217, &mut x218, x216, x203, x65);
  let mut x219: u32 = 0;
  let mut x220: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x219, &mut x220, x218, x205, x63);
  let mut x221: u32 = 0;
  let mut x222: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x221, &mut x222, x220, x207, x61);
  let mut x223: u32 = 0;
  let mut x224: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x223, &mut x224, x222, x209, x59);
  let mut x225: u32 = 0;
  let mut x226: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x225, &mut x226, 0x0, x110, x73);
  let mut x227: u32 = 0;
  let mut x228: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x227, &mut x228, x226, x211, x74);
  let mut x229: u32 = 0;
  let mut x230: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x229, &mut x230, x228, x213, x72);
  let mut x231: u32 = 0;
  let mut x232: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x231, &mut x232, x230, x215, x70);
  let mut x233: u32 = 0;
  let mut x234: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x233, &mut x234, x232, x217, x68);
  let mut x235: u32 = 0;
  let mut x236: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x235, &mut x236, x234, x219, x66);
  let mut x237: u32 = 0;
  let mut x238: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x237, &mut x238, x236, x221, x64);
  let mut x239: u32 = 0;
  let mut x240: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x239, &mut x240, x238, x223, x62);
  let mut x241: u32 = 0;
  let mut x242: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x241, &mut x242, 0x0, x225, x89);
  let mut x243: u32 = 0;
  let mut x244: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x243, &mut x244, x242, x227, x87);
  let mut x245: u32 = 0;
  let mut x246: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x245, &mut x246, x244, x229, x85);
  let mut x247: u32 = 0;
  let mut x248: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x247, &mut x248, x246, x231, x83);
  let mut x249: u32 = 0;
  let mut x250: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x249, &mut x250, x248, x233, x81);
  let mut x251: u32 = 0;
  let mut x252: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x251, &mut x252, x250, x235, x79);
  let mut x253: u32 = 0;
  let mut x254: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x253, &mut x254, x252, x237, x77);
  let mut x255: u32 = 0;
  let mut x256: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x255, &mut x256, x254, x239, x75);
  let mut x257: u32 = 0;
  let mut x258: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x257, &mut x258, 0x0, x112, x91);
  let mut x259: u32 = 0;
  let mut x260: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x259, &mut x260, x258, x241, x92);
  let mut x261: u32 = 0;
  let mut x262: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x261, &mut x262, x260, x243, x90);
  let mut x263: u32 = 0;
  let mut x264: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x263, &mut x264, x262, x245, x88);
  let mut x265: u32 = 0;
  let mut x266: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x265, &mut x266, x264, x247, x86);
  let mut x267: u32 = 0;
  let mut x268: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x267, &mut x268, x266, x249, x84);
  let mut x269: u32 = 0;
  let mut x270: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x269, &mut x270, x268, x251, x82);
  let mut x271: u32 = 0;
  let mut x272: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x271, &mut x272, x270, x253, x80);
  let mut x273: u32 = 0;
  let mut x274: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x273, &mut x274, x272, x255, x78);
  let mut x275: u32 = 0;
  let mut x276: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x275, &mut x276, 0x0, x257, x109);
  let mut x277: u32 = 0;
  let mut x278: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x277, &mut x278, x276, x259, x107);
  let mut x279: u32 = 0;
  let mut x280: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x279, &mut x280, x278, x261, x105);
  let mut x281: u32 = 0;
  let mut x282: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x281, &mut x282, x280, x263, x103);
  let mut x283: u32 = 0;
  let mut x284: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x283, &mut x284, x282, x265, x101);
  let mut x285: u32 = 0;
  let mut x286: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x285, &mut x286, x284, x267, x99);
  let mut x287: u32 = 0;
  let mut x288: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x287, &mut x288, x286, x269, x97);
  let mut x289: u32 = 0;
  let mut x290: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x289, &mut x290, x288, x271, x95);
  let mut x291: u32 = 0;
  let mut x292: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x291, &mut x292, x290, x273, x93);
  let mut x293: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x293, (((arg2[8]) >> 31) as fiat_secp256k1_u1), (0x0 as u32), 0xffffffff);
  let mut x294: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x294, ((arg4 >> 31) as fiat_secp256k1_u1), (0x0 as u32), 0xffffffff);
  let mut x295: u32 = 0;
  let mut x296: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x295, &mut x296, x294, (arg2[0]));
  let mut x297: u32 = 0;
  let mut x298: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x297, &mut x298, x294, (arg2[1]));
  let mut x299: u32 = 0;
  let mut x300: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x299, &mut x300, x294, (arg2[0]));
  let mut x301: u32 = 0;
  let mut x302: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x301, &mut x302, x294, (arg2[2]));
  let mut x303: u32 = 0;
  let mut x304: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x303, &mut x304, x294, (arg2[1]));
  let mut x305: u32 = 0;
  let mut x306: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x305, &mut x306, x294, (arg2[0]));
  let mut x307: u32 = 0;
  let mut x308: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x307, &mut x308, x294, (arg2[3]));
  let mut x309: u32 = 0;
  let mut x310: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x309, &mut x310, x294, (arg2[2]));
  let mut x311: u32 = 0;
  let mut x312: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x311, &mut x312, x294, (arg2[1]));
  let mut x313: u32 = 0;
  let mut x314: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x313, &mut x314, x294, (arg2[0]));
  let mut x315: u32 = 0;
  let mut x316: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x315, &mut x316, x294, (arg2[4]));
  let mut x317: u32 = 0;
  let mut x318: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x317, &mut x318, x294, (arg2[3]));
  let mut x319: u32 = 0;
  let mut x320: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x319, &mut x320, x294, (arg2[2]));
  let mut x321: u32 = 0;
  let mut x322: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x321, &mut x322, x294, (arg2[1]));
  let mut x323: u32 = 0;
  let mut x324: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x323, &mut x324, x294, (arg2[0]));
  let mut x325: u32 = 0;
  let mut x326: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x325, &mut x326, x294, (arg2[5]));
  let mut x327: u32 = 0;
  let mut x328: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x327, &mut x328, x294, (arg2[4]));
  let mut x329: u32 = 0;
  let mut x330: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x329, &mut x330, x294, (arg2[3]));
  let mut x331: u32 = 0;
  let mut x332: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x331, &mut x332, x294, (arg2[2]));
  let mut x333: u32 = 0;
  let mut x334: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x333, &mut x334, x294, (arg2[1]));
  let mut x335: u32 = 0;
  let mut x336: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x335, &mut x336, x294, (arg2[0]));
  let mut x337: u32 = 0;
  let mut x338: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x337, &mut x338, x294, (arg2[6]));
  let mut x339: u32 = 0;
  let mut x340: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x339, &mut x340, x294, (arg2[5]));
  let mut x341: u32 = 0;
  let mut x342: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x341, &mut x342, x294, (arg2[4]));
  let mut x343: u32 = 0;
  let mut x344: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x343, &mut x344, x294, (arg2[3]));
  let mut x345: u32 = 0;
  let mut x346: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x345, &mut x346, x294, (arg2[2]));
  let mut x347: u32 = 0;
  let mut x348: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x347, &mut x348, x294, (arg2[1]));
  let mut x349: u32 = 0;
  let mut x350: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x349, &mut x350, x294, (arg2[0]));
  let mut x351: u32 = 0;
  let mut x352: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x351, &mut x352, x294, (arg2[7]));
  let mut x353: u32 = 0;
  let mut x354: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x353, &mut x354, x294, (arg2[6]));
  let mut x355: u32 = 0;
  let mut x356: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x355, &mut x356, x294, (arg2[5]));
  let mut x357: u32 = 0;
  let mut x358: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x357, &mut x358, x294, (arg2[4]));
  let mut x359: u32 = 0;
  let mut x360: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x359, &mut x360, x294, (arg2[3]));
  let mut x361: u32 = 0;
  let mut x362: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x361, &mut x362, x294, (arg2[2]));
  let mut x363: u32 = 0;
  let mut x364: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x363, &mut x364, x294, (arg2[1]));
  let mut x365: u32 = 0;
  let mut x366: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x365, &mut x366, x294, (arg2[0]));
  let mut x367: u32 = 0;
  let mut x368: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x367, &mut x368, x294, (arg2[8]));
  let mut x369: u32 = 0;
  let mut x370: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x369, &mut x370, x294, (arg2[7]));
  let mut x371: u32 = 0;
  let mut x372: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x371, &mut x372, x294, (arg2[6]));
  let mut x373: u32 = 0;
  let mut x374: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x373, &mut x374, x294, (arg2[5]));
  let mut x375: u32 = 0;
  let mut x376: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x375, &mut x376, x294, (arg2[4]));
  let mut x377: u32 = 0;
  let mut x378: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x377, &mut x378, x294, (arg2[3]));
  let mut x379: u32 = 0;
  let mut x380: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x379, &mut x380, x294, (arg2[2]));
  let mut x381: u32 = 0;
  let mut x382: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x381, &mut x382, x294, (arg2[1]));
  let mut x383: u32 = 0;
  let mut x384: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x383, &mut x384, x294, (arg2[0]));
  let mut x385: u32 = 0;
  let mut x386: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x385, &mut x386, arg4, x293);
  let mut x387: u32 = 0;
  let mut x388: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x387, &mut x388, arg4, (arg2[8]));
  let mut x389: u32 = 0;
  let mut x390: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x389, &mut x390, arg4, (arg2[7]));
  let mut x391: u32 = 0;
  let mut x392: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x391, &mut x392, arg4, (arg2[6]));
  let mut x393: u32 = 0;
  let mut x394: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x393, &mut x394, arg4, (arg2[5]));
  let mut x395: u32 = 0;
  let mut x396: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x395, &mut x396, arg4, (arg2[4]));
  let mut x397: u32 = 0;
  let mut x398: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x397, &mut x398, arg4, (arg2[3]));
  let mut x399: u32 = 0;
  let mut x400: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x399, &mut x400, arg4, (arg2[2]));
  let mut x401: u32 = 0;
  let mut x402: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x401, &mut x402, arg4, (arg2[1]));
  let mut x403: u32 = 0;
  let mut x404: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x403, &mut x404, arg4, (arg2[0]));
  let mut x405: u32 = 0;
  let mut x406: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x405, &mut x406, 0x0, x388, x295);
  let mut x407: u32 = 0;
  let mut x408: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x407, &mut x408, 0x0, x405, x297);
  let mut x409: u32 = 0;
  let mut x410: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x409, &mut x410, 0x0, x390, x299);
  let mut x411: u32 = 0;
  let mut x412: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x411, &mut x412, x410, x407, x300);
  let mut x413: u32 = 0;
  let mut x414: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x413, &mut x414, 0x0, x409, x303);
  let mut x415: u32 = 0;
  let mut x416: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x415, &mut x416, x414, x411, x301);
  let mut x417: u32 = 0;
  let mut x418: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x417, &mut x418, 0x0, x392, x305);
  let mut x419: u32 = 0;
  let mut x420: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x419, &mut x420, x418, x413, x306);
  let mut x421: u32 = 0;
  let mut x422: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x421, &mut x422, x420, x415, x304);
  let mut x423: u32 = 0;
  let mut x424: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x423, &mut x424, 0x0, x417, x311);
  let mut x425: u32 = 0;
  let mut x426: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x425, &mut x426, x424, x419, x309);
  let mut x427: u32 = 0;
  let mut x428: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x427, &mut x428, x426, x421, x307);
  let mut x429: u32 = 0;
  let mut x430: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x429, &mut x430, 0x0, x394, x313);
  let mut x431: u32 = 0;
  let mut x432: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x431, &mut x432, x430, x423, x314);
  let mut x433: u32 = 0;
  let mut x434: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x433, &mut x434, x432, x425, x312);
  let mut x435: u32 = 0;
  let mut x436: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x435, &mut x436, x434, x427, x310);
  let mut x437: u32 = 0;
  let mut x438: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x437, &mut x438, 0x0, x429, x321);
  let mut x439: u32 = 0;
  let mut x440: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x439, &mut x440, x438, x431, x319);
  let mut x441: u32 = 0;
  let mut x442: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x441, &mut x442, x440, x433, x317);
  let mut x443: u32 = 0;
  let mut x444: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x443, &mut x444, x442, x435, x315);
  let mut x445: u32 = 0;
  let mut x446: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x445, &mut x446, 0x0, x396, x323);
  let mut x447: u32 = 0;
  let mut x448: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x447, &mut x448, x446, x437, x324);
  let mut x449: u32 = 0;
  let mut x450: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x449, &mut x450, x448, x439, x322);
  let mut x451: u32 = 0;
  let mut x452: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x451, &mut x452, x450, x441, x320);
  let mut x453: u32 = 0;
  let mut x454: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x453, &mut x454, x452, x443, x318);
  let mut x455: u32 = 0;
  let mut x456: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x455, &mut x456, 0x0, x445, x333);
  let mut x457: u32 = 0;
  let mut x458: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x457, &mut x458, x456, x447, x331);
  let mut x459: u32 = 0;
  let mut x460: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x459, &mut x460, x458, x449, x329);
  let mut x461: u32 = 0;
  let mut x462: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x461, &mut x462, x460, x451, x327);
  let mut x463: u32 = 0;
  let mut x464: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x463, &mut x464, x462, x453, x325);
  let mut x465: u32 = 0;
  let mut x466: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x465, &mut x466, 0x0, x398, x335);
  let mut x467: u32 = 0;
  let mut x468: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x467, &mut x468, x466, x455, x336);
  let mut x469: u32 = 0;
  let mut x470: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x469, &mut x470, x468, x457, x334);
  let mut x471: u32 = 0;
  let mut x472: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x471, &mut x472, x470, x459, x332);
  let mut x473: u32 = 0;
  let mut x474: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x473, &mut x474, x472, x461, x330);
  let mut x475: u32 = 0;
  let mut x476: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x475, &mut x476, x474, x463, x328);
  let mut x477: u32 = 0;
  let mut x478: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x477, &mut x478, 0x0, x465, x347);
  let mut x479: u32 = 0;
  let mut x480: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x479, &mut x480, x478, x467, x345);
  let mut x481: u32 = 0;
  let mut x482: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x481, &mut x482, x480, x469, x343);
  let mut x483: u32 = 0;
  let mut x484: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x483, &mut x484, x482, x471, x341);
  let mut x485: u32 = 0;
  let mut x486: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x485, &mut x486, x484, x473, x339);
  let mut x487: u32 = 0;
  let mut x488: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x487, &mut x488, x486, x475, x337);
  let mut x489: u32 = 0;
  let mut x490: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x489, &mut x490, 0x0, x400, x349);
  let mut x491: u32 = 0;
  let mut x492: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x491, &mut x492, x490, x477, x350);
  let mut x493: u32 = 0;
  let mut x494: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x493, &mut x494, x492, x479, x348);
  let mut x495: u32 = 0;
  let mut x496: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x495, &mut x496, x494, x481, x346);
  let mut x497: u32 = 0;
  let mut x498: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x497, &mut x498, x496, x483, x344);
  let mut x499: u32 = 0;
  let mut x500: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x499, &mut x500, x498, x485, x342);
  let mut x501: u32 = 0;
  let mut x502: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x501, &mut x502, x500, x487, x340);
  let mut x503: u32 = 0;
  let mut x504: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x503, &mut x504, 0x0, x489, x363);
  let mut x505: u32 = 0;
  let mut x506: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x505, &mut x506, x504, x491, x361);
  let mut x507: u32 = 0;
  let mut x508: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x507, &mut x508, x506, x493, x359);
  let mut x509: u32 = 0;
  let mut x510: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x509, &mut x510, x508, x495, x357);
  let mut x511: u32 = 0;
  let mut x512: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x511, &mut x512, x510, x497, x355);
  let mut x513: u32 = 0;
  let mut x514: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x513, &mut x514, x512, x499, x353);
  let mut x515: u32 = 0;
  let mut x516: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x515, &mut x516, x514, x501, x351);
  let mut x517: u32 = 0;
  let mut x518: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x517, &mut x518, 0x0, x402, x365);
  let mut x519: u32 = 0;
  let mut x520: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x519, &mut x520, x518, x503, x366);
  let mut x521: u32 = 0;
  let mut x522: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x521, &mut x522, x520, x505, x364);
  let mut x523: u32 = 0;
  let mut x524: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x523, &mut x524, x522, x507, x362);
  let mut x525: u32 = 0;
  let mut x526: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x525, &mut x526, x524, x509, x360);
  let mut x527: u32 = 0;
  let mut x528: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x527, &mut x528, x526, x511, x358);
  let mut x529: u32 = 0;
  let mut x530: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x529, &mut x530, x528, x513, x356);
  let mut x531: u32 = 0;
  let mut x532: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x531, &mut x532, x530, x515, x354);
  let mut x533: u32 = 0;
  let mut x534: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x533, &mut x534, 0x0, x517, x381);
  let mut x535: u32 = 0;
  let mut x536: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x535, &mut x536, x534, x519, x379);
  let mut x537: u32 = 0;
  let mut x538: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x537, &mut x538, x536, x521, x377);
  let mut x539: u32 = 0;
  let mut x540: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x539, &mut x540, x538, x523, x375);
  let mut x541: u32 = 0;
  let mut x542: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x541, &mut x542, x540, x525, x373);
  let mut x543: u32 = 0;
  let mut x544: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x543, &mut x544, x542, x527, x371);
  let mut x545: u32 = 0;
  let mut x546: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x545, &mut x546, x544, x529, x369);
  let mut x547: u32 = 0;
  let mut x548: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x547, &mut x548, x546, x531, x367);
  let mut x549: u32 = 0;
  let mut x550: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x549, &mut x550, 0x0, x404, x383);
  let mut x551: u32 = 0;
  let mut x552: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x551, &mut x552, x550, x533, x384);
  let mut x553: u32 = 0;
  let mut x554: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x553, &mut x554, x552, x535, x382);
  let mut x555: u32 = 0;
  let mut x556: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x555, &mut x556, x554, x537, x380);
  let mut x557: u32 = 0;
  let mut x558: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x557, &mut x558, x556, x539, x378);
  let mut x559: u32 = 0;
  let mut x560: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x559, &mut x560, x558, x541, x376);
  let mut x561: u32 = 0;
  let mut x562: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x561, &mut x562, x560, x543, x374);
  let mut x563: u32 = 0;
  let mut x564: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x563, &mut x564, x562, x545, x372);
  let mut x565: u32 = 0;
  let mut x566: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x565, &mut x566, x564, x547, x370);
  let mut x567: u32 = 0;
  let mut x568: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x567, &mut x568, 0x0, x549, x401);
  let mut x569: u32 = 0;
  let mut x570: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x569, &mut x570, x568, x551, x399);
  let mut x571: u32 = 0;
  let mut x572: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x571, &mut x572, x570, x553, x397);
  let mut x573: u32 = 0;
  let mut x574: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x573, &mut x574, x572, x555, x395);
  let mut x575: u32 = 0;
  let mut x576: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x575, &mut x576, x574, x557, x393);
  let mut x577: u32 = 0;
  let mut x578: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x577, &mut x578, x576, x559, x391);
  let mut x579: u32 = 0;
  let mut x580: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x579, &mut x580, x578, x561, x389);
  let mut x581: u32 = 0;
  let mut x582: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x581, &mut x582, x580, x563, x387);
  let mut x583: u32 = 0;
  let mut x584: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x583, &mut x584, x582, x565, x385);
  let mut x585: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x585, (((arg1[8]) >> 31) as fiat_secp256k1_u1), (0x0 as u32), 0xffffffff);
  let mut x586: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x586, ((arg5 >> 31) as fiat_secp256k1_u1), (0x0 as u32), 0xffffffff);
  let mut x587: u32 = 0;
  let mut x588: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x587, &mut x588, x586, (arg1[0]));
  let mut x589: u32 = 0;
  let mut x590: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x589, &mut x590, x586, (arg1[1]));
  let mut x591: u32 = 0;
  let mut x592: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x591, &mut x592, x586, (arg1[0]));
  let mut x593: u32 = 0;
  let mut x594: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x593, &mut x594, x586, (arg1[2]));
  let mut x595: u32 = 0;
  let mut x596: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x595, &mut x596, x586, (arg1[1]));
  let mut x597: u32 = 0;
  let mut x598: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x597, &mut x598, x586, (arg1[0]));
  let mut x599: u32 = 0;
  let mut x600: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x599, &mut x600, x586, (arg1[3]));
  let mut x601: u32 = 0;
  let mut x602: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x601, &mut x602, x586, (arg1[2]));
  let mut x603: u32 = 0;
  let mut x604: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x603, &mut x604, x586, (arg1[1]));
  let mut x605: u32 = 0;
  let mut x606: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x605, &mut x606, x586, (arg1[0]));
  let mut x607: u32 = 0;
  let mut x608: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x607, &mut x608, x586, (arg1[4]));
  let mut x609: u32 = 0;
  let mut x610: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x609, &mut x610, x586, (arg1[3]));
  let mut x611: u32 = 0;
  let mut x612: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x611, &mut x612, x586, (arg1[2]));
  let mut x613: u32 = 0;
  let mut x614: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x613, &mut x614, x586, (arg1[1]));
  let mut x615: u32 = 0;
  let mut x616: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x615, &mut x616, x586, (arg1[0]));
  let mut x617: u32 = 0;
  let mut x618: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x617, &mut x618, x586, (arg1[5]));
  let mut x619: u32 = 0;
  let mut x620: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x619, &mut x620, x586, (arg1[4]));
  let mut x621: u32 = 0;
  let mut x622: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x621, &mut x622, x586, (arg1[3]));
  let mut x623: u32 = 0;
  let mut x624: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x623, &mut x624, x586, (arg1[2]));
  let mut x625: u32 = 0;
  let mut x626: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x625, &mut x626, x586, (arg1[1]));
  let mut x627: u32 = 0;
  let mut x628: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x627, &mut x628, x586, (arg1[0]));
  let mut x629: u32 = 0;
  let mut x630: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x629, &mut x630, x586, (arg1[6]));
  let mut x631: u32 = 0;
  let mut x632: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x631, &mut x632, x586, (arg1[5]));
  let mut x633: u32 = 0;
  let mut x634: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x633, &mut x634, x586, (arg1[4]));
  let mut x635: u32 = 0;
  let mut x636: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x635, &mut x636, x586, (arg1[3]));
  let mut x637: u32 = 0;
  let mut x638: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x637, &mut x638, x586, (arg1[2]));
  let mut x639: u32 = 0;
  let mut x640: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x639, &mut x640, x586, (arg1[1]));
  let mut x641: u32 = 0;
  let mut x642: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x641, &mut x642, x586, (arg1[0]));
  let mut x643: u32 = 0;
  let mut x644: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x643, &mut x644, x586, (arg1[7]));
  let mut x645: u32 = 0;
  let mut x646: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x645, &mut x646, x586, (arg1[6]));
  let mut x647: u32 = 0;
  let mut x648: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x647, &mut x648, x586, (arg1[5]));
  let mut x649: u32 = 0;
  let mut x650: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x649, &mut x650, x586, (arg1[4]));
  let mut x651: u32 = 0;
  let mut x652: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x651, &mut x652, x586, (arg1[3]));
  let mut x653: u32 = 0;
  let mut x654: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x653, &mut x654, x586, (arg1[2]));
  let mut x655: u32 = 0;
  let mut x656: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x655, &mut x656, x586, (arg1[1]));
  let mut x657: u32 = 0;
  let mut x658: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x657, &mut x658, x586, (arg1[0]));
  let mut x659: u32 = 0;
  let mut x660: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x659, &mut x660, x586, (arg1[8]));
  let mut x661: u32 = 0;
  let mut x662: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x661, &mut x662, x586, (arg1[7]));
  let mut x663: u32 = 0;
  let mut x664: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x663, &mut x664, x586, (arg1[6]));
  let mut x665: u32 = 0;
  let mut x666: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x665, &mut x666, x586, (arg1[5]));
  let mut x667: u32 = 0;
  let mut x668: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x667, &mut x668, x586, (arg1[4]));
  let mut x669: u32 = 0;
  let mut x670: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x669, &mut x670, x586, (arg1[3]));
  let mut x671: u32 = 0;
  let mut x672: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x671, &mut x672, x586, (arg1[2]));
  let mut x673: u32 = 0;
  let mut x674: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x673, &mut x674, x586, (arg1[1]));
  let mut x675: u32 = 0;
  let mut x676: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x675, &mut x676, x586, (arg1[0]));
  let mut x677: u32 = 0;
  let mut x678: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x677, &mut x678, arg5, x585);
  let mut x679: u32 = 0;
  let mut x680: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x679, &mut x680, arg5, (arg1[8]));
  let mut x681: u32 = 0;
  let mut x682: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x681, &mut x682, arg5, (arg1[7]));
  let mut x683: u32 = 0;
  let mut x684: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x683, &mut x684, arg5, (arg1[6]));
  let mut x685: u32 = 0;
  let mut x686: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x685, &mut x686, arg5, (arg1[5]));
  let mut x687: u32 = 0;
  let mut x688: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x687, &mut x688, arg5, (arg1[4]));
  let mut x689: u32 = 0;
  let mut x690: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x689, &mut x690, arg5, (arg1[3]));
  let mut x691: u32 = 0;
  let mut x692: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x691, &mut x692, arg5, (arg1[2]));
  let mut x693: u32 = 0;
  let mut x694: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x693, &mut x694, arg5, (arg1[1]));
  let mut x695: u32 = 0;
  let mut x696: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x695, &mut x696, arg5, (arg1[0]));
  let mut x697: u32 = 0;
  let mut x698: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x697, &mut x698, 0x0, x680, x587);
  let mut x699: u32 = 0;
  let mut x700: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x699, &mut x700, 0x0, x697, x589);
  let mut x701: u32 = 0;
  let mut x702: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x701, &mut x702, 0x0, x682, x591);
  let mut x703: u32 = 0;
  let mut x704: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x703, &mut x704, x702, x699, x592);
  let mut x705: u32 = 0;
  let mut x706: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x705, &mut x706, 0x0, x701, x595);
  let mut x707: u32 = 0;
  let mut x708: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x707, &mut x708, x706, x703, x593);
  let mut x709: u32 = 0;
  let mut x710: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x709, &mut x710, 0x0, x684, x597);
  let mut x711: u32 = 0;
  let mut x712: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x711, &mut x712, x710, x705, x598);
  let mut x713: u32 = 0;
  let mut x714: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x713, &mut x714, x712, x707, x596);
  let mut x715: u32 = 0;
  let mut x716: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x715, &mut x716, 0x0, x709, x603);
  let mut x717: u32 = 0;
  let mut x718: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x717, &mut x718, x716, x711, x601);
  let mut x719: u32 = 0;
  let mut x720: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x719, &mut x720, x718, x713, x599);
  let mut x721: u32 = 0;
  let mut x722: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x721, &mut x722, 0x0, x686, x605);
  let mut x723: u32 = 0;
  let mut x724: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x723, &mut x724, x722, x715, x606);
  let mut x725: u32 = 0;
  let mut x726: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x725, &mut x726, x724, x717, x604);
  let mut x727: u32 = 0;
  let mut x728: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x727, &mut x728, x726, x719, x602);
  let mut x729: u32 = 0;
  let mut x730: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x729, &mut x730, 0x0, x721, x613);
  let mut x731: u32 = 0;
  let mut x732: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x731, &mut x732, x730, x723, x611);
  let mut x733: u32 = 0;
  let mut x734: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x733, &mut x734, x732, x725, x609);
  let mut x735: u32 = 0;
  let mut x736: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x735, &mut x736, x734, x727, x607);
  let mut x737: u32 = 0;
  let mut x738: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x737, &mut x738, 0x0, x688, x615);
  let mut x739: u32 = 0;
  let mut x740: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x739, &mut x740, x738, x729, x616);
  let mut x741: u32 = 0;
  let mut x742: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x741, &mut x742, x740, x731, x614);
  let mut x743: u32 = 0;
  let mut x744: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x743, &mut x744, x742, x733, x612);
  let mut x745: u32 = 0;
  let mut x746: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x745, &mut x746, x744, x735, x610);
  let mut x747: u32 = 0;
  let mut x748: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x747, &mut x748, 0x0, x737, x625);
  let mut x749: u32 = 0;
  let mut x750: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x749, &mut x750, x748, x739, x623);
  let mut x751: u32 = 0;
  let mut x752: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x751, &mut x752, x750, x741, x621);
  let mut x753: u32 = 0;
  let mut x754: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x753, &mut x754, x752, x743, x619);
  let mut x755: u32 = 0;
  let mut x756: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x755, &mut x756, x754, x745, x617);
  let mut x757: u32 = 0;
  let mut x758: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x757, &mut x758, 0x0, x690, x627);
  let mut x759: u32 = 0;
  let mut x760: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x759, &mut x760, x758, x747, x628);
  let mut x761: u32 = 0;
  let mut x762: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x761, &mut x762, x760, x749, x626);
  let mut x763: u32 = 0;
  let mut x764: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x763, &mut x764, x762, x751, x624);
  let mut x765: u32 = 0;
  let mut x766: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x765, &mut x766, x764, x753, x622);
  let mut x767: u32 = 0;
  let mut x768: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x767, &mut x768, x766, x755, x620);
  let mut x769: u32 = 0;
  let mut x770: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x769, &mut x770, 0x0, x757, x639);
  let mut x771: u32 = 0;
  let mut x772: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x771, &mut x772, x770, x759, x637);
  let mut x773: u32 = 0;
  let mut x774: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x773, &mut x774, x772, x761, x635);
  let mut x775: u32 = 0;
  let mut x776: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x775, &mut x776, x774, x763, x633);
  let mut x777: u32 = 0;
  let mut x778: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x777, &mut x778, x776, x765, x631);
  let mut x779: u32 = 0;
  let mut x780: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x779, &mut x780, x778, x767, x629);
  let mut x781: u32 = 0;
  let mut x782: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x781, &mut x782, 0x0, x692, x641);
  let mut x783: u32 = 0;
  let mut x784: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x783, &mut x784, x782, x769, x642);
  let mut x785: u32 = 0;
  let mut x786: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x785, &mut x786, x784, x771, x640);
  let mut x787: u32 = 0;
  let mut x788: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x787, &mut x788, x786, x773, x638);
  let mut x789: u32 = 0;
  let mut x790: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x789, &mut x790, x788, x775, x636);
  let mut x791: u32 = 0;
  let mut x792: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x791, &mut x792, x790, x777, x634);
  let mut x793: u32 = 0;
  let mut x794: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x793, &mut x794, x792, x779, x632);
  let mut x795: u32 = 0;
  let mut x796: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x795, &mut x796, 0x0, x781, x655);
  let mut x797: u32 = 0;
  let mut x798: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x797, &mut x798, x796, x783, x653);
  let mut x799: u32 = 0;
  let mut x800: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x799, &mut x800, x798, x785, x651);
  let mut x801: u32 = 0;
  let mut x802: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x801, &mut x802, x800, x787, x649);
  let mut x803: u32 = 0;
  let mut x804: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x803, &mut x804, x802, x789, x647);
  let mut x805: u32 = 0;
  let mut x806: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x805, &mut x806, x804, x791, x645);
  let mut x807: u32 = 0;
  let mut x808: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x807, &mut x808, x806, x793, x643);
  let mut x809: u32 = 0;
  let mut x810: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x809, &mut x810, 0x0, x694, x657);
  let mut x811: u32 = 0;
  let mut x812: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x811, &mut x812, x810, x795, x658);
  let mut x813: u32 = 0;
  let mut x814: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x813, &mut x814, x812, x797, x656);
  let mut x815: u32 = 0;
  let mut x816: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x815, &mut x816, x814, x799, x654);
  let mut x817: u32 = 0;
  let mut x818: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x817, &mut x818, x816, x801, x652);
  let mut x819: u32 = 0;
  let mut x820: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x819, &mut x820, x818, x803, x650);
  let mut x821: u32 = 0;
  let mut x822: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x821, &mut x822, x820, x805, x648);
  let mut x823: u32 = 0;
  let mut x824: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x823, &mut x824, x822, x807, x646);
  let mut x825: u32 = 0;
  let mut x826: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x825, &mut x826, 0x0, x809, x673);
  let mut x827: u32 = 0;
  let mut x828: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x827, &mut x828, x826, x811, x671);
  let mut x829: u32 = 0;
  let mut x830: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x829, &mut x830, x828, x813, x669);
  let mut x831: u32 = 0;
  let mut x832: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x831, &mut x832, x830, x815, x667);
  let mut x833: u32 = 0;
  let mut x834: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x833, &mut x834, x832, x817, x665);
  let mut x835: u32 = 0;
  let mut x836: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x835, &mut x836, x834, x819, x663);
  let mut x837: u32 = 0;
  let mut x838: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x837, &mut x838, x836, x821, x661);
  let mut x839: u32 = 0;
  let mut x840: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x839, &mut x840, x838, x823, x659);
  let mut x841: u32 = 0;
  let mut x842: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x841, &mut x842, 0x0, x696, x675);
  let mut x843: u32 = 0;
  let mut x844: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x843, &mut x844, x842, x825, x676);
  let mut x845: u32 = 0;
  let mut x846: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x845, &mut x846, x844, x827, x674);
  let mut x847: u32 = 0;
  let mut x848: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x847, &mut x848, x846, x829, x672);
  let mut x849: u32 = 0;
  let mut x850: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x849, &mut x850, x848, x831, x670);
  let mut x851: u32 = 0;
  let mut x852: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x851, &mut x852, x850, x833, x668);
  let mut x853: u32 = 0;
  let mut x854: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x853, &mut x854, x852, x835, x666);
  let mut x855: u32 = 0;
  let mut x856: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x855, &mut x856, x854, x837, x664);
  let mut x857: u32 = 0;
  let mut x858: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x857, &mut x858, x856, x839, x662);
  let mut x859: u32 = 0;
  let mut x860: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x859, &mut x860, 0x0, x841, x693);
  let mut x861: u32 = 0;
  let mut x862: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x861, &mut x862, x860, x843, x691);
  let mut x863: u32 = 0;
  let mut x864: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x863, &mut x864, x862, x845, x689);
  let mut x865: u32 = 0;
  let mut x866: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x865, &mut x866, x864, x847, x687);
  let mut x867: u32 = 0;
  let mut x868: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x867, &mut x868, x866, x849, x685);
  let mut x869: u32 = 0;
  let mut x870: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x869, &mut x870, x868, x851, x683);
  let mut x871: u32 = 0;
  let mut x872: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x871, &mut x872, x870, x853, x681);
  let mut x873: u32 = 0;
  let mut x874: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x873, &mut x874, x872, x855, x679);
  let mut x875: u32 = 0;
  let mut x876: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x875, &mut x876, x874, x857, x677);
  let mut x877: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x877, (((arg2[8]) >> 31) as fiat_secp256k1_u1), (0x0 as u32), 0xffffffff);
  let mut x878: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x878, ((arg6 >> 31) as fiat_secp256k1_u1), (0x0 as u32), 0xffffffff);
  let mut x879: u32 = 0;
  let mut x880: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x879, &mut x880, x878, (arg2[0]));
  let mut x881: u32 = 0;
  let mut x882: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x881, &mut x882, x878, (arg2[1]));
  let mut x883: u32 = 0;
  let mut x884: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x883, &mut x884, x878, (arg2[0]));
  let mut x885: u32 = 0;
  let mut x886: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x885, &mut x886, x878, (arg2[2]));
  let mut x887: u32 = 0;
  let mut x888: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x887, &mut x888, x878, (arg2[1]));
  let mut x889: u32 = 0;
  let mut x890: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x889, &mut x890, x878, (arg2[0]));
  let mut x891: u32 = 0;
  let mut x892: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x891, &mut x892, x878, (arg2[3]));
  let mut x893: u32 = 0;
  let mut x894: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x893, &mut x894, x878, (arg2[2]));
  let mut x895: u32 = 0;
  let mut x896: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x895, &mut x896, x878, (arg2[1]));
  let mut x897: u32 = 0;
  let mut x898: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x897, &mut x898, x878, (arg2[0]));
  let mut x899: u32 = 0;
  let mut x900: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x899, &mut x900, x878, (arg2[4]));
  let mut x901: u32 = 0;
  let mut x902: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x901, &mut x902, x878, (arg2[3]));
  let mut x903: u32 = 0;
  let mut x904: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x903, &mut x904, x878, (arg2[2]));
  let mut x905: u32 = 0;
  let mut x906: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x905, &mut x906, x878, (arg2[1]));
  let mut x907: u32 = 0;
  let mut x908: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x907, &mut x908, x878, (arg2[0]));
  let mut x909: u32 = 0;
  let mut x910: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x909, &mut x910, x878, (arg2[5]));
  let mut x911: u32 = 0;
  let mut x912: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x911, &mut x912, x878, (arg2[4]));
  let mut x913: u32 = 0;
  let mut x914: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x913, &mut x914, x878, (arg2[3]));
  let mut x915: u32 = 0;
  let mut x916: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x915, &mut x916, x878, (arg2[2]));
  let mut x917: u32 = 0;
  let mut x918: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x917, &mut x918, x878, (arg2[1]));
  let mut x919: u32 = 0;
  let mut x920: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x919, &mut x920, x878, (arg2[0]));
  let mut x921: u32 = 0;
  let mut x922: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x921, &mut x922, x878, (arg2[6]));
  let mut x923: u32 = 0;
  let mut x924: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x923, &mut x924, x878, (arg2[5]));
  let mut x925: u32 = 0;
  let mut x926: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x925, &mut x926, x878, (arg2[4]));
  let mut x927: u32 = 0;
  let mut x928: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x927, &mut x928, x878, (arg2[3]));
  let mut x929: u32 = 0;
  let mut x930: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x929, &mut x930, x878, (arg2[2]));
  let mut x931: u32 = 0;
  let mut x932: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x931, &mut x932, x878, (arg2[1]));
  let mut x933: u32 = 0;
  let mut x934: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x933, &mut x934, x878, (arg2[0]));
  let mut x935: u32 = 0;
  let mut x936: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x935, &mut x936, x878, (arg2[7]));
  let mut x937: u32 = 0;
  let mut x938: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x937, &mut x938, x878, (arg2[6]));
  let mut x939: u32 = 0;
  let mut x940: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x939, &mut x940, x878, (arg2[5]));
  let mut x941: u32 = 0;
  let mut x942: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x941, &mut x942, x878, (arg2[4]));
  let mut x943: u32 = 0;
  let mut x944: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x943, &mut x944, x878, (arg2[3]));
  let mut x945: u32 = 0;
  let mut x946: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x945, &mut x946, x878, (arg2[2]));
  let mut x947: u32 = 0;
  let mut x948: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x947, &mut x948, x878, (arg2[1]));
  let mut x949: u32 = 0;
  let mut x950: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x949, &mut x950, x878, (arg2[0]));
  let mut x951: u32 = 0;
  let mut x952: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x951, &mut x952, x878, (arg2[8]));
  let mut x953: u32 = 0;
  let mut x954: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x953, &mut x954, x878, (arg2[7]));
  let mut x955: u32 = 0;
  let mut x956: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x955, &mut x956, x878, (arg2[6]));
  let mut x957: u32 = 0;
  let mut x958: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x957, &mut x958, x878, (arg2[5]));
  let mut x959: u32 = 0;
  let mut x960: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x959, &mut x960, x878, (arg2[4]));
  let mut x961: u32 = 0;
  let mut x962: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x961, &mut x962, x878, (arg2[3]));
  let mut x963: u32 = 0;
  let mut x964: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x963, &mut x964, x878, (arg2[2]));
  let mut x965: u32 = 0;
  let mut x966: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x965, &mut x966, x878, (arg2[1]));
  let mut x967: u32 = 0;
  let mut x968: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x967, &mut x968, x878, (arg2[0]));
  let mut x969: u32 = 0;
  let mut x970: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x969, &mut x970, arg6, x877);
  let mut x971: u32 = 0;
  let mut x972: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x971, &mut x972, arg6, (arg2[8]));
  let mut x973: u32 = 0;
  let mut x974: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x973, &mut x974, arg6, (arg2[7]));
  let mut x975: u32 = 0;
  let mut x976: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x975, &mut x976, arg6, (arg2[6]));
  let mut x977: u32 = 0;
  let mut x978: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x977, &mut x978, arg6, (arg2[5]));
  let mut x979: u32 = 0;
  let mut x980: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x979, &mut x980, arg6, (arg2[4]));
  let mut x981: u32 = 0;
  let mut x982: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x981, &mut x982, arg6, (arg2[3]));
  let mut x983: u32 = 0;
  let mut x984: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x983, &mut x984, arg6, (arg2[2]));
  let mut x985: u32 = 0;
  let mut x986: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x985, &mut x986, arg6, (arg2[1]));
  let mut x987: u32 = 0;
  let mut x988: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x987, &mut x988, arg6, (arg2[0]));
  let mut x989: u32 = 0;
  let mut x990: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x989, &mut x990, 0x0, x972, x879);
  let mut x991: u32 = 0;
  let mut x992: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x991, &mut x992, 0x0, x989, x881);
  let mut x993: u32 = 0;
  let mut x994: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x993, &mut x994, 0x0, x974, x883);
  let mut x995: u32 = 0;
  let mut x996: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x995, &mut x996, x994, x991, x884);
  let mut x997: u32 = 0;
  let mut x998: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x997, &mut x998, 0x0, x993, x887);
  let mut x999: u32 = 0;
  let mut x1000: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x999, &mut x1000, x998, x995, x885);
  let mut x1001: u32 = 0;
  let mut x1002: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1001, &mut x1002, 0x0, x976, x889);
  let mut x1003: u32 = 0;
  let mut x1004: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1003, &mut x1004, x1002, x997, x890);
  let mut x1005: u32 = 0;
  let mut x1006: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1005, &mut x1006, x1004, x999, x888);
  let mut x1007: u32 = 0;
  let mut x1008: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1007, &mut x1008, 0x0, x1001, x895);
  let mut x1009: u32 = 0;
  let mut x1010: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1009, &mut x1010, x1008, x1003, x893);
  let mut x1011: u32 = 0;
  let mut x1012: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1011, &mut x1012, x1010, x1005, x891);
  let mut x1013: u32 = 0;
  let mut x1014: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1013, &mut x1014, 0x0, x978, x897);
  let mut x1015: u32 = 0;
  let mut x1016: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1015, &mut x1016, x1014, x1007, x898);
  let mut x1017: u32 = 0;
  let mut x1018: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1017, &mut x1018, x1016, x1009, x896);
  let mut x1019: u32 = 0;
  let mut x1020: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1019, &mut x1020, x1018, x1011, x894);
  let mut x1021: u32 = 0;
  let mut x1022: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1021, &mut x1022, 0x0, x1013, x905);
  let mut x1023: u32 = 0;
  let mut x1024: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1023, &mut x1024, x1022, x1015, x903);
  let mut x1025: u32 = 0;
  let mut x1026: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1025, &mut x1026, x1024, x1017, x901);
  let mut x1027: u32 = 0;
  let mut x1028: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1027, &mut x1028, x1026, x1019, x899);
  let mut x1029: u32 = 0;
  let mut x1030: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1029, &mut x1030, 0x0, x980, x907);
  let mut x1031: u32 = 0;
  let mut x1032: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1031, &mut x1032, x1030, x1021, x908);
  let mut x1033: u32 = 0;
  let mut x1034: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1033, &mut x1034, x1032, x1023, x906);
  let mut x1035: u32 = 0;
  let mut x1036: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1035, &mut x1036, x1034, x1025, x904);
  let mut x1037: u32 = 0;
  let mut x1038: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1037, &mut x1038, x1036, x1027, x902);
  let mut x1039: u32 = 0;
  let mut x1040: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1039, &mut x1040, 0x0, x1029, x917);
  let mut x1041: u32 = 0;
  let mut x1042: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1041, &mut x1042, x1040, x1031, x915);
  let mut x1043: u32 = 0;
  let mut x1044: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1043, &mut x1044, x1042, x1033, x913);
  let mut x1045: u32 = 0;
  let mut x1046: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1045, &mut x1046, x1044, x1035, x911);
  let mut x1047: u32 = 0;
  let mut x1048: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1047, &mut x1048, x1046, x1037, x909);
  let mut x1049: u32 = 0;
  let mut x1050: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1049, &mut x1050, 0x0, x982, x919);
  let mut x1051: u32 = 0;
  let mut x1052: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1051, &mut x1052, x1050, x1039, x920);
  let mut x1053: u32 = 0;
  let mut x1054: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1053, &mut x1054, x1052, x1041, x918);
  let mut x1055: u32 = 0;
  let mut x1056: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1055, &mut x1056, x1054, x1043, x916);
  let mut x1057: u32 = 0;
  let mut x1058: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1057, &mut x1058, x1056, x1045, x914);
  let mut x1059: u32 = 0;
  let mut x1060: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1059, &mut x1060, x1058, x1047, x912);
  let mut x1061: u32 = 0;
  let mut x1062: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1061, &mut x1062, 0x0, x1049, x931);
  let mut x1063: u32 = 0;
  let mut x1064: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1063, &mut x1064, x1062, x1051, x929);
  let mut x1065: u32 = 0;
  let mut x1066: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1065, &mut x1066, x1064, x1053, x927);
  let mut x1067: u32 = 0;
  let mut x1068: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1067, &mut x1068, x1066, x1055, x925);
  let mut x1069: u32 = 0;
  let mut x1070: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1069, &mut x1070, x1068, x1057, x923);
  let mut x1071: u32 = 0;
  let mut x1072: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1071, &mut x1072, x1070, x1059, x921);
  let mut x1073: u32 = 0;
  let mut x1074: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1073, &mut x1074, 0x0, x984, x933);
  let mut x1075: u32 = 0;
  let mut x1076: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1075, &mut x1076, x1074, x1061, x934);
  let mut x1077: u32 = 0;
  let mut x1078: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1077, &mut x1078, x1076, x1063, x932);
  let mut x1079: u32 = 0;
  let mut x1080: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1079, &mut x1080, x1078, x1065, x930);
  let mut x1081: u32 = 0;
  let mut x1082: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1081, &mut x1082, x1080, x1067, x928);
  let mut x1083: u32 = 0;
  let mut x1084: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1083, &mut x1084, x1082, x1069, x926);
  let mut x1085: u32 = 0;
  let mut x1086: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1085, &mut x1086, x1084, x1071, x924);
  let mut x1087: u32 = 0;
  let mut x1088: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1087, &mut x1088, 0x0, x1073, x947);
  let mut x1089: u32 = 0;
  let mut x1090: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1089, &mut x1090, x1088, x1075, x945);
  let mut x1091: u32 = 0;
  let mut x1092: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1091, &mut x1092, x1090, x1077, x943);
  let mut x1093: u32 = 0;
  let mut x1094: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1093, &mut x1094, x1092, x1079, x941);
  let mut x1095: u32 = 0;
  let mut x1096: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1095, &mut x1096, x1094, x1081, x939);
  let mut x1097: u32 = 0;
  let mut x1098: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1097, &mut x1098, x1096, x1083, x937);
  let mut x1099: u32 = 0;
  let mut x1100: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1099, &mut x1100, x1098, x1085, x935);
  let mut x1101: u32 = 0;
  let mut x1102: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1101, &mut x1102, 0x0, x986, x949);
  let mut x1103: u32 = 0;
  let mut x1104: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1103, &mut x1104, x1102, x1087, x950);
  let mut x1105: u32 = 0;
  let mut x1106: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1105, &mut x1106, x1104, x1089, x948);
  let mut x1107: u32 = 0;
  let mut x1108: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1107, &mut x1108, x1106, x1091, x946);
  let mut x1109: u32 = 0;
  let mut x1110: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1109, &mut x1110, x1108, x1093, x944);
  let mut x1111: u32 = 0;
  let mut x1112: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1111, &mut x1112, x1110, x1095, x942);
  let mut x1113: u32 = 0;
  let mut x1114: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1113, &mut x1114, x1112, x1097, x940);
  let mut x1115: u32 = 0;
  let mut x1116: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1115, &mut x1116, x1114, x1099, x938);
  let mut x1117: u32 = 0;
  let mut x1118: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1117, &mut x1118, 0x0, x1101, x965);
  let mut x1119: u32 = 0;
  let mut x1120: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1119, &mut x1120, x1118, x1103, x963);
  let mut x1121: u32 = 0;
  let mut x1122: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1121, &mut x1122, x1120, x1105, x961);
  let mut x1123: u32 = 0;
  let mut x1124: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1123, &mut x1124, x1122, x1107, x959);
  let mut x1125: u32 = 0;
  let mut x1126: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1125, &mut x1126, x1124, x1109, x957);
  let mut x1127: u32 = 0;
  let mut x1128: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1127, &mut x1128, x1126, x1111, x955);
  let mut x1129: u32 = 0;
  let mut x1130: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1129, &mut x1130, x1128, x1113, x953);
  let mut x1131: u32 = 0;
  let mut x1132: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1131, &mut x1132, x1130, x1115, x951);
  let mut x1133: u32 = 0;
  let mut x1134: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1133, &mut x1134, 0x0, x988, x967);
  let mut x1135: u32 = 0;
  let mut x1136: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1135, &mut x1136, x1134, x1117, x968);
  let mut x1137: u32 = 0;
  let mut x1138: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1137, &mut x1138, x1136, x1119, x966);
  let mut x1139: u32 = 0;
  let mut x1140: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1139, &mut x1140, x1138, x1121, x964);
  let mut x1141: u32 = 0;
  let mut x1142: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1141, &mut x1142, x1140, x1123, x962);
  let mut x1143: u32 = 0;
  let mut x1144: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1143, &mut x1144, x1142, x1125, x960);
  let mut x1145: u32 = 0;
  let mut x1146: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1145, &mut x1146, x1144, x1127, x958);
  let mut x1147: u32 = 0;
  let mut x1148: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1147, &mut x1148, x1146, x1129, x956);
  let mut x1149: u32 = 0;
  let mut x1150: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1149, &mut x1150, x1148, x1131, x954);
  let mut x1151: u32 = 0;
  let mut x1152: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1151, &mut x1152, 0x0, x1133, x985);
  let mut x1153: u32 = 0;
  let mut x1154: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1153, &mut x1154, x1152, x1135, x983);
  let mut x1155: u32 = 0;
  let mut x1156: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1155, &mut x1156, x1154, x1137, x981);
  let mut x1157: u32 = 0;
  let mut x1158: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1157, &mut x1158, x1156, x1139, x979);
  let mut x1159: u32 = 0;
  let mut x1160: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1159, &mut x1160, x1158, x1141, x977);
  let mut x1161: u32 = 0;
  let mut x1162: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1161, &mut x1162, x1160, x1143, x975);
  let mut x1163: u32 = 0;
  let mut x1164: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1163, &mut x1164, x1162, x1145, x973);
  let mut x1165: u32 = 0;
  let mut x1166: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1165, &mut x1166, x1164, x1147, x971);
  let mut x1167: u32 = 0;
  let mut x1168: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1167, &mut x1168, x1166, x1149, x969);
  let mut x1169: u32 = 0;
  let mut x1170: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1169, &mut x1170, 0x0, x111, x403);
  let mut x1171: u32 = 0;
  let mut x1172: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1171, &mut x1172, x1170, x275, x567);
  let mut x1173: u32 = 0;
  let mut x1174: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1173, &mut x1174, x1172, x277, x569);
  let mut x1175: u32 = 0;
  let mut x1176: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1175, &mut x1176, x1174, x279, x571);
  let mut x1177: u32 = 0;
  let mut x1178: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1177, &mut x1178, x1176, x281, x573);
  let mut x1179: u32 = 0;
  let mut x1180: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1179, &mut x1180, x1178, x283, x575);
  let mut x1181: u32 = 0;
  let mut x1182: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1181, &mut x1182, x1180, x285, x577);
  let mut x1183: u32 = 0;
  let mut x1184: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1183, &mut x1184, x1182, x287, x579);
  let mut x1185: u32 = 0;
  let mut x1186: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1185, &mut x1186, x1184, x289, x581);
  let mut x1187: u32 = 0;
  let mut x1188: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1187, &mut x1188, x1186, x291, x583);
  let mut x1189: u32 = 0;
  let mut x1190: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1189, &mut x1190, 0x0, x695, x987);
  let mut x1191: u32 = 0;
  let mut x1192: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1191, &mut x1192, x1190, x859, x1151);
  let mut x1193: u32 = 0;
  let mut x1194: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1193, &mut x1194, x1192, x861, x1153);
  let mut x1195: u32 = 0;
  let mut x1196: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1195, &mut x1196, x1194, x863, x1155);
  let mut x1197: u32 = 0;
  let mut x1198: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1197, &mut x1198, x1196, x865, x1157);
  let mut x1199: u32 = 0;
  let mut x1200: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1199, &mut x1200, x1198, x867, x1159);
  let mut x1201: u32 = 0;
  let mut x1202: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1201, &mut x1202, x1200, x869, x1161);
  let mut x1203: u32 = 0;
  let mut x1204: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1203, &mut x1204, x1202, x871, x1163);
  let mut x1205: u32 = 0;
  let mut x1206: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1205, &mut x1206, x1204, x873, x1165);
  let mut x1207: u32 = 0;
  let mut x1208: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1207, &mut x1208, x1206, x875, x1167);
  let x1209: u32 = ((x1169 >> 30) | ((x1171 << 2) & 0xffffffff));
  let x1210: u32 = ((x1171 >> 30) | ((x1173 << 2) & 0xffffffff));
  let x1211: u32 = ((x1173 >> 30) | ((x1175 << 2) & 0xffffffff));
  let x1212: u32 = ((x1175 >> 30) | ((x1177 << 2) & 0xffffffff));
  let x1213: u32 = ((x1177 >> 30) | ((x1179 << 2) & 0xffffffff));
  let x1214: u32 = ((x1179 >> 30) | ((x1181 << 2) & 0xffffffff));
  let x1215: u32 = ((x1181 >> 30) | ((x1183 << 2) & 0xffffffff));
  let x1216: u32 = ((x1183 >> 30) | ((x1185 << 2) & 0xffffffff));
  let x1217: u32 = ((x1185 >> 30) | ((x1187 << 2) & 0xffffffff));
  let x1218: u32 = ((x1189 >> 30) | ((x1191 << 2) & 0xffffffff));
  let x1219: u32 = ((x1191 >> 30) | ((x1193 << 2) & 0xffffffff));
  let x1220: u32 = ((x1193 >> 30) | ((x1195 << 2) & 0xffffffff));
  let x1221: u32 = ((x1195 >> 30) | ((x1197 << 2) & 0xffffffff));
  let x1222: u32 = ((x1197 >> 30) | ((x1199 << 2) & 0xffffffff));
  let x1223: u32 = ((x1199 >> 30) | ((x1201 << 2) & 0xffffffff));
  let x1224: u32 = ((x1201 >> 30) | ((x1203 << 2) & 0xffffffff));
  let x1225: u32 = ((x1203 >> 30) | ((x1205 << 2) & 0xffffffff));
  let x1226: u32 = ((x1205 >> 30) | ((x1207 << 2) & 0xffffffff));
  out1[0] = x1209;
  out1[1] = x1210;
  out1[2] = x1211;
  out1[3] = x1212;
  out1[4] = x1213;
  out1[5] = x1214;
  out1[6] = x1215;
  out1[7] = x1216;
  out1[8] = x1217;
  out2[0] = x1218;
  out2[1] = x1219;
  out2[2] = x1220;
  out2[3] = x1221;
  out2[4] = x1222;
  out2[5] = x1223;
  out2[6] = x1224;
  out2[7] = x1225;
  out2[8] = x1226;
}

/// The function fiat_secp256k1_update_vr computes a update_vr.
///
/// Postconditions:
///   0 ≤ eval arg1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg3: [0x0 ~> 0xffffffff]
///   arg4: [0x0 ~> 0xffffffff]
///   arg5: [0x0 ~> 0xffffffff]
///   arg6: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_secp256k1_update_vr(out1: &mut [u32; 8], out2: &mut [u32; 8], arg1: &[u32; 8], arg2: &[u32; 8], arg3: u32, arg4: u32, arg5: u32, arg6: u32) -> () {
  let x1: fiat_secp256k1_u1 = ((arg3 >> 31) as fiat_secp256k1_u1);
  let x2: u32 = (((((!arg3) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x3: u32 = 0;
  let mut x4: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3, &mut x4, 0x0, (0x0 as u32), x2);
  let mut x5: u32 = 0;
  let mut x6: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x5, &mut x6, x4, (0x0 as u32), (0x0 as u32));
  let mut x7: u32 = 0;
  let mut x8: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x7, &mut x8, x6, (0x0 as u32), (0x0 as u32));
  let mut x9: u32 = 0;
  let mut x10: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x9, &mut x10, x8, (0x0 as u32), (0x0 as u32));
  let mut x11: u32 = 0;
  let mut x12: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x11, &mut x12, x10, (0x0 as u32), (0x0 as u32));
  let mut x13: u32 = 0;
  let mut x14: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x13, &mut x14, x12, (0x0 as u32), (0x0 as u32));
  let mut x15: u32 = 0;
  let mut x16: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x15, &mut x16, x14, (0x0 as u32), (0x0 as u32));
  let mut x17: u32 = 0;
  let mut x18: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x17, &mut x18, x16, (0x0 as u32), (0x0 as u32));
  let mut x19: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x19, x18, (0x0 as u32), 0xffffffff);
  let mut x20: u32 = 0;
  let mut x21: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x20, &mut x21, 0x0, x3, (x19 & 0xfffffc2f));
  let mut x22: u32 = 0;
  let mut x23: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x22, &mut x23, x21, x5, (x19 & 0xfffffffe));
  let mut x24: u32 = 0;
  let mut x25: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x24, &mut x25, x23, x7, x19);
  let mut x26: u32 = 0;
  let mut x27: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x26, &mut x27, x25, x9, x19);
  let mut x28: u32 = 0;
  let mut x29: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x28, &mut x29, x27, x11, x19);
  let mut x30: u32 = 0;
  let mut x31: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x30, &mut x31, x29, x13, x19);
  let mut x32: u32 = 0;
  let mut x33: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x32, &mut x33, x31, x15, x19);
  let mut x34: u32 = 0;
  let mut x35: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x34, &mut x35, x33, x17, x19);
  let mut x36: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x36, x1, arg3, x20);
  let mut x37: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x37, x1, (0x0 as u32), x22);
  let mut x38: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x38, x1, (0x0 as u32), x24);
  let mut x39: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x39, x1, (0x0 as u32), x26);
  let mut x40: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x40, x1, (0x0 as u32), x28);
  let mut x41: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x41, x1, (0x0 as u32), x30);
  let mut x42: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x42, x1, (0x0 as u32), x32);
  let mut x43: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x43, x1, (0x0 as u32), x34);
  let x44: fiat_secp256k1_u1 = ((arg4 >> 31) as fiat_secp256k1_u1);
  let x45: u32 = (((((!arg4) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x46: u32 = 0;
  let mut x47: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x46, &mut x47, 0x0, (0x0 as u32), x45);
  let mut x48: u32 = 0;
  let mut x49: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x48, &mut x49, x47, (0x0 as u32), (0x0 as u32));
  let mut x50: u32 = 0;
  let mut x51: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x50, &mut x51, x49, (0x0 as u32), (0x0 as u32));
  let mut x52: u32 = 0;
  let mut x53: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x52, &mut x53, x51, (0x0 as u32), (0x0 as u32));
  let mut x54: u32 = 0;
  let mut x55: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x54, &mut x55, x53, (0x0 as u32), (0x0 as u32));
  let mut x56: u32 = 0;
  let mut x57: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x56, &mut x57, x55, (0x0 as u32), (0x0 as u32));
  let mut x58: u32 = 0;
  let mut x59: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x58, &mut x59, x57, (0x0 as u32), (0x0 as u32));
  let mut x60: u32 = 0;
  let mut x61: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x60, &mut x61, x59, (0x0 as u32), (0x0 as u32));
  let mut x62: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x62, x61, (0x0 as u32), 0xffffffff);
  let mut x63: u32 = 0;
  let mut x64: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x63, &mut x64, 0x0, x46, (x62 & 0xfffffc2f));
  let mut x65: u32 = 0;
  let mut x66: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x65, &mut x66, x64, x48, (x62 & 0xfffffffe));
  let mut x67: u32 = 0;
  let mut x68: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x67, &mut x68, x66, x50, x62);
  let mut x69: u32 = 0;
  let mut x70: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x69, &mut x70, x68, x52, x62);
  let mut x71: u32 = 0;
  let mut x72: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x71, &mut x72, x70, x54, x62);
  let mut x73: u32 = 0;
  let mut x74: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x73, &mut x74, x72, x56, x62);
  let mut x75: u32 = 0;
  let mut x76: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x75, &mut x76, x74, x58, x62);
  let mut x77: u32 = 0;
  let mut x78: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x77, &mut x78, x76, x60, x62);
  let mut x79: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x79, x44, arg4, x63);
  let mut x80: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x80, x44, (0x0 as u32), x65);
  let mut x81: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x81, x44, (0x0 as u32), x67);
  let mut x82: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x82, x44, (0x0 as u32), x69);
  let mut x83: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x83, x44, (0x0 as u32), x71);
  let mut x84: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x84, x44, (0x0 as u32), x73);
  let mut x85: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x85, x44, (0x0 as u32), x75);
  let mut x86: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x86, x44, (0x0 as u32), x77);
  let x87: fiat_secp256k1_u1 = ((arg5 >> 31) as fiat_secp256k1_u1);
  let x88: u32 = (((((!arg5) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x89: u32 = 0;
  let mut x90: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x89, &mut x90, 0x0, (0x0 as u32), x88);
  let mut x91: u32 = 0;
  let mut x92: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x91, &mut x92, x90, (0x0 as u32), (0x0 as u32));
  let mut x93: u32 = 0;
  let mut x94: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x93, &mut x94, x92, (0x0 as u32), (0x0 as u32));
  let mut x95: u32 = 0;
  let mut x96: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x95, &mut x96, x94, (0x0 as u32), (0x0 as u32));
  let mut x97: u32 = 0;
  let mut x98: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x97, &mut x98, x96, (0x0 as u32), (0x0 as u32));
  let mut x99: u32 = 0;
  let mut x100: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x99, &mut x100, x98, (0x0 as u32), (0x0 as u32));
  let mut x101: u32 = 0;
  let mut x102: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x101, &mut x102, x100, (0x0 as u32), (0x0 as u32));
  let mut x103: u32 = 0;
  let mut x104: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x103, &mut x104, x102, (0x0 as u32), (0x0 as u32));
  let mut x105: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x105, x104, (0x0 as u32), 0xffffffff);
  let mut x106: u32 = 0;
  let mut x107: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x106, &mut x107, 0x0, x89, (x105 & 0xfffffc2f));
  let mut x108: u32 = 0;
  let mut x109: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x108, &mut x109, x107, x91, (x105 & 0xfffffffe));
  let mut x110: u32 = 0;
  let mut x111: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x110, &mut x111, x109, x93, x105);
  let mut x112: u32 = 0;
  let mut x113: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x112, &mut x113, x111, x95, x105);
  let mut x114: u32 = 0;
  let mut x115: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x114, &mut x115, x113, x97, x105);
  let mut x116: u32 = 0;
  let mut x117: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x116, &mut x117, x115, x99, x105);
  let mut x118: u32 = 0;
  let mut x119: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x118, &mut x119, x117, x101, x105);
  let mut x120: u32 = 0;
  let mut x121: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x120, &mut x121, x119, x103, x105);
  let mut x122: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x122, x87, arg5, x106);
  let mut x123: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x123, x87, (0x0 as u32), x108);
  let mut x124: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x124, x87, (0x0 as u32), x110);
  let mut x125: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x125, x87, (0x0 as u32), x112);
  let mut x126: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x126, x87, (0x0 as u32), x114);
  let mut x127: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x127, x87, (0x0 as u32), x116);
  let mut x128: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x128, x87, (0x0 as u32), x118);
  let mut x129: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x129, x87, (0x0 as u32), x120);
  let x130: fiat_secp256k1_u1 = ((arg6 >> 31) as fiat_secp256k1_u1);
  let x131: u32 = (((((!arg6) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x132: u32 = 0;
  let mut x133: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x132, &mut x133, 0x0, (0x0 as u32), x131);
  let mut x134: u32 = 0;
  let mut x135: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x134, &mut x135, x133, (0x0 as u32), (0x0 as u32));
  let mut x136: u32 = 0;
  let mut x137: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x136, &mut x137, x135, (0x0 as u32), (0x0 as u32));
  let mut x138: u32 = 0;
  let mut x139: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x138, &mut x139, x137, (0x0 as u32), (0x0 as u32));
  let mut x140: u32 = 0;
  let mut x141: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x140, &mut x141, x139, (0x0 as u32), (0x0 as u32));
  let mut x142: u32 = 0;
  let mut x143: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x142, &mut x143, x141, (0x0 as u32), (0x0 as u32));
  let mut x144: u32 = 0;
  let mut x145: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x144, &mut x145, x143, (0x0 as u32), (0x0 as u32));
  let mut x146: u32 = 0;
  let mut x147: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x146, &mut x147, x145, (0x0 as u32), (0x0 as u32));
  let mut x148: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x148, x147, (0x0 as u32), 0xffffffff);
  let mut x149: u32 = 0;
  let mut x150: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x149, &mut x150, 0x0, x132, (x148 & 0xfffffc2f));
  let mut x151: u32 = 0;
  let mut x152: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x151, &mut x152, x150, x134, (x148 & 0xfffffffe));
  let mut x153: u32 = 0;
  let mut x154: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x153, &mut x154, x152, x136, x148);
  let mut x155: u32 = 0;
  let mut x156: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x155, &mut x156, x154, x138, x148);
  let mut x157: u32 = 0;
  let mut x158: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x157, &mut x158, x156, x140, x148);
  let mut x159: u32 = 0;
  let mut x160: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x159, &mut x160, x158, x142, x148);
  let mut x161: u32 = 0;
  let mut x162: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x161, &mut x162, x160, x144, x148);
  let mut x163: u32 = 0;
  let mut x164: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x163, &mut x164, x162, x146, x148);
  let mut x165: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x165, x130, arg6, x149);
  let mut x166: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x166, x130, (0x0 as u32), x151);
  let mut x167: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x167, x130, (0x0 as u32), x153);
  let mut x168: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x168, x130, (0x0 as u32), x155);
  let mut x169: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x169, x130, (0x0 as u32), x157);
  let mut x170: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x170, x130, (0x0 as u32), x159);
  let mut x171: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x171, x130, (0x0 as u32), x161);
  let mut x172: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x172, x130, (0x0 as u32), x163);
  let mut x173: u32 = 0;
  let mut x174: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x173, &mut x174, x36, (arg1[7]));
  let mut x175: u32 = 0;
  let mut x176: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x175, &mut x176, x36, (arg1[6]));
  let mut x177: u32 = 0;
  let mut x178: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x177, &mut x178, x36, (arg1[5]));
  let mut x179: u32 = 0;
  let mut x180: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x179, &mut x180, x36, (arg1[4]));
  let mut x181: u32 = 0;
  let mut x182: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x181, &mut x182, x36, (arg1[3]));
  let mut x183: u32 = 0;
  let mut x184: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x183, &mut x184, x36, (arg1[2]));
  let mut x185: u32 = 0;
  let mut x186: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x185, &mut x186, x36, (arg1[1]));
  let mut x187: u32 = 0;
  let mut x188: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x187, &mut x188, x36, (arg1[0]));
  let mut x189: u32 = 0;
  let mut x190: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x189, &mut x190, 0x0, x188, x185);
  let mut x191: u32 = 0;
  let mut x192: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x191, &mut x192, x190, x186, x183);
  let mut x193: u32 = 0;
  let mut x194: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x193, &mut x194, x192, x184, x181);
  let mut x195: u32 = 0;
  let mut x196: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x195, &mut x196, x194, x182, x179);
  let mut x197: u32 = 0;
  let mut x198: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x197, &mut x198, x196, x180, x177);
  let mut x199: u32 = 0;
  let mut x200: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x199, &mut x200, x198, x178, x175);
  let mut x201: u32 = 0;
  let mut x202: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x201, &mut x202, x200, x176, x173);
  let x203: u32 = ((x202 as u32) + x174);
  let mut x204: u32 = 0;
  let mut x205: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x204, &mut x205, x187, 0xd2253531);
  let mut x206: u32 = 0;
  let mut x207: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x206, &mut x207, x204, 0xffffffff);
  let mut x208: u32 = 0;
  let mut x209: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x208, &mut x209, x204, 0xffffffff);
  let mut x210: u32 = 0;
  let mut x211: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x210, &mut x211, x204, 0xffffffff);
  let mut x212: u32 = 0;
  let mut x213: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x212, &mut x213, x204, 0xffffffff);
  let mut x214: u32 = 0;
  let mut x215: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x214, &mut x215, x204, 0xffffffff);
  let mut x216: u32 = 0;
  let mut x217: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x216, &mut x217, x204, 0xffffffff);
  let mut x218: u32 = 0;
  let mut x219: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x218, &mut x219, x204, 0xfffffffe);
  let mut x220: u32 = 0;
  let mut x221: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x220, &mut x221, x204, 0xfffffc2f);
  let mut x222: u32 = 0;
  let mut x223: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x222, &mut x223, 0x0, x221, x218);
  let mut x224: u32 = 0;
  let mut x225: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x224, &mut x225, x223, x219, x216);
  let mut x226: u32 = 0;
  let mut x227: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x226, &mut x227, x225, x217, x214);
  let mut x228: u32 = 0;
  let mut x229: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x228, &mut x229, x227, x215, x212);
  let mut x230: u32 = 0;
  let mut x231: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x230, &mut x231, x229, x213, x210);
  let mut x232: u32 = 0;
  let mut x233: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x232, &mut x233, x231, x211, x208);
  let mut x234: u32 = 0;
  let mut x235: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x234, &mut x235, x233, x209, x206);
  let x236: u32 = ((x235 as u32) + x207);
  let mut x237: u32 = 0;
  let mut x238: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x237, &mut x238, 0x0, x187, x220);
  let mut x239: u32 = 0;
  let mut x240: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x239, &mut x240, x238, x189, x222);
  let mut x241: u32 = 0;
  let mut x242: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x241, &mut x242, x240, x191, x224);
  let mut x243: u32 = 0;
  let mut x244: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x243, &mut x244, x242, x193, x226);
  let mut x245: u32 = 0;
  let mut x246: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x245, &mut x246, x244, x195, x228);
  let mut x247: u32 = 0;
  let mut x248: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x247, &mut x248, x246, x197, x230);
  let mut x249: u32 = 0;
  let mut x250: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x249, &mut x250, x248, x199, x232);
  let mut x251: u32 = 0;
  let mut x252: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x251, &mut x252, x250, x201, x234);
  let mut x253: u32 = 0;
  let mut x254: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x253, &mut x254, x252, x203, x236);
  let mut x255: u32 = 0;
  let mut x256: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x255, &mut x256, x37, (arg1[7]));
  let mut x257: u32 = 0;
  let mut x258: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x257, &mut x258, x37, (arg1[6]));
  let mut x259: u32 = 0;
  let mut x260: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x259, &mut x260, x37, (arg1[5]));
  let mut x261: u32 = 0;
  let mut x262: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x261, &mut x262, x37, (arg1[4]));
  let mut x263: u32 = 0;
  let mut x264: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x263, &mut x264, x37, (arg1[3]));
  let mut x265: u32 = 0;
  let mut x266: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x265, &mut x266, x37, (arg1[2]));
  let mut x267: u32 = 0;
  let mut x268: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x267, &mut x268, x37, (arg1[1]));
  let mut x269: u32 = 0;
  let mut x270: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x269, &mut x270, x37, (arg1[0]));
  let mut x271: u32 = 0;
  let mut x272: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x271, &mut x272, 0x0, x270, x267);
  let mut x273: u32 = 0;
  let mut x274: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x273, &mut x274, x272, x268, x265);
  let mut x275: u32 = 0;
  let mut x276: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x275, &mut x276, x274, x266, x263);
  let mut x277: u32 = 0;
  let mut x278: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x277, &mut x278, x276, x264, x261);
  let mut x279: u32 = 0;
  let mut x280: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x279, &mut x280, x278, x262, x259);
  let mut x281: u32 = 0;
  let mut x282: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x281, &mut x282, x280, x260, x257);
  let mut x283: u32 = 0;
  let mut x284: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x283, &mut x284, x282, x258, x255);
  let x285: u32 = ((x284 as u32) + x256);
  let mut x286: u32 = 0;
  let mut x287: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x286, &mut x287, 0x0, x239, x269);
  let mut x288: u32 = 0;
  let mut x289: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x288, &mut x289, x287, x241, x271);
  let mut x290: u32 = 0;
  let mut x291: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x290, &mut x291, x289, x243, x273);
  let mut x292: u32 = 0;
  let mut x293: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x292, &mut x293, x291, x245, x275);
  let mut x294: u32 = 0;
  let mut x295: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x294, &mut x295, x293, x247, x277);
  let mut x296: u32 = 0;
  let mut x297: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x296, &mut x297, x295, x249, x279);
  let mut x298: u32 = 0;
  let mut x299: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x298, &mut x299, x297, x251, x281);
  let mut x300: u32 = 0;
  let mut x301: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x300, &mut x301, x299, x253, x283);
  let mut x302: u32 = 0;
  let mut x303: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x302, &mut x303, x301, (x254 as u32), x285);
  let mut x304: u32 = 0;
  let mut x305: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x304, &mut x305, x286, 0xd2253531);
  let mut x306: u32 = 0;
  let mut x307: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x306, &mut x307, x304, 0xffffffff);
  let mut x308: u32 = 0;
  let mut x309: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x308, &mut x309, x304, 0xffffffff);
  let mut x310: u32 = 0;
  let mut x311: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x310, &mut x311, x304, 0xffffffff);
  let mut x312: u32 = 0;
  let mut x313: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x312, &mut x313, x304, 0xffffffff);
  let mut x314: u32 = 0;
  let mut x315: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x314, &mut x315, x304, 0xffffffff);
  let mut x316: u32 = 0;
  let mut x317: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x316, &mut x317, x304, 0xffffffff);
  let mut x318: u32 = 0;
  let mut x319: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x318, &mut x319, x304, 0xfffffffe);
  let mut x320: u32 = 0;
  let mut x321: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x320, &mut x321, x304, 0xfffffc2f);
  let mut x322: u32 = 0;
  let mut x323: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x322, &mut x323, 0x0, x321, x318);
  let mut x324: u32 = 0;
  let mut x325: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x324, &mut x325, x323, x319, x316);
  let mut x326: u32 = 0;
  let mut x327: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x326, &mut x327, x325, x317, x314);
  let mut x328: u32 = 0;
  let mut x329: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x328, &mut x329, x327, x315, x312);
  let mut x330: u32 = 0;
  let mut x331: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x330, &mut x331, x329, x313, x310);
  let mut x332: u32 = 0;
  let mut x333: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x332, &mut x333, x331, x311, x308);
  let mut x334: u32 = 0;
  let mut x335: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x334, &mut x335, x333, x309, x306);
  let x336: u32 = ((x335 as u32) + x307);
  let mut x337: u32 = 0;
  let mut x338: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x337, &mut x338, 0x0, x286, x320);
  let mut x339: u32 = 0;
  let mut x340: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x339, &mut x340, x338, x288, x322);
  let mut x341: u32 = 0;
  let mut x342: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x341, &mut x342, x340, x290, x324);
  let mut x343: u32 = 0;
  let mut x344: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x343, &mut x344, x342, x292, x326);
  let mut x345: u32 = 0;
  let mut x346: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x345, &mut x346, x344, x294, x328);
  let mut x347: u32 = 0;
  let mut x348: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x347, &mut x348, x346, x296, x330);
  let mut x349: u32 = 0;
  let mut x350: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x349, &mut x350, x348, x298, x332);
  let mut x351: u32 = 0;
  let mut x352: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x351, &mut x352, x350, x300, x334);
  let mut x353: u32 = 0;
  let mut x354: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x353, &mut x354, x352, x302, x336);
  let x355: u32 = ((x354 as u32) + (x303 as u32));
  let mut x356: u32 = 0;
  let mut x357: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x356, &mut x357, x38, (arg1[7]));
  let mut x358: u32 = 0;
  let mut x359: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x358, &mut x359, x38, (arg1[6]));
  let mut x360: u32 = 0;
  let mut x361: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x360, &mut x361, x38, (arg1[5]));
  let mut x362: u32 = 0;
  let mut x363: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x362, &mut x363, x38, (arg1[4]));
  let mut x364: u32 = 0;
  let mut x365: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x364, &mut x365, x38, (arg1[3]));
  let mut x366: u32 = 0;
  let mut x367: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x366, &mut x367, x38, (arg1[2]));
  let mut x368: u32 = 0;
  let mut x369: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x368, &mut x369, x38, (arg1[1]));
  let mut x370: u32 = 0;
  let mut x371: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x370, &mut x371, x38, (arg1[0]));
  let mut x372: u32 = 0;
  let mut x373: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x372, &mut x373, 0x0, x371, x368);
  let mut x374: u32 = 0;
  let mut x375: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x374, &mut x375, x373, x369, x366);
  let mut x376: u32 = 0;
  let mut x377: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x376, &mut x377, x375, x367, x364);
  let mut x378: u32 = 0;
  let mut x379: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x378, &mut x379, x377, x365, x362);
  let mut x380: u32 = 0;
  let mut x381: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x380, &mut x381, x379, x363, x360);
  let mut x382: u32 = 0;
  let mut x383: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x382, &mut x383, x381, x361, x358);
  let mut x384: u32 = 0;
  let mut x385: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x384, &mut x385, x383, x359, x356);
  let x386: u32 = ((x385 as u32) + x357);
  let mut x387: u32 = 0;
  let mut x388: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x387, &mut x388, 0x0, x339, x370);
  let mut x389: u32 = 0;
  let mut x390: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x389, &mut x390, x388, x341, x372);
  let mut x391: u32 = 0;
  let mut x392: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x391, &mut x392, x390, x343, x374);
  let mut x393: u32 = 0;
  let mut x394: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x393, &mut x394, x392, x345, x376);
  let mut x395: u32 = 0;
  let mut x396: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x395, &mut x396, x394, x347, x378);
  let mut x397: u32 = 0;
  let mut x398: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x397, &mut x398, x396, x349, x380);
  let mut x399: u32 = 0;
  let mut x400: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x399, &mut x400, x398, x351, x382);
  let mut x401: u32 = 0;
  let mut x402: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x401, &mut x402, x400, x353, x384);
  let mut x403: u32 = 0;
  let mut x404: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x403, &mut x404, x402, x355, x386);
  let mut x405: u32 = 0;
  let mut x406: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x405, &mut x406, x387, 0xd2253531);
  let mut x407: u32 = 0;
  let mut x408: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x407, &mut x408, x405, 0xffffffff);
  let mut x409: u32 = 0;
  let mut x410: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x409, &mut x410, x405, 0xffffffff);
  let mut x411: u32 = 0;
  let mut x412: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x411, &mut x412, x405, 0xffffffff);
  let mut x413: u32 = 0;
  let mut x414: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x413, &mut x414, x405, 0xffffffff);
  let mut x415: u32 = 0;
  let mut x416: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x415, &mut x416, x405, 0xffffffff);
  let mut x417: u32 = 0;
  let mut x418: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x417, &mut x418, x405, 0xffffffff);
  let mut x419: u32 = 0;
  let mut x420: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x419, &mut x420, x405, 0xfffffffe);
  let mut x421: u32 = 0;
  let mut x422: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x421, &mut x422, x405, 0xfffffc2f);
  let mut x423: u32 = 0;
  let mut x424: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x423, &mut x424, 0x0, x422, x419);
  let mut x425: u32 = 0;
  let mut x426: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x425, &mut x426, x424, x420, x417);
  let mut x427: u32 = 0;
  let mut x428: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x427, &mut x428, x426, x418, x415);
  let mut x429: u32 = 0;
  let mut x430: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x429, &mut x430, x428, x416, x413);
  let mut x431: u32 = 0;
  let mut x432: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x431, &mut x432, x430, x414, x411);
  let mut x433: u32 = 0;
  let mut x434: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x433, &mut x434, x432, x412, x409);
  let mut x435: u32 = 0;
  let mut x436: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x435, &mut x436, x434, x410, x407);
  let x437: u32 = ((x436 as u32) + x408);
  let mut x438: u32 = 0;
  let mut x439: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x438, &mut x439, 0x0, x387, x421);
  let mut x440: u32 = 0;
  let mut x441: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x440, &mut x441, x439, x389, x423);
  let mut x442: u32 = 0;
  let mut x443: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x442, &mut x443, x441, x391, x425);
  let mut x444: u32 = 0;
  let mut x445: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x444, &mut x445, x443, x393, x427);
  let mut x446: u32 = 0;
  let mut x447: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x446, &mut x447, x445, x395, x429);
  let mut x448: u32 = 0;
  let mut x449: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x448, &mut x449, x447, x397, x431);
  let mut x450: u32 = 0;
  let mut x451: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x450, &mut x451, x449, x399, x433);
  let mut x452: u32 = 0;
  let mut x453: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x452, &mut x453, x451, x401, x435);
  let mut x454: u32 = 0;
  let mut x455: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x454, &mut x455, x453, x403, x437);
  let x456: u32 = ((x455 as u32) + (x404 as u32));
  let mut x457: u32 = 0;
  let mut x458: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x457, &mut x458, x39, (arg1[7]));
  let mut x459: u32 = 0;
  let mut x460: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x459, &mut x460, x39, (arg1[6]));
  let mut x461: u32 = 0;
  let mut x462: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x461, &mut x462, x39, (arg1[5]));
  let mut x463: u32 = 0;
  let mut x464: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x463, &mut x464, x39, (arg1[4]));
  let mut x465: u32 = 0;
  let mut x466: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x465, &mut x466, x39, (arg1[3]));
  let mut x467: u32 = 0;
  let mut x468: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x467, &mut x468, x39, (arg1[2]));
  let mut x469: u32 = 0;
  let mut x470: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x469, &mut x470, x39, (arg1[1]));
  let mut x471: u32 = 0;
  let mut x472: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x471, &mut x472, x39, (arg1[0]));
  let mut x473: u32 = 0;
  let mut x474: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x473, &mut x474, 0x0, x472, x469);
  let mut x475: u32 = 0;
  let mut x476: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x475, &mut x476, x474, x470, x467);
  let mut x477: u32 = 0;
  let mut x478: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x477, &mut x478, x476, x468, x465);
  let mut x479: u32 = 0;
  let mut x480: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x479, &mut x480, x478, x466, x463);
  let mut x481: u32 = 0;
  let mut x482: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x481, &mut x482, x480, x464, x461);
  let mut x483: u32 = 0;
  let mut x484: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x483, &mut x484, x482, x462, x459);
  let mut x485: u32 = 0;
  let mut x486: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x485, &mut x486, x484, x460, x457);
  let x487: u32 = ((x486 as u32) + x458);
  let mut x488: u32 = 0;
  let mut x489: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x488, &mut x489, 0x0, x440, x471);
  let mut x490: u32 = 0;
  let mut x491: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x490, &mut x491, x489, x442, x473);
  let mut x492: u32 = 0;
  let mut x493: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x492, &mut x493, x491, x444, x475);
  let mut x494: u32 = 0;
  let mut x495: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x494, &mut x495, x493, x446, x477);
  let mut x496: u32 = 0;
  let mut x497: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x496, &mut x497, x495, x448, x479);
  let mut x498: u32 = 0;
  let mut x499: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x498, &mut x499, x497, x450, x481);
  let mut x500: u32 = 0;
  let mut x501: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x500, &mut x501, x499, x452, x483);
  let mut x502: u32 = 0;
  let mut x503: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x502, &mut x503, x501, x454, x485);
  let mut x504: u32 = 0;
  let mut x505: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x504, &mut x505, x503, x456, x487);
  let mut x506: u32 = 0;
  let mut x507: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x506, &mut x507, x488, 0xd2253531);
  let mut x508: u32 = 0;
  let mut x509: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x508, &mut x509, x506, 0xffffffff);
  let mut x510: u32 = 0;
  let mut x511: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x510, &mut x511, x506, 0xffffffff);
  let mut x512: u32 = 0;
  let mut x513: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x512, &mut x513, x506, 0xffffffff);
  let mut x514: u32 = 0;
  let mut x515: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x514, &mut x515, x506, 0xffffffff);
  let mut x516: u32 = 0;
  let mut x517: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x516, &mut x517, x506, 0xffffffff);
  let mut x518: u32 = 0;
  let mut x519: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x518, &mut x519, x506, 0xffffffff);
  let mut x520: u32 = 0;
  let mut x521: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x520, &mut x521, x506, 0xfffffffe);
  let mut x522: u32 = 0;
  let mut x523: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x522, &mut x523, x506, 0xfffffc2f);
  let mut x524: u32 = 0;
  let mut x525: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x524, &mut x525, 0x0, x523, x520);
  let mut x526: u32 = 0;
  let mut x527: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x526, &mut x527, x525, x521, x518);
  let mut x528: u32 = 0;
  let mut x529: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x528, &mut x529, x527, x519, x516);
  let mut x530: u32 = 0;
  let mut x531: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x530, &mut x531, x529, x517, x514);
  let mut x532: u32 = 0;
  let mut x533: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x532, &mut x533, x531, x515, x512);
  let mut x534: u32 = 0;
  let mut x535: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x534, &mut x535, x533, x513, x510);
  let mut x536: u32 = 0;
  let mut x537: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x536, &mut x537, x535, x511, x508);
  let x538: u32 = ((x537 as u32) + x509);
  let mut x539: u32 = 0;
  let mut x540: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x539, &mut x540, 0x0, x488, x522);
  let mut x541: u32 = 0;
  let mut x542: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x541, &mut x542, x540, x490, x524);
  let mut x543: u32 = 0;
  let mut x544: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x543, &mut x544, x542, x492, x526);
  let mut x545: u32 = 0;
  let mut x546: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x545, &mut x546, x544, x494, x528);
  let mut x547: u32 = 0;
  let mut x548: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x547, &mut x548, x546, x496, x530);
  let mut x549: u32 = 0;
  let mut x550: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x549, &mut x550, x548, x498, x532);
  let mut x551: u32 = 0;
  let mut x552: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x551, &mut x552, x550, x500, x534);
  let mut x553: u32 = 0;
  let mut x554: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x553, &mut x554, x552, x502, x536);
  let mut x555: u32 = 0;
  let mut x556: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x555, &mut x556, x554, x504, x538);
  let x557: u32 = ((x556 as u32) + (x505 as u32));
  let mut x558: u32 = 0;
  let mut x559: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x558, &mut x559, x40, (arg1[7]));
  let mut x560: u32 = 0;
  let mut x561: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x560, &mut x561, x40, (arg1[6]));
  let mut x562: u32 = 0;
  let mut x563: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x562, &mut x563, x40, (arg1[5]));
  let mut x564: u32 = 0;
  let mut x565: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x564, &mut x565, x40, (arg1[4]));
  let mut x566: u32 = 0;
  let mut x567: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x566, &mut x567, x40, (arg1[3]));
  let mut x568: u32 = 0;
  let mut x569: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x568, &mut x569, x40, (arg1[2]));
  let mut x570: u32 = 0;
  let mut x571: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x570, &mut x571, x40, (arg1[1]));
  let mut x572: u32 = 0;
  let mut x573: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x572, &mut x573, x40, (arg1[0]));
  let mut x574: u32 = 0;
  let mut x575: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x574, &mut x575, 0x0, x573, x570);
  let mut x576: u32 = 0;
  let mut x577: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x576, &mut x577, x575, x571, x568);
  let mut x578: u32 = 0;
  let mut x579: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x578, &mut x579, x577, x569, x566);
  let mut x580: u32 = 0;
  let mut x581: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x580, &mut x581, x579, x567, x564);
  let mut x582: u32 = 0;
  let mut x583: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x582, &mut x583, x581, x565, x562);
  let mut x584: u32 = 0;
  let mut x585: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x584, &mut x585, x583, x563, x560);
  let mut x586: u32 = 0;
  let mut x587: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x586, &mut x587, x585, x561, x558);
  let x588: u32 = ((x587 as u32) + x559);
  let mut x589: u32 = 0;
  let mut x590: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x589, &mut x590, 0x0, x541, x572);
  let mut x591: u32 = 0;
  let mut x592: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x591, &mut x592, x590, x543, x574);
  let mut x593: u32 = 0;
  let mut x594: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x593, &mut x594, x592, x545, x576);
  let mut x595: u32 = 0;
  let mut x596: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x595, &mut x596, x594, x547, x578);
  let mut x597: u32 = 0;
  let mut x598: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x597, &mut x598, x596, x549, x580);
  let mut x599: u32 = 0;
  let mut x600: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x599, &mut x600, x598, x551, x582);
  let mut x601: u32 = 0;
  let mut x602: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x601, &mut x602, x600, x553, x584);
  let mut x603: u32 = 0;
  let mut x604: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x603, &mut x604, x602, x555, x586);
  let mut x605: u32 = 0;
  let mut x606: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x605, &mut x606, x604, x557, x588);
  let mut x607: u32 = 0;
  let mut x608: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x607, &mut x608, x589, 0xd2253531);
  let mut x609: u32 = 0;
  let mut x610: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x609, &mut x610, x607, 0xffffffff);
  let mut x611: u32 = 0;
  let mut x612: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x611, &mut x612, x607, 0xffffffff);
  let mut x613: u32 = 0;
  let mut x614: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x613, &mut x614, x607, 0xffffffff);
  let mut x615: u32 = 0;
  let mut x616: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x615, &mut x616, x607, 0xffffffff);
  let mut x617: u32 = 0;
  let mut x618: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x617, &mut x618, x607, 0xffffffff);
  let mut x619: u32 = 0;
  let mut x620: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x619, &mut x620, x607, 0xffffffff);
  let mut x621: u32 = 0;
  let mut x622: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x621, &mut x622, x607, 0xfffffffe);
  let mut x623: u32 = 0;
  let mut x624: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x623, &mut x624, x607, 0xfffffc2f);
  let mut x625: u32 = 0;
  let mut x626: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x625, &mut x626, 0x0, x624, x621);
  let mut x627: u32 = 0;
  let mut x628: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x627, &mut x628, x626, x622, x619);
  let mut x629: u32 = 0;
  let mut x630: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x629, &mut x630, x628, x620, x617);
  let mut x631: u32 = 0;
  let mut x632: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x631, &mut x632, x630, x618, x615);
  let mut x633: u32 = 0;
  let mut x634: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x633, &mut x634, x632, x616, x613);
  let mut x635: u32 = 0;
  let mut x636: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x635, &mut x636, x634, x614, x611);
  let mut x637: u32 = 0;
  let mut x638: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x637, &mut x638, x636, x612, x609);
  let x639: u32 = ((x638 as u32) + x610);
  let mut x640: u32 = 0;
  let mut x641: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x640, &mut x641, 0x0, x589, x623);
  let mut x642: u32 = 0;
  let mut x643: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x642, &mut x643, x641, x591, x625);
  let mut x644: u32 = 0;
  let mut x645: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x644, &mut x645, x643, x593, x627);
  let mut x646: u32 = 0;
  let mut x647: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x646, &mut x647, x645, x595, x629);
  let mut x648: u32 = 0;
  let mut x649: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x648, &mut x649, x647, x597, x631);
  let mut x650: u32 = 0;
  let mut x651: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x650, &mut x651, x649, x599, x633);
  let mut x652: u32 = 0;
  let mut x653: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x652, &mut x653, x651, x601, x635);
  let mut x654: u32 = 0;
  let mut x655: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x654, &mut x655, x653, x603, x637);
  let mut x656: u32 = 0;
  let mut x657: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x656, &mut x657, x655, x605, x639);
  let x658: u32 = ((x657 as u32) + (x606 as u32));
  let mut x659: u32 = 0;
  let mut x660: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x659, &mut x660, x41, (arg1[7]));
  let mut x661: u32 = 0;
  let mut x662: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x661, &mut x662, x41, (arg1[6]));
  let mut x663: u32 = 0;
  let mut x664: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x663, &mut x664, x41, (arg1[5]));
  let mut x665: u32 = 0;
  let mut x666: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x665, &mut x666, x41, (arg1[4]));
  let mut x667: u32 = 0;
  let mut x668: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x667, &mut x668, x41, (arg1[3]));
  let mut x669: u32 = 0;
  let mut x670: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x669, &mut x670, x41, (arg1[2]));
  let mut x671: u32 = 0;
  let mut x672: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x671, &mut x672, x41, (arg1[1]));
  let mut x673: u32 = 0;
  let mut x674: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x673, &mut x674, x41, (arg1[0]));
  let mut x675: u32 = 0;
  let mut x676: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x675, &mut x676, 0x0, x674, x671);
  let mut x677: u32 = 0;
  let mut x678: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x677, &mut x678, x676, x672, x669);
  let mut x679: u32 = 0;
  let mut x680: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x679, &mut x680, x678, x670, x667);
  let mut x681: u32 = 0;
  let mut x682: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x681, &mut x682, x680, x668, x665);
  let mut x683: u32 = 0;
  let mut x684: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x683, &mut x684, x682, x666, x663);
  let mut x685: u32 = 0;
  let mut x686: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x685, &mut x686, x684, x664, x661);
  let mut x687: u32 = 0;
  let mut x688: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x687, &mut x688, x686, x662, x659);
  let x689: u32 = ((x688 as u32) + x660);
  let mut x690: u32 = 0;
  let mut x691: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x690, &mut x691, 0x0, x642, x673);
  let mut x692: u32 = 0;
  let mut x693: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x692, &mut x693, x691, x644, x675);
  let mut x694: u32 = 0;
  let mut x695: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x694, &mut x695, x693, x646, x677);
  let mut x696: u32 = 0;
  let mut x697: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x696, &mut x697, x695, x648, x679);
  let mut x698: u32 = 0;
  let mut x699: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x698, &mut x699, x697, x650, x681);
  let mut x700: u32 = 0;
  let mut x701: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x700, &mut x701, x699, x652, x683);
  let mut x702: u32 = 0;
  let mut x703: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x702, &mut x703, x701, x654, x685);
  let mut x704: u32 = 0;
  let mut x705: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x704, &mut x705, x703, x656, x687);
  let mut x706: u32 = 0;
  let mut x707: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x706, &mut x707, x705, x658, x689);
  let mut x708: u32 = 0;
  let mut x709: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x708, &mut x709, x690, 0xd2253531);
  let mut x710: u32 = 0;
  let mut x711: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x710, &mut x711, x708, 0xffffffff);
  let mut x712: u32 = 0;
  let mut x713: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x712, &mut x713, x708, 0xffffffff);
  let mut x714: u32 = 0;
  let mut x715: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x714, &mut x715, x708, 0xffffffff);
  let mut x716: u32 = 0;
  let mut x717: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x716, &mut x717, x708, 0xffffffff);
  let mut x718: u32 = 0;
  let mut x719: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x718, &mut x719, x708, 0xffffffff);
  let mut x720: u32 = 0;
  let mut x721: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x720, &mut x721, x708, 0xffffffff);
  let mut x722: u32 = 0;
  let mut x723: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x722, &mut x723, x708, 0xfffffffe);
  let mut x724: u32 = 0;
  let mut x725: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x724, &mut x725, x708, 0xfffffc2f);
  let mut x726: u32 = 0;
  let mut x727: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x726, &mut x727, 0x0, x725, x722);
  let mut x728: u32 = 0;
  let mut x729: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x728, &mut x729, x727, x723, x720);
  let mut x730: u32 = 0;
  let mut x731: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x730, &mut x731, x729, x721, x718);
  let mut x732: u32 = 0;
  let mut x733: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x732, &mut x733, x731, x719, x716);
  let mut x734: u32 = 0;
  let mut x735: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x734, &mut x735, x733, x717, x714);
  let mut x736: u32 = 0;
  let mut x737: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x736, &mut x737, x735, x715, x712);
  let mut x738: u32 = 0;
  let mut x739: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x738, &mut x739, x737, x713, x710);
  let x740: u32 = ((x739 as u32) + x711);
  let mut x741: u32 = 0;
  let mut x742: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x741, &mut x742, 0x0, x690, x724);
  let mut x743: u32 = 0;
  let mut x744: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x743, &mut x744, x742, x692, x726);
  let mut x745: u32 = 0;
  let mut x746: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x745, &mut x746, x744, x694, x728);
  let mut x747: u32 = 0;
  let mut x748: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x747, &mut x748, x746, x696, x730);
  let mut x749: u32 = 0;
  let mut x750: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x749, &mut x750, x748, x698, x732);
  let mut x751: u32 = 0;
  let mut x752: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x751, &mut x752, x750, x700, x734);
  let mut x753: u32 = 0;
  let mut x754: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x753, &mut x754, x752, x702, x736);
  let mut x755: u32 = 0;
  let mut x756: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x755, &mut x756, x754, x704, x738);
  let mut x757: u32 = 0;
  let mut x758: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x757, &mut x758, x756, x706, x740);
  let x759: u32 = ((x758 as u32) + (x707 as u32));
  let mut x760: u32 = 0;
  let mut x761: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x760, &mut x761, x42, (arg1[7]));
  let mut x762: u32 = 0;
  let mut x763: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x762, &mut x763, x42, (arg1[6]));
  let mut x764: u32 = 0;
  let mut x765: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x764, &mut x765, x42, (arg1[5]));
  let mut x766: u32 = 0;
  let mut x767: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x766, &mut x767, x42, (arg1[4]));
  let mut x768: u32 = 0;
  let mut x769: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x768, &mut x769, x42, (arg1[3]));
  let mut x770: u32 = 0;
  let mut x771: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x770, &mut x771, x42, (arg1[2]));
  let mut x772: u32 = 0;
  let mut x773: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x772, &mut x773, x42, (arg1[1]));
  let mut x774: u32 = 0;
  let mut x775: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x774, &mut x775, x42, (arg1[0]));
  let mut x776: u32 = 0;
  let mut x777: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x776, &mut x777, 0x0, x775, x772);
  let mut x778: u32 = 0;
  let mut x779: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x778, &mut x779, x777, x773, x770);
  let mut x780: u32 = 0;
  let mut x781: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x780, &mut x781, x779, x771, x768);
  let mut x782: u32 = 0;
  let mut x783: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x782, &mut x783, x781, x769, x766);
  let mut x784: u32 = 0;
  let mut x785: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x784, &mut x785, x783, x767, x764);
  let mut x786: u32 = 0;
  let mut x787: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x786, &mut x787, x785, x765, x762);
  let mut x788: u32 = 0;
  let mut x789: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x788, &mut x789, x787, x763, x760);
  let x790: u32 = ((x789 as u32) + x761);
  let mut x791: u32 = 0;
  let mut x792: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x791, &mut x792, 0x0, x743, x774);
  let mut x793: u32 = 0;
  let mut x794: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x793, &mut x794, x792, x745, x776);
  let mut x795: u32 = 0;
  let mut x796: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x795, &mut x796, x794, x747, x778);
  let mut x797: u32 = 0;
  let mut x798: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x797, &mut x798, x796, x749, x780);
  let mut x799: u32 = 0;
  let mut x800: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x799, &mut x800, x798, x751, x782);
  let mut x801: u32 = 0;
  let mut x802: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x801, &mut x802, x800, x753, x784);
  let mut x803: u32 = 0;
  let mut x804: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x803, &mut x804, x802, x755, x786);
  let mut x805: u32 = 0;
  let mut x806: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x805, &mut x806, x804, x757, x788);
  let mut x807: u32 = 0;
  let mut x808: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x807, &mut x808, x806, x759, x790);
  let mut x809: u32 = 0;
  let mut x810: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x809, &mut x810, x791, 0xd2253531);
  let mut x811: u32 = 0;
  let mut x812: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x811, &mut x812, x809, 0xffffffff);
  let mut x813: u32 = 0;
  let mut x814: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x813, &mut x814, x809, 0xffffffff);
  let mut x815: u32 = 0;
  let mut x816: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x815, &mut x816, x809, 0xffffffff);
  let mut x817: u32 = 0;
  let mut x818: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x817, &mut x818, x809, 0xffffffff);
  let mut x819: u32 = 0;
  let mut x820: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x819, &mut x820, x809, 0xffffffff);
  let mut x821: u32 = 0;
  let mut x822: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x821, &mut x822, x809, 0xffffffff);
  let mut x823: u32 = 0;
  let mut x824: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x823, &mut x824, x809, 0xfffffffe);
  let mut x825: u32 = 0;
  let mut x826: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x825, &mut x826, x809, 0xfffffc2f);
  let mut x827: u32 = 0;
  let mut x828: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x827, &mut x828, 0x0, x826, x823);
  let mut x829: u32 = 0;
  let mut x830: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x829, &mut x830, x828, x824, x821);
  let mut x831: u32 = 0;
  let mut x832: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x831, &mut x832, x830, x822, x819);
  let mut x833: u32 = 0;
  let mut x834: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x833, &mut x834, x832, x820, x817);
  let mut x835: u32 = 0;
  let mut x836: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x835, &mut x836, x834, x818, x815);
  let mut x837: u32 = 0;
  let mut x838: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x837, &mut x838, x836, x816, x813);
  let mut x839: u32 = 0;
  let mut x840: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x839, &mut x840, x838, x814, x811);
  let x841: u32 = ((x840 as u32) + x812);
  let mut x842: u32 = 0;
  let mut x843: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x842, &mut x843, 0x0, x791, x825);
  let mut x844: u32 = 0;
  let mut x845: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x844, &mut x845, x843, x793, x827);
  let mut x846: u32 = 0;
  let mut x847: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x846, &mut x847, x845, x795, x829);
  let mut x848: u32 = 0;
  let mut x849: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x848, &mut x849, x847, x797, x831);
  let mut x850: u32 = 0;
  let mut x851: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x850, &mut x851, x849, x799, x833);
  let mut x852: u32 = 0;
  let mut x853: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x852, &mut x853, x851, x801, x835);
  let mut x854: u32 = 0;
  let mut x855: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x854, &mut x855, x853, x803, x837);
  let mut x856: u32 = 0;
  let mut x857: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x856, &mut x857, x855, x805, x839);
  let mut x858: u32 = 0;
  let mut x859: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x858, &mut x859, x857, x807, x841);
  let x860: u32 = ((x859 as u32) + (x808 as u32));
  let mut x861: u32 = 0;
  let mut x862: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x861, &mut x862, x43, (arg1[7]));
  let mut x863: u32 = 0;
  let mut x864: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x863, &mut x864, x43, (arg1[6]));
  let mut x865: u32 = 0;
  let mut x866: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x865, &mut x866, x43, (arg1[5]));
  let mut x867: u32 = 0;
  let mut x868: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x867, &mut x868, x43, (arg1[4]));
  let mut x869: u32 = 0;
  let mut x870: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x869, &mut x870, x43, (arg1[3]));
  let mut x871: u32 = 0;
  let mut x872: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x871, &mut x872, x43, (arg1[2]));
  let mut x873: u32 = 0;
  let mut x874: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x873, &mut x874, x43, (arg1[1]));
  let mut x875: u32 = 0;
  let mut x876: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x875, &mut x876, x43, (arg1[0]));
  let mut x877: u32 = 0;
  let mut x878: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x877, &mut x878, 0x0, x876, x873);
  let mut x879: u32 = 0;
  let mut x880: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x879, &mut x880, x878, x874, x871);
  let mut x881: u32 = 0;
  let mut x882: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x881, &mut x882, x880, x872, x869);
  let mut x883: u32 = 0;
  let mut x884: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x883, &mut x884, x882, x870, x867);
  let mut x885: u32 = 0;
  let mut x886: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x885, &mut x886, x884, x868, x865);
  let mut x887: u32 = 0;
  let mut x888: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x887, &mut x888, x886, x866, x863);
  let mut x889: u32 = 0;
  let mut x890: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x889, &mut x890, x888, x864, x861);
  let x891: u32 = ((x890 as u32) + x862);
  let mut x892: u32 = 0;
  let mut x893: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x892, &mut x893, 0x0, x844, x875);
  let mut x894: u32 = 0;
  let mut x895: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x894, &mut x895, x893, x846, x877);
  let mut x896: u32 = 0;
  let mut x897: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x896, &mut x897, x895, x848, x879);
  let mut x898: u32 = 0;
  let mut x899: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x898, &mut x899, x897, x850, x881);
  let mut x900: u32 = 0;
  let mut x901: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x900, &mut x901, x899, x852, x883);
  let mut x902: u32 = 0;
  let mut x903: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x902, &mut x903, x901, x854, x885);
  let mut x904: u32 = 0;
  let mut x905: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x904, &mut x905, x903, x856, x887);
  let mut x906: u32 = 0;
  let mut x907: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x906, &mut x907, x905, x858, x889);
  let mut x908: u32 = 0;
  let mut x909: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x908, &mut x909, x907, x860, x891);
  let mut x910: u32 = 0;
  let mut x911: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x910, &mut x911, x892, 0xd2253531);
  let mut x912: u32 = 0;
  let mut x913: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x912, &mut x913, x910, 0xffffffff);
  let mut x914: u32 = 0;
  let mut x915: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x914, &mut x915, x910, 0xffffffff);
  let mut x916: u32 = 0;
  let mut x917: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x916, &mut x917, x910, 0xffffffff);
  let mut x918: u32 = 0;
  let mut x919: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x918, &mut x919, x910, 0xffffffff);
  let mut x920: u32 = 0;
  let mut x921: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x920, &mut x921, x910, 0xffffffff);
  let mut x922: u32 = 0;
  let mut x923: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x922, &mut x923, x910, 0xffffffff);
  let mut x924: u32 = 0;
  let mut x925: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x924, &mut x925, x910, 0xfffffffe);
  let mut x926: u32 = 0;
  let mut x927: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x926, &mut x927, x910, 0xfffffc2f);
  let mut x928: u32 = 0;
  let mut x929: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x928, &mut x929, 0x0, x927, x924);
  let mut x930: u32 = 0;
  let mut x931: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x930, &mut x931, x929, x925, x922);
  let mut x932: u32 = 0;
  let mut x933: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x932, &mut x933, x931, x923, x920);
  let mut x934: u32 = 0;
  let mut x935: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x934, &mut x935, x933, x921, x918);
  let mut x936: u32 = 0;
  let mut x937: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x936, &mut x937, x935, x919, x916);
  let mut x938: u32 = 0;
  let mut x939: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x938, &mut x939, x937, x917, x914);
  let mut x940: u32 = 0;
  let mut x941: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x940, &mut x941, x939, x915, x912);
  let x942: u32 = ((x941 as u32) + x913);
  let mut x943: u32 = 0;
  let mut x944: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x943, &mut x944, 0x0, x892, x926);
  let mut x945: u32 = 0;
  let mut x946: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x945, &mut x946, x944, x894, x928);
  let mut x947: u32 = 0;
  let mut x948: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x947, &mut x948, x946, x896, x930);
  let mut x949: u32 = 0;
  let mut x950: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x949, &mut x950, x948, x898, x932);
  let mut x951: u32 = 0;
  let mut x952: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x951, &mut x952, x950, x900, x934);
  let mut x953: u32 = 0;
  let mut x954: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x953, &mut x954, x952, x902, x936);
  let mut x955: u32 = 0;
  let mut x956: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x955, &mut x956, x954, x904, x938);
  let mut x957: u32 = 0;
  let mut x958: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x957, &mut x958, x956, x906, x940);
  let mut x959: u32 = 0;
  let mut x960: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x959, &mut x960, x958, x908, x942);
  let x961: u32 = ((x960 as u32) + (x909 as u32));
  let mut x962: u32 = 0;
  let mut x963: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x962, &mut x963, 0x0, x945, 0xfffffc2f);
  let mut x964: u32 = 0;
  let mut x965: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x964, &mut x965, x963, x947, 0xfffffffe);
  let mut x966: u32 = 0;
  let mut x967: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x966, &mut x967, x965, x949, 0xffffffff);
  let mut x968: u32 = 0;
  let mut x969: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x968, &mut x969, x967, x951, 0xffffffff);
  let mut x970: u32 = 0;
  let mut x971: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x970, &mut x971, x969, x953, 0xffffffff);
  let mut x972: u32 = 0;
  let mut x973: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x972, &mut x973, x971, x955, 0xffffffff);
  let mut x974: u32 = 0;
  let mut x975: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x974, &mut x975, x973, x957, 0xffffffff);
  let mut x976: u32 = 0;
  let mut x977: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x976, &mut x977, x975, x959, 0xffffffff);
  let mut x978: u32 = 0;
  let mut x979: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x978, &mut x979, x977, x961, (0x0 as u32));
  let mut x980: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x980, x979, x962, x945);
  let mut x981: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x981, x979, x964, x947);
  let mut x982: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x982, x979, x966, x949);
  let mut x983: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x983, x979, x968, x951);
  let mut x984: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x984, x979, x970, x953);
  let mut x985: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x985, x979, x972, x955);
  let mut x986: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x986, x979, x974, x957);
  let mut x987: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x987, x979, x976, x959);
  let mut x988: u32 = 0;
  let mut x989: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x988, &mut x989, x79, (arg2[7]));
  let mut x990: u32 = 0;
  let mut x991: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x990, &mut x991, x79, (arg2[6]));
  let mut x992: u32 = 0;
  let mut x993: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x992, &mut x993, x79, (arg2[5]));
  let mut x994: u32 = 0;
  let mut x995: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x994, &mut x995, x79, (arg2[4]));
  let mut x996: u32 = 0;
  let mut x997: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x996, &mut x997, x79, (arg2[3]));
  let mut x998: u32 = 0;
  let mut x999: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x998, &mut x999, x79, (arg2[2]));
  let mut x1000: u32 = 0;
  let mut x1001: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1000, &mut x1001, x79, (arg2[1]));
  let mut x1002: u32 = 0;
  let mut x1003: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1002, &mut x1003, x79, (arg2[0]));
  let mut x1004: u32 = 0;
  let mut x1005: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1004, &mut x1005, 0x0, x1003, x1000);
  let mut x1006: u32 = 0;
  let mut x1007: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1006, &mut x1007, x1005, x1001, x998);
  let mut x1008: u32 = 0;
  let mut x1009: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1008, &mut x1009, x1007, x999, x996);
  let mut x1010: u32 = 0;
  let mut x1011: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1010, &mut x1011, x1009, x997, x994);
  let mut x1012: u32 = 0;
  let mut x1013: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1012, &mut x1013, x1011, x995, x992);
  let mut x1014: u32 = 0;
  let mut x1015: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1014, &mut x1015, x1013, x993, x990);
  let mut x1016: u32 = 0;
  let mut x1017: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1016, &mut x1017, x1015, x991, x988);
  let x1018: u32 = ((x1017 as u32) + x989);
  let mut x1019: u32 = 0;
  let mut x1020: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1019, &mut x1020, x1002, 0xd2253531);
  let mut x1021: u32 = 0;
  let mut x1022: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1021, &mut x1022, x1019, 0xffffffff);
  let mut x1023: u32 = 0;
  let mut x1024: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1023, &mut x1024, x1019, 0xffffffff);
  let mut x1025: u32 = 0;
  let mut x1026: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1025, &mut x1026, x1019, 0xffffffff);
  let mut x1027: u32 = 0;
  let mut x1028: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1027, &mut x1028, x1019, 0xffffffff);
  let mut x1029: u32 = 0;
  let mut x1030: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1029, &mut x1030, x1019, 0xffffffff);
  let mut x1031: u32 = 0;
  let mut x1032: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1031, &mut x1032, x1019, 0xffffffff);
  let mut x1033: u32 = 0;
  let mut x1034: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1033, &mut x1034, x1019, 0xfffffffe);
  let mut x1035: u32 = 0;
  let mut x1036: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1035, &mut x1036, x1019, 0xfffffc2f);
  let mut x1037: u32 = 0;
  let mut x1038: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1037, &mut x1038, 0x0, x1036, x1033);
  let mut x1039: u32 = 0;
  let mut x1040: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1039, &mut x1040, x1038, x1034, x1031);
  let mut x1041: u32 = 0;
  let mut x1042: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1041, &mut x1042, x1040, x1032, x1029);
  let mut x1043: u32 = 0;
  let mut x1044: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1043, &mut x1044, x1042, x1030, x1027);
  let mut x1045: u32 = 0;
  let mut x1046: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1045, &mut x1046, x1044, x1028, x1025);
  let mut x1047: u32 = 0;
  let mut x1048: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1047, &mut x1048, x1046, x1026, x1023);
  let mut x1049: u32 = 0;
  let mut x1050: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1049, &mut x1050, x1048, x1024, x1021);
  let x1051: u32 = ((x1050 as u32) + x1022);
  let mut x1052: u32 = 0;
  let mut x1053: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1052, &mut x1053, 0x0, x1002, x1035);
  let mut x1054: u32 = 0;
  let mut x1055: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1054, &mut x1055, x1053, x1004, x1037);
  let mut x1056: u32 = 0;
  let mut x1057: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1056, &mut x1057, x1055, x1006, x1039);
  let mut x1058: u32 = 0;
  let mut x1059: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1058, &mut x1059, x1057, x1008, x1041);
  let mut x1060: u32 = 0;
  let mut x1061: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1060, &mut x1061, x1059, x1010, x1043);
  let mut x1062: u32 = 0;
  let mut x1063: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1062, &mut x1063, x1061, x1012, x1045);
  let mut x1064: u32 = 0;
  let mut x1065: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1064, &mut x1065, x1063, x1014, x1047);
  let mut x1066: u32 = 0;
  let mut x1067: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1066, &mut x1067, x1065, x1016, x1049);
  let mut x1068: u32 = 0;
  let mut x1069: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1068, &mut x1069, x1067, x1018, x1051);
  let mut x1070: u32 = 0;
  let mut x1071: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1070, &mut x1071, x80, (arg2[7]));
  let mut x1072: u32 = 0;
  let mut x1073: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1072, &mut x1073, x80, (arg2[6]));
  let mut x1074: u32 = 0;
  let mut x1075: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1074, &mut x1075, x80, (arg2[5]));
  let mut x1076: u32 = 0;
  let mut x1077: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1076, &mut x1077, x80, (arg2[4]));
  let mut x1078: u32 = 0;
  let mut x1079: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1078, &mut x1079, x80, (arg2[3]));
  let mut x1080: u32 = 0;
  let mut x1081: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1080, &mut x1081, x80, (arg2[2]));
  let mut x1082: u32 = 0;
  let mut x1083: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1082, &mut x1083, x80, (arg2[1]));
  let mut x1084: u32 = 0;
  let mut x1085: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1084, &mut x1085, x80, (arg2[0]));
  let mut x1086: u32 = 0;
  let mut x1087: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1086, &mut x1087, 0x0, x1085, x1082);
  let mut x1088: u32 = 0;
  let mut x1089: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1088, &mut x1089, x1087, x1083, x1080);
  let mut x1090: u32 = 0;
  let mut x1091: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1090, &mut x1091, x1089, x1081, x1078);
  let mut x1092: u32 = 0;
  let mut x1093: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1092, &mut x1093, x1091, x1079, x1076);
  let mut x1094: u32 = 0;
  let mut x1095: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1094, &mut x1095, x1093, x1077, x1074);
  let mut x1096: u32 = 0;
  let mut x1097: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1096, &mut x1097, x1095, x1075, x1072);
  let mut x1098: u32 = 0;
  let mut x1099: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1098, &mut x1099, x1097, x1073, x1070);
  let x1100: u32 = ((x1099 as u32) + x1071);
  let mut x1101: u32 = 0;
  let mut x1102: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1101, &mut x1102, 0x0, x1054, x1084);
  let mut x1103: u32 = 0;
  let mut x1104: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1103, &mut x1104, x1102, x1056, x1086);
  let mut x1105: u32 = 0;
  let mut x1106: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1105, &mut x1106, x1104, x1058, x1088);
  let mut x1107: u32 = 0;
  let mut x1108: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1107, &mut x1108, x1106, x1060, x1090);
  let mut x1109: u32 = 0;
  let mut x1110: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1109, &mut x1110, x1108, x1062, x1092);
  let mut x1111: u32 = 0;
  let mut x1112: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1111, &mut x1112, x1110, x1064, x1094);
  let mut x1113: u32 = 0;
  let mut x1114: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1113, &mut x1114, x1112, x1066, x1096);
  let mut x1115: u32 = 0;
  let mut x1116: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1115, &mut x1116, x1114, x1068, x1098);
  let mut x1117: u32 = 0;
  let mut x1118: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1117, &mut x1118, x1116, (x1069 as u32), x1100);
  let mut x1119: u32 = 0;
  let mut x1120: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1119, &mut x1120, x1101, 0xd2253531);
  let mut x1121: u32 = 0;
  let mut x1122: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1121, &mut x1122, x1119, 0xffffffff);
  let mut x1123: u32 = 0;
  let mut x1124: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1123, &mut x1124, x1119, 0xffffffff);
  let mut x1125: u32 = 0;
  let mut x1126: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1125, &mut x1126, x1119, 0xffffffff);
  let mut x1127: u32 = 0;
  let mut x1128: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1127, &mut x1128, x1119, 0xffffffff);
  let mut x1129: u32 = 0;
  let mut x1130: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1129, &mut x1130, x1119, 0xffffffff);
  let mut x1131: u32 = 0;
  let mut x1132: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1131, &mut x1132, x1119, 0xffffffff);
  let mut x1133: u32 = 0;
  let mut x1134: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1133, &mut x1134, x1119, 0xfffffffe);
  let mut x1135: u32 = 0;
  let mut x1136: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1135, &mut x1136, x1119, 0xfffffc2f);
  let mut x1137: u32 = 0;
  let mut x1138: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1137, &mut x1138, 0x0, x1136, x1133);
  let mut x1139: u32 = 0;
  let mut x1140: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1139, &mut x1140, x1138, x1134, x1131);
  let mut x1141: u32 = 0;
  let mut x1142: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1141, &mut x1142, x1140, x1132, x1129);
  let mut x1143: u32 = 0;
  let mut x1144: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1143, &mut x1144, x1142, x1130, x1127);
  let mut x1145: u32 = 0;
  let mut x1146: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1145, &mut x1146, x1144, x1128, x1125);
  let mut x1147: u32 = 0;
  let mut x1148: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1147, &mut x1148, x1146, x1126, x1123);
  let mut x1149: u32 = 0;
  let mut x1150: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1149, &mut x1150, x1148, x1124, x1121);
  let x1151: u32 = ((x1150 as u32) + x1122);
  let mut x1152: u32 = 0;
  let mut x1153: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1152, &mut x1153, 0x0, x1101, x1135);
  let mut x1154: u32 = 0;
  let mut x1155: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1154, &mut x1155, x1153, x1103, x1137);
  let mut x1156: u32 = 0;
  let mut x1157: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1156, &mut x1157, x1155, x1105, x1139);
  let mut x1158: u32 = 0;
  let mut x1159: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1158, &mut x1159, x1157, x1107, x1141);
  let mut x1160: u32 = 0;
  let mut x1161: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1160, &mut x1161, x1159, x1109, x1143);
  let mut x1162: u32 = 0;
  let mut x1163: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1162, &mut x1163, x1161, x1111, x1145);
  let mut x1164: u32 = 0;
  let mut x1165: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1164, &mut x1165, x1163, x1113, x1147);
  let mut x1166: u32 = 0;
  let mut x1167: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1166, &mut x1167, x1165, x1115, x1149);
  let mut x1168: u32 = 0;
  let mut x1169: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1168, &mut x1169, x1167, x1117, x1151);
  let x1170: u32 = ((x1169 as u32) + (x1118 as u32));
  let mut x1171: u32 = 0;
  let mut x1172: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1171, &mut x1172, x81, (arg2[7]));
  let mut x1173: u32 = 0;
  let mut x1174: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1173, &mut x1174, x81, (arg2[6]));
  let mut x1175: u32 = 0;
  let mut x1176: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1175, &mut x1176, x81, (arg2[5]));
  let mut x1177: u32 = 0;
  let mut x1178: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1177, &mut x1178, x81, (arg2[4]));
  let mut x1179: u32 = 0;
  let mut x1180: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1179, &mut x1180, x81, (arg2[3]));
  let mut x1181: u32 = 0;
  let mut x1182: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1181, &mut x1182, x81, (arg2[2]));
  let mut x1183: u32 = 0;
  let mut x1184: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1183, &mut x1184, x81, (arg2[1]));
  let mut x1185: u32 = 0;
  let mut x1186: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1185, &mut x1186, x81, (arg2[0]));
  let mut x1187: u32 = 0;
  let mut x1188: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1187, &mut x1188, 0x0, x1186, x1183);
  let mut x1189: u32 = 0;
  let mut x1190: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1189, &mut x1190, x1188, x1184, x1181);
  let mut x1191: u32 = 0;
  let mut x1192: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1191, &mut x1192, x1190, x1182, x1179);
  let mut x1193: u32 = 0;
  let mut x1194: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1193, &mut x1194, x1192, x1180, x1177);
  let mut x1195: u32 = 0;
  let mut x1196: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1195, &mut x1196, x1194, x1178, x1175);
  let mut x1197: u32 = 0;
  let mut x1198: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1197, &mut x1198, x1196, x1176, x1173);
  let mut x1199: u32 = 0;
  let mut x1200: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1199, &mut x1200, x1198, x1174, x1171);
  let x1201: u32 = ((x1200 as u32) + x1172);
  let mut x1202: u32 = 0;
  let mut x1203: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1202, &mut x1203, 0x0, x1154, x1185);
  let mut x1204: u32 = 0;
  let mut x1205: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1204, &mut x1205, x1203, x1156, x1187);
  let mut x1206: u32 = 0;
  let mut x1207: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1206, &mut x1207, x1205, x1158, x1189);
  let mut x1208: u32 = 0;
  let mut x1209: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1208, &mut x1209, x1207, x1160, x1191);
  let mut x1210: u32 = 0;
  let mut x1211: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1210, &mut x1211, x1209, x1162, x1193);
  let mut x1212: u32 = 0;
  let mut x1213: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1212, &mut x1213, x1211, x1164, x1195);
  let mut x1214: u32 = 0;
  let mut x1215: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1214, &mut x1215, x1213, x1166, x1197);
  let mut x1216: u32 = 0;
  let mut x1217: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1216, &mut x1217, x1215, x1168, x1199);
  let mut x1218: u32 = 0;
  let mut x1219: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1218, &mut x1219, x1217, x1170, x1201);
  let mut x1220: u32 = 0;
  let mut x1221: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1220, &mut x1221, x1202, 0xd2253531);
  let mut x1222: u32 = 0;
  let mut x1223: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1222, &mut x1223, x1220, 0xffffffff);
  let mut x1224: u32 = 0;
  let mut x1225: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1224, &mut x1225, x1220, 0xffffffff);
  let mut x1226: u32 = 0;
  let mut x1227: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1226, &mut x1227, x1220, 0xffffffff);
  let mut x1228: u32 = 0;
  let mut x1229: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1228, &mut x1229, x1220, 0xffffffff);
  let mut x1230: u32 = 0;
  let mut x1231: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1230, &mut x1231, x1220, 0xffffffff);
  let mut x1232: u32 = 0;
  let mut x1233: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1232, &mut x1233, x1220, 0xffffffff);
  let mut x1234: u32 = 0;
  let mut x1235: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1234, &mut x1235, x1220, 0xfffffffe);
  let mut x1236: u32 = 0;
  let mut x1237: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1236, &mut x1237, x1220, 0xfffffc2f);
  let mut x1238: u32 = 0;
  let mut x1239: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1238, &mut x1239, 0x0, x1237, x1234);
  let mut x1240: u32 = 0;
  let mut x1241: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1240, &mut x1241, x1239, x1235, x1232);
  let mut x1242: u32 = 0;
  let mut x1243: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1242, &mut x1243, x1241, x1233, x1230);
  let mut x1244: u32 = 0;
  let mut x1245: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1244, &mut x1245, x1243, x1231, x1228);
  let mut x1246: u32 = 0;
  let mut x1247: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1246, &mut x1247, x1245, x1229, x1226);
  let mut x1248: u32 = 0;
  let mut x1249: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1248, &mut x1249, x1247, x1227, x1224);
  let mut x1250: u32 = 0;
  let mut x1251: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1250, &mut x1251, x1249, x1225, x1222);
  let x1252: u32 = ((x1251 as u32) + x1223);
  let mut x1253: u32 = 0;
  let mut x1254: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1253, &mut x1254, 0x0, x1202, x1236);
  let mut x1255: u32 = 0;
  let mut x1256: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1255, &mut x1256, x1254, x1204, x1238);
  let mut x1257: u32 = 0;
  let mut x1258: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1257, &mut x1258, x1256, x1206, x1240);
  let mut x1259: u32 = 0;
  let mut x1260: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1259, &mut x1260, x1258, x1208, x1242);
  let mut x1261: u32 = 0;
  let mut x1262: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1261, &mut x1262, x1260, x1210, x1244);
  let mut x1263: u32 = 0;
  let mut x1264: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1263, &mut x1264, x1262, x1212, x1246);
  let mut x1265: u32 = 0;
  let mut x1266: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1265, &mut x1266, x1264, x1214, x1248);
  let mut x1267: u32 = 0;
  let mut x1268: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1267, &mut x1268, x1266, x1216, x1250);
  let mut x1269: u32 = 0;
  let mut x1270: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1269, &mut x1270, x1268, x1218, x1252);
  let x1271: u32 = ((x1270 as u32) + (x1219 as u32));
  let mut x1272: u32 = 0;
  let mut x1273: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1272, &mut x1273, x82, (arg2[7]));
  let mut x1274: u32 = 0;
  let mut x1275: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1274, &mut x1275, x82, (arg2[6]));
  let mut x1276: u32 = 0;
  let mut x1277: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1276, &mut x1277, x82, (arg2[5]));
  let mut x1278: u32 = 0;
  let mut x1279: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1278, &mut x1279, x82, (arg2[4]));
  let mut x1280: u32 = 0;
  let mut x1281: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1280, &mut x1281, x82, (arg2[3]));
  let mut x1282: u32 = 0;
  let mut x1283: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1282, &mut x1283, x82, (arg2[2]));
  let mut x1284: u32 = 0;
  let mut x1285: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1284, &mut x1285, x82, (arg2[1]));
  let mut x1286: u32 = 0;
  let mut x1287: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1286, &mut x1287, x82, (arg2[0]));
  let mut x1288: u32 = 0;
  let mut x1289: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1288, &mut x1289, 0x0, x1287, x1284);
  let mut x1290: u32 = 0;
  let mut x1291: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1290, &mut x1291, x1289, x1285, x1282);
  let mut x1292: u32 = 0;
  let mut x1293: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1292, &mut x1293, x1291, x1283, x1280);
  let mut x1294: u32 = 0;
  let mut x1295: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1294, &mut x1295, x1293, x1281, x1278);
  let mut x1296: u32 = 0;
  let mut x1297: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1296, &mut x1297, x1295, x1279, x1276);
  let mut x1298: u32 = 0;
  let mut x1299: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1298, &mut x1299, x1297, x1277, x1274);
  let mut x1300: u32 = 0;
  let mut x1301: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1300, &mut x1301, x1299, x1275, x1272);
  let x1302: u32 = ((x1301 as u32) + x1273);
  let mut x1303: u32 = 0;
  let mut x1304: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1303, &mut x1304, 0x0, x1255, x1286);
  let mut x1305: u32 = 0;
  let mut x1306: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1305, &mut x1306, x1304, x1257, x1288);
  let mut x1307: u32 = 0;
  let mut x1308: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1307, &mut x1308, x1306, x1259, x1290);
  let mut x1309: u32 = 0;
  let mut x1310: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1309, &mut x1310, x1308, x1261, x1292);
  let mut x1311: u32 = 0;
  let mut x1312: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1311, &mut x1312, x1310, x1263, x1294);
  let mut x1313: u32 = 0;
  let mut x1314: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1313, &mut x1314, x1312, x1265, x1296);
  let mut x1315: u32 = 0;
  let mut x1316: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1315, &mut x1316, x1314, x1267, x1298);
  let mut x1317: u32 = 0;
  let mut x1318: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1317, &mut x1318, x1316, x1269, x1300);
  let mut x1319: u32 = 0;
  let mut x1320: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1319, &mut x1320, x1318, x1271, x1302);
  let mut x1321: u32 = 0;
  let mut x1322: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1321, &mut x1322, x1303, 0xd2253531);
  let mut x1323: u32 = 0;
  let mut x1324: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1323, &mut x1324, x1321, 0xffffffff);
  let mut x1325: u32 = 0;
  let mut x1326: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1325, &mut x1326, x1321, 0xffffffff);
  let mut x1327: u32 = 0;
  let mut x1328: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1327, &mut x1328, x1321, 0xffffffff);
  let mut x1329: u32 = 0;
  let mut x1330: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1329, &mut x1330, x1321, 0xffffffff);
  let mut x1331: u32 = 0;
  let mut x1332: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1331, &mut x1332, x1321, 0xffffffff);
  let mut x1333: u32 = 0;
  let mut x1334: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1333, &mut x1334, x1321, 0xffffffff);
  let mut x1335: u32 = 0;
  let mut x1336: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1335, &mut x1336, x1321, 0xfffffffe);
  let mut x1337: u32 = 0;
  let mut x1338: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1337, &mut x1338, x1321, 0xfffffc2f);
  let mut x1339: u32 = 0;
  let mut x1340: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1339, &mut x1340, 0x0, x1338, x1335);
  let mut x1341: u32 = 0;
  let mut x1342: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1341, &mut x1342, x1340, x1336, x1333);
  let mut x1343: u32 = 0;
  let mut x1344: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1343, &mut x1344, x1342, x1334, x1331);
  let mut x1345: u32 = 0;
  let mut x1346: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1345, &mut x1346, x1344, x1332, x1329);
  let mut x1347: u32 = 0;
  let mut x1348: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1347, &mut x1348, x1346, x1330, x1327);
  let mut x1349: u32 = 0;
  let mut x1350: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1349, &mut x1350, x1348, x1328, x1325);
  let mut x1351: u32 = 0;
  let mut x1352: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1351, &mut x1352, x1350, x1326, x1323);
  let x1353: u32 = ((x1352 as u32) + x1324);
  let mut x1354: u32 = 0;
  let mut x1355: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1354, &mut x1355, 0x0, x1303, x1337);
  let mut x1356: u32 = 0;
  let mut x1357: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1356, &mut x1357, x1355, x1305, x1339);
  let mut x1358: u32 = 0;
  let mut x1359: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1358, &mut x1359, x1357, x1307, x1341);
  let mut x1360: u32 = 0;
  let mut x1361: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1360, &mut x1361, x1359, x1309, x1343);
  let mut x1362: u32 = 0;
  let mut x1363: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1362, &mut x1363, x1361, x1311, x1345);
  let mut x1364: u32 = 0;
  let mut x1365: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1364, &mut x1365, x1363, x1313, x1347);
  let mut x1366: u32 = 0;
  let mut x1367: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1366, &mut x1367, x1365, x1315, x1349);
  let mut x1368: u32 = 0;
  let mut x1369: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1368, &mut x1369, x1367, x1317, x1351);
  let mut x1370: u32 = 0;
  let mut x1371: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1370, &mut x1371, x1369, x1319, x1353);
  let x1372: u32 = ((x1371 as u32) + (x1320 as u32));
  let mut x1373: u32 = 0;
  let mut x1374: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1373, &mut x1374, x83, (arg2[7]));
  let mut x1375: u32 = 0;
  let mut x1376: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1375, &mut x1376, x83, (arg2[6]));
  let mut x1377: u32 = 0;
  let mut x1378: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1377, &mut x1378, x83, (arg2[5]));
  let mut x1379: u32 = 0;
  let mut x1380: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1379, &mut x1380, x83, (arg2[4]));
  let mut x1381: u32 = 0;
  let mut x1382: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1381, &mut x1382, x83, (arg2[3]));
  let mut x1383: u32 = 0;
  let mut x1384: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1383, &mut x1384, x83, (arg2[2]));
  let mut x1385: u32 = 0;
  let mut x1386: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1385, &mut x1386, x83, (arg2[1]));
  let mut x1387: u32 = 0;
  let mut x1388: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1387, &mut x1388, x83, (arg2[0]));
  let mut x1389: u32 = 0;
  let mut x1390: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1389, &mut x1390, 0x0, x1388, x1385);
  let mut x1391: u32 = 0;
  let mut x1392: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1391, &mut x1392, x1390, x1386, x1383);
  let mut x1393: u32 = 0;
  let mut x1394: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1393, &mut x1394, x1392, x1384, x1381);
  let mut x1395: u32 = 0;
  let mut x1396: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1395, &mut x1396, x1394, x1382, x1379);
  let mut x1397: u32 = 0;
  let mut x1398: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1397, &mut x1398, x1396, x1380, x1377);
  let mut x1399: u32 = 0;
  let mut x1400: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1399, &mut x1400, x1398, x1378, x1375);
  let mut x1401: u32 = 0;
  let mut x1402: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1401, &mut x1402, x1400, x1376, x1373);
  let x1403: u32 = ((x1402 as u32) + x1374);
  let mut x1404: u32 = 0;
  let mut x1405: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1404, &mut x1405, 0x0, x1356, x1387);
  let mut x1406: u32 = 0;
  let mut x1407: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1406, &mut x1407, x1405, x1358, x1389);
  let mut x1408: u32 = 0;
  let mut x1409: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1408, &mut x1409, x1407, x1360, x1391);
  let mut x1410: u32 = 0;
  let mut x1411: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1410, &mut x1411, x1409, x1362, x1393);
  let mut x1412: u32 = 0;
  let mut x1413: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1412, &mut x1413, x1411, x1364, x1395);
  let mut x1414: u32 = 0;
  let mut x1415: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1414, &mut x1415, x1413, x1366, x1397);
  let mut x1416: u32 = 0;
  let mut x1417: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1416, &mut x1417, x1415, x1368, x1399);
  let mut x1418: u32 = 0;
  let mut x1419: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1418, &mut x1419, x1417, x1370, x1401);
  let mut x1420: u32 = 0;
  let mut x1421: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1420, &mut x1421, x1419, x1372, x1403);
  let mut x1422: u32 = 0;
  let mut x1423: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1422, &mut x1423, x1404, 0xd2253531);
  let mut x1424: u32 = 0;
  let mut x1425: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1424, &mut x1425, x1422, 0xffffffff);
  let mut x1426: u32 = 0;
  let mut x1427: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1426, &mut x1427, x1422, 0xffffffff);
  let mut x1428: u32 = 0;
  let mut x1429: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1428, &mut x1429, x1422, 0xffffffff);
  let mut x1430: u32 = 0;
  let mut x1431: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1430, &mut x1431, x1422, 0xffffffff);
  let mut x1432: u32 = 0;
  let mut x1433: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1432, &mut x1433, x1422, 0xffffffff);
  let mut x1434: u32 = 0;
  let mut x1435: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1434, &mut x1435, x1422, 0xffffffff);
  let mut x1436: u32 = 0;
  let mut x1437: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1436, &mut x1437, x1422, 0xfffffffe);
  let mut x1438: u32 = 0;
  let mut x1439: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1438, &mut x1439, x1422, 0xfffffc2f);
  let mut x1440: u32 = 0;
  let mut x1441: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1440, &mut x1441, 0x0, x1439, x1436);
  let mut x1442: u32 = 0;
  let mut x1443: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1442, &mut x1443, x1441, x1437, x1434);
  let mut x1444: u32 = 0;
  let mut x1445: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1444, &mut x1445, x1443, x1435, x1432);
  let mut x1446: u32 = 0;
  let mut x1447: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1446, &mut x1447, x1445, x1433, x1430);
  let mut x1448: u32 = 0;
  let mut x1449: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1448, &mut x1449, x1447, x1431, x1428);
  let mut x1450: u32 = 0;
  let mut x1451: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1450, &mut x1451, x1449, x1429, x1426);
  let mut x1452: u32 = 0;
  let mut x1453: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1452, &mut x1453, x1451, x1427, x1424);
  let x1454: u32 = ((x1453 as u32) + x1425);
  let mut x1455: u32 = 0;
  let mut x1456: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1455, &mut x1456, 0x0, x1404, x1438);
  let mut x1457: u32 = 0;
  let mut x1458: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1457, &mut x1458, x1456, x1406, x1440);
  let mut x1459: u32 = 0;
  let mut x1460: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1459, &mut x1460, x1458, x1408, x1442);
  let mut x1461: u32 = 0;
  let mut x1462: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1461, &mut x1462, x1460, x1410, x1444);
  let mut x1463: u32 = 0;
  let mut x1464: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1463, &mut x1464, x1462, x1412, x1446);
  let mut x1465: u32 = 0;
  let mut x1466: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1465, &mut x1466, x1464, x1414, x1448);
  let mut x1467: u32 = 0;
  let mut x1468: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1467, &mut x1468, x1466, x1416, x1450);
  let mut x1469: u32 = 0;
  let mut x1470: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1469, &mut x1470, x1468, x1418, x1452);
  let mut x1471: u32 = 0;
  let mut x1472: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1471, &mut x1472, x1470, x1420, x1454);
  let x1473: u32 = ((x1472 as u32) + (x1421 as u32));
  let mut x1474: u32 = 0;
  let mut x1475: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1474, &mut x1475, x84, (arg2[7]));
  let mut x1476: u32 = 0;
  let mut x1477: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1476, &mut x1477, x84, (arg2[6]));
  let mut x1478: u32 = 0;
  let mut x1479: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1478, &mut x1479, x84, (arg2[5]));
  let mut x1480: u32 = 0;
  let mut x1481: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1480, &mut x1481, x84, (arg2[4]));
  let mut x1482: u32 = 0;
  let mut x1483: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1482, &mut x1483, x84, (arg2[3]));
  let mut x1484: u32 = 0;
  let mut x1485: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1484, &mut x1485, x84, (arg2[2]));
  let mut x1486: u32 = 0;
  let mut x1487: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1486, &mut x1487, x84, (arg2[1]));
  let mut x1488: u32 = 0;
  let mut x1489: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1488, &mut x1489, x84, (arg2[0]));
  let mut x1490: u32 = 0;
  let mut x1491: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1490, &mut x1491, 0x0, x1489, x1486);
  let mut x1492: u32 = 0;
  let mut x1493: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1492, &mut x1493, x1491, x1487, x1484);
  let mut x1494: u32 = 0;
  let mut x1495: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1494, &mut x1495, x1493, x1485, x1482);
  let mut x1496: u32 = 0;
  let mut x1497: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1496, &mut x1497, x1495, x1483, x1480);
  let mut x1498: u32 = 0;
  let mut x1499: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1498, &mut x1499, x1497, x1481, x1478);
  let mut x1500: u32 = 0;
  let mut x1501: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1500, &mut x1501, x1499, x1479, x1476);
  let mut x1502: u32 = 0;
  let mut x1503: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1502, &mut x1503, x1501, x1477, x1474);
  let x1504: u32 = ((x1503 as u32) + x1475);
  let mut x1505: u32 = 0;
  let mut x1506: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1505, &mut x1506, 0x0, x1457, x1488);
  let mut x1507: u32 = 0;
  let mut x1508: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1507, &mut x1508, x1506, x1459, x1490);
  let mut x1509: u32 = 0;
  let mut x1510: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1509, &mut x1510, x1508, x1461, x1492);
  let mut x1511: u32 = 0;
  let mut x1512: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1511, &mut x1512, x1510, x1463, x1494);
  let mut x1513: u32 = 0;
  let mut x1514: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1513, &mut x1514, x1512, x1465, x1496);
  let mut x1515: u32 = 0;
  let mut x1516: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1515, &mut x1516, x1514, x1467, x1498);
  let mut x1517: u32 = 0;
  let mut x1518: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1517, &mut x1518, x1516, x1469, x1500);
  let mut x1519: u32 = 0;
  let mut x1520: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1519, &mut x1520, x1518, x1471, x1502);
  let mut x1521: u32 = 0;
  let mut x1522: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1521, &mut x1522, x1520, x1473, x1504);
  let mut x1523: u32 = 0;
  let mut x1524: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1523, &mut x1524, x1505, 0xd2253531);
  let mut x1525: u32 = 0;
  let mut x1526: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1525, &mut x1526, x1523, 0xffffffff);
  let mut x1527: u32 = 0;
  let mut x1528: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1527, &mut x1528, x1523, 0xffffffff);
  let mut x1529: u32 = 0;
  let mut x1530: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1529, &mut x1530, x1523, 0xffffffff);
  let mut x1531: u32 = 0;
  let mut x1532: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1531, &mut x1532, x1523, 0xffffffff);
  let mut x1533: u32 = 0;
  let mut x1534: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1533, &mut x1534, x1523, 0xffffffff);
  let mut x1535: u32 = 0;
  let mut x1536: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1535, &mut x1536, x1523, 0xffffffff);
  let mut x1537: u32 = 0;
  let mut x1538: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1537, &mut x1538, x1523, 0xfffffffe);
  let mut x1539: u32 = 0;
  let mut x1540: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1539, &mut x1540, x1523, 0xfffffc2f);
  let mut x1541: u32 = 0;
  let mut x1542: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1541, &mut x1542, 0x0, x1540, x1537);
  let mut x1543: u32 = 0;
  let mut x1544: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1543, &mut x1544, x1542, x1538, x1535);
  let mut x1545: u32 = 0;
  let mut x1546: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1545, &mut x1546, x1544, x1536, x1533);
  let mut x1547: u32 = 0;
  let mut x1548: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1547, &mut x1548, x1546, x1534, x1531);
  let mut x1549: u32 = 0;
  let mut x1550: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1549, &mut x1550, x1548, x1532, x1529);
  let mut x1551: u32 = 0;
  let mut x1552: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1551, &mut x1552, x1550, x1530, x1527);
  let mut x1553: u32 = 0;
  let mut x1554: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1553, &mut x1554, x1552, x1528, x1525);
  let x1555: u32 = ((x1554 as u32) + x1526);
  let mut x1556: u32 = 0;
  let mut x1557: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1556, &mut x1557, 0x0, x1505, x1539);
  let mut x1558: u32 = 0;
  let mut x1559: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1558, &mut x1559, x1557, x1507, x1541);
  let mut x1560: u32 = 0;
  let mut x1561: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1560, &mut x1561, x1559, x1509, x1543);
  let mut x1562: u32 = 0;
  let mut x1563: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1562, &mut x1563, x1561, x1511, x1545);
  let mut x1564: u32 = 0;
  let mut x1565: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1564, &mut x1565, x1563, x1513, x1547);
  let mut x1566: u32 = 0;
  let mut x1567: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1566, &mut x1567, x1565, x1515, x1549);
  let mut x1568: u32 = 0;
  let mut x1569: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1568, &mut x1569, x1567, x1517, x1551);
  let mut x1570: u32 = 0;
  let mut x1571: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1570, &mut x1571, x1569, x1519, x1553);
  let mut x1572: u32 = 0;
  let mut x1573: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1572, &mut x1573, x1571, x1521, x1555);
  let x1574: u32 = ((x1573 as u32) + (x1522 as u32));
  let mut x1575: u32 = 0;
  let mut x1576: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1575, &mut x1576, x85, (arg2[7]));
  let mut x1577: u32 = 0;
  let mut x1578: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1577, &mut x1578, x85, (arg2[6]));
  let mut x1579: u32 = 0;
  let mut x1580: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1579, &mut x1580, x85, (arg2[5]));
  let mut x1581: u32 = 0;
  let mut x1582: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1581, &mut x1582, x85, (arg2[4]));
  let mut x1583: u32 = 0;
  let mut x1584: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1583, &mut x1584, x85, (arg2[3]));
  let mut x1585: u32 = 0;
  let mut x1586: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1585, &mut x1586, x85, (arg2[2]));
  let mut x1587: u32 = 0;
  let mut x1588: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1587, &mut x1588, x85, (arg2[1]));
  let mut x1589: u32 = 0;
  let mut x1590: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1589, &mut x1590, x85, (arg2[0]));
  let mut x1591: u32 = 0;
  let mut x1592: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1591, &mut x1592, 0x0, x1590, x1587);
  let mut x1593: u32 = 0;
  let mut x1594: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1593, &mut x1594, x1592, x1588, x1585);
  let mut x1595: u32 = 0;
  let mut x1596: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1595, &mut x1596, x1594, x1586, x1583);
  let mut x1597: u32 = 0;
  let mut x1598: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1597, &mut x1598, x1596, x1584, x1581);
  let mut x1599: u32 = 0;
  let mut x1600: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1599, &mut x1600, x1598, x1582, x1579);
  let mut x1601: u32 = 0;
  let mut x1602: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1601, &mut x1602, x1600, x1580, x1577);
  let mut x1603: u32 = 0;
  let mut x1604: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1603, &mut x1604, x1602, x1578, x1575);
  let x1605: u32 = ((x1604 as u32) + x1576);
  let mut x1606: u32 = 0;
  let mut x1607: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1606, &mut x1607, 0x0, x1558, x1589);
  let mut x1608: u32 = 0;
  let mut x1609: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1608, &mut x1609, x1607, x1560, x1591);
  let mut x1610: u32 = 0;
  let mut x1611: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1610, &mut x1611, x1609, x1562, x1593);
  let mut x1612: u32 = 0;
  let mut x1613: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1612, &mut x1613, x1611, x1564, x1595);
  let mut x1614: u32 = 0;
  let mut x1615: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1614, &mut x1615, x1613, x1566, x1597);
  let mut x1616: u32 = 0;
  let mut x1617: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1616, &mut x1617, x1615, x1568, x1599);
  let mut x1618: u32 = 0;
  let mut x1619: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1618, &mut x1619, x1617, x1570, x1601);
  let mut x1620: u32 = 0;
  let mut x1621: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1620, &mut x1621, x1619, x1572, x1603);
  let mut x1622: u32 = 0;
  let mut x1623: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1622, &mut x1623, x1621, x1574, x1605);
  let mut x1624: u32 = 0;
  let mut x1625: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1624, &mut x1625, x1606, 0xd2253531);
  let mut x1626: u32 = 0;
  let mut x1627: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1626, &mut x1627, x1624, 0xffffffff);
  let mut x1628: u32 = 0;
  let mut x1629: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1628, &mut x1629, x1624, 0xffffffff);
  let mut x1630: u32 = 0;
  let mut x1631: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1630, &mut x1631, x1624, 0xffffffff);
  let mut x1632: u32 = 0;
  let mut x1633: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1632, &mut x1633, x1624, 0xffffffff);
  let mut x1634: u32 = 0;
  let mut x1635: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1634, &mut x1635, x1624, 0xffffffff);
  let mut x1636: u32 = 0;
  let mut x1637: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1636, &mut x1637, x1624, 0xffffffff);
  let mut x1638: u32 = 0;
  let mut x1639: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1638, &mut x1639, x1624, 0xfffffffe);
  let mut x1640: u32 = 0;
  let mut x1641: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1640, &mut x1641, x1624, 0xfffffc2f);
  let mut x1642: u32 = 0;
  let mut x1643: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1642, &mut x1643, 0x0, x1641, x1638);
  let mut x1644: u32 = 0;
  let mut x1645: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1644, &mut x1645, x1643, x1639, x1636);
  let mut x1646: u32 = 0;
  let mut x1647: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1646, &mut x1647, x1645, x1637, x1634);
  let mut x1648: u32 = 0;
  let mut x1649: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1648, &mut x1649, x1647, x1635, x1632);
  let mut x1650: u32 = 0;
  let mut x1651: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1650, &mut x1651, x1649, x1633, x1630);
  let mut x1652: u32 = 0;
  let mut x1653: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1652, &mut x1653, x1651, x1631, x1628);
  let mut x1654: u32 = 0;
  let mut x1655: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1654, &mut x1655, x1653, x1629, x1626);
  let x1656: u32 = ((x1655 as u32) + x1627);
  let mut x1657: u32 = 0;
  let mut x1658: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1657, &mut x1658, 0x0, x1606, x1640);
  let mut x1659: u32 = 0;
  let mut x1660: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1659, &mut x1660, x1658, x1608, x1642);
  let mut x1661: u32 = 0;
  let mut x1662: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1661, &mut x1662, x1660, x1610, x1644);
  let mut x1663: u32 = 0;
  let mut x1664: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1663, &mut x1664, x1662, x1612, x1646);
  let mut x1665: u32 = 0;
  let mut x1666: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1665, &mut x1666, x1664, x1614, x1648);
  let mut x1667: u32 = 0;
  let mut x1668: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1667, &mut x1668, x1666, x1616, x1650);
  let mut x1669: u32 = 0;
  let mut x1670: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1669, &mut x1670, x1668, x1618, x1652);
  let mut x1671: u32 = 0;
  let mut x1672: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1671, &mut x1672, x1670, x1620, x1654);
  let mut x1673: u32 = 0;
  let mut x1674: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1673, &mut x1674, x1672, x1622, x1656);
  let x1675: u32 = ((x1674 as u32) + (x1623 as u32));
  let mut x1676: u32 = 0;
  let mut x1677: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1676, &mut x1677, x86, (arg2[7]));
  let mut x1678: u32 = 0;
  let mut x1679: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1678, &mut x1679, x86, (arg2[6]));
  let mut x1680: u32 = 0;
  let mut x1681: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1680, &mut x1681, x86, (arg2[5]));
  let mut x1682: u32 = 0;
  let mut x1683: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1682, &mut x1683, x86, (arg2[4]));
  let mut x1684: u32 = 0;
  let mut x1685: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1684, &mut x1685, x86, (arg2[3]));
  let mut x1686: u32 = 0;
  let mut x1687: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1686, &mut x1687, x86, (arg2[2]));
  let mut x1688: u32 = 0;
  let mut x1689: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1688, &mut x1689, x86, (arg2[1]));
  let mut x1690: u32 = 0;
  let mut x1691: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1690, &mut x1691, x86, (arg2[0]));
  let mut x1692: u32 = 0;
  let mut x1693: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1692, &mut x1693, 0x0, x1691, x1688);
  let mut x1694: u32 = 0;
  let mut x1695: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1694, &mut x1695, x1693, x1689, x1686);
  let mut x1696: u32 = 0;
  let mut x1697: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1696, &mut x1697, x1695, x1687, x1684);
  let mut x1698: u32 = 0;
  let mut x1699: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1698, &mut x1699, x1697, x1685, x1682);
  let mut x1700: u32 = 0;
  let mut x1701: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1700, &mut x1701, x1699, x1683, x1680);
  let mut x1702: u32 = 0;
  let mut x1703: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1702, &mut x1703, x1701, x1681, x1678);
  let mut x1704: u32 = 0;
  let mut x1705: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1704, &mut x1705, x1703, x1679, x1676);
  let x1706: u32 = ((x1705 as u32) + x1677);
  let mut x1707: u32 = 0;
  let mut x1708: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1707, &mut x1708, 0x0, x1659, x1690);
  let mut x1709: u32 = 0;
  let mut x1710: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1709, &mut x1710, x1708, x1661, x1692);
  let mut x1711: u32 = 0;
  let mut x1712: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1711, &mut x1712, x1710, x1663, x1694);
  let mut x1713: u32 = 0;
  let mut x1714: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1713, &mut x1714, x1712, x1665, x1696);
  let mut x1715: u32 = 0;
  let mut x1716: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1715, &mut x1716, x1714, x1667, x1698);
  let mut x1717: u32 = 0;
  let mut x1718: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1717, &mut x1718, x1716, x1669, x1700);
  let mut x1719: u32 = 0;
  let mut x1720: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1719, &mut x1720, x1718, x1671, x1702);
  let mut x1721: u32 = 0;
  let mut x1722: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1721, &mut x1722, x1720, x1673, x1704);
  let mut x1723: u32 = 0;
  let mut x1724: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1723, &mut x1724, x1722, x1675, x1706);
  let mut x1725: u32 = 0;
  let mut x1726: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1725, &mut x1726, x1707, 0xd2253531);
  let mut x1727: u32 = 0;
  let mut x1728: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1727, &mut x1728, x1725, 0xffffffff);
  let mut x1729: u32 = 0;
  let mut x1730: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1729, &mut x1730, x1725, 0xffffffff);
  let mut x1731: u32 = 0;
  let mut x1732: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1731, &mut x1732, x1725, 0xffffffff);
  let mut x1733: u32 = 0;
  let mut x1734: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1733, &mut x1734, x1725, 0xffffffff);
  let mut x1735: u32 = 0;
  let mut x1736: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1735, &mut x1736, x1725, 0xffffffff);
  let mut x1737: u32 = 0;
  let mut x1738: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1737, &mut x1738, x1725, 0xffffffff);
  let mut x1739: u32 = 0;
  let mut x1740: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1739, &mut x1740, x1725, 0xfffffffe);
  let mut x1741: u32 = 0;
  let mut x1742: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1741, &mut x1742, x1725, 0xfffffc2f);
  let mut x1743: u32 = 0;
  let mut x1744: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1743, &mut x1744, 0x0, x1742, x1739);
  let mut x1745: u32 = 0;
  let mut x1746: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1745, &mut x1746, x1744, x1740, x1737);
  let mut x1747: u32 = 0;
  let mut x1748: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1747, &mut x1748, x1746, x1738, x1735);
  let mut x1749: u32 = 0;
  let mut x1750: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1749, &mut x1750, x1748, x1736, x1733);
  let mut x1751: u32 = 0;
  let mut x1752: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1751, &mut x1752, x1750, x1734, x1731);
  let mut x1753: u32 = 0;
  let mut x1754: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1753, &mut x1754, x1752, x1732, x1729);
  let mut x1755: u32 = 0;
  let mut x1756: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1755, &mut x1756, x1754, x1730, x1727);
  let x1757: u32 = ((x1756 as u32) + x1728);
  let mut x1758: u32 = 0;
  let mut x1759: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1758, &mut x1759, 0x0, x1707, x1741);
  let mut x1760: u32 = 0;
  let mut x1761: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1760, &mut x1761, x1759, x1709, x1743);
  let mut x1762: u32 = 0;
  let mut x1763: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1762, &mut x1763, x1761, x1711, x1745);
  let mut x1764: u32 = 0;
  let mut x1765: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1764, &mut x1765, x1763, x1713, x1747);
  let mut x1766: u32 = 0;
  let mut x1767: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1766, &mut x1767, x1765, x1715, x1749);
  let mut x1768: u32 = 0;
  let mut x1769: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1768, &mut x1769, x1767, x1717, x1751);
  let mut x1770: u32 = 0;
  let mut x1771: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1770, &mut x1771, x1769, x1719, x1753);
  let mut x1772: u32 = 0;
  let mut x1773: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1772, &mut x1773, x1771, x1721, x1755);
  let mut x1774: u32 = 0;
  let mut x1775: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1774, &mut x1775, x1773, x1723, x1757);
  let x1776: u32 = ((x1775 as u32) + (x1724 as u32));
  let mut x1777: u32 = 0;
  let mut x1778: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x1777, &mut x1778, 0x0, x1760, 0xfffffc2f);
  let mut x1779: u32 = 0;
  let mut x1780: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x1779, &mut x1780, x1778, x1762, 0xfffffffe);
  let mut x1781: u32 = 0;
  let mut x1782: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x1781, &mut x1782, x1780, x1764, 0xffffffff);
  let mut x1783: u32 = 0;
  let mut x1784: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x1783, &mut x1784, x1782, x1766, 0xffffffff);
  let mut x1785: u32 = 0;
  let mut x1786: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x1785, &mut x1786, x1784, x1768, 0xffffffff);
  let mut x1787: u32 = 0;
  let mut x1788: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x1787, &mut x1788, x1786, x1770, 0xffffffff);
  let mut x1789: u32 = 0;
  let mut x1790: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x1789, &mut x1790, x1788, x1772, 0xffffffff);
  let mut x1791: u32 = 0;
  let mut x1792: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x1791, &mut x1792, x1790, x1774, 0xffffffff);
  let mut x1793: u32 = 0;
  let mut x1794: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x1793, &mut x1794, x1792, x1776, (0x0 as u32));
  let mut x1795: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x1795, x1794, x1777, x1760);
  let mut x1796: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x1796, x1794, x1779, x1762);
  let mut x1797: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x1797, x1794, x1781, x1764);
  let mut x1798: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x1798, x1794, x1783, x1766);
  let mut x1799: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x1799, x1794, x1785, x1768);
  let mut x1800: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x1800, x1794, x1787, x1770);
  let mut x1801: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x1801, x1794, x1789, x1772);
  let mut x1802: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x1802, x1794, x1791, x1774);
  let mut x1803: u32 = 0;
  let mut x1804: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1803, &mut x1804, x122, (arg1[7]));
  let mut x1805: u32 = 0;
  let mut x1806: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1805, &mut x1806, x122, (arg1[6]));
  let mut x1807: u32 = 0;
  let mut x1808: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1807, &mut x1808, x122, (arg1[5]));
  let mut x1809: u32 = 0;
  let mut x1810: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1809, &mut x1810, x122, (arg1[4]));
  let mut x1811: u32 = 0;
  let mut x1812: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1811, &mut x1812, x122, (arg1[3]));
  let mut x1813: u32 = 0;
  let mut x1814: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1813, &mut x1814, x122, (arg1[2]));
  let mut x1815: u32 = 0;
  let mut x1816: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1815, &mut x1816, x122, (arg1[1]));
  let mut x1817: u32 = 0;
  let mut x1818: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1817, &mut x1818, x122, (arg1[0]));
  let mut x1819: u32 = 0;
  let mut x1820: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1819, &mut x1820, 0x0, x1818, x1815);
  let mut x1821: u32 = 0;
  let mut x1822: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1821, &mut x1822, x1820, x1816, x1813);
  let mut x1823: u32 = 0;
  let mut x1824: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1823, &mut x1824, x1822, x1814, x1811);
  let mut x1825: u32 = 0;
  let mut x1826: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1825, &mut x1826, x1824, x1812, x1809);
  let mut x1827: u32 = 0;
  let mut x1828: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1827, &mut x1828, x1826, x1810, x1807);
  let mut x1829: u32 = 0;
  let mut x1830: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1829, &mut x1830, x1828, x1808, x1805);
  let mut x1831: u32 = 0;
  let mut x1832: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1831, &mut x1832, x1830, x1806, x1803);
  let x1833: u32 = ((x1832 as u32) + x1804);
  let mut x1834: u32 = 0;
  let mut x1835: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1834, &mut x1835, x1817, 0xd2253531);
  let mut x1836: u32 = 0;
  let mut x1837: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1836, &mut x1837, x1834, 0xffffffff);
  let mut x1838: u32 = 0;
  let mut x1839: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1838, &mut x1839, x1834, 0xffffffff);
  let mut x1840: u32 = 0;
  let mut x1841: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1840, &mut x1841, x1834, 0xffffffff);
  let mut x1842: u32 = 0;
  let mut x1843: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1842, &mut x1843, x1834, 0xffffffff);
  let mut x1844: u32 = 0;
  let mut x1845: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1844, &mut x1845, x1834, 0xffffffff);
  let mut x1846: u32 = 0;
  let mut x1847: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1846, &mut x1847, x1834, 0xffffffff);
  let mut x1848: u32 = 0;
  let mut x1849: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1848, &mut x1849, x1834, 0xfffffffe);
  let mut x1850: u32 = 0;
  let mut x1851: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1850, &mut x1851, x1834, 0xfffffc2f);
  let mut x1852: u32 = 0;
  let mut x1853: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1852, &mut x1853, 0x0, x1851, x1848);
  let mut x1854: u32 = 0;
  let mut x1855: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1854, &mut x1855, x1853, x1849, x1846);
  let mut x1856: u32 = 0;
  let mut x1857: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1856, &mut x1857, x1855, x1847, x1844);
  let mut x1858: u32 = 0;
  let mut x1859: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1858, &mut x1859, x1857, x1845, x1842);
  let mut x1860: u32 = 0;
  let mut x1861: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1860, &mut x1861, x1859, x1843, x1840);
  let mut x1862: u32 = 0;
  let mut x1863: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1862, &mut x1863, x1861, x1841, x1838);
  let mut x1864: u32 = 0;
  let mut x1865: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1864, &mut x1865, x1863, x1839, x1836);
  let x1866: u32 = ((x1865 as u32) + x1837);
  let mut x1867: u32 = 0;
  let mut x1868: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1867, &mut x1868, 0x0, x1817, x1850);
  let mut x1869: u32 = 0;
  let mut x1870: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1869, &mut x1870, x1868, x1819, x1852);
  let mut x1871: u32 = 0;
  let mut x1872: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1871, &mut x1872, x1870, x1821, x1854);
  let mut x1873: u32 = 0;
  let mut x1874: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1873, &mut x1874, x1872, x1823, x1856);
  let mut x1875: u32 = 0;
  let mut x1876: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1875, &mut x1876, x1874, x1825, x1858);
  let mut x1877: u32 = 0;
  let mut x1878: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1877, &mut x1878, x1876, x1827, x1860);
  let mut x1879: u32 = 0;
  let mut x1880: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1879, &mut x1880, x1878, x1829, x1862);
  let mut x1881: u32 = 0;
  let mut x1882: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1881, &mut x1882, x1880, x1831, x1864);
  let mut x1883: u32 = 0;
  let mut x1884: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1883, &mut x1884, x1882, x1833, x1866);
  let mut x1885: u32 = 0;
  let mut x1886: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1885, &mut x1886, x123, (arg1[7]));
  let mut x1887: u32 = 0;
  let mut x1888: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1887, &mut x1888, x123, (arg1[6]));
  let mut x1889: u32 = 0;
  let mut x1890: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1889, &mut x1890, x123, (arg1[5]));
  let mut x1891: u32 = 0;
  let mut x1892: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1891, &mut x1892, x123, (arg1[4]));
  let mut x1893: u32 = 0;
  let mut x1894: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1893, &mut x1894, x123, (arg1[3]));
  let mut x1895: u32 = 0;
  let mut x1896: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1895, &mut x1896, x123, (arg1[2]));
  let mut x1897: u32 = 0;
  let mut x1898: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1897, &mut x1898, x123, (arg1[1]));
  let mut x1899: u32 = 0;
  let mut x1900: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1899, &mut x1900, x123, (arg1[0]));
  let mut x1901: u32 = 0;
  let mut x1902: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1901, &mut x1902, 0x0, x1900, x1897);
  let mut x1903: u32 = 0;
  let mut x1904: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1903, &mut x1904, x1902, x1898, x1895);
  let mut x1905: u32 = 0;
  let mut x1906: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1905, &mut x1906, x1904, x1896, x1893);
  let mut x1907: u32 = 0;
  let mut x1908: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1907, &mut x1908, x1906, x1894, x1891);
  let mut x1909: u32 = 0;
  let mut x1910: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1909, &mut x1910, x1908, x1892, x1889);
  let mut x1911: u32 = 0;
  let mut x1912: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1911, &mut x1912, x1910, x1890, x1887);
  let mut x1913: u32 = 0;
  let mut x1914: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1913, &mut x1914, x1912, x1888, x1885);
  let x1915: u32 = ((x1914 as u32) + x1886);
  let mut x1916: u32 = 0;
  let mut x1917: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1916, &mut x1917, 0x0, x1869, x1899);
  let mut x1918: u32 = 0;
  let mut x1919: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1918, &mut x1919, x1917, x1871, x1901);
  let mut x1920: u32 = 0;
  let mut x1921: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1920, &mut x1921, x1919, x1873, x1903);
  let mut x1922: u32 = 0;
  let mut x1923: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1922, &mut x1923, x1921, x1875, x1905);
  let mut x1924: u32 = 0;
  let mut x1925: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1924, &mut x1925, x1923, x1877, x1907);
  let mut x1926: u32 = 0;
  let mut x1927: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1926, &mut x1927, x1925, x1879, x1909);
  let mut x1928: u32 = 0;
  let mut x1929: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1928, &mut x1929, x1927, x1881, x1911);
  let mut x1930: u32 = 0;
  let mut x1931: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1930, &mut x1931, x1929, x1883, x1913);
  let mut x1932: u32 = 0;
  let mut x1933: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1932, &mut x1933, x1931, (x1884 as u32), x1915);
  let mut x1934: u32 = 0;
  let mut x1935: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1934, &mut x1935, x1916, 0xd2253531);
  let mut x1936: u32 = 0;
  let mut x1937: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1936, &mut x1937, x1934, 0xffffffff);
  let mut x1938: u32 = 0;
  let mut x1939: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1938, &mut x1939, x1934, 0xffffffff);
  let mut x1940: u32 = 0;
  let mut x1941: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1940, &mut x1941, x1934, 0xffffffff);
  let mut x1942: u32 = 0;
  let mut x1943: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1942, &mut x1943, x1934, 0xffffffff);
  let mut x1944: u32 = 0;
  let mut x1945: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1944, &mut x1945, x1934, 0xffffffff);
  let mut x1946: u32 = 0;
  let mut x1947: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1946, &mut x1947, x1934, 0xffffffff);
  let mut x1948: u32 = 0;
  let mut x1949: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1948, &mut x1949, x1934, 0xfffffffe);
  let mut x1950: u32 = 0;
  let mut x1951: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1950, &mut x1951, x1934, 0xfffffc2f);
  let mut x1952: u32 = 0;
  let mut x1953: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1952, &mut x1953, 0x0, x1951, x1948);
  let mut x1954: u32 = 0;
  let mut x1955: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1954, &mut x1955, x1953, x1949, x1946);
  let mut x1956: u32 = 0;
  let mut x1957: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1956, &mut x1957, x1955, x1947, x1944);
  let mut x1958: u32 = 0;
  let mut x1959: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1958, &mut x1959, x1957, x1945, x1942);
  let mut x1960: u32 = 0;
  let mut x1961: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1960, &mut x1961, x1959, x1943, x1940);
  let mut x1962: u32 = 0;
  let mut x1963: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1962, &mut x1963, x1961, x1941, x1938);
  let mut x1964: u32 = 0;
  let mut x1965: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1964, &mut x1965, x1963, x1939, x1936);
  let x1966: u32 = ((x1965 as u32) + x1937);
  let mut x1967: u32 = 0;
  let mut x1968: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1967, &mut x1968, 0x0, x1916, x1950);
  let mut x1969: u32 = 0;
  let mut x1970: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1969, &mut x1970, x1968, x1918, x1952);
  let mut x1971: u32 = 0;
  let mut x1972: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1971, &mut x1972, x1970, x1920, x1954);
  let mut x1973: u32 = 0;
  let mut x1974: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1973, &mut x1974, x1972, x1922, x1956);
  let mut x1975: u32 = 0;
  let mut x1976: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1975, &mut x1976, x1974, x1924, x1958);
  let mut x1977: u32 = 0;
  let mut x1978: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1977, &mut x1978, x1976, x1926, x1960);
  let mut x1979: u32 = 0;
  let mut x1980: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1979, &mut x1980, x1978, x1928, x1962);
  let mut x1981: u32 = 0;
  let mut x1982: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1981, &mut x1982, x1980, x1930, x1964);
  let mut x1983: u32 = 0;
  let mut x1984: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x1983, &mut x1984, x1982, x1932, x1966);
  let x1985: u32 = ((x1984 as u32) + (x1933 as u32));
  let mut x1986: u32 = 0;
  let mut x1987: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1986, &mut x1987, x124, (arg1[7]));
  let mut x1988: u32 = 0;
  let mut x1989: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1988, &mut x1989, x124, (arg1[6]));
  let mut x1990: u32 = 0;
  let mut x1991: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1990, &mut x1991, x124, (arg1[5]));
  let mut x1992: u32 = 0;
  let mut x1993: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1992, &mut x1993, x124, (arg1[4]));
  let mut x1994: u32 = 0;
  let mut x1995: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1994, &mut x1995, x124, (arg1[3]));
  let mut x1996: u32 = 0;
  let mut x1997: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1996, &mut x1997, x124, (arg1[2]));
  let mut x1998: u32 = 0;
  let mut x1999: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x1998, &mut x1999, x124, (arg1[1]));
  let mut x2000: u32 = 0;
  let mut x2001: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2000, &mut x2001, x124, (arg1[0]));
  let mut x2002: u32 = 0;
  let mut x2003: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2002, &mut x2003, 0x0, x2001, x1998);
  let mut x2004: u32 = 0;
  let mut x2005: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2004, &mut x2005, x2003, x1999, x1996);
  let mut x2006: u32 = 0;
  let mut x2007: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2006, &mut x2007, x2005, x1997, x1994);
  let mut x2008: u32 = 0;
  let mut x2009: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2008, &mut x2009, x2007, x1995, x1992);
  let mut x2010: u32 = 0;
  let mut x2011: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2010, &mut x2011, x2009, x1993, x1990);
  let mut x2012: u32 = 0;
  let mut x2013: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2012, &mut x2013, x2011, x1991, x1988);
  let mut x2014: u32 = 0;
  let mut x2015: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2014, &mut x2015, x2013, x1989, x1986);
  let x2016: u32 = ((x2015 as u32) + x1987);
  let mut x2017: u32 = 0;
  let mut x2018: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2017, &mut x2018, 0x0, x1969, x2000);
  let mut x2019: u32 = 0;
  let mut x2020: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2019, &mut x2020, x2018, x1971, x2002);
  let mut x2021: u32 = 0;
  let mut x2022: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2021, &mut x2022, x2020, x1973, x2004);
  let mut x2023: u32 = 0;
  let mut x2024: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2023, &mut x2024, x2022, x1975, x2006);
  let mut x2025: u32 = 0;
  let mut x2026: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2025, &mut x2026, x2024, x1977, x2008);
  let mut x2027: u32 = 0;
  let mut x2028: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2027, &mut x2028, x2026, x1979, x2010);
  let mut x2029: u32 = 0;
  let mut x2030: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2029, &mut x2030, x2028, x1981, x2012);
  let mut x2031: u32 = 0;
  let mut x2032: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2031, &mut x2032, x2030, x1983, x2014);
  let mut x2033: u32 = 0;
  let mut x2034: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2033, &mut x2034, x2032, x1985, x2016);
  let mut x2035: u32 = 0;
  let mut x2036: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2035, &mut x2036, x2017, 0xd2253531);
  let mut x2037: u32 = 0;
  let mut x2038: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2037, &mut x2038, x2035, 0xffffffff);
  let mut x2039: u32 = 0;
  let mut x2040: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2039, &mut x2040, x2035, 0xffffffff);
  let mut x2041: u32 = 0;
  let mut x2042: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2041, &mut x2042, x2035, 0xffffffff);
  let mut x2043: u32 = 0;
  let mut x2044: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2043, &mut x2044, x2035, 0xffffffff);
  let mut x2045: u32 = 0;
  let mut x2046: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2045, &mut x2046, x2035, 0xffffffff);
  let mut x2047: u32 = 0;
  let mut x2048: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2047, &mut x2048, x2035, 0xffffffff);
  let mut x2049: u32 = 0;
  let mut x2050: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2049, &mut x2050, x2035, 0xfffffffe);
  let mut x2051: u32 = 0;
  let mut x2052: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2051, &mut x2052, x2035, 0xfffffc2f);
  let mut x2053: u32 = 0;
  let mut x2054: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2053, &mut x2054, 0x0, x2052, x2049);
  let mut x2055: u32 = 0;
  let mut x2056: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2055, &mut x2056, x2054, x2050, x2047);
  let mut x2057: u32 = 0;
  let mut x2058: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2057, &mut x2058, x2056, x2048, x2045);
  let mut x2059: u32 = 0;
  let mut x2060: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2059, &mut x2060, x2058, x2046, x2043);
  let mut x2061: u32 = 0;
  let mut x2062: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2061, &mut x2062, x2060, x2044, x2041);
  let mut x2063: u32 = 0;
  let mut x2064: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2063, &mut x2064, x2062, x2042, x2039);
  let mut x2065: u32 = 0;
  let mut x2066: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2065, &mut x2066, x2064, x2040, x2037);
  let x2067: u32 = ((x2066 as u32) + x2038);
  let mut x2068: u32 = 0;
  let mut x2069: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2068, &mut x2069, 0x0, x2017, x2051);
  let mut x2070: u32 = 0;
  let mut x2071: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2070, &mut x2071, x2069, x2019, x2053);
  let mut x2072: u32 = 0;
  let mut x2073: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2072, &mut x2073, x2071, x2021, x2055);
  let mut x2074: u32 = 0;
  let mut x2075: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2074, &mut x2075, x2073, x2023, x2057);
  let mut x2076: u32 = 0;
  let mut x2077: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2076, &mut x2077, x2075, x2025, x2059);
  let mut x2078: u32 = 0;
  let mut x2079: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2078, &mut x2079, x2077, x2027, x2061);
  let mut x2080: u32 = 0;
  let mut x2081: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2080, &mut x2081, x2079, x2029, x2063);
  let mut x2082: u32 = 0;
  let mut x2083: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2082, &mut x2083, x2081, x2031, x2065);
  let mut x2084: u32 = 0;
  let mut x2085: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2084, &mut x2085, x2083, x2033, x2067);
  let x2086: u32 = ((x2085 as u32) + (x2034 as u32));
  let mut x2087: u32 = 0;
  let mut x2088: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2087, &mut x2088, x125, (arg1[7]));
  let mut x2089: u32 = 0;
  let mut x2090: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2089, &mut x2090, x125, (arg1[6]));
  let mut x2091: u32 = 0;
  let mut x2092: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2091, &mut x2092, x125, (arg1[5]));
  let mut x2093: u32 = 0;
  let mut x2094: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2093, &mut x2094, x125, (arg1[4]));
  let mut x2095: u32 = 0;
  let mut x2096: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2095, &mut x2096, x125, (arg1[3]));
  let mut x2097: u32 = 0;
  let mut x2098: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2097, &mut x2098, x125, (arg1[2]));
  let mut x2099: u32 = 0;
  let mut x2100: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2099, &mut x2100, x125, (arg1[1]));
  let mut x2101: u32 = 0;
  let mut x2102: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2101, &mut x2102, x125, (arg1[0]));
  let mut x2103: u32 = 0;
  let mut x2104: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2103, &mut x2104, 0x0, x2102, x2099);
  let mut x2105: u32 = 0;
  let mut x2106: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2105, &mut x2106, x2104, x2100, x2097);
  let mut x2107: u32 = 0;
  let mut x2108: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2107, &mut x2108, x2106, x2098, x2095);
  let mut x2109: u32 = 0;
  let mut x2110: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2109, &mut x2110, x2108, x2096, x2093);
  let mut x2111: u32 = 0;
  let mut x2112: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2111, &mut x2112, x2110, x2094, x2091);
  let mut x2113: u32 = 0;
  let mut x2114: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2113, &mut x2114, x2112, x2092, x2089);
  let mut x2115: u32 = 0;
  let mut x2116: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2115, &mut x2116, x2114, x2090, x2087);
  let x2117: u32 = ((x2116 as u32) + x2088);
  let mut x2118: u32 = 0;
  let mut x2119: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2118, &mut x2119, 0x0, x2070, x2101);
  let mut x2120: u32 = 0;
  let mut x2121: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2120, &mut x2121, x2119, x2072, x2103);
  let mut x2122: u32 = 0;
  let mut x2123: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2122, &mut x2123, x2121, x2074, x2105);
  let mut x2124: u32 = 0;
  let mut x2125: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2124, &mut x2125, x2123, x2076, x2107);
  let mut x2126: u32 = 0;
  let mut x2127: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2126, &mut x2127, x2125, x2078, x2109);
  let mut x2128: u32 = 0;
  let mut x2129: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2128, &mut x2129, x2127, x2080, x2111);
  let mut x2130: u32 = 0;
  let mut x2131: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2130, &mut x2131, x2129, x2082, x2113);
  let mut x2132: u32 = 0;
  let mut x2133: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2132, &mut x2133, x2131, x2084, x2115);
  let mut x2134: u32 = 0;
  let mut x2135: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2134, &mut x2135, x2133, x2086, x2117);
  let mut x2136: u32 = 0;
  let mut x2137: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2136, &mut x2137, x2118, 0xd2253531);
  let mut x2138: u32 = 0;
  let mut x2139: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2138, &mut x2139, x2136, 0xffffffff);
  let mut x2140: u32 = 0;
  let mut x2141: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2140, &mut x2141, x2136, 0xffffffff);
  let mut x2142: u32 = 0;
  let mut x2143: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2142, &mut x2143, x2136, 0xffffffff);
  let mut x2144: u32 = 0;
  let mut x2145: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2144, &mut x2145, x2136, 0xffffffff);
  let mut x2146: u32 = 0;
  let mut x2147: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2146, &mut x2147, x2136, 0xffffffff);
  let mut x2148: u32 = 0;
  let mut x2149: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2148, &mut x2149, x2136, 0xffffffff);
  let mut x2150: u32 = 0;
  let mut x2151: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2150, &mut x2151, x2136, 0xfffffffe);
  let mut x2152: u32 = 0;
  let mut x2153: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2152, &mut x2153, x2136, 0xfffffc2f);
  let mut x2154: u32 = 0;
  let mut x2155: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2154, &mut x2155, 0x0, x2153, x2150);
  let mut x2156: u32 = 0;
  let mut x2157: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2156, &mut x2157, x2155, x2151, x2148);
  let mut x2158: u32 = 0;
  let mut x2159: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2158, &mut x2159, x2157, x2149, x2146);
  let mut x2160: u32 = 0;
  let mut x2161: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2160, &mut x2161, x2159, x2147, x2144);
  let mut x2162: u32 = 0;
  let mut x2163: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2162, &mut x2163, x2161, x2145, x2142);
  let mut x2164: u32 = 0;
  let mut x2165: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2164, &mut x2165, x2163, x2143, x2140);
  let mut x2166: u32 = 0;
  let mut x2167: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2166, &mut x2167, x2165, x2141, x2138);
  let x2168: u32 = ((x2167 as u32) + x2139);
  let mut x2169: u32 = 0;
  let mut x2170: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2169, &mut x2170, 0x0, x2118, x2152);
  let mut x2171: u32 = 0;
  let mut x2172: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2171, &mut x2172, x2170, x2120, x2154);
  let mut x2173: u32 = 0;
  let mut x2174: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2173, &mut x2174, x2172, x2122, x2156);
  let mut x2175: u32 = 0;
  let mut x2176: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2175, &mut x2176, x2174, x2124, x2158);
  let mut x2177: u32 = 0;
  let mut x2178: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2177, &mut x2178, x2176, x2126, x2160);
  let mut x2179: u32 = 0;
  let mut x2180: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2179, &mut x2180, x2178, x2128, x2162);
  let mut x2181: u32 = 0;
  let mut x2182: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2181, &mut x2182, x2180, x2130, x2164);
  let mut x2183: u32 = 0;
  let mut x2184: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2183, &mut x2184, x2182, x2132, x2166);
  let mut x2185: u32 = 0;
  let mut x2186: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2185, &mut x2186, x2184, x2134, x2168);
  let x2187: u32 = ((x2186 as u32) + (x2135 as u32));
  let mut x2188: u32 = 0;
  let mut x2189: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2188, &mut x2189, x126, (arg1[7]));
  let mut x2190: u32 = 0;
  let mut x2191: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2190, &mut x2191, x126, (arg1[6]));
  let mut x2192: u32 = 0;
  let mut x2193: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2192, &mut x2193, x126, (arg1[5]));
  let mut x2194: u32 = 0;
  let mut x2195: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2194, &mut x2195, x126, (arg1[4]));
  let mut x2196: u32 = 0;
  let mut x2197: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2196, &mut x2197, x126, (arg1[3]));
  let mut x2198: u32 = 0;
  let mut x2199: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2198, &mut x2199, x126, (arg1[2]));
  let mut x2200: u32 = 0;
  let mut x2201: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2200, &mut x2201, x126, (arg1[1]));
  let mut x2202: u32 = 0;
  let mut x2203: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2202, &mut x2203, x126, (arg1[0]));
  let mut x2204: u32 = 0;
  let mut x2205: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2204, &mut x2205, 0x0, x2203, x2200);
  let mut x2206: u32 = 0;
  let mut x2207: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2206, &mut x2207, x2205, x2201, x2198);
  let mut x2208: u32 = 0;
  let mut x2209: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2208, &mut x2209, x2207, x2199, x2196);
  let mut x2210: u32 = 0;
  let mut x2211: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2210, &mut x2211, x2209, x2197, x2194);
  let mut x2212: u32 = 0;
  let mut x2213: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2212, &mut x2213, x2211, x2195, x2192);
  let mut x2214: u32 = 0;
  let mut x2215: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2214, &mut x2215, x2213, x2193, x2190);
  let mut x2216: u32 = 0;
  let mut x2217: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2216, &mut x2217, x2215, x2191, x2188);
  let x2218: u32 = ((x2217 as u32) + x2189);
  let mut x2219: u32 = 0;
  let mut x2220: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2219, &mut x2220, 0x0, x2171, x2202);
  let mut x2221: u32 = 0;
  let mut x2222: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2221, &mut x2222, x2220, x2173, x2204);
  let mut x2223: u32 = 0;
  let mut x2224: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2223, &mut x2224, x2222, x2175, x2206);
  let mut x2225: u32 = 0;
  let mut x2226: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2225, &mut x2226, x2224, x2177, x2208);
  let mut x2227: u32 = 0;
  let mut x2228: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2227, &mut x2228, x2226, x2179, x2210);
  let mut x2229: u32 = 0;
  let mut x2230: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2229, &mut x2230, x2228, x2181, x2212);
  let mut x2231: u32 = 0;
  let mut x2232: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2231, &mut x2232, x2230, x2183, x2214);
  let mut x2233: u32 = 0;
  let mut x2234: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2233, &mut x2234, x2232, x2185, x2216);
  let mut x2235: u32 = 0;
  let mut x2236: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2235, &mut x2236, x2234, x2187, x2218);
  let mut x2237: u32 = 0;
  let mut x2238: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2237, &mut x2238, x2219, 0xd2253531);
  let mut x2239: u32 = 0;
  let mut x2240: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2239, &mut x2240, x2237, 0xffffffff);
  let mut x2241: u32 = 0;
  let mut x2242: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2241, &mut x2242, x2237, 0xffffffff);
  let mut x2243: u32 = 0;
  let mut x2244: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2243, &mut x2244, x2237, 0xffffffff);
  let mut x2245: u32 = 0;
  let mut x2246: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2245, &mut x2246, x2237, 0xffffffff);
  let mut x2247: u32 = 0;
  let mut x2248: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2247, &mut x2248, x2237, 0xffffffff);
  let mut x2249: u32 = 0;
  let mut x2250: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2249, &mut x2250, x2237, 0xffffffff);
  let mut x2251: u32 = 0;
  let mut x2252: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2251, &mut x2252, x2237, 0xfffffffe);
  let mut x2253: u32 = 0;
  let mut x2254: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2253, &mut x2254, x2237, 0xfffffc2f);
  let mut x2255: u32 = 0;
  let mut x2256: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2255, &mut x2256, 0x0, x2254, x2251);
  let mut x2257: u32 = 0;
  let mut x2258: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2257, &mut x2258, x2256, x2252, x2249);
  let mut x2259: u32 = 0;
  let mut x2260: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2259, &mut x2260, x2258, x2250, x2247);
  let mut x2261: u32 = 0;
  let mut x2262: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2261, &mut x2262, x2260, x2248, x2245);
  let mut x2263: u32 = 0;
  let mut x2264: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2263, &mut x2264, x2262, x2246, x2243);
  let mut x2265: u32 = 0;
  let mut x2266: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2265, &mut x2266, x2264, x2244, x2241);
  let mut x2267: u32 = 0;
  let mut x2268: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2267, &mut x2268, x2266, x2242, x2239);
  let x2269: u32 = ((x2268 as u32) + x2240);
  let mut x2270: u32 = 0;
  let mut x2271: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2270, &mut x2271, 0x0, x2219, x2253);
  let mut x2272: u32 = 0;
  let mut x2273: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2272, &mut x2273, x2271, x2221, x2255);
  let mut x2274: u32 = 0;
  let mut x2275: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2274, &mut x2275, x2273, x2223, x2257);
  let mut x2276: u32 = 0;
  let mut x2277: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2276, &mut x2277, x2275, x2225, x2259);
  let mut x2278: u32 = 0;
  let mut x2279: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2278, &mut x2279, x2277, x2227, x2261);
  let mut x2280: u32 = 0;
  let mut x2281: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2280, &mut x2281, x2279, x2229, x2263);
  let mut x2282: u32 = 0;
  let mut x2283: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2282, &mut x2283, x2281, x2231, x2265);
  let mut x2284: u32 = 0;
  let mut x2285: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2284, &mut x2285, x2283, x2233, x2267);
  let mut x2286: u32 = 0;
  let mut x2287: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2286, &mut x2287, x2285, x2235, x2269);
  let x2288: u32 = ((x2287 as u32) + (x2236 as u32));
  let mut x2289: u32 = 0;
  let mut x2290: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2289, &mut x2290, x127, (arg1[7]));
  let mut x2291: u32 = 0;
  let mut x2292: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2291, &mut x2292, x127, (arg1[6]));
  let mut x2293: u32 = 0;
  let mut x2294: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2293, &mut x2294, x127, (arg1[5]));
  let mut x2295: u32 = 0;
  let mut x2296: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2295, &mut x2296, x127, (arg1[4]));
  let mut x2297: u32 = 0;
  let mut x2298: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2297, &mut x2298, x127, (arg1[3]));
  let mut x2299: u32 = 0;
  let mut x2300: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2299, &mut x2300, x127, (arg1[2]));
  let mut x2301: u32 = 0;
  let mut x2302: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2301, &mut x2302, x127, (arg1[1]));
  let mut x2303: u32 = 0;
  let mut x2304: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2303, &mut x2304, x127, (arg1[0]));
  let mut x2305: u32 = 0;
  let mut x2306: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2305, &mut x2306, 0x0, x2304, x2301);
  let mut x2307: u32 = 0;
  let mut x2308: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2307, &mut x2308, x2306, x2302, x2299);
  let mut x2309: u32 = 0;
  let mut x2310: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2309, &mut x2310, x2308, x2300, x2297);
  let mut x2311: u32 = 0;
  let mut x2312: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2311, &mut x2312, x2310, x2298, x2295);
  let mut x2313: u32 = 0;
  let mut x2314: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2313, &mut x2314, x2312, x2296, x2293);
  let mut x2315: u32 = 0;
  let mut x2316: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2315, &mut x2316, x2314, x2294, x2291);
  let mut x2317: u32 = 0;
  let mut x2318: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2317, &mut x2318, x2316, x2292, x2289);
  let x2319: u32 = ((x2318 as u32) + x2290);
  let mut x2320: u32 = 0;
  let mut x2321: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2320, &mut x2321, 0x0, x2272, x2303);
  let mut x2322: u32 = 0;
  let mut x2323: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2322, &mut x2323, x2321, x2274, x2305);
  let mut x2324: u32 = 0;
  let mut x2325: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2324, &mut x2325, x2323, x2276, x2307);
  let mut x2326: u32 = 0;
  let mut x2327: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2326, &mut x2327, x2325, x2278, x2309);
  let mut x2328: u32 = 0;
  let mut x2329: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2328, &mut x2329, x2327, x2280, x2311);
  let mut x2330: u32 = 0;
  let mut x2331: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2330, &mut x2331, x2329, x2282, x2313);
  let mut x2332: u32 = 0;
  let mut x2333: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2332, &mut x2333, x2331, x2284, x2315);
  let mut x2334: u32 = 0;
  let mut x2335: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2334, &mut x2335, x2333, x2286, x2317);
  let mut x2336: u32 = 0;
  let mut x2337: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2336, &mut x2337, x2335, x2288, x2319);
  let mut x2338: u32 = 0;
  let mut x2339: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2338, &mut x2339, x2320, 0xd2253531);
  let mut x2340: u32 = 0;
  let mut x2341: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2340, &mut x2341, x2338, 0xffffffff);
  let mut x2342: u32 = 0;
  let mut x2343: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2342, &mut x2343, x2338, 0xffffffff);
  let mut x2344: u32 = 0;
  let mut x2345: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2344, &mut x2345, x2338, 0xffffffff);
  let mut x2346: u32 = 0;
  let mut x2347: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2346, &mut x2347, x2338, 0xffffffff);
  let mut x2348: u32 = 0;
  let mut x2349: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2348, &mut x2349, x2338, 0xffffffff);
  let mut x2350: u32 = 0;
  let mut x2351: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2350, &mut x2351, x2338, 0xffffffff);
  let mut x2352: u32 = 0;
  let mut x2353: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2352, &mut x2353, x2338, 0xfffffffe);
  let mut x2354: u32 = 0;
  let mut x2355: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2354, &mut x2355, x2338, 0xfffffc2f);
  let mut x2356: u32 = 0;
  let mut x2357: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2356, &mut x2357, 0x0, x2355, x2352);
  let mut x2358: u32 = 0;
  let mut x2359: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2358, &mut x2359, x2357, x2353, x2350);
  let mut x2360: u32 = 0;
  let mut x2361: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2360, &mut x2361, x2359, x2351, x2348);
  let mut x2362: u32 = 0;
  let mut x2363: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2362, &mut x2363, x2361, x2349, x2346);
  let mut x2364: u32 = 0;
  let mut x2365: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2364, &mut x2365, x2363, x2347, x2344);
  let mut x2366: u32 = 0;
  let mut x2367: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2366, &mut x2367, x2365, x2345, x2342);
  let mut x2368: u32 = 0;
  let mut x2369: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2368, &mut x2369, x2367, x2343, x2340);
  let x2370: u32 = ((x2369 as u32) + x2341);
  let mut x2371: u32 = 0;
  let mut x2372: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2371, &mut x2372, 0x0, x2320, x2354);
  let mut x2373: u32 = 0;
  let mut x2374: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2373, &mut x2374, x2372, x2322, x2356);
  let mut x2375: u32 = 0;
  let mut x2376: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2375, &mut x2376, x2374, x2324, x2358);
  let mut x2377: u32 = 0;
  let mut x2378: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2377, &mut x2378, x2376, x2326, x2360);
  let mut x2379: u32 = 0;
  let mut x2380: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2379, &mut x2380, x2378, x2328, x2362);
  let mut x2381: u32 = 0;
  let mut x2382: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2381, &mut x2382, x2380, x2330, x2364);
  let mut x2383: u32 = 0;
  let mut x2384: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2383, &mut x2384, x2382, x2332, x2366);
  let mut x2385: u32 = 0;
  let mut x2386: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2385, &mut x2386, x2384, x2334, x2368);
  let mut x2387: u32 = 0;
  let mut x2388: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2387, &mut x2388, x2386, x2336, x2370);
  let x2389: u32 = ((x2388 as u32) + (x2337 as u32));
  let mut x2390: u32 = 0;
  let mut x2391: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2390, &mut x2391, x128, (arg1[7]));
  let mut x2392: u32 = 0;
  let mut x2393: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2392, &mut x2393, x128, (arg1[6]));
  let mut x2394: u32 = 0;
  let mut x2395: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2394, &mut x2395, x128, (arg1[5]));
  let mut x2396: u32 = 0;
  let mut x2397: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2396, &mut x2397, x128, (arg1[4]));
  let mut x2398: u32 = 0;
  let mut x2399: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2398, &mut x2399, x128, (arg1[3]));
  let mut x2400: u32 = 0;
  let mut x2401: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2400, &mut x2401, x128, (arg1[2]));
  let mut x2402: u32 = 0;
  let mut x2403: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2402, &mut x2403, x128, (arg1[1]));
  let mut x2404: u32 = 0;
  let mut x2405: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2404, &mut x2405, x128, (arg1[0]));
  let mut x2406: u32 = 0;
  let mut x2407: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2406, &mut x2407, 0x0, x2405, x2402);
  let mut x2408: u32 = 0;
  let mut x2409: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2408, &mut x2409, x2407, x2403, x2400);
  let mut x2410: u32 = 0;
  let mut x2411: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2410, &mut x2411, x2409, x2401, x2398);
  let mut x2412: u32 = 0;
  let mut x2413: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2412, &mut x2413, x2411, x2399, x2396);
  let mut x2414: u32 = 0;
  let mut x2415: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2414, &mut x2415, x2413, x2397, x2394);
  let mut x2416: u32 = 0;
  let mut x2417: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2416, &mut x2417, x2415, x2395, x2392);
  let mut x2418: u32 = 0;
  let mut x2419: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2418, &mut x2419, x2417, x2393, x2390);
  let x2420: u32 = ((x2419 as u32) + x2391);
  let mut x2421: u32 = 0;
  let mut x2422: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2421, &mut x2422, 0x0, x2373, x2404);
  let mut x2423: u32 = 0;
  let mut x2424: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2423, &mut x2424, x2422, x2375, x2406);
  let mut x2425: u32 = 0;
  let mut x2426: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2425, &mut x2426, x2424, x2377, x2408);
  let mut x2427: u32 = 0;
  let mut x2428: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2427, &mut x2428, x2426, x2379, x2410);
  let mut x2429: u32 = 0;
  let mut x2430: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2429, &mut x2430, x2428, x2381, x2412);
  let mut x2431: u32 = 0;
  let mut x2432: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2431, &mut x2432, x2430, x2383, x2414);
  let mut x2433: u32 = 0;
  let mut x2434: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2433, &mut x2434, x2432, x2385, x2416);
  let mut x2435: u32 = 0;
  let mut x2436: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2435, &mut x2436, x2434, x2387, x2418);
  let mut x2437: u32 = 0;
  let mut x2438: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2437, &mut x2438, x2436, x2389, x2420);
  let mut x2439: u32 = 0;
  let mut x2440: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2439, &mut x2440, x2421, 0xd2253531);
  let mut x2441: u32 = 0;
  let mut x2442: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2441, &mut x2442, x2439, 0xffffffff);
  let mut x2443: u32 = 0;
  let mut x2444: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2443, &mut x2444, x2439, 0xffffffff);
  let mut x2445: u32 = 0;
  let mut x2446: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2445, &mut x2446, x2439, 0xffffffff);
  let mut x2447: u32 = 0;
  let mut x2448: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2447, &mut x2448, x2439, 0xffffffff);
  let mut x2449: u32 = 0;
  let mut x2450: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2449, &mut x2450, x2439, 0xffffffff);
  let mut x2451: u32 = 0;
  let mut x2452: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2451, &mut x2452, x2439, 0xffffffff);
  let mut x2453: u32 = 0;
  let mut x2454: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2453, &mut x2454, x2439, 0xfffffffe);
  let mut x2455: u32 = 0;
  let mut x2456: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2455, &mut x2456, x2439, 0xfffffc2f);
  let mut x2457: u32 = 0;
  let mut x2458: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2457, &mut x2458, 0x0, x2456, x2453);
  let mut x2459: u32 = 0;
  let mut x2460: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2459, &mut x2460, x2458, x2454, x2451);
  let mut x2461: u32 = 0;
  let mut x2462: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2461, &mut x2462, x2460, x2452, x2449);
  let mut x2463: u32 = 0;
  let mut x2464: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2463, &mut x2464, x2462, x2450, x2447);
  let mut x2465: u32 = 0;
  let mut x2466: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2465, &mut x2466, x2464, x2448, x2445);
  let mut x2467: u32 = 0;
  let mut x2468: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2467, &mut x2468, x2466, x2446, x2443);
  let mut x2469: u32 = 0;
  let mut x2470: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2469, &mut x2470, x2468, x2444, x2441);
  let x2471: u32 = ((x2470 as u32) + x2442);
  let mut x2472: u32 = 0;
  let mut x2473: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2472, &mut x2473, 0x0, x2421, x2455);
  let mut x2474: u32 = 0;
  let mut x2475: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2474, &mut x2475, x2473, x2423, x2457);
  let mut x2476: u32 = 0;
  let mut x2477: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2476, &mut x2477, x2475, x2425, x2459);
  let mut x2478: u32 = 0;
  let mut x2479: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2478, &mut x2479, x2477, x2427, x2461);
  let mut x2480: u32 = 0;
  let mut x2481: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2480, &mut x2481, x2479, x2429, x2463);
  let mut x2482: u32 = 0;
  let mut x2483: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2482, &mut x2483, x2481, x2431, x2465);
  let mut x2484: u32 = 0;
  let mut x2485: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2484, &mut x2485, x2483, x2433, x2467);
  let mut x2486: u32 = 0;
  let mut x2487: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2486, &mut x2487, x2485, x2435, x2469);
  let mut x2488: u32 = 0;
  let mut x2489: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2488, &mut x2489, x2487, x2437, x2471);
  let x2490: u32 = ((x2489 as u32) + (x2438 as u32));
  let mut x2491: u32 = 0;
  let mut x2492: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2491, &mut x2492, x129, (arg1[7]));
  let mut x2493: u32 = 0;
  let mut x2494: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2493, &mut x2494, x129, (arg1[6]));
  let mut x2495: u32 = 0;
  let mut x2496: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2495, &mut x2496, x129, (arg1[5]));
  let mut x2497: u32 = 0;
  let mut x2498: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2497, &mut x2498, x129, (arg1[4]));
  let mut x2499: u32 = 0;
  let mut x2500: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2499, &mut x2500, x129, (arg1[3]));
  let mut x2501: u32 = 0;
  let mut x2502: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2501, &mut x2502, x129, (arg1[2]));
  let mut x2503: u32 = 0;
  let mut x2504: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2503, &mut x2504, x129, (arg1[1]));
  let mut x2505: u32 = 0;
  let mut x2506: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2505, &mut x2506, x129, (arg1[0]));
  let mut x2507: u32 = 0;
  let mut x2508: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2507, &mut x2508, 0x0, x2506, x2503);
  let mut x2509: u32 = 0;
  let mut x2510: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2509, &mut x2510, x2508, x2504, x2501);
  let mut x2511: u32 = 0;
  let mut x2512: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2511, &mut x2512, x2510, x2502, x2499);
  let mut x2513: u32 = 0;
  let mut x2514: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2513, &mut x2514, x2512, x2500, x2497);
  let mut x2515: u32 = 0;
  let mut x2516: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2515, &mut x2516, x2514, x2498, x2495);
  let mut x2517: u32 = 0;
  let mut x2518: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2517, &mut x2518, x2516, x2496, x2493);
  let mut x2519: u32 = 0;
  let mut x2520: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2519, &mut x2520, x2518, x2494, x2491);
  let x2521: u32 = ((x2520 as u32) + x2492);
  let mut x2522: u32 = 0;
  let mut x2523: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2522, &mut x2523, 0x0, x2474, x2505);
  let mut x2524: u32 = 0;
  let mut x2525: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2524, &mut x2525, x2523, x2476, x2507);
  let mut x2526: u32 = 0;
  let mut x2527: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2526, &mut x2527, x2525, x2478, x2509);
  let mut x2528: u32 = 0;
  let mut x2529: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2528, &mut x2529, x2527, x2480, x2511);
  let mut x2530: u32 = 0;
  let mut x2531: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2530, &mut x2531, x2529, x2482, x2513);
  let mut x2532: u32 = 0;
  let mut x2533: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2532, &mut x2533, x2531, x2484, x2515);
  let mut x2534: u32 = 0;
  let mut x2535: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2534, &mut x2535, x2533, x2486, x2517);
  let mut x2536: u32 = 0;
  let mut x2537: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2536, &mut x2537, x2535, x2488, x2519);
  let mut x2538: u32 = 0;
  let mut x2539: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2538, &mut x2539, x2537, x2490, x2521);
  let mut x2540: u32 = 0;
  let mut x2541: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2540, &mut x2541, x2522, 0xd2253531);
  let mut x2542: u32 = 0;
  let mut x2543: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2542, &mut x2543, x2540, 0xffffffff);
  let mut x2544: u32 = 0;
  let mut x2545: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2544, &mut x2545, x2540, 0xffffffff);
  let mut x2546: u32 = 0;
  let mut x2547: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2546, &mut x2547, x2540, 0xffffffff);
  let mut x2548: u32 = 0;
  let mut x2549: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2548, &mut x2549, x2540, 0xffffffff);
  let mut x2550: u32 = 0;
  let mut x2551: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2550, &mut x2551, x2540, 0xffffffff);
  let mut x2552: u32 = 0;
  let mut x2553: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2552, &mut x2553, x2540, 0xffffffff);
  let mut x2554: u32 = 0;
  let mut x2555: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2554, &mut x2555, x2540, 0xfffffffe);
  let mut x2556: u32 = 0;
  let mut x2557: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2556, &mut x2557, x2540, 0xfffffc2f);
  let mut x2558: u32 = 0;
  let mut x2559: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2558, &mut x2559, 0x0, x2557, x2554);
  let mut x2560: u32 = 0;
  let mut x2561: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2560, &mut x2561, x2559, x2555, x2552);
  let mut x2562: u32 = 0;
  let mut x2563: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2562, &mut x2563, x2561, x2553, x2550);
  let mut x2564: u32 = 0;
  let mut x2565: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2564, &mut x2565, x2563, x2551, x2548);
  let mut x2566: u32 = 0;
  let mut x2567: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2566, &mut x2567, x2565, x2549, x2546);
  let mut x2568: u32 = 0;
  let mut x2569: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2568, &mut x2569, x2567, x2547, x2544);
  let mut x2570: u32 = 0;
  let mut x2571: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2570, &mut x2571, x2569, x2545, x2542);
  let x2572: u32 = ((x2571 as u32) + x2543);
  let mut x2573: u32 = 0;
  let mut x2574: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2573, &mut x2574, 0x0, x2522, x2556);
  let mut x2575: u32 = 0;
  let mut x2576: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2575, &mut x2576, x2574, x2524, x2558);
  let mut x2577: u32 = 0;
  let mut x2578: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2577, &mut x2578, x2576, x2526, x2560);
  let mut x2579: u32 = 0;
  let mut x2580: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2579, &mut x2580, x2578, x2528, x2562);
  let mut x2581: u32 = 0;
  let mut x2582: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2581, &mut x2582, x2580, x2530, x2564);
  let mut x2583: u32 = 0;
  let mut x2584: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2583, &mut x2584, x2582, x2532, x2566);
  let mut x2585: u32 = 0;
  let mut x2586: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2585, &mut x2586, x2584, x2534, x2568);
  let mut x2587: u32 = 0;
  let mut x2588: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2587, &mut x2588, x2586, x2536, x2570);
  let mut x2589: u32 = 0;
  let mut x2590: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2589, &mut x2590, x2588, x2538, x2572);
  let x2591: u32 = ((x2590 as u32) + (x2539 as u32));
  let mut x2592: u32 = 0;
  let mut x2593: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x2592, &mut x2593, 0x0, x2575, 0xfffffc2f);
  let mut x2594: u32 = 0;
  let mut x2595: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x2594, &mut x2595, x2593, x2577, 0xfffffffe);
  let mut x2596: u32 = 0;
  let mut x2597: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x2596, &mut x2597, x2595, x2579, 0xffffffff);
  let mut x2598: u32 = 0;
  let mut x2599: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x2598, &mut x2599, x2597, x2581, 0xffffffff);
  let mut x2600: u32 = 0;
  let mut x2601: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x2600, &mut x2601, x2599, x2583, 0xffffffff);
  let mut x2602: u32 = 0;
  let mut x2603: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x2602, &mut x2603, x2601, x2585, 0xffffffff);
  let mut x2604: u32 = 0;
  let mut x2605: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x2604, &mut x2605, x2603, x2587, 0xffffffff);
  let mut x2606: u32 = 0;
  let mut x2607: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x2606, &mut x2607, x2605, x2589, 0xffffffff);
  let mut x2608: u32 = 0;
  let mut x2609: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x2608, &mut x2609, x2607, x2591, (0x0 as u32));
  let mut x2610: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x2610, x2609, x2592, x2575);
  let mut x2611: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x2611, x2609, x2594, x2577);
  let mut x2612: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x2612, x2609, x2596, x2579);
  let mut x2613: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x2613, x2609, x2598, x2581);
  let mut x2614: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x2614, x2609, x2600, x2583);
  let mut x2615: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x2615, x2609, x2602, x2585);
  let mut x2616: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x2616, x2609, x2604, x2587);
  let mut x2617: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x2617, x2609, x2606, x2589);
  let mut x2618: u32 = 0;
  let mut x2619: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2618, &mut x2619, x165, (arg2[7]));
  let mut x2620: u32 = 0;
  let mut x2621: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2620, &mut x2621, x165, (arg2[6]));
  let mut x2622: u32 = 0;
  let mut x2623: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2622, &mut x2623, x165, (arg2[5]));
  let mut x2624: u32 = 0;
  let mut x2625: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2624, &mut x2625, x165, (arg2[4]));
  let mut x2626: u32 = 0;
  let mut x2627: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2626, &mut x2627, x165, (arg2[3]));
  let mut x2628: u32 = 0;
  let mut x2629: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2628, &mut x2629, x165, (arg2[2]));
  let mut x2630: u32 = 0;
  let mut x2631: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2630, &mut x2631, x165, (arg2[1]));
  let mut x2632: u32 = 0;
  let mut x2633: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2632, &mut x2633, x165, (arg2[0]));
  let mut x2634: u32 = 0;
  let mut x2635: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2634, &mut x2635, 0x0, x2633, x2630);
  let mut x2636: u32 = 0;
  let mut x2637: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2636, &mut x2637, x2635, x2631, x2628);
  let mut x2638: u32 = 0;
  let mut x2639: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2638, &mut x2639, x2637, x2629, x2626);
  let mut x2640: u32 = 0;
  let mut x2641: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2640, &mut x2641, x2639, x2627, x2624);
  let mut x2642: u32 = 0;
  let mut x2643: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2642, &mut x2643, x2641, x2625, x2622);
  let mut x2644: u32 = 0;
  let mut x2645: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2644, &mut x2645, x2643, x2623, x2620);
  let mut x2646: u32 = 0;
  let mut x2647: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2646, &mut x2647, x2645, x2621, x2618);
  let x2648: u32 = ((x2647 as u32) + x2619);
  let mut x2649: u32 = 0;
  let mut x2650: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2649, &mut x2650, x2632, 0xd2253531);
  let mut x2651: u32 = 0;
  let mut x2652: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2651, &mut x2652, x2649, 0xffffffff);
  let mut x2653: u32 = 0;
  let mut x2654: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2653, &mut x2654, x2649, 0xffffffff);
  let mut x2655: u32 = 0;
  let mut x2656: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2655, &mut x2656, x2649, 0xffffffff);
  let mut x2657: u32 = 0;
  let mut x2658: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2657, &mut x2658, x2649, 0xffffffff);
  let mut x2659: u32 = 0;
  let mut x2660: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2659, &mut x2660, x2649, 0xffffffff);
  let mut x2661: u32 = 0;
  let mut x2662: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2661, &mut x2662, x2649, 0xffffffff);
  let mut x2663: u32 = 0;
  let mut x2664: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2663, &mut x2664, x2649, 0xfffffffe);
  let mut x2665: u32 = 0;
  let mut x2666: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2665, &mut x2666, x2649, 0xfffffc2f);
  let mut x2667: u32 = 0;
  let mut x2668: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2667, &mut x2668, 0x0, x2666, x2663);
  let mut x2669: u32 = 0;
  let mut x2670: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2669, &mut x2670, x2668, x2664, x2661);
  let mut x2671: u32 = 0;
  let mut x2672: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2671, &mut x2672, x2670, x2662, x2659);
  let mut x2673: u32 = 0;
  let mut x2674: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2673, &mut x2674, x2672, x2660, x2657);
  let mut x2675: u32 = 0;
  let mut x2676: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2675, &mut x2676, x2674, x2658, x2655);
  let mut x2677: u32 = 0;
  let mut x2678: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2677, &mut x2678, x2676, x2656, x2653);
  let mut x2679: u32 = 0;
  let mut x2680: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2679, &mut x2680, x2678, x2654, x2651);
  let x2681: u32 = ((x2680 as u32) + x2652);
  let mut x2682: u32 = 0;
  let mut x2683: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2682, &mut x2683, 0x0, x2632, x2665);
  let mut x2684: u32 = 0;
  let mut x2685: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2684, &mut x2685, x2683, x2634, x2667);
  let mut x2686: u32 = 0;
  let mut x2687: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2686, &mut x2687, x2685, x2636, x2669);
  let mut x2688: u32 = 0;
  let mut x2689: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2688, &mut x2689, x2687, x2638, x2671);
  let mut x2690: u32 = 0;
  let mut x2691: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2690, &mut x2691, x2689, x2640, x2673);
  let mut x2692: u32 = 0;
  let mut x2693: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2692, &mut x2693, x2691, x2642, x2675);
  let mut x2694: u32 = 0;
  let mut x2695: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2694, &mut x2695, x2693, x2644, x2677);
  let mut x2696: u32 = 0;
  let mut x2697: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2696, &mut x2697, x2695, x2646, x2679);
  let mut x2698: u32 = 0;
  let mut x2699: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2698, &mut x2699, x2697, x2648, x2681);
  let mut x2700: u32 = 0;
  let mut x2701: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2700, &mut x2701, x166, (arg2[7]));
  let mut x2702: u32 = 0;
  let mut x2703: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2702, &mut x2703, x166, (arg2[6]));
  let mut x2704: u32 = 0;
  let mut x2705: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2704, &mut x2705, x166, (arg2[5]));
  let mut x2706: u32 = 0;
  let mut x2707: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2706, &mut x2707, x166, (arg2[4]));
  let mut x2708: u32 = 0;
  let mut x2709: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2708, &mut x2709, x166, (arg2[3]));
  let mut x2710: u32 = 0;
  let mut x2711: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2710, &mut x2711, x166, (arg2[2]));
  let mut x2712: u32 = 0;
  let mut x2713: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2712, &mut x2713, x166, (arg2[1]));
  let mut x2714: u32 = 0;
  let mut x2715: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2714, &mut x2715, x166, (arg2[0]));
  let mut x2716: u32 = 0;
  let mut x2717: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2716, &mut x2717, 0x0, x2715, x2712);
  let mut x2718: u32 = 0;
  let mut x2719: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2718, &mut x2719, x2717, x2713, x2710);
  let mut x2720: u32 = 0;
  let mut x2721: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2720, &mut x2721, x2719, x2711, x2708);
  let mut x2722: u32 = 0;
  let mut x2723: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2722, &mut x2723, x2721, x2709, x2706);
  let mut x2724: u32 = 0;
  let mut x2725: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2724, &mut x2725, x2723, x2707, x2704);
  let mut x2726: u32 = 0;
  let mut x2727: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2726, &mut x2727, x2725, x2705, x2702);
  let mut x2728: u32 = 0;
  let mut x2729: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2728, &mut x2729, x2727, x2703, x2700);
  let x2730: u32 = ((x2729 as u32) + x2701);
  let mut x2731: u32 = 0;
  let mut x2732: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2731, &mut x2732, 0x0, x2684, x2714);
  let mut x2733: u32 = 0;
  let mut x2734: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2733, &mut x2734, x2732, x2686, x2716);
  let mut x2735: u32 = 0;
  let mut x2736: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2735, &mut x2736, x2734, x2688, x2718);
  let mut x2737: u32 = 0;
  let mut x2738: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2737, &mut x2738, x2736, x2690, x2720);
  let mut x2739: u32 = 0;
  let mut x2740: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2739, &mut x2740, x2738, x2692, x2722);
  let mut x2741: u32 = 0;
  let mut x2742: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2741, &mut x2742, x2740, x2694, x2724);
  let mut x2743: u32 = 0;
  let mut x2744: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2743, &mut x2744, x2742, x2696, x2726);
  let mut x2745: u32 = 0;
  let mut x2746: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2745, &mut x2746, x2744, x2698, x2728);
  let mut x2747: u32 = 0;
  let mut x2748: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2747, &mut x2748, x2746, (x2699 as u32), x2730);
  let mut x2749: u32 = 0;
  let mut x2750: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2749, &mut x2750, x2731, 0xd2253531);
  let mut x2751: u32 = 0;
  let mut x2752: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2751, &mut x2752, x2749, 0xffffffff);
  let mut x2753: u32 = 0;
  let mut x2754: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2753, &mut x2754, x2749, 0xffffffff);
  let mut x2755: u32 = 0;
  let mut x2756: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2755, &mut x2756, x2749, 0xffffffff);
  let mut x2757: u32 = 0;
  let mut x2758: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2757, &mut x2758, x2749, 0xffffffff);
  let mut x2759: u32 = 0;
  let mut x2760: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2759, &mut x2760, x2749, 0xffffffff);
  let mut x2761: u32 = 0;
  let mut x2762: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2761, &mut x2762, x2749, 0xffffffff);
  let mut x2763: u32 = 0;
  let mut x2764: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2763, &mut x2764, x2749, 0xfffffffe);
  let mut x2765: u32 = 0;
  let mut x2766: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2765, &mut x2766, x2749, 0xfffffc2f);
  let mut x2767: u32 = 0;
  let mut x2768: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2767, &mut x2768, 0x0, x2766, x2763);
  let mut x2769: u32 = 0;
  let mut x2770: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2769, &mut x2770, x2768, x2764, x2761);
  let mut x2771: u32 = 0;
  let mut x2772: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2771, &mut x2772, x2770, x2762, x2759);
  let mut x2773: u32 = 0;
  let mut x2774: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2773, &mut x2774, x2772, x2760, x2757);
  let mut x2775: u32 = 0;
  let mut x2776: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2775, &mut x2776, x2774, x2758, x2755);
  let mut x2777: u32 = 0;
  let mut x2778: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2777, &mut x2778, x2776, x2756, x2753);
  let mut x2779: u32 = 0;
  let mut x2780: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2779, &mut x2780, x2778, x2754, x2751);
  let x2781: u32 = ((x2780 as u32) + x2752);
  let mut x2782: u32 = 0;
  let mut x2783: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2782, &mut x2783, 0x0, x2731, x2765);
  let mut x2784: u32 = 0;
  let mut x2785: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2784, &mut x2785, x2783, x2733, x2767);
  let mut x2786: u32 = 0;
  let mut x2787: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2786, &mut x2787, x2785, x2735, x2769);
  let mut x2788: u32 = 0;
  let mut x2789: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2788, &mut x2789, x2787, x2737, x2771);
  let mut x2790: u32 = 0;
  let mut x2791: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2790, &mut x2791, x2789, x2739, x2773);
  let mut x2792: u32 = 0;
  let mut x2793: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2792, &mut x2793, x2791, x2741, x2775);
  let mut x2794: u32 = 0;
  let mut x2795: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2794, &mut x2795, x2793, x2743, x2777);
  let mut x2796: u32 = 0;
  let mut x2797: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2796, &mut x2797, x2795, x2745, x2779);
  let mut x2798: u32 = 0;
  let mut x2799: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2798, &mut x2799, x2797, x2747, x2781);
  let x2800: u32 = ((x2799 as u32) + (x2748 as u32));
  let mut x2801: u32 = 0;
  let mut x2802: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2801, &mut x2802, x167, (arg2[7]));
  let mut x2803: u32 = 0;
  let mut x2804: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2803, &mut x2804, x167, (arg2[6]));
  let mut x2805: u32 = 0;
  let mut x2806: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2805, &mut x2806, x167, (arg2[5]));
  let mut x2807: u32 = 0;
  let mut x2808: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2807, &mut x2808, x167, (arg2[4]));
  let mut x2809: u32 = 0;
  let mut x2810: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2809, &mut x2810, x167, (arg2[3]));
  let mut x2811: u32 = 0;
  let mut x2812: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2811, &mut x2812, x167, (arg2[2]));
  let mut x2813: u32 = 0;
  let mut x2814: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2813, &mut x2814, x167, (arg2[1]));
  let mut x2815: u32 = 0;
  let mut x2816: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2815, &mut x2816, x167, (arg2[0]));
  let mut x2817: u32 = 0;
  let mut x2818: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2817, &mut x2818, 0x0, x2816, x2813);
  let mut x2819: u32 = 0;
  let mut x2820: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2819, &mut x2820, x2818, x2814, x2811);
  let mut x2821: u32 = 0;
  let mut x2822: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2821, &mut x2822, x2820, x2812, x2809);
  let mut x2823: u32 = 0;
  let mut x2824: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2823, &mut x2824, x2822, x2810, x2807);
  let mut x2825: u32 = 0;
  let mut x2826: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2825, &mut x2826, x2824, x2808, x2805);
  let mut x2827: u32 = 0;
  let mut x2828: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2827, &mut x2828, x2826, x2806, x2803);
  let mut x2829: u32 = 0;
  let mut x2830: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2829, &mut x2830, x2828, x2804, x2801);
  let x2831: u32 = ((x2830 as u32) + x2802);
  let mut x2832: u32 = 0;
  let mut x2833: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2832, &mut x2833, 0x0, x2784, x2815);
  let mut x2834: u32 = 0;
  let mut x2835: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2834, &mut x2835, x2833, x2786, x2817);
  let mut x2836: u32 = 0;
  let mut x2837: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2836, &mut x2837, x2835, x2788, x2819);
  let mut x2838: u32 = 0;
  let mut x2839: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2838, &mut x2839, x2837, x2790, x2821);
  let mut x2840: u32 = 0;
  let mut x2841: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2840, &mut x2841, x2839, x2792, x2823);
  let mut x2842: u32 = 0;
  let mut x2843: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2842, &mut x2843, x2841, x2794, x2825);
  let mut x2844: u32 = 0;
  let mut x2845: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2844, &mut x2845, x2843, x2796, x2827);
  let mut x2846: u32 = 0;
  let mut x2847: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2846, &mut x2847, x2845, x2798, x2829);
  let mut x2848: u32 = 0;
  let mut x2849: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2848, &mut x2849, x2847, x2800, x2831);
  let mut x2850: u32 = 0;
  let mut x2851: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2850, &mut x2851, x2832, 0xd2253531);
  let mut x2852: u32 = 0;
  let mut x2853: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2852, &mut x2853, x2850, 0xffffffff);
  let mut x2854: u32 = 0;
  let mut x2855: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2854, &mut x2855, x2850, 0xffffffff);
  let mut x2856: u32 = 0;
  let mut x2857: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2856, &mut x2857, x2850, 0xffffffff);
  let mut x2858: u32 = 0;
  let mut x2859: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2858, &mut x2859, x2850, 0xffffffff);
  let mut x2860: u32 = 0;
  let mut x2861: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2860, &mut x2861, x2850, 0xffffffff);
  let mut x2862: u32 = 0;
  let mut x2863: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2862, &mut x2863, x2850, 0xffffffff);
  let mut x2864: u32 = 0;
  let mut x2865: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2864, &mut x2865, x2850, 0xfffffffe);
  let mut x2866: u32 = 0;
  let mut x2867: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2866, &mut x2867, x2850, 0xfffffc2f);
  let mut x2868: u32 = 0;
  let mut x2869: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2868, &mut x2869, 0x0, x2867, x2864);
  let mut x2870: u32 = 0;
  let mut x2871: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2870, &mut x2871, x2869, x2865, x2862);
  let mut x2872: u32 = 0;
  let mut x2873: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2872, &mut x2873, x2871, x2863, x2860);
  let mut x2874: u32 = 0;
  let mut x2875: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2874, &mut x2875, x2873, x2861, x2858);
  let mut x2876: u32 = 0;
  let mut x2877: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2876, &mut x2877, x2875, x2859, x2856);
  let mut x2878: u32 = 0;
  let mut x2879: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2878, &mut x2879, x2877, x2857, x2854);
  let mut x2880: u32 = 0;
  let mut x2881: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2880, &mut x2881, x2879, x2855, x2852);
  let x2882: u32 = ((x2881 as u32) + x2853);
  let mut x2883: u32 = 0;
  let mut x2884: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2883, &mut x2884, 0x0, x2832, x2866);
  let mut x2885: u32 = 0;
  let mut x2886: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2885, &mut x2886, x2884, x2834, x2868);
  let mut x2887: u32 = 0;
  let mut x2888: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2887, &mut x2888, x2886, x2836, x2870);
  let mut x2889: u32 = 0;
  let mut x2890: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2889, &mut x2890, x2888, x2838, x2872);
  let mut x2891: u32 = 0;
  let mut x2892: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2891, &mut x2892, x2890, x2840, x2874);
  let mut x2893: u32 = 0;
  let mut x2894: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2893, &mut x2894, x2892, x2842, x2876);
  let mut x2895: u32 = 0;
  let mut x2896: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2895, &mut x2896, x2894, x2844, x2878);
  let mut x2897: u32 = 0;
  let mut x2898: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2897, &mut x2898, x2896, x2846, x2880);
  let mut x2899: u32 = 0;
  let mut x2900: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2899, &mut x2900, x2898, x2848, x2882);
  let x2901: u32 = ((x2900 as u32) + (x2849 as u32));
  let mut x2902: u32 = 0;
  let mut x2903: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2902, &mut x2903, x168, (arg2[7]));
  let mut x2904: u32 = 0;
  let mut x2905: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2904, &mut x2905, x168, (arg2[6]));
  let mut x2906: u32 = 0;
  let mut x2907: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2906, &mut x2907, x168, (arg2[5]));
  let mut x2908: u32 = 0;
  let mut x2909: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2908, &mut x2909, x168, (arg2[4]));
  let mut x2910: u32 = 0;
  let mut x2911: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2910, &mut x2911, x168, (arg2[3]));
  let mut x2912: u32 = 0;
  let mut x2913: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2912, &mut x2913, x168, (arg2[2]));
  let mut x2914: u32 = 0;
  let mut x2915: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2914, &mut x2915, x168, (arg2[1]));
  let mut x2916: u32 = 0;
  let mut x2917: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2916, &mut x2917, x168, (arg2[0]));
  let mut x2918: u32 = 0;
  let mut x2919: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2918, &mut x2919, 0x0, x2917, x2914);
  let mut x2920: u32 = 0;
  let mut x2921: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2920, &mut x2921, x2919, x2915, x2912);
  let mut x2922: u32 = 0;
  let mut x2923: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2922, &mut x2923, x2921, x2913, x2910);
  let mut x2924: u32 = 0;
  let mut x2925: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2924, &mut x2925, x2923, x2911, x2908);
  let mut x2926: u32 = 0;
  let mut x2927: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2926, &mut x2927, x2925, x2909, x2906);
  let mut x2928: u32 = 0;
  let mut x2929: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2928, &mut x2929, x2927, x2907, x2904);
  let mut x2930: u32 = 0;
  let mut x2931: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2930, &mut x2931, x2929, x2905, x2902);
  let x2932: u32 = ((x2931 as u32) + x2903);
  let mut x2933: u32 = 0;
  let mut x2934: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2933, &mut x2934, 0x0, x2885, x2916);
  let mut x2935: u32 = 0;
  let mut x2936: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2935, &mut x2936, x2934, x2887, x2918);
  let mut x2937: u32 = 0;
  let mut x2938: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2937, &mut x2938, x2936, x2889, x2920);
  let mut x2939: u32 = 0;
  let mut x2940: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2939, &mut x2940, x2938, x2891, x2922);
  let mut x2941: u32 = 0;
  let mut x2942: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2941, &mut x2942, x2940, x2893, x2924);
  let mut x2943: u32 = 0;
  let mut x2944: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2943, &mut x2944, x2942, x2895, x2926);
  let mut x2945: u32 = 0;
  let mut x2946: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2945, &mut x2946, x2944, x2897, x2928);
  let mut x2947: u32 = 0;
  let mut x2948: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2947, &mut x2948, x2946, x2899, x2930);
  let mut x2949: u32 = 0;
  let mut x2950: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2949, &mut x2950, x2948, x2901, x2932);
  let mut x2951: u32 = 0;
  let mut x2952: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2951, &mut x2952, x2933, 0xd2253531);
  let mut x2953: u32 = 0;
  let mut x2954: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2953, &mut x2954, x2951, 0xffffffff);
  let mut x2955: u32 = 0;
  let mut x2956: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2955, &mut x2956, x2951, 0xffffffff);
  let mut x2957: u32 = 0;
  let mut x2958: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2957, &mut x2958, x2951, 0xffffffff);
  let mut x2959: u32 = 0;
  let mut x2960: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2959, &mut x2960, x2951, 0xffffffff);
  let mut x2961: u32 = 0;
  let mut x2962: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2961, &mut x2962, x2951, 0xffffffff);
  let mut x2963: u32 = 0;
  let mut x2964: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2963, &mut x2964, x2951, 0xffffffff);
  let mut x2965: u32 = 0;
  let mut x2966: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2965, &mut x2966, x2951, 0xfffffffe);
  let mut x2967: u32 = 0;
  let mut x2968: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x2967, &mut x2968, x2951, 0xfffffc2f);
  let mut x2969: u32 = 0;
  let mut x2970: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2969, &mut x2970, 0x0, x2968, x2965);
  let mut x2971: u32 = 0;
  let mut x2972: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2971, &mut x2972, x2970, x2966, x2963);
  let mut x2973: u32 = 0;
  let mut x2974: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2973, &mut x2974, x2972, x2964, x2961);
  let mut x2975: u32 = 0;
  let mut x2976: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2975, &mut x2976, x2974, x2962, x2959);
  let mut x2977: u32 = 0;
  let mut x2978: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2977, &mut x2978, x2976, x2960, x2957);
  let mut x2979: u32 = 0;
  let mut x2980: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2979, &mut x2980, x2978, x2958, x2955);
  let mut x2981: u32 = 0;
  let mut x2982: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2981, &mut x2982, x2980, x2956, x2953);
  let x2983: u32 = ((x2982 as u32) + x2954);
  let mut x2984: u32 = 0;
  let mut x2985: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2984, &mut x2985, 0x0, x2933, x2967);
  let mut x2986: u32 = 0;
  let mut x2987: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2986, &mut x2987, x2985, x2935, x2969);
  let mut x2988: u32 = 0;
  let mut x2989: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2988, &mut x2989, x2987, x2937, x2971);
  let mut x2990: u32 = 0;
  let mut x2991: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2990, &mut x2991, x2989, x2939, x2973);
  let mut x2992: u32 = 0;
  let mut x2993: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2992, &mut x2993, x2991, x2941, x2975);
  let mut x2994: u32 = 0;
  let mut x2995: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2994, &mut x2995, x2993, x2943, x2977);
  let mut x2996: u32 = 0;
  let mut x2997: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2996, &mut x2997, x2995, x2945, x2979);
  let mut x2998: u32 = 0;
  let mut x2999: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x2998, &mut x2999, x2997, x2947, x2981);
  let mut x3000: u32 = 0;
  let mut x3001: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3000, &mut x3001, x2999, x2949, x2983);
  let x3002: u32 = ((x3001 as u32) + (x2950 as u32));
  let mut x3003: u32 = 0;
  let mut x3004: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3003, &mut x3004, x169, (arg2[7]));
  let mut x3005: u32 = 0;
  let mut x3006: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3005, &mut x3006, x169, (arg2[6]));
  let mut x3007: u32 = 0;
  let mut x3008: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3007, &mut x3008, x169, (arg2[5]));
  let mut x3009: u32 = 0;
  let mut x3010: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3009, &mut x3010, x169, (arg2[4]));
  let mut x3011: u32 = 0;
  let mut x3012: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3011, &mut x3012, x169, (arg2[3]));
  let mut x3013: u32 = 0;
  let mut x3014: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3013, &mut x3014, x169, (arg2[2]));
  let mut x3015: u32 = 0;
  let mut x3016: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3015, &mut x3016, x169, (arg2[1]));
  let mut x3017: u32 = 0;
  let mut x3018: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3017, &mut x3018, x169, (arg2[0]));
  let mut x3019: u32 = 0;
  let mut x3020: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3019, &mut x3020, 0x0, x3018, x3015);
  let mut x3021: u32 = 0;
  let mut x3022: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3021, &mut x3022, x3020, x3016, x3013);
  let mut x3023: u32 = 0;
  let mut x3024: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3023, &mut x3024, x3022, x3014, x3011);
  let mut x3025: u32 = 0;
  let mut x3026: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3025, &mut x3026, x3024, x3012, x3009);
  let mut x3027: u32 = 0;
  let mut x3028: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3027, &mut x3028, x3026, x3010, x3007);
  let mut x3029: u32 = 0;
  let mut x3030: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3029, &mut x3030, x3028, x3008, x3005);
  let mut x3031: u32 = 0;
  let mut x3032: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3031, &mut x3032, x3030, x3006, x3003);
  let x3033: u32 = ((x3032 as u32) + x3004);
  let mut x3034: u32 = 0;
  let mut x3035: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3034, &mut x3035, 0x0, x2986, x3017);
  let mut x3036: u32 = 0;
  let mut x3037: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3036, &mut x3037, x3035, x2988, x3019);
  let mut x3038: u32 = 0;
  let mut x3039: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3038, &mut x3039, x3037, x2990, x3021);
  let mut x3040: u32 = 0;
  let mut x3041: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3040, &mut x3041, x3039, x2992, x3023);
  let mut x3042: u32 = 0;
  let mut x3043: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3042, &mut x3043, x3041, x2994, x3025);
  let mut x3044: u32 = 0;
  let mut x3045: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3044, &mut x3045, x3043, x2996, x3027);
  let mut x3046: u32 = 0;
  let mut x3047: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3046, &mut x3047, x3045, x2998, x3029);
  let mut x3048: u32 = 0;
  let mut x3049: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3048, &mut x3049, x3047, x3000, x3031);
  let mut x3050: u32 = 0;
  let mut x3051: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3050, &mut x3051, x3049, x3002, x3033);
  let mut x3052: u32 = 0;
  let mut x3053: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3052, &mut x3053, x3034, 0xd2253531);
  let mut x3054: u32 = 0;
  let mut x3055: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3054, &mut x3055, x3052, 0xffffffff);
  let mut x3056: u32 = 0;
  let mut x3057: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3056, &mut x3057, x3052, 0xffffffff);
  let mut x3058: u32 = 0;
  let mut x3059: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3058, &mut x3059, x3052, 0xffffffff);
  let mut x3060: u32 = 0;
  let mut x3061: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3060, &mut x3061, x3052, 0xffffffff);
  let mut x3062: u32 = 0;
  let mut x3063: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3062, &mut x3063, x3052, 0xffffffff);
  let mut x3064: u32 = 0;
  let mut x3065: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3064, &mut x3065, x3052, 0xffffffff);
  let mut x3066: u32 = 0;
  let mut x3067: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3066, &mut x3067, x3052, 0xfffffffe);
  let mut x3068: u32 = 0;
  let mut x3069: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3068, &mut x3069, x3052, 0xfffffc2f);
  let mut x3070: u32 = 0;
  let mut x3071: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3070, &mut x3071, 0x0, x3069, x3066);
  let mut x3072: u32 = 0;
  let mut x3073: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3072, &mut x3073, x3071, x3067, x3064);
  let mut x3074: u32 = 0;
  let mut x3075: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3074, &mut x3075, x3073, x3065, x3062);
  let mut x3076: u32 = 0;
  let mut x3077: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3076, &mut x3077, x3075, x3063, x3060);
  let mut x3078: u32 = 0;
  let mut x3079: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3078, &mut x3079, x3077, x3061, x3058);
  let mut x3080: u32 = 0;
  let mut x3081: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3080, &mut x3081, x3079, x3059, x3056);
  let mut x3082: u32 = 0;
  let mut x3083: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3082, &mut x3083, x3081, x3057, x3054);
  let x3084: u32 = ((x3083 as u32) + x3055);
  let mut x3085: u32 = 0;
  let mut x3086: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3085, &mut x3086, 0x0, x3034, x3068);
  let mut x3087: u32 = 0;
  let mut x3088: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3087, &mut x3088, x3086, x3036, x3070);
  let mut x3089: u32 = 0;
  let mut x3090: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3089, &mut x3090, x3088, x3038, x3072);
  let mut x3091: u32 = 0;
  let mut x3092: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3091, &mut x3092, x3090, x3040, x3074);
  let mut x3093: u32 = 0;
  let mut x3094: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3093, &mut x3094, x3092, x3042, x3076);
  let mut x3095: u32 = 0;
  let mut x3096: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3095, &mut x3096, x3094, x3044, x3078);
  let mut x3097: u32 = 0;
  let mut x3098: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3097, &mut x3098, x3096, x3046, x3080);
  let mut x3099: u32 = 0;
  let mut x3100: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3099, &mut x3100, x3098, x3048, x3082);
  let mut x3101: u32 = 0;
  let mut x3102: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3101, &mut x3102, x3100, x3050, x3084);
  let x3103: u32 = ((x3102 as u32) + (x3051 as u32));
  let mut x3104: u32 = 0;
  let mut x3105: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3104, &mut x3105, x170, (arg2[7]));
  let mut x3106: u32 = 0;
  let mut x3107: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3106, &mut x3107, x170, (arg2[6]));
  let mut x3108: u32 = 0;
  let mut x3109: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3108, &mut x3109, x170, (arg2[5]));
  let mut x3110: u32 = 0;
  let mut x3111: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3110, &mut x3111, x170, (arg2[4]));
  let mut x3112: u32 = 0;
  let mut x3113: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3112, &mut x3113, x170, (arg2[3]));
  let mut x3114: u32 = 0;
  let mut x3115: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3114, &mut x3115, x170, (arg2[2]));
  let mut x3116: u32 = 0;
  let mut x3117: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3116, &mut x3117, x170, (arg2[1]));
  let mut x3118: u32 = 0;
  let mut x3119: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3118, &mut x3119, x170, (arg2[0]));
  let mut x3120: u32 = 0;
  let mut x3121: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3120, &mut x3121, 0x0, x3119, x3116);
  let mut x3122: u32 = 0;
  let mut x3123: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3122, &mut x3123, x3121, x3117, x3114);
  let mut x3124: u32 = 0;
  let mut x3125: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3124, &mut x3125, x3123, x3115, x3112);
  let mut x3126: u32 = 0;
  let mut x3127: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3126, &mut x3127, x3125, x3113, x3110);
  let mut x3128: u32 = 0;
  let mut x3129: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3128, &mut x3129, x3127, x3111, x3108);
  let mut x3130: u32 = 0;
  let mut x3131: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3130, &mut x3131, x3129, x3109, x3106);
  let mut x3132: u32 = 0;
  let mut x3133: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3132, &mut x3133, x3131, x3107, x3104);
  let x3134: u32 = ((x3133 as u32) + x3105);
  let mut x3135: u32 = 0;
  let mut x3136: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3135, &mut x3136, 0x0, x3087, x3118);
  let mut x3137: u32 = 0;
  let mut x3138: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3137, &mut x3138, x3136, x3089, x3120);
  let mut x3139: u32 = 0;
  let mut x3140: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3139, &mut x3140, x3138, x3091, x3122);
  let mut x3141: u32 = 0;
  let mut x3142: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3141, &mut x3142, x3140, x3093, x3124);
  let mut x3143: u32 = 0;
  let mut x3144: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3143, &mut x3144, x3142, x3095, x3126);
  let mut x3145: u32 = 0;
  let mut x3146: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3145, &mut x3146, x3144, x3097, x3128);
  let mut x3147: u32 = 0;
  let mut x3148: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3147, &mut x3148, x3146, x3099, x3130);
  let mut x3149: u32 = 0;
  let mut x3150: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3149, &mut x3150, x3148, x3101, x3132);
  let mut x3151: u32 = 0;
  let mut x3152: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3151, &mut x3152, x3150, x3103, x3134);
  let mut x3153: u32 = 0;
  let mut x3154: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3153, &mut x3154, x3135, 0xd2253531);
  let mut x3155: u32 = 0;
  let mut x3156: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3155, &mut x3156, x3153, 0xffffffff);
  let mut x3157: u32 = 0;
  let mut x3158: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3157, &mut x3158, x3153, 0xffffffff);
  let mut x3159: u32 = 0;
  let mut x3160: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3159, &mut x3160, x3153, 0xffffffff);
  let mut x3161: u32 = 0;
  let mut x3162: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3161, &mut x3162, x3153, 0xffffffff);
  let mut x3163: u32 = 0;
  let mut x3164: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3163, &mut x3164, x3153, 0xffffffff);
  let mut x3165: u32 = 0;
  let mut x3166: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3165, &mut x3166, x3153, 0xffffffff);
  let mut x3167: u32 = 0;
  let mut x3168: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3167, &mut x3168, x3153, 0xfffffffe);
  let mut x3169: u32 = 0;
  let mut x3170: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3169, &mut x3170, x3153, 0xfffffc2f);
  let mut x3171: u32 = 0;
  let mut x3172: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3171, &mut x3172, 0x0, x3170, x3167);
  let mut x3173: u32 = 0;
  let mut x3174: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3173, &mut x3174, x3172, x3168, x3165);
  let mut x3175: u32 = 0;
  let mut x3176: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3175, &mut x3176, x3174, x3166, x3163);
  let mut x3177: u32 = 0;
  let mut x3178: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3177, &mut x3178, x3176, x3164, x3161);
  let mut x3179: u32 = 0;
  let mut x3180: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3179, &mut x3180, x3178, x3162, x3159);
  let mut x3181: u32 = 0;
  let mut x3182: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3181, &mut x3182, x3180, x3160, x3157);
  let mut x3183: u32 = 0;
  let mut x3184: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3183, &mut x3184, x3182, x3158, x3155);
  let x3185: u32 = ((x3184 as u32) + x3156);
  let mut x3186: u32 = 0;
  let mut x3187: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3186, &mut x3187, 0x0, x3135, x3169);
  let mut x3188: u32 = 0;
  let mut x3189: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3188, &mut x3189, x3187, x3137, x3171);
  let mut x3190: u32 = 0;
  let mut x3191: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3190, &mut x3191, x3189, x3139, x3173);
  let mut x3192: u32 = 0;
  let mut x3193: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3192, &mut x3193, x3191, x3141, x3175);
  let mut x3194: u32 = 0;
  let mut x3195: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3194, &mut x3195, x3193, x3143, x3177);
  let mut x3196: u32 = 0;
  let mut x3197: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3196, &mut x3197, x3195, x3145, x3179);
  let mut x3198: u32 = 0;
  let mut x3199: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3198, &mut x3199, x3197, x3147, x3181);
  let mut x3200: u32 = 0;
  let mut x3201: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3200, &mut x3201, x3199, x3149, x3183);
  let mut x3202: u32 = 0;
  let mut x3203: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3202, &mut x3203, x3201, x3151, x3185);
  let x3204: u32 = ((x3203 as u32) + (x3152 as u32));
  let mut x3205: u32 = 0;
  let mut x3206: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3205, &mut x3206, x171, (arg2[7]));
  let mut x3207: u32 = 0;
  let mut x3208: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3207, &mut x3208, x171, (arg2[6]));
  let mut x3209: u32 = 0;
  let mut x3210: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3209, &mut x3210, x171, (arg2[5]));
  let mut x3211: u32 = 0;
  let mut x3212: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3211, &mut x3212, x171, (arg2[4]));
  let mut x3213: u32 = 0;
  let mut x3214: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3213, &mut x3214, x171, (arg2[3]));
  let mut x3215: u32 = 0;
  let mut x3216: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3215, &mut x3216, x171, (arg2[2]));
  let mut x3217: u32 = 0;
  let mut x3218: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3217, &mut x3218, x171, (arg2[1]));
  let mut x3219: u32 = 0;
  let mut x3220: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3219, &mut x3220, x171, (arg2[0]));
  let mut x3221: u32 = 0;
  let mut x3222: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3221, &mut x3222, 0x0, x3220, x3217);
  let mut x3223: u32 = 0;
  let mut x3224: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3223, &mut x3224, x3222, x3218, x3215);
  let mut x3225: u32 = 0;
  let mut x3226: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3225, &mut x3226, x3224, x3216, x3213);
  let mut x3227: u32 = 0;
  let mut x3228: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3227, &mut x3228, x3226, x3214, x3211);
  let mut x3229: u32 = 0;
  let mut x3230: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3229, &mut x3230, x3228, x3212, x3209);
  let mut x3231: u32 = 0;
  let mut x3232: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3231, &mut x3232, x3230, x3210, x3207);
  let mut x3233: u32 = 0;
  let mut x3234: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3233, &mut x3234, x3232, x3208, x3205);
  let x3235: u32 = ((x3234 as u32) + x3206);
  let mut x3236: u32 = 0;
  let mut x3237: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3236, &mut x3237, 0x0, x3188, x3219);
  let mut x3238: u32 = 0;
  let mut x3239: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3238, &mut x3239, x3237, x3190, x3221);
  let mut x3240: u32 = 0;
  let mut x3241: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3240, &mut x3241, x3239, x3192, x3223);
  let mut x3242: u32 = 0;
  let mut x3243: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3242, &mut x3243, x3241, x3194, x3225);
  let mut x3244: u32 = 0;
  let mut x3245: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3244, &mut x3245, x3243, x3196, x3227);
  let mut x3246: u32 = 0;
  let mut x3247: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3246, &mut x3247, x3245, x3198, x3229);
  let mut x3248: u32 = 0;
  let mut x3249: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3248, &mut x3249, x3247, x3200, x3231);
  let mut x3250: u32 = 0;
  let mut x3251: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3250, &mut x3251, x3249, x3202, x3233);
  let mut x3252: u32 = 0;
  let mut x3253: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3252, &mut x3253, x3251, x3204, x3235);
  let mut x3254: u32 = 0;
  let mut x3255: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3254, &mut x3255, x3236, 0xd2253531);
  let mut x3256: u32 = 0;
  let mut x3257: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3256, &mut x3257, x3254, 0xffffffff);
  let mut x3258: u32 = 0;
  let mut x3259: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3258, &mut x3259, x3254, 0xffffffff);
  let mut x3260: u32 = 0;
  let mut x3261: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3260, &mut x3261, x3254, 0xffffffff);
  let mut x3262: u32 = 0;
  let mut x3263: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3262, &mut x3263, x3254, 0xffffffff);
  let mut x3264: u32 = 0;
  let mut x3265: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3264, &mut x3265, x3254, 0xffffffff);
  let mut x3266: u32 = 0;
  let mut x3267: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3266, &mut x3267, x3254, 0xffffffff);
  let mut x3268: u32 = 0;
  let mut x3269: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3268, &mut x3269, x3254, 0xfffffffe);
  let mut x3270: u32 = 0;
  let mut x3271: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3270, &mut x3271, x3254, 0xfffffc2f);
  let mut x3272: u32 = 0;
  let mut x3273: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3272, &mut x3273, 0x0, x3271, x3268);
  let mut x3274: u32 = 0;
  let mut x3275: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3274, &mut x3275, x3273, x3269, x3266);
  let mut x3276: u32 = 0;
  let mut x3277: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3276, &mut x3277, x3275, x3267, x3264);
  let mut x3278: u32 = 0;
  let mut x3279: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3278, &mut x3279, x3277, x3265, x3262);
  let mut x3280: u32 = 0;
  let mut x3281: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3280, &mut x3281, x3279, x3263, x3260);
  let mut x3282: u32 = 0;
  let mut x3283: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3282, &mut x3283, x3281, x3261, x3258);
  let mut x3284: u32 = 0;
  let mut x3285: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3284, &mut x3285, x3283, x3259, x3256);
  let x3286: u32 = ((x3285 as u32) + x3257);
  let mut x3287: u32 = 0;
  let mut x3288: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3287, &mut x3288, 0x0, x3236, x3270);
  let mut x3289: u32 = 0;
  let mut x3290: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3289, &mut x3290, x3288, x3238, x3272);
  let mut x3291: u32 = 0;
  let mut x3292: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3291, &mut x3292, x3290, x3240, x3274);
  let mut x3293: u32 = 0;
  let mut x3294: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3293, &mut x3294, x3292, x3242, x3276);
  let mut x3295: u32 = 0;
  let mut x3296: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3295, &mut x3296, x3294, x3244, x3278);
  let mut x3297: u32 = 0;
  let mut x3298: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3297, &mut x3298, x3296, x3246, x3280);
  let mut x3299: u32 = 0;
  let mut x3300: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3299, &mut x3300, x3298, x3248, x3282);
  let mut x3301: u32 = 0;
  let mut x3302: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3301, &mut x3302, x3300, x3250, x3284);
  let mut x3303: u32 = 0;
  let mut x3304: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3303, &mut x3304, x3302, x3252, x3286);
  let x3305: u32 = ((x3304 as u32) + (x3253 as u32));
  let mut x3306: u32 = 0;
  let mut x3307: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3306, &mut x3307, x172, (arg2[7]));
  let mut x3308: u32 = 0;
  let mut x3309: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3308, &mut x3309, x172, (arg2[6]));
  let mut x3310: u32 = 0;
  let mut x3311: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3310, &mut x3311, x172, (arg2[5]));
  let mut x3312: u32 = 0;
  let mut x3313: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3312, &mut x3313, x172, (arg2[4]));
  let mut x3314: u32 = 0;
  let mut x3315: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3314, &mut x3315, x172, (arg2[3]));
  let mut x3316: u32 = 0;
  let mut x3317: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3316, &mut x3317, x172, (arg2[2]));
  let mut x3318: u32 = 0;
  let mut x3319: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3318, &mut x3319, x172, (arg2[1]));
  let mut x3320: u32 = 0;
  let mut x3321: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3320, &mut x3321, x172, (arg2[0]));
  let mut x3322: u32 = 0;
  let mut x3323: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3322, &mut x3323, 0x0, x3321, x3318);
  let mut x3324: u32 = 0;
  let mut x3325: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3324, &mut x3325, x3323, x3319, x3316);
  let mut x3326: u32 = 0;
  let mut x3327: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3326, &mut x3327, x3325, x3317, x3314);
  let mut x3328: u32 = 0;
  let mut x3329: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3328, &mut x3329, x3327, x3315, x3312);
  let mut x3330: u32 = 0;
  let mut x3331: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3330, &mut x3331, x3329, x3313, x3310);
  let mut x3332: u32 = 0;
  let mut x3333: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3332, &mut x3333, x3331, x3311, x3308);
  let mut x3334: u32 = 0;
  let mut x3335: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3334, &mut x3335, x3333, x3309, x3306);
  let x3336: u32 = ((x3335 as u32) + x3307);
  let mut x3337: u32 = 0;
  let mut x3338: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3337, &mut x3338, 0x0, x3289, x3320);
  let mut x3339: u32 = 0;
  let mut x3340: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3339, &mut x3340, x3338, x3291, x3322);
  let mut x3341: u32 = 0;
  let mut x3342: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3341, &mut x3342, x3340, x3293, x3324);
  let mut x3343: u32 = 0;
  let mut x3344: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3343, &mut x3344, x3342, x3295, x3326);
  let mut x3345: u32 = 0;
  let mut x3346: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3345, &mut x3346, x3344, x3297, x3328);
  let mut x3347: u32 = 0;
  let mut x3348: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3347, &mut x3348, x3346, x3299, x3330);
  let mut x3349: u32 = 0;
  let mut x3350: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3349, &mut x3350, x3348, x3301, x3332);
  let mut x3351: u32 = 0;
  let mut x3352: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3351, &mut x3352, x3350, x3303, x3334);
  let mut x3353: u32 = 0;
  let mut x3354: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3353, &mut x3354, x3352, x3305, x3336);
  let mut x3355: u32 = 0;
  let mut x3356: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3355, &mut x3356, x3337, 0xd2253531);
  let mut x3357: u32 = 0;
  let mut x3358: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3357, &mut x3358, x3355, 0xffffffff);
  let mut x3359: u32 = 0;
  let mut x3360: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3359, &mut x3360, x3355, 0xffffffff);
  let mut x3361: u32 = 0;
  let mut x3362: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3361, &mut x3362, x3355, 0xffffffff);
  let mut x3363: u32 = 0;
  let mut x3364: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3363, &mut x3364, x3355, 0xffffffff);
  let mut x3365: u32 = 0;
  let mut x3366: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3365, &mut x3366, x3355, 0xffffffff);
  let mut x3367: u32 = 0;
  let mut x3368: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3367, &mut x3368, x3355, 0xffffffff);
  let mut x3369: u32 = 0;
  let mut x3370: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3369, &mut x3370, x3355, 0xfffffffe);
  let mut x3371: u32 = 0;
  let mut x3372: u32 = 0;
  fiat_secp256k1_mulx_u32(&mut x3371, &mut x3372, x3355, 0xfffffc2f);
  let mut x3373: u32 = 0;
  let mut x3374: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3373, &mut x3374, 0x0, x3372, x3369);
  let mut x3375: u32 = 0;
  let mut x3376: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3375, &mut x3376, x3374, x3370, x3367);
  let mut x3377: u32 = 0;
  let mut x3378: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3377, &mut x3378, x3376, x3368, x3365);
  let mut x3379: u32 = 0;
  let mut x3380: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3379, &mut x3380, x3378, x3366, x3363);
  let mut x3381: u32 = 0;
  let mut x3382: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3381, &mut x3382, x3380, x3364, x3361);
  let mut x3383: u32 = 0;
  let mut x3384: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3383, &mut x3384, x3382, x3362, x3359);
  let mut x3385: u32 = 0;
  let mut x3386: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3385, &mut x3386, x3384, x3360, x3357);
  let x3387: u32 = ((x3386 as u32) + x3358);
  let mut x3388: u32 = 0;
  let mut x3389: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3388, &mut x3389, 0x0, x3337, x3371);
  let mut x3390: u32 = 0;
  let mut x3391: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3390, &mut x3391, x3389, x3339, x3373);
  let mut x3392: u32 = 0;
  let mut x3393: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3392, &mut x3393, x3391, x3341, x3375);
  let mut x3394: u32 = 0;
  let mut x3395: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3394, &mut x3395, x3393, x3343, x3377);
  let mut x3396: u32 = 0;
  let mut x3397: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3396, &mut x3397, x3395, x3345, x3379);
  let mut x3398: u32 = 0;
  let mut x3399: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3398, &mut x3399, x3397, x3347, x3381);
  let mut x3400: u32 = 0;
  let mut x3401: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3400, &mut x3401, x3399, x3349, x3383);
  let mut x3402: u32 = 0;
  let mut x3403: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3402, &mut x3403, x3401, x3351, x3385);
  let mut x3404: u32 = 0;
  let mut x3405: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3404, &mut x3405, x3403, x3353, x3387);
  let x3406: u32 = ((x3405 as u32) + (x3354 as u32));
  let mut x3407: u32 = 0;
  let mut x3408: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3407, &mut x3408, 0x0, x3390, 0xfffffc2f);
  let mut x3409: u32 = 0;
  let mut x3410: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3409, &mut x3410, x3408, x3392, 0xfffffffe);
  let mut x3411: u32 = 0;
  let mut x3412: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3411, &mut x3412, x3410, x3394, 0xffffffff);
  let mut x3413: u32 = 0;
  let mut x3414: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3413, &mut x3414, x3412, x3396, 0xffffffff);
  let mut x3415: u32 = 0;
  let mut x3416: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3415, &mut x3416, x3414, x3398, 0xffffffff);
  let mut x3417: u32 = 0;
  let mut x3418: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3417, &mut x3418, x3416, x3400, 0xffffffff);
  let mut x3419: u32 = 0;
  let mut x3420: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3419, &mut x3420, x3418, x3402, 0xffffffff);
  let mut x3421: u32 = 0;
  let mut x3422: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3421, &mut x3422, x3420, x3404, 0xffffffff);
  let mut x3423: u32 = 0;
  let mut x3424: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3423, &mut x3424, x3422, x3406, (0x0 as u32));
  let mut x3425: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x3425, x3424, x3407, x3390);
  let mut x3426: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x3426, x3424, x3409, x3392);
  let mut x3427: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x3427, x3424, x3411, x3394);
  let mut x3428: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x3428, x3424, x3413, x3396);
  let mut x3429: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x3429, x3424, x3415, x3398);
  let mut x3430: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x3430, x3424, x3417, x3400);
  let mut x3431: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x3431, x3424, x3419, x3402);
  let mut x3432: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x3432, x3424, x3421, x3404);
  let mut x3433: u32 = 0;
  let mut x3434: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3433, &mut x3434, 0x0, x980, x1795);
  let mut x3435: u32 = 0;
  let mut x3436: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3435, &mut x3436, x3434, x981, x1796);
  let mut x3437: u32 = 0;
  let mut x3438: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3437, &mut x3438, x3436, x982, x1797);
  let mut x3439: u32 = 0;
  let mut x3440: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3439, &mut x3440, x3438, x983, x1798);
  let mut x3441: u32 = 0;
  let mut x3442: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3441, &mut x3442, x3440, x984, x1799);
  let mut x3443: u32 = 0;
  let mut x3444: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3443, &mut x3444, x3442, x985, x1800);
  let mut x3445: u32 = 0;
  let mut x3446: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3445, &mut x3446, x3444, x986, x1801);
  let mut x3447: u32 = 0;
  let mut x3448: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3447, &mut x3448, x3446, x987, x1802);
  let mut x3449: u32 = 0;
  let mut x3450: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3449, &mut x3450, 0x0, x3433, 0xfffffc2f);
  let mut x3451: u32 = 0;
  let mut x3452: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3451, &mut x3452, x3450, x3435, 0xfffffffe);
  let mut x3453: u32 = 0;
  let mut x3454: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3453, &mut x3454, x3452, x3437, 0xffffffff);
  let mut x3455: u32 = 0;
  let mut x3456: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3455, &mut x3456, x3454, x3439, 0xffffffff);
  let mut x3457: u32 = 0;
  let mut x3458: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3457, &mut x3458, x3456, x3441, 0xffffffff);
  let mut x3459: u32 = 0;
  let mut x3460: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3459, &mut x3460, x3458, x3443, 0xffffffff);
  let mut x3461: u32 = 0;
  let mut x3462: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3461, &mut x3462, x3460, x3445, 0xffffffff);
  let mut x3463: u32 = 0;
  let mut x3464: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3463, &mut x3464, x3462, x3447, 0xffffffff);
  let mut x3465: u32 = 0;
  let mut x3466: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3465, &mut x3466, x3464, (x3448 as u32), (0x0 as u32));
  let mut x3467: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x3467, x3466, x3449, x3433);
  let mut x3468: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x3468, x3466, x3451, x3435);
  let mut x3469: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x3469, x3466, x3453, x3437);
  let mut x3470: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x3470, x3466, x3455, x3439);
  let mut x3471: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x3471, x3466, x3457, x3441);
  let mut x3472: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x3472, x3466, x3459, x3443);
  let mut x3473: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x3473, x3466, x3461, x3445);
  let mut x3474: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x3474, x3466, x3463, x3447);
  let mut x3475: u32 = 0;
  let mut x3476: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3475, &mut x3476, 0x0, x2610, x3425);
  let mut x3477: u32 = 0;
  let mut x3478: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3477, &mut x3478, x3476, x2611, x3426);
  let mut x3479: u32 = 0;
  let mut x3480: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3479, &mut x3480, x3478, x2612, x3427);
  let mut x3481: u32 = 0;
  let mut x3482: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3481, &mut x3482, x3480, x2613, x3428);
  let mut x3483: u32 = 0;
  let mut x3484: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3483, &mut x3484, x3482, x2614, x3429);
  let mut x3485: u32 = 0;
  let mut x3486: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3485, &mut x3486, x3484, x2615, x3430);
  let mut x3487: u32 = 0;
  let mut x3488: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3487, &mut x3488, x3486, x2616, x3431);
  let mut x3489: u32 = 0;
  let mut x3490: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u32(&mut x3489, &mut x3490, x3488, x2617, x3432);
  let mut x3491: u32 = 0;
  let mut x3492: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3491, &mut x3492, 0x0, x3475, 0xfffffc2f);
  let mut x3493: u32 = 0;
  let mut x3494: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3493, &mut x3494, x3492, x3477, 0xfffffffe);
  let mut x3495: u32 = 0;
  let mut x3496: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3495, &mut x3496, x3494, x3479, 0xffffffff);
  let mut x3497: u32 = 0;
  let mut x3498: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3497, &mut x3498, x3496, x3481, 0xffffffff);
  let mut x3499: u32 = 0;
  let mut x3500: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3499, &mut x3500, x3498, x3483, 0xffffffff);
  let mut x3501: u32 = 0;
  let mut x3502: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3501, &mut x3502, x3500, x3485, 0xffffffff);
  let mut x3503: u32 = 0;
  let mut x3504: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3503, &mut x3504, x3502, x3487, 0xffffffff);
  let mut x3505: u32 = 0;
  let mut x3506: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3505, &mut x3506, x3504, x3489, 0xffffffff);
  let mut x3507: u32 = 0;
  let mut x3508: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u32(&mut x3507, &mut x3508, x3506, (x3490 as u32), (0x0 as u32));
  let mut x3509: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x3509, x3508, x3491, x3475);
  let mut x3510: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x3510, x3508, x3493, x3477);
  let mut x3511: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x3511, x3508, x3495, x3479);
  let mut x3512: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x3512, x3508, x3497, x3481);
  let mut x3513: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x3513, x3508, x3499, x3483);
  let mut x3514: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x3514, x3508, x3501, x3485);
  let mut x3515: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x3515, x3508, x3503, x3487);
  let mut x3516: u32 = 0;
  fiat_secp256k1_cmovznz_u32(&mut x3516, x3508, x3505, x3489);
  out1[0] = x3467;
  out1[1] = x3468;
  out1[2] = x3469;
  out1[3] = x3470;
  out1[4] = x3471;
  out1[5] = x3472;
  out1[6] = x3473;
  out1[7] = x3474;
  out2[0] = x3509;
  out2[1] = x3510;
  out2[2] = x3511;
  out2[3] = x3512;
  out2[4] = x3513;
  out2[5] = x3514;
  out2[6] = x3515;
  out2[7] = x3516;
}

/// The function fiat_secp256k1_jumpdivstep_precomp returns the precomputed value for the jump-version of Bernstein-Yang-inversion (in montgomery form).
///
/// Postconditions:
///   eval (from_montgomery out1) = ⌊(m - 1) / 2⌋^(if ⌊log2 m⌋ + 1 < 46 then ⌊(49 * (⌊log2 m⌋ + 1) + 80) / 17⌋ else ⌊(49 * (⌊log2 m⌋ + 1) + 57) / 17⌋)
///   0 ≤ eval out1 < m
///
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_secp256k1_jumpdivstep_precomp(out1: &mut [u32; 8]) -> () {
  out1[0] = 0xc48c8afb;
  out1[1] = 0xe502666f;
  out1[2] = 0x91c3d7cb;
  out1[3] = 0x121e095d;
  out1[4] = 0x2e3db814;
  out1[5] = 0x30077e42;
  out1[6] = 0x1be4d4f4;
  out1[7] = 0xa1670faf;
}

/// The function fiat_secp256k1_jumpdivstep_precomp_hd returns the precomputed value for the (half-delta) jump-version of Bernstein-Yang-inversion (in montgomery form).
///
/// Postconditions:
///   eval (from_montgomery out1) = ⌊(m - 1) / 2⌋^(if ⌊log2 m⌋ + 1 < 46 then ⌊(49 * (⌊log2 m⌋ + 1) + 80) / 17⌋ else ⌊(49 * (⌊log2 m⌋ + 1) + 57) / 17⌋)
///   0 ≤ eval out1 < m
///
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_secp256k1_jumpdivstep_precomp_hd(out1: &mut [u32; 8]) -> () {
  out1[0] = 0x1734d92c;
  out1[1] = 0x75aab184;
  out1[2] = 0xf7701add;
  out1[3] = 0x13420144;
  out1[4] = 0xe84ba82e;
  out1[5] = 0xa1e3b264;
  out1[6] = 0xfd90c052;
  out1[7] = 0x5f85a069;
}
