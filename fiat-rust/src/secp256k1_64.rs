//! Autogenerated: src/ExtractionOCaml/word_by_word_montgomery --lang Rust secp256k1 64 '2^256 - 2^32 - 977' mul square add sub opp from_montgomery to_montgomery nonzero selectznz to_bytes from_bytes one twos_complement_word_to_montgomery_no_encode msat sat_from_bytes divstep divstep_precomp twos_complement_word_full_divstep asr_mw_sub2 sat_add word_sat_mul jumpdivstep_precomp outer_loop_body
//! curve description: secp256k1
//! machine_wordsize = 64 (from "64")
//! requested operations: mul, square, add, sub, opp, from_montgomery, to_montgomery, nonzero, selectznz, to_bytes, from_bytes, one, twos_complement_word_to_montgomery_no_encode, msat, sat_from_bytes, divstep, divstep_precomp, twos_complement_word_full_divstep, asr_mw_sub2, sat_add, word_sat_mul, jumpdivstep_precomp, outer_loop_body
//! m = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f (from "2^256 - 2^32 - 977")
//!
//! NOTE: In addition to the bounds specified above each function, all
//!   functions synthesized for this Montgomery arithmetic require the
//!   input to be strictly less than the prime modulus (m), and also
//!   require the input to be in the unique saturated representation.
//!   All functions also ensure that these two properties are true of
//!   return values.
//!
//! Computed values:
//! eval z = z[0] + (z[1] << 64) + (z[2] << 128) + (z[3] << 192)
//! bytes_eval z = z[0] + (z[1] << 8) + (z[2] << 16) + (z[3] << 24) + (z[4] << 32) + (z[5] << 40) + (z[6] << 48) + (z[7] << 56) + (z[8] << 64) + (z[9] << 72) + (z[10] << 80) + (z[11] << 88) + (z[12] << 96) + (z[13] << 104) + (z[14] << 112) + (z[15] << 120) + (z[16] << 128) + (z[17] << 136) + (z[18] << 144) + (z[19] << 152) + (z[20] << 160) + (z[21] << 168) + (z[22] << 176) + (z[23] << 184) + (z[24] << 192) + (z[25] << 200) + (z[26] << 208) + (z[27] << 216) + (z[28] << 224) + (z[29] << 232) + (z[30] << 240) + (z[31] << 248)

#![allow(unused_parens)]
#[allow(non_camel_case_types)]

pub type fiat_secp256k1_u1 = u8;
pub type fiat_secp256k1_i1 = i8;
pub type fiat_secp256k1_u2 = u8;
pub type fiat_secp256k1_i2 = i8;


/// The function fiat_secp256k1_addcarryx_u64 is an addition with carry.
/// Postconditions:
///   out1 = (arg1 + arg2 + arg3) mod 2^64
///   out2 = ⌊(arg1 + arg2 + arg3) / 2^64⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffffffffffff]
///   arg3: [0x0 ~> 0xffffffffffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffffffffffff]
///   out2: [0x0 ~> 0x1]
#[inline]
pub fn fiat_secp256k1_addcarryx_u64(out1: &mut u64, out2: &mut fiat_secp256k1_u1, arg1: fiat_secp256k1_u1, arg2: u64, arg3: u64) -> () {
  let x1: u128 = (((arg1 as u128) + (arg2 as u128)) + (arg3 as u128));
  let x2: u64 = ((x1 & (0xffffffffffffffff as u128)) as u64);
  let x3: fiat_secp256k1_u1 = ((x1 >> 64) as fiat_secp256k1_u1);
  *out1 = x2;
  *out2 = x3;
}

/// The function fiat_secp256k1_subborrowx_u64 is a subtraction with borrow.
/// Postconditions:
///   out1 = (-arg1 + arg2 + -arg3) mod 2^64
///   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^64⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffffffffffff]
///   arg3: [0x0 ~> 0xffffffffffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffffffffffff]
///   out2: [0x0 ~> 0x1]
#[inline]
pub fn fiat_secp256k1_subborrowx_u64(out1: &mut u64, out2: &mut fiat_secp256k1_u1, arg1: fiat_secp256k1_u1, arg2: u64, arg3: u64) -> () {
  let x1: i128 = (((arg2 as i128) - (arg1 as i128)) - (arg3 as i128));
  let x2: fiat_secp256k1_i1 = ((x1 >> 64) as fiat_secp256k1_i1);
  let x3: u64 = ((x1 & (0xffffffffffffffff as i128)) as u64);
  *out1 = x3;
  *out2 = (((0x0 as fiat_secp256k1_i2) - (x2 as fiat_secp256k1_i2)) as fiat_secp256k1_u1);
}

/// The function fiat_secp256k1_mulx_u64 is a multiplication, returning the full double-width result.
/// Postconditions:
///   out1 = (arg1 * arg2) mod 2^64
///   out2 = ⌊arg1 * arg2 / 2^64⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffffffffffff]
///   arg2: [0x0 ~> 0xffffffffffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffffffffffff]
///   out2: [0x0 ~> 0xffffffffffffffff]
#[inline]
pub fn fiat_secp256k1_mulx_u64(out1: &mut u64, out2: &mut u64, arg1: u64, arg2: u64) -> () {
  let x1: u128 = ((arg1 as u128) * (arg2 as u128));
  let x2: u64 = ((x1 & (0xffffffffffffffff as u128)) as u64);
  let x3: u64 = ((x1 >> 64) as u64);
  *out1 = x2;
  *out2 = x3;
}

/// The function fiat_secp256k1_cmovznz_u1 is a single-word conditional move.
/// Postconditions:
///   out1 = (if arg1 = 0 then arg2 else arg3)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0x1]
///   arg3: [0x0 ~> 0x1]
/// Output Bounds:
///   out1: [0x0 ~> 0x1]
#[inline]
pub fn fiat_secp256k1_cmovznz_u1(out1: &mut fiat_secp256k1_u1, arg1: fiat_secp256k1_u1, arg2: fiat_secp256k1_u1, arg3: fiat_secp256k1_u1) -> () {
  let x1: fiat_secp256k1_u1 = (!(!arg1));
  let x2: fiat_secp256k1_u1 = ((((((0x0 as fiat_secp256k1_i2) - (x1 as fiat_secp256k1_i2)) as fiat_secp256k1_i1) as fiat_secp256k1_i2) & (0x1 as fiat_secp256k1_i2)) as fiat_secp256k1_u1);
  let x3: fiat_secp256k1_u1 = ((x2 & arg3) | ((!x2) & arg2));
  *out1 = x3;
}

/// The function fiat_secp256k1_cmovznz_u64 is a single-word conditional move.
/// Postconditions:
///   out1 = (if arg1 = 0 then arg2 else arg3)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffffffffffff]
///   arg3: [0x0 ~> 0xffffffffffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffffffffffff]
#[inline]
pub fn fiat_secp256k1_cmovznz_u64(out1: &mut u64, arg1: fiat_secp256k1_u1, arg2: u64, arg3: u64) -> () {
  let x1: fiat_secp256k1_u1 = (!(!arg1));
  let x2: u64 = ((((((0x0 as fiat_secp256k1_i2) - (x1 as fiat_secp256k1_i2)) as fiat_secp256k1_i1) as i128) & (0xffffffffffffffff as i128)) as u64);
  let x3: u64 = ((x2 & arg3) | ((!x2) & arg2));
  *out1 = x3;
}

/// The function fiat_secp256k1_mul multiplies two field elements in the Montgomery domain.
/// Preconditions:
///   0 ≤ eval arg1 < m
///   0 ≤ eval arg2 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m
///   0 ≤ eval out1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
///   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
#[inline]
pub fn fiat_secp256k1_mul(out1: &mut [u64; 4], arg1: &[u64; 4], arg2: &[u64; 4]) -> () {
  let x1: u64 = (arg1[1]);
  let x2: u64 = (arg1[2]);
  let x3: u64 = (arg1[3]);
  let x4: u64 = (arg1[0]);
  let mut x5: u64 = 0;
  let mut x6: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x5, &mut x6, x4, (arg2[3]));
  let mut x7: u64 = 0;
  let mut x8: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x7, &mut x8, x4, (arg2[2]));
  let mut x9: u64 = 0;
  let mut x10: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x9, &mut x10, x4, (arg2[1]));
  let mut x11: u64 = 0;
  let mut x12: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x11, &mut x12, x4, (arg2[0]));
  let mut x13: u64 = 0;
  let mut x14: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x13, &mut x14, 0x0, x12, x9);
  let mut x15: u64 = 0;
  let mut x16: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x15, &mut x16, x14, x10, x7);
  let mut x17: u64 = 0;
  let mut x18: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x17, &mut x18, x16, x8, x5);
  let x19: u64 = ((x18 as u64) + x6);
  let mut x20: u64 = 0;
  let mut x21: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x20, &mut x21, x11, 0xd838091dd2253531);
  let mut x22: u64 = 0;
  let mut x23: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x22, &mut x23, x20, 0xffffffffffffffff);
  let mut x24: u64 = 0;
  let mut x25: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x24, &mut x25, x20, 0xffffffffffffffff);
  let mut x26: u64 = 0;
  let mut x27: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x26, &mut x27, x20, 0xffffffffffffffff);
  let mut x28: u64 = 0;
  let mut x29: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x28, &mut x29, x20, 0xfffffffefffffc2f);
  let mut x30: u64 = 0;
  let mut x31: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x30, &mut x31, 0x0, x29, x26);
  let mut x32: u64 = 0;
  let mut x33: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x32, &mut x33, x31, x27, x24);
  let mut x34: u64 = 0;
  let mut x35: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x34, &mut x35, x33, x25, x22);
  let x36: u64 = ((x35 as u64) + x23);
  let mut x37: u64 = 0;
  let mut x38: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x37, &mut x38, 0x0, x11, x28);
  let mut x39: u64 = 0;
  let mut x40: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x39, &mut x40, x38, x13, x30);
  let mut x41: u64 = 0;
  let mut x42: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x41, &mut x42, x40, x15, x32);
  let mut x43: u64 = 0;
  let mut x44: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x43, &mut x44, x42, x17, x34);
  let mut x45: u64 = 0;
  let mut x46: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x45, &mut x46, x44, x19, x36);
  let mut x47: u64 = 0;
  let mut x48: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x47, &mut x48, x1, (arg2[3]));
  let mut x49: u64 = 0;
  let mut x50: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x49, &mut x50, x1, (arg2[2]));
  let mut x51: u64 = 0;
  let mut x52: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x51, &mut x52, x1, (arg2[1]));
  let mut x53: u64 = 0;
  let mut x54: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x53, &mut x54, x1, (arg2[0]));
  let mut x55: u64 = 0;
  let mut x56: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x55, &mut x56, 0x0, x54, x51);
  let mut x57: u64 = 0;
  let mut x58: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x57, &mut x58, x56, x52, x49);
  let mut x59: u64 = 0;
  let mut x60: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x59, &mut x60, x58, x50, x47);
  let x61: u64 = ((x60 as u64) + x48);
  let mut x62: u64 = 0;
  let mut x63: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x62, &mut x63, 0x0, x39, x53);
  let mut x64: u64 = 0;
  let mut x65: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x64, &mut x65, x63, x41, x55);
  let mut x66: u64 = 0;
  let mut x67: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x66, &mut x67, x65, x43, x57);
  let mut x68: u64 = 0;
  let mut x69: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x68, &mut x69, x67, x45, x59);
  let mut x70: u64 = 0;
  let mut x71: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x70, &mut x71, x69, (x46 as u64), x61);
  let mut x72: u64 = 0;
  let mut x73: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x72, &mut x73, x62, 0xd838091dd2253531);
  let mut x74: u64 = 0;
  let mut x75: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x74, &mut x75, x72, 0xffffffffffffffff);
  let mut x76: u64 = 0;
  let mut x77: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x76, &mut x77, x72, 0xffffffffffffffff);
  let mut x78: u64 = 0;
  let mut x79: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x78, &mut x79, x72, 0xffffffffffffffff);
  let mut x80: u64 = 0;
  let mut x81: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x80, &mut x81, x72, 0xfffffffefffffc2f);
  let mut x82: u64 = 0;
  let mut x83: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x82, &mut x83, 0x0, x81, x78);
  let mut x84: u64 = 0;
  let mut x85: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x84, &mut x85, x83, x79, x76);
  let mut x86: u64 = 0;
  let mut x87: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x86, &mut x87, x85, x77, x74);
  let x88: u64 = ((x87 as u64) + x75);
  let mut x89: u64 = 0;
  let mut x90: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x89, &mut x90, 0x0, x62, x80);
  let mut x91: u64 = 0;
  let mut x92: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x91, &mut x92, x90, x64, x82);
  let mut x93: u64 = 0;
  let mut x94: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x93, &mut x94, x92, x66, x84);
  let mut x95: u64 = 0;
  let mut x96: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x95, &mut x96, x94, x68, x86);
  let mut x97: u64 = 0;
  let mut x98: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x97, &mut x98, x96, x70, x88);
  let x99: u64 = ((x98 as u64) + (x71 as u64));
  let mut x100: u64 = 0;
  let mut x101: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x100, &mut x101, x2, (arg2[3]));
  let mut x102: u64 = 0;
  let mut x103: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x102, &mut x103, x2, (arg2[2]));
  let mut x104: u64 = 0;
  let mut x105: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x104, &mut x105, x2, (arg2[1]));
  let mut x106: u64 = 0;
  let mut x107: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x106, &mut x107, x2, (arg2[0]));
  let mut x108: u64 = 0;
  let mut x109: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x108, &mut x109, 0x0, x107, x104);
  let mut x110: u64 = 0;
  let mut x111: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x110, &mut x111, x109, x105, x102);
  let mut x112: u64 = 0;
  let mut x113: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x112, &mut x113, x111, x103, x100);
  let x114: u64 = ((x113 as u64) + x101);
  let mut x115: u64 = 0;
  let mut x116: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x115, &mut x116, 0x0, x91, x106);
  let mut x117: u64 = 0;
  let mut x118: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x117, &mut x118, x116, x93, x108);
  let mut x119: u64 = 0;
  let mut x120: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x119, &mut x120, x118, x95, x110);
  let mut x121: u64 = 0;
  let mut x122: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x121, &mut x122, x120, x97, x112);
  let mut x123: u64 = 0;
  let mut x124: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x123, &mut x124, x122, x99, x114);
  let mut x125: u64 = 0;
  let mut x126: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x125, &mut x126, x115, 0xd838091dd2253531);
  let mut x127: u64 = 0;
  let mut x128: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x127, &mut x128, x125, 0xffffffffffffffff);
  let mut x129: u64 = 0;
  let mut x130: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x129, &mut x130, x125, 0xffffffffffffffff);
  let mut x131: u64 = 0;
  let mut x132: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x131, &mut x132, x125, 0xffffffffffffffff);
  let mut x133: u64 = 0;
  let mut x134: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x133, &mut x134, x125, 0xfffffffefffffc2f);
  let mut x135: u64 = 0;
  let mut x136: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x135, &mut x136, 0x0, x134, x131);
  let mut x137: u64 = 0;
  let mut x138: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x137, &mut x138, x136, x132, x129);
  let mut x139: u64 = 0;
  let mut x140: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x139, &mut x140, x138, x130, x127);
  let x141: u64 = ((x140 as u64) + x128);
  let mut x142: u64 = 0;
  let mut x143: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x142, &mut x143, 0x0, x115, x133);
  let mut x144: u64 = 0;
  let mut x145: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x144, &mut x145, x143, x117, x135);
  let mut x146: u64 = 0;
  let mut x147: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x146, &mut x147, x145, x119, x137);
  let mut x148: u64 = 0;
  let mut x149: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x148, &mut x149, x147, x121, x139);
  let mut x150: u64 = 0;
  let mut x151: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x150, &mut x151, x149, x123, x141);
  let x152: u64 = ((x151 as u64) + (x124 as u64));
  let mut x153: u64 = 0;
  let mut x154: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x153, &mut x154, x3, (arg2[3]));
  let mut x155: u64 = 0;
  let mut x156: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x155, &mut x156, x3, (arg2[2]));
  let mut x157: u64 = 0;
  let mut x158: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x157, &mut x158, x3, (arg2[1]));
  let mut x159: u64 = 0;
  let mut x160: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x159, &mut x160, x3, (arg2[0]));
  let mut x161: u64 = 0;
  let mut x162: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x161, &mut x162, 0x0, x160, x157);
  let mut x163: u64 = 0;
  let mut x164: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x163, &mut x164, x162, x158, x155);
  let mut x165: u64 = 0;
  let mut x166: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x165, &mut x166, x164, x156, x153);
  let x167: u64 = ((x166 as u64) + x154);
  let mut x168: u64 = 0;
  let mut x169: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x168, &mut x169, 0x0, x144, x159);
  let mut x170: u64 = 0;
  let mut x171: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x170, &mut x171, x169, x146, x161);
  let mut x172: u64 = 0;
  let mut x173: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x172, &mut x173, x171, x148, x163);
  let mut x174: u64 = 0;
  let mut x175: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x174, &mut x175, x173, x150, x165);
  let mut x176: u64 = 0;
  let mut x177: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x176, &mut x177, x175, x152, x167);
  let mut x178: u64 = 0;
  let mut x179: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x178, &mut x179, x168, 0xd838091dd2253531);
  let mut x180: u64 = 0;
  let mut x181: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x180, &mut x181, x178, 0xffffffffffffffff);
  let mut x182: u64 = 0;
  let mut x183: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x182, &mut x183, x178, 0xffffffffffffffff);
  let mut x184: u64 = 0;
  let mut x185: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x184, &mut x185, x178, 0xffffffffffffffff);
  let mut x186: u64 = 0;
  let mut x187: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x186, &mut x187, x178, 0xfffffffefffffc2f);
  let mut x188: u64 = 0;
  let mut x189: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x188, &mut x189, 0x0, x187, x184);
  let mut x190: u64 = 0;
  let mut x191: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x190, &mut x191, x189, x185, x182);
  let mut x192: u64 = 0;
  let mut x193: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x192, &mut x193, x191, x183, x180);
  let x194: u64 = ((x193 as u64) + x181);
  let mut x195: u64 = 0;
  let mut x196: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x195, &mut x196, 0x0, x168, x186);
  let mut x197: u64 = 0;
  let mut x198: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x197, &mut x198, x196, x170, x188);
  let mut x199: u64 = 0;
  let mut x200: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x199, &mut x200, x198, x172, x190);
  let mut x201: u64 = 0;
  let mut x202: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x201, &mut x202, x200, x174, x192);
  let mut x203: u64 = 0;
  let mut x204: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x203, &mut x204, x202, x176, x194);
  let x205: u64 = ((x204 as u64) + (x177 as u64));
  let mut x206: u64 = 0;
  let mut x207: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x206, &mut x207, 0x0, x197, 0xfffffffefffffc2f);
  let mut x208: u64 = 0;
  let mut x209: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x208, &mut x209, x207, x199, 0xffffffffffffffff);
  let mut x210: u64 = 0;
  let mut x211: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x210, &mut x211, x209, x201, 0xffffffffffffffff);
  let mut x212: u64 = 0;
  let mut x213: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x212, &mut x213, x211, x203, 0xffffffffffffffff);
  let mut x214: u64 = 0;
  let mut x215: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x214, &mut x215, x213, x205, (0x0 as u64));
  let mut x216: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x216, x215, x206, x197);
  let mut x217: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x217, x215, x208, x199);
  let mut x218: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x218, x215, x210, x201);
  let mut x219: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x219, x215, x212, x203);
  out1[0] = x216;
  out1[1] = x217;
  out1[2] = x218;
  out1[3] = x219;
}

/// The function fiat_secp256k1_square squares a field element in the Montgomery domain.
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m
///   0 ≤ eval out1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
#[inline]
pub fn fiat_secp256k1_square(out1: &mut [u64; 4], arg1: &[u64; 4]) -> () {
  let x1: u64 = (arg1[1]);
  let x2: u64 = (arg1[2]);
  let x3: u64 = (arg1[3]);
  let x4: u64 = (arg1[0]);
  let mut x5: u64 = 0;
  let mut x6: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x5, &mut x6, x4, (arg1[3]));
  let mut x7: u64 = 0;
  let mut x8: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x7, &mut x8, x4, (arg1[2]));
  let mut x9: u64 = 0;
  let mut x10: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x9, &mut x10, x4, (arg1[1]));
  let mut x11: u64 = 0;
  let mut x12: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x11, &mut x12, x4, (arg1[0]));
  let mut x13: u64 = 0;
  let mut x14: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x13, &mut x14, 0x0, x12, x9);
  let mut x15: u64 = 0;
  let mut x16: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x15, &mut x16, x14, x10, x7);
  let mut x17: u64 = 0;
  let mut x18: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x17, &mut x18, x16, x8, x5);
  let x19: u64 = ((x18 as u64) + x6);
  let mut x20: u64 = 0;
  let mut x21: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x20, &mut x21, x11, 0xd838091dd2253531);
  let mut x22: u64 = 0;
  let mut x23: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x22, &mut x23, x20, 0xffffffffffffffff);
  let mut x24: u64 = 0;
  let mut x25: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x24, &mut x25, x20, 0xffffffffffffffff);
  let mut x26: u64 = 0;
  let mut x27: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x26, &mut x27, x20, 0xffffffffffffffff);
  let mut x28: u64 = 0;
  let mut x29: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x28, &mut x29, x20, 0xfffffffefffffc2f);
  let mut x30: u64 = 0;
  let mut x31: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x30, &mut x31, 0x0, x29, x26);
  let mut x32: u64 = 0;
  let mut x33: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x32, &mut x33, x31, x27, x24);
  let mut x34: u64 = 0;
  let mut x35: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x34, &mut x35, x33, x25, x22);
  let x36: u64 = ((x35 as u64) + x23);
  let mut x37: u64 = 0;
  let mut x38: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x37, &mut x38, 0x0, x11, x28);
  let mut x39: u64 = 0;
  let mut x40: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x39, &mut x40, x38, x13, x30);
  let mut x41: u64 = 0;
  let mut x42: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x41, &mut x42, x40, x15, x32);
  let mut x43: u64 = 0;
  let mut x44: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x43, &mut x44, x42, x17, x34);
  let mut x45: u64 = 0;
  let mut x46: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x45, &mut x46, x44, x19, x36);
  let mut x47: u64 = 0;
  let mut x48: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x47, &mut x48, x1, (arg1[3]));
  let mut x49: u64 = 0;
  let mut x50: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x49, &mut x50, x1, (arg1[2]));
  let mut x51: u64 = 0;
  let mut x52: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x51, &mut x52, x1, (arg1[1]));
  let mut x53: u64 = 0;
  let mut x54: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x53, &mut x54, x1, (arg1[0]));
  let mut x55: u64 = 0;
  let mut x56: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x55, &mut x56, 0x0, x54, x51);
  let mut x57: u64 = 0;
  let mut x58: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x57, &mut x58, x56, x52, x49);
  let mut x59: u64 = 0;
  let mut x60: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x59, &mut x60, x58, x50, x47);
  let x61: u64 = ((x60 as u64) + x48);
  let mut x62: u64 = 0;
  let mut x63: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x62, &mut x63, 0x0, x39, x53);
  let mut x64: u64 = 0;
  let mut x65: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x64, &mut x65, x63, x41, x55);
  let mut x66: u64 = 0;
  let mut x67: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x66, &mut x67, x65, x43, x57);
  let mut x68: u64 = 0;
  let mut x69: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x68, &mut x69, x67, x45, x59);
  let mut x70: u64 = 0;
  let mut x71: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x70, &mut x71, x69, (x46 as u64), x61);
  let mut x72: u64 = 0;
  let mut x73: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x72, &mut x73, x62, 0xd838091dd2253531);
  let mut x74: u64 = 0;
  let mut x75: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x74, &mut x75, x72, 0xffffffffffffffff);
  let mut x76: u64 = 0;
  let mut x77: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x76, &mut x77, x72, 0xffffffffffffffff);
  let mut x78: u64 = 0;
  let mut x79: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x78, &mut x79, x72, 0xffffffffffffffff);
  let mut x80: u64 = 0;
  let mut x81: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x80, &mut x81, x72, 0xfffffffefffffc2f);
  let mut x82: u64 = 0;
  let mut x83: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x82, &mut x83, 0x0, x81, x78);
  let mut x84: u64 = 0;
  let mut x85: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x84, &mut x85, x83, x79, x76);
  let mut x86: u64 = 0;
  let mut x87: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x86, &mut x87, x85, x77, x74);
  let x88: u64 = ((x87 as u64) + x75);
  let mut x89: u64 = 0;
  let mut x90: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x89, &mut x90, 0x0, x62, x80);
  let mut x91: u64 = 0;
  let mut x92: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x91, &mut x92, x90, x64, x82);
  let mut x93: u64 = 0;
  let mut x94: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x93, &mut x94, x92, x66, x84);
  let mut x95: u64 = 0;
  let mut x96: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x95, &mut x96, x94, x68, x86);
  let mut x97: u64 = 0;
  let mut x98: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x97, &mut x98, x96, x70, x88);
  let x99: u64 = ((x98 as u64) + (x71 as u64));
  let mut x100: u64 = 0;
  let mut x101: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x100, &mut x101, x2, (arg1[3]));
  let mut x102: u64 = 0;
  let mut x103: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x102, &mut x103, x2, (arg1[2]));
  let mut x104: u64 = 0;
  let mut x105: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x104, &mut x105, x2, (arg1[1]));
  let mut x106: u64 = 0;
  let mut x107: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x106, &mut x107, x2, (arg1[0]));
  let mut x108: u64 = 0;
  let mut x109: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x108, &mut x109, 0x0, x107, x104);
  let mut x110: u64 = 0;
  let mut x111: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x110, &mut x111, x109, x105, x102);
  let mut x112: u64 = 0;
  let mut x113: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x112, &mut x113, x111, x103, x100);
  let x114: u64 = ((x113 as u64) + x101);
  let mut x115: u64 = 0;
  let mut x116: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x115, &mut x116, 0x0, x91, x106);
  let mut x117: u64 = 0;
  let mut x118: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x117, &mut x118, x116, x93, x108);
  let mut x119: u64 = 0;
  let mut x120: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x119, &mut x120, x118, x95, x110);
  let mut x121: u64 = 0;
  let mut x122: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x121, &mut x122, x120, x97, x112);
  let mut x123: u64 = 0;
  let mut x124: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x123, &mut x124, x122, x99, x114);
  let mut x125: u64 = 0;
  let mut x126: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x125, &mut x126, x115, 0xd838091dd2253531);
  let mut x127: u64 = 0;
  let mut x128: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x127, &mut x128, x125, 0xffffffffffffffff);
  let mut x129: u64 = 0;
  let mut x130: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x129, &mut x130, x125, 0xffffffffffffffff);
  let mut x131: u64 = 0;
  let mut x132: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x131, &mut x132, x125, 0xffffffffffffffff);
  let mut x133: u64 = 0;
  let mut x134: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x133, &mut x134, x125, 0xfffffffefffffc2f);
  let mut x135: u64 = 0;
  let mut x136: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x135, &mut x136, 0x0, x134, x131);
  let mut x137: u64 = 0;
  let mut x138: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x137, &mut x138, x136, x132, x129);
  let mut x139: u64 = 0;
  let mut x140: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x139, &mut x140, x138, x130, x127);
  let x141: u64 = ((x140 as u64) + x128);
  let mut x142: u64 = 0;
  let mut x143: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x142, &mut x143, 0x0, x115, x133);
  let mut x144: u64 = 0;
  let mut x145: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x144, &mut x145, x143, x117, x135);
  let mut x146: u64 = 0;
  let mut x147: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x146, &mut x147, x145, x119, x137);
  let mut x148: u64 = 0;
  let mut x149: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x148, &mut x149, x147, x121, x139);
  let mut x150: u64 = 0;
  let mut x151: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x150, &mut x151, x149, x123, x141);
  let x152: u64 = ((x151 as u64) + (x124 as u64));
  let mut x153: u64 = 0;
  let mut x154: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x153, &mut x154, x3, (arg1[3]));
  let mut x155: u64 = 0;
  let mut x156: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x155, &mut x156, x3, (arg1[2]));
  let mut x157: u64 = 0;
  let mut x158: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x157, &mut x158, x3, (arg1[1]));
  let mut x159: u64 = 0;
  let mut x160: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x159, &mut x160, x3, (arg1[0]));
  let mut x161: u64 = 0;
  let mut x162: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x161, &mut x162, 0x0, x160, x157);
  let mut x163: u64 = 0;
  let mut x164: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x163, &mut x164, x162, x158, x155);
  let mut x165: u64 = 0;
  let mut x166: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x165, &mut x166, x164, x156, x153);
  let x167: u64 = ((x166 as u64) + x154);
  let mut x168: u64 = 0;
  let mut x169: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x168, &mut x169, 0x0, x144, x159);
  let mut x170: u64 = 0;
  let mut x171: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x170, &mut x171, x169, x146, x161);
  let mut x172: u64 = 0;
  let mut x173: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x172, &mut x173, x171, x148, x163);
  let mut x174: u64 = 0;
  let mut x175: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x174, &mut x175, x173, x150, x165);
  let mut x176: u64 = 0;
  let mut x177: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x176, &mut x177, x175, x152, x167);
  let mut x178: u64 = 0;
  let mut x179: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x178, &mut x179, x168, 0xd838091dd2253531);
  let mut x180: u64 = 0;
  let mut x181: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x180, &mut x181, x178, 0xffffffffffffffff);
  let mut x182: u64 = 0;
  let mut x183: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x182, &mut x183, x178, 0xffffffffffffffff);
  let mut x184: u64 = 0;
  let mut x185: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x184, &mut x185, x178, 0xffffffffffffffff);
  let mut x186: u64 = 0;
  let mut x187: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x186, &mut x187, x178, 0xfffffffefffffc2f);
  let mut x188: u64 = 0;
  let mut x189: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x188, &mut x189, 0x0, x187, x184);
  let mut x190: u64 = 0;
  let mut x191: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x190, &mut x191, x189, x185, x182);
  let mut x192: u64 = 0;
  let mut x193: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x192, &mut x193, x191, x183, x180);
  let x194: u64 = ((x193 as u64) + x181);
  let mut x195: u64 = 0;
  let mut x196: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x195, &mut x196, 0x0, x168, x186);
  let mut x197: u64 = 0;
  let mut x198: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x197, &mut x198, x196, x170, x188);
  let mut x199: u64 = 0;
  let mut x200: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x199, &mut x200, x198, x172, x190);
  let mut x201: u64 = 0;
  let mut x202: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x201, &mut x202, x200, x174, x192);
  let mut x203: u64 = 0;
  let mut x204: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x203, &mut x204, x202, x176, x194);
  let x205: u64 = ((x204 as u64) + (x177 as u64));
  let mut x206: u64 = 0;
  let mut x207: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x206, &mut x207, 0x0, x197, 0xfffffffefffffc2f);
  let mut x208: u64 = 0;
  let mut x209: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x208, &mut x209, x207, x199, 0xffffffffffffffff);
  let mut x210: u64 = 0;
  let mut x211: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x210, &mut x211, x209, x201, 0xffffffffffffffff);
  let mut x212: u64 = 0;
  let mut x213: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x212, &mut x213, x211, x203, 0xffffffffffffffff);
  let mut x214: u64 = 0;
  let mut x215: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x214, &mut x215, x213, x205, (0x0 as u64));
  let mut x216: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x216, x215, x206, x197);
  let mut x217: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x217, x215, x208, x199);
  let mut x218: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x218, x215, x210, x201);
  let mut x219: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x219, x215, x212, x203);
  out1[0] = x216;
  out1[1] = x217;
  out1[2] = x218;
  out1[3] = x219;
}

/// The function fiat_secp256k1_add adds two field elements in the Montgomery domain.
/// Preconditions:
///   0 ≤ eval arg1 < m
///   0 ≤ eval arg2 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m
///   0 ≤ eval out1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
///   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
#[inline]
pub fn fiat_secp256k1_add(out1: &mut [u64; 4], arg1: &[u64; 4], arg2: &[u64; 4]) -> () {
  let mut x1: u64 = 0;
  let mut x2: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1, &mut x2, 0x0, (arg1[0]), (arg2[0]));
  let mut x3: u64 = 0;
  let mut x4: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x3, &mut x4, x2, (arg1[1]), (arg2[1]));
  let mut x5: u64 = 0;
  let mut x6: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x5, &mut x6, x4, (arg1[2]), (arg2[2]));
  let mut x7: u64 = 0;
  let mut x8: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x7, &mut x8, x6, (arg1[3]), (arg2[3]));
  let mut x9: u64 = 0;
  let mut x10: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x9, &mut x10, 0x0, x1, 0xfffffffefffffc2f);
  let mut x11: u64 = 0;
  let mut x12: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x11, &mut x12, x10, x3, 0xffffffffffffffff);
  let mut x13: u64 = 0;
  let mut x14: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x13, &mut x14, x12, x5, 0xffffffffffffffff);
  let mut x15: u64 = 0;
  let mut x16: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x15, &mut x16, x14, x7, 0xffffffffffffffff);
  let mut x17: u64 = 0;
  let mut x18: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x17, &mut x18, x16, (x8 as u64), (0x0 as u64));
  let mut x19: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x19, x18, x9, x1);
  let mut x20: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x20, x18, x11, x3);
  let mut x21: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x21, x18, x13, x5);
  let mut x22: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x22, x18, x15, x7);
  out1[0] = x19;
  out1[1] = x20;
  out1[2] = x21;
  out1[3] = x22;
}

/// The function fiat_secp256k1_sub subtracts two field elements in the Montgomery domain.
/// Preconditions:
///   0 ≤ eval arg1 < m
///   0 ≤ eval arg2 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m
///   0 ≤ eval out1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
///   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
#[inline]
pub fn fiat_secp256k1_sub(out1: &mut [u64; 4], arg1: &[u64; 4], arg2: &[u64; 4]) -> () {
  let mut x1: u64 = 0;
  let mut x2: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1, &mut x2, 0x0, (arg1[0]), (arg2[0]));
  let mut x3: u64 = 0;
  let mut x4: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x3, &mut x4, x2, (arg1[1]), (arg2[1]));
  let mut x5: u64 = 0;
  let mut x6: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x5, &mut x6, x4, (arg1[2]), (arg2[2]));
  let mut x7: u64 = 0;
  let mut x8: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x7, &mut x8, x6, (arg1[3]), (arg2[3]));
  let mut x9: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x9, x8, (0x0 as u64), 0xffffffffffffffff);
  let mut x10: u64 = 0;
  let mut x11: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x10, &mut x11, 0x0, x1, (x9 & 0xfffffffefffffc2f));
  let mut x12: u64 = 0;
  let mut x13: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x12, &mut x13, x11, x3, x9);
  let mut x14: u64 = 0;
  let mut x15: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x14, &mut x15, x13, x5, x9);
  let mut x16: u64 = 0;
  let mut x17: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x16, &mut x17, x15, x7, x9);
  out1[0] = x10;
  out1[1] = x12;
  out1[2] = x14;
  out1[3] = x16;
}

/// The function fiat_secp256k1_opp negates a field element in the Montgomery domain.
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m
///   0 ≤ eval out1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
#[inline]
pub fn fiat_secp256k1_opp(out1: &mut [u64; 4], arg1: &[u64; 4]) -> () {
  let mut x1: u64 = 0;
  let mut x2: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1, &mut x2, 0x0, (0x0 as u64), (arg1[0]));
  let mut x3: u64 = 0;
  let mut x4: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x3, &mut x4, x2, (0x0 as u64), (arg1[1]));
  let mut x5: u64 = 0;
  let mut x6: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x5, &mut x6, x4, (0x0 as u64), (arg1[2]));
  let mut x7: u64 = 0;
  let mut x8: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x7, &mut x8, x6, (0x0 as u64), (arg1[3]));
  let mut x9: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x9, x8, (0x0 as u64), 0xffffffffffffffff);
  let mut x10: u64 = 0;
  let mut x11: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x10, &mut x11, 0x0, x1, (x9 & 0xfffffffefffffc2f));
  let mut x12: u64 = 0;
  let mut x13: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x12, &mut x13, x11, x3, x9);
  let mut x14: u64 = 0;
  let mut x15: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x14, &mut x15, x13, x5, x9);
  let mut x16: u64 = 0;
  let mut x17: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x16, &mut x17, x15, x7, x9);
  out1[0] = x10;
  out1[1] = x12;
  out1[2] = x14;
  out1[3] = x16;
}

/// The function fiat_secp256k1_from_montgomery translates a field element out of the Montgomery domain.
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval out1 mod m = (eval arg1 * ((2^64)⁻¹ mod m)^4) mod m
///   0 ≤ eval out1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
#[inline]
pub fn fiat_secp256k1_from_montgomery(out1: &mut [u64; 4], arg1: &[u64; 4]) -> () {
  let x1: u64 = (arg1[0]);
  let mut x2: u64 = 0;
  let mut x3: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x2, &mut x3, x1, 0xd838091dd2253531);
  let mut x4: u64 = 0;
  let mut x5: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x4, &mut x5, x2, 0xffffffffffffffff);
  let mut x6: u64 = 0;
  let mut x7: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x6, &mut x7, x2, 0xffffffffffffffff);
  let mut x8: u64 = 0;
  let mut x9: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x8, &mut x9, x2, 0xffffffffffffffff);
  let mut x10: u64 = 0;
  let mut x11: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x10, &mut x11, x2, 0xfffffffefffffc2f);
  let mut x12: u64 = 0;
  let mut x13: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x12, &mut x13, 0x0, x11, x8);
  let mut x14: u64 = 0;
  let mut x15: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x14, &mut x15, x13, x9, x6);
  let mut x16: u64 = 0;
  let mut x17: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x16, &mut x17, x15, x7, x4);
  let mut x18: u64 = 0;
  let mut x19: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x18, &mut x19, 0x0, x1, x10);
  let mut x20: u64 = 0;
  let mut x21: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x20, &mut x21, x19, (0x0 as u64), x12);
  let mut x22: u64 = 0;
  let mut x23: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x22, &mut x23, x21, (0x0 as u64), x14);
  let mut x24: u64 = 0;
  let mut x25: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x24, &mut x25, x23, (0x0 as u64), x16);
  let mut x26: u64 = 0;
  let mut x27: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x26, &mut x27, x25, (0x0 as u64), ((x17 as u64) + x5));
  let mut x28: u64 = 0;
  let mut x29: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x28, &mut x29, 0x0, x20, (arg1[1]));
  let mut x30: u64 = 0;
  let mut x31: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x30, &mut x31, x29, x22, (0x0 as u64));
  let mut x32: u64 = 0;
  let mut x33: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x32, &mut x33, x31, x24, (0x0 as u64));
  let mut x34: u64 = 0;
  let mut x35: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x34, &mut x35, x33, x26, (0x0 as u64));
  let mut x36: u64 = 0;
  let mut x37: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x36, &mut x37, x28, 0xd838091dd2253531);
  let mut x38: u64 = 0;
  let mut x39: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x38, &mut x39, x36, 0xffffffffffffffff);
  let mut x40: u64 = 0;
  let mut x41: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x40, &mut x41, x36, 0xffffffffffffffff);
  let mut x42: u64 = 0;
  let mut x43: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x42, &mut x43, x36, 0xffffffffffffffff);
  let mut x44: u64 = 0;
  let mut x45: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x44, &mut x45, x36, 0xfffffffefffffc2f);
  let mut x46: u64 = 0;
  let mut x47: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x46, &mut x47, 0x0, x45, x42);
  let mut x48: u64 = 0;
  let mut x49: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x48, &mut x49, x47, x43, x40);
  let mut x50: u64 = 0;
  let mut x51: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x50, &mut x51, x49, x41, x38);
  let mut x52: u64 = 0;
  let mut x53: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x52, &mut x53, 0x0, x28, x44);
  let mut x54: u64 = 0;
  let mut x55: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x54, &mut x55, x53, x30, x46);
  let mut x56: u64 = 0;
  let mut x57: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x56, &mut x57, x55, x32, x48);
  let mut x58: u64 = 0;
  let mut x59: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x58, &mut x59, x57, x34, x50);
  let mut x60: u64 = 0;
  let mut x61: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x60, &mut x61, x59, ((x35 as u64) + (x27 as u64)), ((x51 as u64) + x39));
  let mut x62: u64 = 0;
  let mut x63: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x62, &mut x63, 0x0, x54, (arg1[2]));
  let mut x64: u64 = 0;
  let mut x65: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x64, &mut x65, x63, x56, (0x0 as u64));
  let mut x66: u64 = 0;
  let mut x67: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x66, &mut x67, x65, x58, (0x0 as u64));
  let mut x68: u64 = 0;
  let mut x69: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x68, &mut x69, x67, x60, (0x0 as u64));
  let mut x70: u64 = 0;
  let mut x71: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x70, &mut x71, x62, 0xd838091dd2253531);
  let mut x72: u64 = 0;
  let mut x73: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x72, &mut x73, x70, 0xffffffffffffffff);
  let mut x74: u64 = 0;
  let mut x75: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x74, &mut x75, x70, 0xffffffffffffffff);
  let mut x76: u64 = 0;
  let mut x77: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x76, &mut x77, x70, 0xffffffffffffffff);
  let mut x78: u64 = 0;
  let mut x79: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x78, &mut x79, x70, 0xfffffffefffffc2f);
  let mut x80: u64 = 0;
  let mut x81: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x80, &mut x81, 0x0, x79, x76);
  let mut x82: u64 = 0;
  let mut x83: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x82, &mut x83, x81, x77, x74);
  let mut x84: u64 = 0;
  let mut x85: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x84, &mut x85, x83, x75, x72);
  let mut x86: u64 = 0;
  let mut x87: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x86, &mut x87, 0x0, x62, x78);
  let mut x88: u64 = 0;
  let mut x89: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x88, &mut x89, x87, x64, x80);
  let mut x90: u64 = 0;
  let mut x91: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x90, &mut x91, x89, x66, x82);
  let mut x92: u64 = 0;
  let mut x93: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x92, &mut x93, x91, x68, x84);
  let mut x94: u64 = 0;
  let mut x95: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x94, &mut x95, x93, ((x69 as u64) + (x61 as u64)), ((x85 as u64) + x73));
  let mut x96: u64 = 0;
  let mut x97: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x96, &mut x97, 0x0, x88, (arg1[3]));
  let mut x98: u64 = 0;
  let mut x99: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x98, &mut x99, x97, x90, (0x0 as u64));
  let mut x100: u64 = 0;
  let mut x101: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x100, &mut x101, x99, x92, (0x0 as u64));
  let mut x102: u64 = 0;
  let mut x103: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x102, &mut x103, x101, x94, (0x0 as u64));
  let mut x104: u64 = 0;
  let mut x105: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x104, &mut x105, x96, 0xd838091dd2253531);
  let mut x106: u64 = 0;
  let mut x107: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x106, &mut x107, x104, 0xffffffffffffffff);
  let mut x108: u64 = 0;
  let mut x109: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x108, &mut x109, x104, 0xffffffffffffffff);
  let mut x110: u64 = 0;
  let mut x111: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x110, &mut x111, x104, 0xffffffffffffffff);
  let mut x112: u64 = 0;
  let mut x113: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x112, &mut x113, x104, 0xfffffffefffffc2f);
  let mut x114: u64 = 0;
  let mut x115: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x114, &mut x115, 0x0, x113, x110);
  let mut x116: u64 = 0;
  let mut x117: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x116, &mut x117, x115, x111, x108);
  let mut x118: u64 = 0;
  let mut x119: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x118, &mut x119, x117, x109, x106);
  let mut x120: u64 = 0;
  let mut x121: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x120, &mut x121, 0x0, x96, x112);
  let mut x122: u64 = 0;
  let mut x123: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x122, &mut x123, x121, x98, x114);
  let mut x124: u64 = 0;
  let mut x125: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x124, &mut x125, x123, x100, x116);
  let mut x126: u64 = 0;
  let mut x127: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x126, &mut x127, x125, x102, x118);
  let mut x128: u64 = 0;
  let mut x129: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x128, &mut x129, x127, ((x103 as u64) + (x95 as u64)), ((x119 as u64) + x107));
  let mut x130: u64 = 0;
  let mut x131: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x130, &mut x131, 0x0, x122, 0xfffffffefffffc2f);
  let mut x132: u64 = 0;
  let mut x133: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x132, &mut x133, x131, x124, 0xffffffffffffffff);
  let mut x134: u64 = 0;
  let mut x135: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x134, &mut x135, x133, x126, 0xffffffffffffffff);
  let mut x136: u64 = 0;
  let mut x137: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x136, &mut x137, x135, x128, 0xffffffffffffffff);
  let mut x138: u64 = 0;
  let mut x139: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x138, &mut x139, x137, (x129 as u64), (0x0 as u64));
  let mut x140: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x140, x139, x130, x122);
  let mut x141: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x141, x139, x132, x124);
  let mut x142: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x142, x139, x134, x126);
  let mut x143: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x143, x139, x136, x128);
  out1[0] = x140;
  out1[1] = x141;
  out1[2] = x142;
  out1[3] = x143;
}

/// The function fiat_secp256k1_to_montgomery translates a field element into the Montgomery domain.
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = eval arg1 mod m
///   0 ≤ eval out1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
#[inline]
pub fn fiat_secp256k1_to_montgomery(out1: &mut [u64; 4], arg1: &[u64; 4]) -> () {
  let x1: u64 = (arg1[1]);
  let x2: u64 = (arg1[2]);
  let x3: u64 = (arg1[3]);
  let x4: u64 = (arg1[0]);
  let mut x5: u64 = 0;
  let mut x6: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x5, &mut x6, x4, 0x7a2000e90a1);
  let mut x7: u64 = 0;
  let mut x8: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x7, &mut x8, 0x0, x6, x4);
  let mut x9: u64 = 0;
  let mut x10: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x9, &mut x10, x5, 0xd838091dd2253531);
  let mut x11: u64 = 0;
  let mut x12: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x11, &mut x12, x9, 0xffffffffffffffff);
  let mut x13: u64 = 0;
  let mut x14: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x13, &mut x14, x9, 0xffffffffffffffff);
  let mut x15: u64 = 0;
  let mut x16: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x15, &mut x16, x9, 0xffffffffffffffff);
  let mut x17: u64 = 0;
  let mut x18: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x17, &mut x18, x9, 0xfffffffefffffc2f);
  let mut x19: u64 = 0;
  let mut x20: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x19, &mut x20, 0x0, x18, x15);
  let mut x21: u64 = 0;
  let mut x22: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x21, &mut x22, x20, x16, x13);
  let mut x23: u64 = 0;
  let mut x24: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x23, &mut x24, x22, x14, x11);
  let mut x25: u64 = 0;
  let mut x26: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x25, &mut x26, 0x0, x5, x17);
  let mut x27: u64 = 0;
  let mut x28: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x27, &mut x28, x26, x7, x19);
  let mut x29: u64 = 0;
  let mut x30: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x29, &mut x30, x28, (x8 as u64), x21);
  let mut x31: u64 = 0;
  let mut x32: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x31, &mut x32, x30, (0x0 as u64), x23);
  let mut x33: u64 = 0;
  let mut x34: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x33, &mut x34, x32, (0x0 as u64), ((x24 as u64) + x12));
  let mut x35: u64 = 0;
  let mut x36: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x35, &mut x36, x1, 0x7a2000e90a1);
  let mut x37: u64 = 0;
  let mut x38: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x37, &mut x38, 0x0, x36, x1);
  let mut x39: u64 = 0;
  let mut x40: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x39, &mut x40, 0x0, x27, x35);
  let mut x41: u64 = 0;
  let mut x42: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x41, &mut x42, x40, x29, x37);
  let mut x43: u64 = 0;
  let mut x44: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x43, &mut x44, x42, x31, (x38 as u64));
  let mut x45: u64 = 0;
  let mut x46: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x45, &mut x46, x44, x33, (0x0 as u64));
  let mut x47: u64 = 0;
  let mut x48: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x47, &mut x48, x39, 0xd838091dd2253531);
  let mut x49: u64 = 0;
  let mut x50: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x49, &mut x50, x47, 0xffffffffffffffff);
  let mut x51: u64 = 0;
  let mut x52: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x51, &mut x52, x47, 0xffffffffffffffff);
  let mut x53: u64 = 0;
  let mut x54: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x53, &mut x54, x47, 0xffffffffffffffff);
  let mut x55: u64 = 0;
  let mut x56: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x55, &mut x56, x47, 0xfffffffefffffc2f);
  let mut x57: u64 = 0;
  let mut x58: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x57, &mut x58, 0x0, x56, x53);
  let mut x59: u64 = 0;
  let mut x60: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x59, &mut x60, x58, x54, x51);
  let mut x61: u64 = 0;
  let mut x62: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x61, &mut x62, x60, x52, x49);
  let mut x63: u64 = 0;
  let mut x64: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x63, &mut x64, 0x0, x39, x55);
  let mut x65: u64 = 0;
  let mut x66: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x65, &mut x66, x64, x41, x57);
  let mut x67: u64 = 0;
  let mut x68: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x67, &mut x68, x66, x43, x59);
  let mut x69: u64 = 0;
  let mut x70: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x69, &mut x70, x68, x45, x61);
  let mut x71: u64 = 0;
  let mut x72: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x71, &mut x72, x70, ((x46 as u64) + (x34 as u64)), ((x62 as u64) + x50));
  let mut x73: u64 = 0;
  let mut x74: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x73, &mut x74, x2, 0x7a2000e90a1);
  let mut x75: u64 = 0;
  let mut x76: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x75, &mut x76, 0x0, x74, x2);
  let mut x77: u64 = 0;
  let mut x78: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x77, &mut x78, 0x0, x65, x73);
  let mut x79: u64 = 0;
  let mut x80: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x79, &mut x80, x78, x67, x75);
  let mut x81: u64 = 0;
  let mut x82: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x81, &mut x82, x80, x69, (x76 as u64));
  let mut x83: u64 = 0;
  let mut x84: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x83, &mut x84, x82, x71, (0x0 as u64));
  let mut x85: u64 = 0;
  let mut x86: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x85, &mut x86, x77, 0xd838091dd2253531);
  let mut x87: u64 = 0;
  let mut x88: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x87, &mut x88, x85, 0xffffffffffffffff);
  let mut x89: u64 = 0;
  let mut x90: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x89, &mut x90, x85, 0xffffffffffffffff);
  let mut x91: u64 = 0;
  let mut x92: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x91, &mut x92, x85, 0xffffffffffffffff);
  let mut x93: u64 = 0;
  let mut x94: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x93, &mut x94, x85, 0xfffffffefffffc2f);
  let mut x95: u64 = 0;
  let mut x96: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x95, &mut x96, 0x0, x94, x91);
  let mut x97: u64 = 0;
  let mut x98: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x97, &mut x98, x96, x92, x89);
  let mut x99: u64 = 0;
  let mut x100: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x99, &mut x100, x98, x90, x87);
  let mut x101: u64 = 0;
  let mut x102: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x101, &mut x102, 0x0, x77, x93);
  let mut x103: u64 = 0;
  let mut x104: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x103, &mut x104, x102, x79, x95);
  let mut x105: u64 = 0;
  let mut x106: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x105, &mut x106, x104, x81, x97);
  let mut x107: u64 = 0;
  let mut x108: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x107, &mut x108, x106, x83, x99);
  let mut x109: u64 = 0;
  let mut x110: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x109, &mut x110, x108, ((x84 as u64) + (x72 as u64)), ((x100 as u64) + x88));
  let mut x111: u64 = 0;
  let mut x112: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x111, &mut x112, x3, 0x7a2000e90a1);
  let mut x113: u64 = 0;
  let mut x114: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x113, &mut x114, 0x0, x112, x3);
  let mut x115: u64 = 0;
  let mut x116: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x115, &mut x116, 0x0, x103, x111);
  let mut x117: u64 = 0;
  let mut x118: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x117, &mut x118, x116, x105, x113);
  let mut x119: u64 = 0;
  let mut x120: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x119, &mut x120, x118, x107, (x114 as u64));
  let mut x121: u64 = 0;
  let mut x122: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x121, &mut x122, x120, x109, (0x0 as u64));
  let mut x123: u64 = 0;
  let mut x124: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x123, &mut x124, x115, 0xd838091dd2253531);
  let mut x125: u64 = 0;
  let mut x126: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x125, &mut x126, x123, 0xffffffffffffffff);
  let mut x127: u64 = 0;
  let mut x128: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x127, &mut x128, x123, 0xffffffffffffffff);
  let mut x129: u64 = 0;
  let mut x130: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x129, &mut x130, x123, 0xffffffffffffffff);
  let mut x131: u64 = 0;
  let mut x132: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x131, &mut x132, x123, 0xfffffffefffffc2f);
  let mut x133: u64 = 0;
  let mut x134: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x133, &mut x134, 0x0, x132, x129);
  let mut x135: u64 = 0;
  let mut x136: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x135, &mut x136, x134, x130, x127);
  let mut x137: u64 = 0;
  let mut x138: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x137, &mut x138, x136, x128, x125);
  let mut x139: u64 = 0;
  let mut x140: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x139, &mut x140, 0x0, x115, x131);
  let mut x141: u64 = 0;
  let mut x142: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x141, &mut x142, x140, x117, x133);
  let mut x143: u64 = 0;
  let mut x144: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x143, &mut x144, x142, x119, x135);
  let mut x145: u64 = 0;
  let mut x146: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x145, &mut x146, x144, x121, x137);
  let mut x147: u64 = 0;
  let mut x148: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x147, &mut x148, x146, ((x122 as u64) + (x110 as u64)), ((x138 as u64) + x126));
  let mut x149: u64 = 0;
  let mut x150: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x149, &mut x150, 0x0, x141, 0xfffffffefffffc2f);
  let mut x151: u64 = 0;
  let mut x152: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x151, &mut x152, x150, x143, 0xffffffffffffffff);
  let mut x153: u64 = 0;
  let mut x154: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x153, &mut x154, x152, x145, 0xffffffffffffffff);
  let mut x155: u64 = 0;
  let mut x156: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x155, &mut x156, x154, x147, 0xffffffffffffffff);
  let mut x157: u64 = 0;
  let mut x158: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x157, &mut x158, x156, (x148 as u64), (0x0 as u64));
  let mut x159: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x159, x158, x149, x141);
  let mut x160: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x160, x158, x151, x143);
  let mut x161: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x161, x158, x153, x145);
  let mut x162: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x162, x158, x155, x147);
  out1[0] = x159;
  out1[1] = x160;
  out1[2] = x161;
  out1[3] = x162;
}

/// The function fiat_secp256k1_nonzero outputs a single non-zero word if the input is non-zero and zero otherwise.
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffffffffffff]
#[inline]
pub fn fiat_secp256k1_nonzero(out1: &mut u64, arg1: &[u64; 4]) -> () {
  let x1: u64 = ((arg1[0]) | ((arg1[1]) | ((arg1[2]) | (arg1[3]))));
  *out1 = x1;
}

/// The function fiat_secp256k1_selectznz is a multi-limb conditional select.
/// Postconditions:
///   eval out1 = (if arg1 = 0 then eval arg2 else eval arg3)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
///   arg3: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
#[inline]
pub fn fiat_secp256k1_selectznz(out1: &mut [u64; 4], arg1: fiat_secp256k1_u1, arg2: &[u64; 4], arg3: &[u64; 4]) -> () {
  let mut x1: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1, arg1, (arg2[0]), (arg3[0]));
  let mut x2: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x2, arg1, (arg2[1]), (arg3[1]));
  let mut x3: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x3, arg1, (arg2[2]), (arg3[2]));
  let mut x4: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x4, arg1, (arg2[3]), (arg3[3]));
  out1[0] = x1;
  out1[1] = x2;
  out1[2] = x3;
  out1[3] = x4;
}

/// The function fiat_secp256k1_to_bytes serializes a field element NOT in the Montgomery domain to bytes in little-endian order.
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..31]
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
#[inline]
pub fn fiat_secp256k1_to_bytes(out1: &mut [u8; 32], arg1: &[u64; 4]) -> () {
  let x1: u64 = (arg1[3]);
  let x2: u64 = (arg1[2]);
  let x3: u64 = (arg1[1]);
  let x4: u64 = (arg1[0]);
  let x5: u8 = ((x4 & (0xff as u64)) as u8);
  let x6: u64 = (x4 >> 8);
  let x7: u8 = ((x6 & (0xff as u64)) as u8);
  let x8: u64 = (x6 >> 8);
  let x9: u8 = ((x8 & (0xff as u64)) as u8);
  let x10: u64 = (x8 >> 8);
  let x11: u8 = ((x10 & (0xff as u64)) as u8);
  let x12: u64 = (x10 >> 8);
  let x13: u8 = ((x12 & (0xff as u64)) as u8);
  let x14: u64 = (x12 >> 8);
  let x15: u8 = ((x14 & (0xff as u64)) as u8);
  let x16: u64 = (x14 >> 8);
  let x17: u8 = ((x16 & (0xff as u64)) as u8);
  let x18: u8 = ((x16 >> 8) as u8);
  let x19: u8 = ((x3 & (0xff as u64)) as u8);
  let x20: u64 = (x3 >> 8);
  let x21: u8 = ((x20 & (0xff as u64)) as u8);
  let x22: u64 = (x20 >> 8);
  let x23: u8 = ((x22 & (0xff as u64)) as u8);
  let x24: u64 = (x22 >> 8);
  let x25: u8 = ((x24 & (0xff as u64)) as u8);
  let x26: u64 = (x24 >> 8);
  let x27: u8 = ((x26 & (0xff as u64)) as u8);
  let x28: u64 = (x26 >> 8);
  let x29: u8 = ((x28 & (0xff as u64)) as u8);
  let x30: u64 = (x28 >> 8);
  let x31: u8 = ((x30 & (0xff as u64)) as u8);
  let x32: u8 = ((x30 >> 8) as u8);
  let x33: u8 = ((x2 & (0xff as u64)) as u8);
  let x34: u64 = (x2 >> 8);
  let x35: u8 = ((x34 & (0xff as u64)) as u8);
  let x36: u64 = (x34 >> 8);
  let x37: u8 = ((x36 & (0xff as u64)) as u8);
  let x38: u64 = (x36 >> 8);
  let x39: u8 = ((x38 & (0xff as u64)) as u8);
  let x40: u64 = (x38 >> 8);
  let x41: u8 = ((x40 & (0xff as u64)) as u8);
  let x42: u64 = (x40 >> 8);
  let x43: u8 = ((x42 & (0xff as u64)) as u8);
  let x44: u64 = (x42 >> 8);
  let x45: u8 = ((x44 & (0xff as u64)) as u8);
  let x46: u8 = ((x44 >> 8) as u8);
  let x47: u8 = ((x1 & (0xff as u64)) as u8);
  let x48: u64 = (x1 >> 8);
  let x49: u8 = ((x48 & (0xff as u64)) as u8);
  let x50: u64 = (x48 >> 8);
  let x51: u8 = ((x50 & (0xff as u64)) as u8);
  let x52: u64 = (x50 >> 8);
  let x53: u8 = ((x52 & (0xff as u64)) as u8);
  let x54: u64 = (x52 >> 8);
  let x55: u8 = ((x54 & (0xff as u64)) as u8);
  let x56: u64 = (x54 >> 8);
  let x57: u8 = ((x56 & (0xff as u64)) as u8);
  let x58: u64 = (x56 >> 8);
  let x59: u8 = ((x58 & (0xff as u64)) as u8);
  let x60: u8 = ((x58 >> 8) as u8);
  out1[0] = x5;
  out1[1] = x7;
  out1[2] = x9;
  out1[3] = x11;
  out1[4] = x13;
  out1[5] = x15;
  out1[6] = x17;
  out1[7] = x18;
  out1[8] = x19;
  out1[9] = x21;
  out1[10] = x23;
  out1[11] = x25;
  out1[12] = x27;
  out1[13] = x29;
  out1[14] = x31;
  out1[15] = x32;
  out1[16] = x33;
  out1[17] = x35;
  out1[18] = x37;
  out1[19] = x39;
  out1[20] = x41;
  out1[21] = x43;
  out1[22] = x45;
  out1[23] = x46;
  out1[24] = x47;
  out1[25] = x49;
  out1[26] = x51;
  out1[27] = x53;
  out1[28] = x55;
  out1[29] = x57;
  out1[30] = x59;
  out1[31] = x60;
}

/// The function fiat_secp256k1_from_bytes deserializes a field element NOT in the Montgomery domain from bytes in little-endian order.
/// Preconditions:
///   0 ≤ bytes_eval arg1 < m
/// Postconditions:
///   eval out1 mod m = bytes_eval arg1 mod m
///   0 ≤ eval out1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
#[inline]
pub fn fiat_secp256k1_from_bytes(out1: &mut [u64; 4], arg1: &[u8; 32]) -> () {
  let x1: u64 = (((arg1[31]) as u64) << 56);
  let x2: u64 = (((arg1[30]) as u64) << 48);
  let x3: u64 = (((arg1[29]) as u64) << 40);
  let x4: u64 = (((arg1[28]) as u64) << 32);
  let x5: u64 = (((arg1[27]) as u64) << 24);
  let x6: u64 = (((arg1[26]) as u64) << 16);
  let x7: u64 = (((arg1[25]) as u64) << 8);
  let x8: u8 = (arg1[24]);
  let x9: u64 = (((arg1[23]) as u64) << 56);
  let x10: u64 = (((arg1[22]) as u64) << 48);
  let x11: u64 = (((arg1[21]) as u64) << 40);
  let x12: u64 = (((arg1[20]) as u64) << 32);
  let x13: u64 = (((arg1[19]) as u64) << 24);
  let x14: u64 = (((arg1[18]) as u64) << 16);
  let x15: u64 = (((arg1[17]) as u64) << 8);
  let x16: u8 = (arg1[16]);
  let x17: u64 = (((arg1[15]) as u64) << 56);
  let x18: u64 = (((arg1[14]) as u64) << 48);
  let x19: u64 = (((arg1[13]) as u64) << 40);
  let x20: u64 = (((arg1[12]) as u64) << 32);
  let x21: u64 = (((arg1[11]) as u64) << 24);
  let x22: u64 = (((arg1[10]) as u64) << 16);
  let x23: u64 = (((arg1[9]) as u64) << 8);
  let x24: u8 = (arg1[8]);
  let x25: u64 = (((arg1[7]) as u64) << 56);
  let x26: u64 = (((arg1[6]) as u64) << 48);
  let x27: u64 = (((arg1[5]) as u64) << 40);
  let x28: u64 = (((arg1[4]) as u64) << 32);
  let x29: u64 = (((arg1[3]) as u64) << 24);
  let x30: u64 = (((arg1[2]) as u64) << 16);
  let x31: u64 = (((arg1[1]) as u64) << 8);
  let x32: u8 = (arg1[0]);
  let x33: u64 = (x31 + (x32 as u64));
  let x34: u64 = (x30 + x33);
  let x35: u64 = (x29 + x34);
  let x36: u64 = (x28 + x35);
  let x37: u64 = (x27 + x36);
  let x38: u64 = (x26 + x37);
  let x39: u64 = (x25 + x38);
  let x40: u64 = (x23 + (x24 as u64));
  let x41: u64 = (x22 + x40);
  let x42: u64 = (x21 + x41);
  let x43: u64 = (x20 + x42);
  let x44: u64 = (x19 + x43);
  let x45: u64 = (x18 + x44);
  let x46: u64 = (x17 + x45);
  let x47: u64 = (x15 + (x16 as u64));
  let x48: u64 = (x14 + x47);
  let x49: u64 = (x13 + x48);
  let x50: u64 = (x12 + x49);
  let x51: u64 = (x11 + x50);
  let x52: u64 = (x10 + x51);
  let x53: u64 = (x9 + x52);
  let x54: u64 = (x7 + (x8 as u64));
  let x55: u64 = (x6 + x54);
  let x56: u64 = (x5 + x55);
  let x57: u64 = (x4 + x56);
  let x58: u64 = (x3 + x57);
  let x59: u64 = (x2 + x58);
  let x60: u64 = (x1 + x59);
  out1[0] = x39;
  out1[1] = x46;
  out1[2] = x53;
  out1[3] = x60;
}

/// The function fiat_secp256k1_set_one returns the field element one in the Montgomery domain.
/// Postconditions:
///   eval (from_montgomery out1) mod m = 1 mod m
///   0 ≤ eval out1 < m
///
/// Input Bounds:
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
#[inline]
pub fn fiat_secp256k1_set_one(out1: &mut [u64; 4]) -> () {
  out1[0] = 0x1000003d1;
  out1[1] = (0x0 as u64);
  out1[2] = (0x0 as u64);
  out1[3] = (0x0 as u64);
}

/// The function fiat_secp256k1_twos_complement_word_to_montgomery_no_encode computes a divstep on wordsized integers.
/// Postconditions:
///   0 ≤ eval arg1 < m
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffffffffffff]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
#[inline]
pub fn fiat_secp256k1_twos_complement_word_to_montgomery_no_encode(out1: &mut [u64; 4], arg1: u64) -> () {
  let x1: fiat_secp256k1_u1 = ((arg1 >> 63) as fiat_secp256k1_u1);
  let x2: u64 = (((((!arg1) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x3: u64 = 0;
  let mut x4: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x3, &mut x4, 0x0, (0x0 as u64), x2);
  let mut x5: u64 = 0;
  let mut x6: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x5, &mut x6, x4, (0x0 as u64), (0x0 as u64));
  let mut x7: u64 = 0;
  let mut x8: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x7, &mut x8, x6, (0x0 as u64), (0x0 as u64));
  let mut x9: u64 = 0;
  let mut x10: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x9, &mut x10, x8, (0x0 as u64), (0x0 as u64));
  let mut x11: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x11, x10, (0x0 as u64), 0xffffffffffffffff);
  let mut x12: u64 = 0;
  let mut x13: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x12, &mut x13, 0x0, x3, (x11 & 0xfffffffefffffc2f));
  let mut x14: u64 = 0;
  let mut x15: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x14, &mut x15, x13, x5, x11);
  let mut x16: u64 = 0;
  let mut x17: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x16, &mut x17, x15, x7, x11);
  let mut x18: u64 = 0;
  let mut x19: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x18, &mut x19, x17, x9, x11);
  let mut x20: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x20, x1, arg1, x12);
  let mut x21: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x21, x1, (0x0 as u64), x14);
  let mut x22: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x22, x1, (0x0 as u64), x16);
  let mut x23: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x23, x1, (0x0 as u64), x18);
  out1[0] = x20;
  out1[1] = x21;
  out1[2] = x22;
  out1[3] = x23;
}

/// The function fiat_secp256k1_msat returns the saturated represtation of the prime modulus.
/// Postconditions:
///   twos_complement_eval out1 = m
///   0 ≤ eval out1 < m
///
/// Input Bounds:
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
#[inline]
pub fn fiat_secp256k1_msat(out1: &mut [u64; 5]) -> () {
  out1[0] = 0xfffffffefffffc2f;
  out1[1] = 0xffffffffffffffff;
  out1[2] = 0xffffffffffffffff;
  out1[3] = 0xffffffffffffffff;
  out1[4] = (0x0 as u64);
}

/// The function fiat_secp256k1_sat_from_bytes deserializes a field element NOT in the Montgomery domain from bytes in little-endian order.
/// Postconditions:
///   0 ≤ eval arg1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
#[inline]
pub fn fiat_secp256k1_sat_from_bytes(out1: &mut [u64; 5], arg1: &[u8; 32]) -> () {
  let x1: u64 = (((arg1[31]) as u64) << 56);
  let x2: u64 = (((arg1[30]) as u64) << 48);
  let x3: u64 = (((arg1[29]) as u64) << 40);
  let x4: u64 = (((arg1[28]) as u64) << 32);
  let x5: u64 = (((arg1[27]) as u64) << 24);
  let x6: u64 = (((arg1[26]) as u64) << 16);
  let x7: u64 = (((arg1[25]) as u64) << 8);
  let x8: u8 = (arg1[24]);
  let x9: u64 = (((arg1[23]) as u64) << 56);
  let x10: u64 = (((arg1[22]) as u64) << 48);
  let x11: u64 = (((arg1[21]) as u64) << 40);
  let x12: u64 = (((arg1[20]) as u64) << 32);
  let x13: u64 = (((arg1[19]) as u64) << 24);
  let x14: u64 = (((arg1[18]) as u64) << 16);
  let x15: u64 = (((arg1[17]) as u64) << 8);
  let x16: u8 = (arg1[16]);
  let x17: u64 = (((arg1[15]) as u64) << 56);
  let x18: u64 = (((arg1[14]) as u64) << 48);
  let x19: u64 = (((arg1[13]) as u64) << 40);
  let x20: u64 = (((arg1[12]) as u64) << 32);
  let x21: u64 = (((arg1[11]) as u64) << 24);
  let x22: u64 = (((arg1[10]) as u64) << 16);
  let x23: u64 = (((arg1[9]) as u64) << 8);
  let x24: u8 = (arg1[8]);
  let x25: u64 = (((arg1[7]) as u64) << 56);
  let x26: u64 = (((arg1[6]) as u64) << 48);
  let x27: u64 = (((arg1[5]) as u64) << 40);
  let x28: u64 = (((arg1[4]) as u64) << 32);
  let x29: u64 = (((arg1[3]) as u64) << 24);
  let x30: u64 = (((arg1[2]) as u64) << 16);
  let x31: u64 = (((arg1[1]) as u64) << 8);
  let x32: u8 = (arg1[0]);
  let x33: u64 = (x31 + (x32 as u64));
  let x34: u64 = (x30 + x33);
  let x35: u64 = (x29 + x34);
  let x36: u64 = (x28 + x35);
  let x37: u64 = (x27 + x36);
  let x38: u64 = (x26 + x37);
  let x39: u64 = (x25 + x38);
  let x40: u64 = (x23 + (x24 as u64));
  let x41: u64 = (x22 + x40);
  let x42: u64 = (x21 + x41);
  let x43: u64 = (x20 + x42);
  let x44: u64 = (x19 + x43);
  let x45: u64 = (x18 + x44);
  let x46: u64 = (x17 + x45);
  let x47: u64 = (x15 + (x16 as u64));
  let x48: u64 = (x14 + x47);
  let x49: u64 = (x13 + x48);
  let x50: u64 = (x12 + x49);
  let x51: u64 = (x11 + x50);
  let x52: u64 = (x10 + x51);
  let x53: u64 = (x9 + x52);
  let x54: u64 = (x7 + (x8 as u64));
  let x55: u64 = (x6 + x54);
  let x56: u64 = (x5 + x55);
  let x57: u64 = (x4 + x56);
  let x58: u64 = (x3 + x57);
  let x59: u64 = (x2 + x58);
  let x60: u64 = (x1 + x59);
  out1[0] = x39;
  out1[1] = x46;
  out1[2] = x53;
  out1[3] = x60;
  out1[4] = (0x0 as u64);
}

/// The function fiat_secp256k1_divstep computes a divstep.
/// Preconditions:
///   0 ≤ eval arg4 < m
///   0 ≤ eval arg5 < m
/// Postconditions:
///   out1 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then 1 - arg1 else 1 + arg1)
///   twos_complement_eval out2 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then twos_complement_eval arg3 else twos_complement_eval arg2)
///   twos_complement_eval out3 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then ⌊(twos_complement_eval arg3 - twos_complement_eval arg2) / 2⌋ else ⌊(twos_complement_eval arg3 + (twos_complement_eval arg3 mod 2) * twos_complement_eval arg2) / 2⌋)
///   eval (from_montgomery out4) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (2 * eval (from_montgomery arg5)) mod m else (2 * eval (from_montgomery arg4)) mod m)
///   eval (from_montgomery out5) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (eval (from_montgomery arg4) - eval (from_montgomery arg4)) mod m else (eval (from_montgomery arg5) + (twos_complement_eval arg3 mod 2) * eval (from_montgomery arg4)) mod m)
///   0 ≤ eval out5 < m
///   0 ≤ eval out4 < m
///   0 ≤ eval out2 < m
///   0 ≤ eval out3 < m
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffffffffffff]
///   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
///   arg3: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
///   arg4: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
///   arg5: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffffffffffff]
///   out2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
///   out3: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
///   out4: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
///   out5: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
#[inline]
pub fn fiat_secp256k1_divstep(out1: &mut u64, out2: &mut [u64; 5], out3: &mut [u64; 5], out4: &mut [u64; 4], out5: &mut [u64; 4], arg1: u64, arg2: &[u64; 5], arg3: &[u64; 5], arg4: &[u64; 4], arg5: &[u64; 4]) -> () {
  let mut x1: u64 = 0;
  let mut x2: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1, &mut x2, 0x0, (!arg1), (0x1 as u64));
  let x3: fiat_secp256k1_u1 = (((x1 >> 63) as fiat_secp256k1_u1) & (((arg3[0]) & (0x1 as u64)) as fiat_secp256k1_u1));
  let mut x4: u64 = 0;
  let mut x5: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x4, &mut x5, 0x0, (!arg1), (0x1 as u64));
  let mut x6: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x6, x3, arg1, x4);
  let mut x7: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x7, x3, (arg2[0]), (arg3[0]));
  let mut x8: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x8, x3, (arg2[1]), (arg3[1]));
  let mut x9: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x9, x3, (arg2[2]), (arg3[2]));
  let mut x10: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x10, x3, (arg2[3]), (arg3[3]));
  let mut x11: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x11, x3, (arg2[4]), (arg3[4]));
  let mut x12: u64 = 0;
  let mut x13: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x12, &mut x13, 0x0, (0x1 as u64), (!(arg2[0])));
  let mut x14: u64 = 0;
  let mut x15: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x14, &mut x15, x13, (0x0 as u64), (!(arg2[1])));
  let mut x16: u64 = 0;
  let mut x17: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x16, &mut x17, x15, (0x0 as u64), (!(arg2[2])));
  let mut x18: u64 = 0;
  let mut x19: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x18, &mut x19, x17, (0x0 as u64), (!(arg2[3])));
  let mut x20: u64 = 0;
  let mut x21: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x20, &mut x21, x19, (0x0 as u64), (!(arg2[4])));
  let mut x22: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x22, x3, (arg3[0]), x12);
  let mut x23: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x23, x3, (arg3[1]), x14);
  let mut x24: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x24, x3, (arg3[2]), x16);
  let mut x25: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x25, x3, (arg3[3]), x18);
  let mut x26: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x26, x3, (arg3[4]), x20);
  let mut x27: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x27, x3, (arg4[0]), (arg5[0]));
  let mut x28: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x28, x3, (arg4[1]), (arg5[1]));
  let mut x29: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x29, x3, (arg4[2]), (arg5[2]));
  let mut x30: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x30, x3, (arg4[3]), (arg5[3]));
  let mut x31: u64 = 0;
  let mut x32: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x31, &mut x32, 0x0, x27, x27);
  let mut x33: u64 = 0;
  let mut x34: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x33, &mut x34, x32, x28, x28);
  let mut x35: u64 = 0;
  let mut x36: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x35, &mut x36, x34, x29, x29);
  let mut x37: u64 = 0;
  let mut x38: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x37, &mut x38, x36, x30, x30);
  let mut x39: u64 = 0;
  let mut x40: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x39, &mut x40, 0x0, x31, 0xfffffffefffffc2f);
  let mut x41: u64 = 0;
  let mut x42: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x41, &mut x42, x40, x33, 0xffffffffffffffff);
  let mut x43: u64 = 0;
  let mut x44: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x43, &mut x44, x42, x35, 0xffffffffffffffff);
  let mut x45: u64 = 0;
  let mut x46: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x45, &mut x46, x44, x37, 0xffffffffffffffff);
  let mut x47: u64 = 0;
  let mut x48: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x47, &mut x48, x46, (x38 as u64), (0x0 as u64));
  let x49: u64 = (arg4[3]);
  let x50: u64 = (arg4[2]);
  let x51: u64 = (arg4[1]);
  let x52: u64 = (arg4[0]);
  let mut x53: u64 = 0;
  let mut x54: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x53, &mut x54, 0x0, (0x0 as u64), x52);
  let mut x55: u64 = 0;
  let mut x56: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x55, &mut x56, x54, (0x0 as u64), x51);
  let mut x57: u64 = 0;
  let mut x58: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x57, &mut x58, x56, (0x0 as u64), x50);
  let mut x59: u64 = 0;
  let mut x60: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x59, &mut x60, x58, (0x0 as u64), x49);
  let mut x61: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x61, x60, (0x0 as u64), 0xffffffffffffffff);
  let mut x62: u64 = 0;
  let mut x63: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x62, &mut x63, 0x0, x53, (x61 & 0xfffffffefffffc2f));
  let mut x64: u64 = 0;
  let mut x65: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x64, &mut x65, x63, x55, x61);
  let mut x66: u64 = 0;
  let mut x67: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x66, &mut x67, x65, x57, x61);
  let mut x68: u64 = 0;
  let mut x69: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x68, &mut x69, x67, x59, x61);
  let mut x70: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x70, x3, (arg5[0]), x62);
  let mut x71: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x71, x3, (arg5[1]), x64);
  let mut x72: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x72, x3, (arg5[2]), x66);
  let mut x73: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x73, x3, (arg5[3]), x68);
  let x74: fiat_secp256k1_u1 = ((x22 & (0x1 as u64)) as fiat_secp256k1_u1);
  let mut x75: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x75, x74, (0x0 as u64), x7);
  let mut x76: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x76, x74, (0x0 as u64), x8);
  let mut x77: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x77, x74, (0x0 as u64), x9);
  let mut x78: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x78, x74, (0x0 as u64), x10);
  let mut x79: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x79, x74, (0x0 as u64), x11);
  let mut x80: u64 = 0;
  let mut x81: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x80, &mut x81, 0x0, x22, x75);
  let mut x82: u64 = 0;
  let mut x83: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x82, &mut x83, x81, x23, x76);
  let mut x84: u64 = 0;
  let mut x85: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x84, &mut x85, x83, x24, x77);
  let mut x86: u64 = 0;
  let mut x87: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x86, &mut x87, x85, x25, x78);
  let mut x88: u64 = 0;
  let mut x89: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x88, &mut x89, x87, x26, x79);
  let mut x90: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x90, x74, (0x0 as u64), x27);
  let mut x91: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x91, x74, (0x0 as u64), x28);
  let mut x92: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x92, x74, (0x0 as u64), x29);
  let mut x93: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x93, x74, (0x0 as u64), x30);
  let mut x94: u64 = 0;
  let mut x95: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x94, &mut x95, 0x0, x70, x90);
  let mut x96: u64 = 0;
  let mut x97: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x96, &mut x97, x95, x71, x91);
  let mut x98: u64 = 0;
  let mut x99: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x98, &mut x99, x97, x72, x92);
  let mut x100: u64 = 0;
  let mut x101: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x100, &mut x101, x99, x73, x93);
  let mut x102: u64 = 0;
  let mut x103: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x102, &mut x103, 0x0, x94, 0xfffffffefffffc2f);
  let mut x104: u64 = 0;
  let mut x105: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x104, &mut x105, x103, x96, 0xffffffffffffffff);
  let mut x106: u64 = 0;
  let mut x107: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x106, &mut x107, x105, x98, 0xffffffffffffffff);
  let mut x108: u64 = 0;
  let mut x109: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x108, &mut x109, x107, x100, 0xffffffffffffffff);
  let mut x110: u64 = 0;
  let mut x111: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x110, &mut x111, x109, (x101 as u64), (0x0 as u64));
  let mut x112: u64 = 0;
  let mut x113: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x112, &mut x113, 0x0, x6, (0x1 as u64));
  let x114: u64 = ((x80 >> 1) | ((x82 << 63) & 0xffffffffffffffff));
  let x115: u64 = ((x82 >> 1) | ((x84 << 63) & 0xffffffffffffffff));
  let x116: u64 = ((x84 >> 1) | ((x86 << 63) & 0xffffffffffffffff));
  let x117: u64 = ((x86 >> 1) | ((x88 << 63) & 0xffffffffffffffff));
  let x118: u64 = ((x88 & 0x8000000000000000) | (x88 >> 1));
  let mut x119: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x119, x48, x39, x31);
  let mut x120: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x120, x48, x41, x33);
  let mut x121: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x121, x48, x43, x35);
  let mut x122: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x122, x48, x45, x37);
  let mut x123: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x123, x111, x102, x94);
  let mut x124: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x124, x111, x104, x96);
  let mut x125: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x125, x111, x106, x98);
  let mut x126: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x126, x111, x108, x100);
  *out1 = x112;
  out2[0] = x7;
  out2[1] = x8;
  out2[2] = x9;
  out2[3] = x10;
  out2[4] = x11;
  out3[0] = x114;
  out3[1] = x115;
  out3[2] = x116;
  out3[3] = x117;
  out3[4] = x118;
  out4[0] = x119;
  out4[1] = x120;
  out4[2] = x121;
  out4[3] = x122;
  out5[0] = x123;
  out5[1] = x124;
  out5[2] = x125;
  out5[3] = x126;
}

/// The function fiat_secp256k1_divstep_precomp returns the precomputed value for Bernstein-Yang-inversion (in montgomery form).
/// Postconditions:
///   eval (from_montgomery out1) = ⌊(m - 1) / 2⌋^(if (log2 m) + 1 < 46 then ⌊(49 * ((log2 m) + 1) + 80) / 17⌋ else ⌊(49 * ((log2 m) + 1) + 57) / 17⌋)
///   0 ≤ eval out1 < m
///
/// Input Bounds:
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
#[inline]
pub fn fiat_secp256k1_divstep_precomp(out1: &mut [u64; 4]) -> () {
  out1[0] = 0xf201a41831525e0a;
  out1[1] = 0x9953f9ddcd648d85;
  out1[2] = 0xe86029463db210a9;
  out1[3] = 0x24fb8a3104b03709;
}

/// The function fiat_secp256k1_twos_complement_word_full_divstep computes a divstep on wordsized integers.
/// Postconditions:
///   0 ≤ eval arg1 < m
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffffffffffff]
///   arg2: [0x0 ~> 0xffffffffffffffff]
///   arg3: [0x0 ~> 0xffffffffffffffff]
///   arg4: [0x0 ~> 0xffffffffffffffff]
///   arg5: [0x0 ~> 0xffffffffffffffff]
///   arg6: [0x0 ~> 0xffffffffffffffff]
///   arg7: [0x0 ~> 0xffffffffffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffffffffffff]
///   out2: [0x0 ~> 0xffffffffffffffff]
///   out3: [0x0 ~> 0xffffffffffffffff]
///   out4: [0x0 ~> 0xffffffffffffffff]
///   out5: [0x0 ~> 0xffffffffffffffff]
///   out6: [0x0 ~> 0xffffffffffffffff]
///   out7: [0x0 ~> 0xffffffffffffffff]
#[inline]
pub fn fiat_secp256k1_twos_complement_word_full_divstep(out1: &mut u64, out2: &mut u64, out3: &mut u64, out4: &mut u64, out5: &mut u64, out6: &mut u64, out7: &mut u64, arg1: u64, arg2: u64, arg3: u64, arg4: u64, arg5: u64, arg6: u64, arg7: u64) -> () {
  let x1: u64 = (((((!arg1) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x2: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x2, (((x1 >> 63) as fiat_secp256k1_u1) & ((arg3 & (0x1 as u64)) as fiat_secp256k1_u1)), arg1, (((((!arg1) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x3: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x3, (((x1 >> 63) as fiat_secp256k1_u1) & ((arg3 & (0x1 as u64)) as fiat_secp256k1_u1)), arg2, arg3);
  let mut x4: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x4, (((x1 >> 63) as fiat_secp256k1_u1) & ((arg3 & (0x1 as u64)) as fiat_secp256k1_u1)), arg3, (((((!arg2) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x5: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x5, (((x1 >> 63) as fiat_secp256k1_u1) & ((arg3 & (0x1 as u64)) as fiat_secp256k1_u1)), arg4, arg6);
  let mut x6: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x6, (((x1 >> 63) as fiat_secp256k1_u1) & ((arg3 & (0x1 as u64)) as fiat_secp256k1_u1)), arg5, arg7);
  let mut x7: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x7, (((x1 >> 63) as fiat_secp256k1_u1) & ((arg3 & (0x1 as u64)) as fiat_secp256k1_u1)), arg6, (((((!arg4) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x8: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x8, (((x1 >> 63) as fiat_secp256k1_u1) & ((arg3 & (0x1 as u64)) as fiat_secp256k1_u1)), arg7, (((((!arg5) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x9: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x9, ((x4 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x3);
  let mut x10: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x10, ((x4 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x5);
  let mut x11: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x11, ((x4 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x6);
  let x12: u64 = ((((0x1 as u128) + (x2 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let x13: u64 = ((((((x4 as u128) + (x9 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x4 as u128) + (x9 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1));
  let x14: u64 = ((((x5 as u128) + (x5 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let x15: u64 = ((((x6 as u128) + (x6 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let x16: u64 = ((((x7 as u128) + (x10 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let x17: u64 = ((((x8 as u128) + (x11 as u128)) & (0xffffffffffffffff as u128)) as u64);
  *out1 = x12;
  *out2 = x3;
  *out3 = x13;
  *out4 = x14;
  *out5 = x15;
  *out6 = x16;
  *out7 = x17;
}

/// The function fiat_secp256k1_asr_mw_sub2 computes a divstep on wordsized integers.
/// Postconditions:
///   0 ≤ eval arg1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
#[inline]
pub fn fiat_secp256k1_asr_mw_sub2(out1: &mut [u64; 6], arg1: &[u64; 6]) -> () {
  let mut x1: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1, (((arg1[5]) >> 63) as fiat_secp256k1_u1), (0x0 as u64), 0xfffffffffffffffc);
  let x2: u64 = (((arg1[0]) >> 62) | (((arg1[1]) << 2) & 0xffffffffffffffff));
  let x3: u64 = (((arg1[1]) >> 62) | (((arg1[2]) << 2) & 0xffffffffffffffff));
  let x4: u64 = (((arg1[2]) >> 62) | (((arg1[3]) << 2) & 0xffffffffffffffff));
  let x5: u64 = (((arg1[3]) >> 62) | (((arg1[4]) << 2) & 0xffffffffffffffff));
  let x6: u64 = (((arg1[4]) >> 62) | (((arg1[5]) << 2) & 0xffffffffffffffff));
  let x7: u64 = (x1 | ((arg1[5]) >> 62));
  out1[0] = x2;
  out1[1] = x3;
  out1[2] = x4;
  out1[3] = x5;
  out1[4] = x6;
  out1[5] = x7;
}

/// The function fiat_secp256k1_sat_add computes a divstep on wordsized integers.
/// Postconditions:
///   0 ≤ eval arg1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
///   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
#[inline]
pub fn fiat_secp256k1_sat_add(out1: &mut [u64; 6], arg1: &[u64; 6], arg2: &[u64; 6]) -> () {
  let mut x1: u64 = 0;
  let mut x2: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1, &mut x2, 0x0, (arg1[0]), (arg2[0]));
  let mut x3: u64 = 0;
  let mut x4: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x3, &mut x4, x2, (arg1[1]), (arg2[1]));
  let mut x5: u64 = 0;
  let mut x6: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x5, &mut x6, x4, (arg1[2]), (arg2[2]));
  let mut x7: u64 = 0;
  let mut x8: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x7, &mut x8, x6, (arg1[3]), (arg2[3]));
  let mut x9: u64 = 0;
  let mut x10: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x9, &mut x10, x8, (arg1[4]), (arg2[4]));
  let mut x11: u64 = 0;
  let mut x12: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x11, &mut x12, x10, (arg1[5]), (arg2[5]));
  out1[0] = x1;
  out1[1] = x3;
  out1[2] = x5;
  out1[3] = x7;
  out1[4] = x9;
  out1[5] = x11;
}

/// The function fiat_secp256k1_word_sat_mul computes a divstep on wordsized integers.
/// Postconditions:
///   0 ≤ eval arg1 < m
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffffffffffff]
///   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
#[inline]
pub fn fiat_secp256k1_word_sat_mul(out1: &mut [u64; 6], arg1: u64, arg2: &[u64; 5]) -> () {
  let mut x1: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1, (((arg2[4]) >> 63) as fiat_secp256k1_u1), (0x0 as u64), 0xffffffffffffffff);
  let mut x2: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x2, ((arg1 >> 63) as fiat_secp256k1_u1), (0x0 as u64), 0xffffffffffffffff);
  let mut x3: u64 = 0;
  let mut x4: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x3, &mut x4, x2, (arg2[0]));
  let mut x5: u64 = 0;
  let mut x6: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x5, &mut x6, x2, (arg2[1]));
  let mut x7: u64 = 0;
  let mut x8: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x7, &mut x8, x2, (arg2[0]));
  let mut x9: u64 = 0;
  let mut x10: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x9, &mut x10, x2, (arg2[2]));
  let mut x11: u64 = 0;
  let mut x12: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x11, &mut x12, x2, (arg2[1]));
  let mut x13: u64 = 0;
  let mut x14: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x13, &mut x14, x2, (arg2[0]));
  let mut x15: u64 = 0;
  let mut x16: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x15, &mut x16, x2, (arg2[3]));
  let mut x17: u64 = 0;
  let mut x18: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x17, &mut x18, x2, (arg2[2]));
  let mut x19: u64 = 0;
  let mut x20: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x19, &mut x20, x2, (arg2[1]));
  let mut x21: u64 = 0;
  let mut x22: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x21, &mut x22, x2, (arg2[0]));
  let mut x23: u64 = 0;
  let mut x24: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x23, &mut x24, x2, (arg2[4]));
  let mut x25: u64 = 0;
  let mut x26: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x25, &mut x26, x2, (arg2[3]));
  let mut x27: u64 = 0;
  let mut x28: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x27, &mut x28, x2, (arg2[2]));
  let mut x29: u64 = 0;
  let mut x30: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x29, &mut x30, x2, (arg2[1]));
  let mut x31: u64 = 0;
  let mut x32: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x31, &mut x32, x2, (arg2[0]));
  let mut x33: u64 = 0;
  let mut x34: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x33, &mut x34, arg1, x1);
  let mut x35: u64 = 0;
  let mut x36: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x35, &mut x36, arg1, (arg2[4]));
  let mut x37: u64 = 0;
  let mut x38: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x37, &mut x38, arg1, (arg2[3]));
  let mut x39: u64 = 0;
  let mut x40: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x39, &mut x40, arg1, (arg2[2]));
  let mut x41: u64 = 0;
  let mut x42: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x41, &mut x42, arg1, (arg2[1]));
  let mut x43: u64 = 0;
  let mut x44: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x43, &mut x44, arg1, (arg2[0]));
  let mut x45: u64 = 0;
  let mut x46: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x45, &mut x46, 0x0, x36, x3);
  let mut x47: u64 = 0;
  let mut x48: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x47, &mut x48, 0x0, x45, x5);
  let mut x49: u64 = 0;
  let mut x50: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x49, &mut x50, 0x0, x38, x7);
  let mut x51: u64 = 0;
  let mut x52: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x51, &mut x52, x50, x47, x8);
  let mut x53: u64 = 0;
  let mut x54: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x53, &mut x54, 0x0, x49, x11);
  let mut x55: u64 = 0;
  let mut x56: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x55, &mut x56, x54, x51, x9);
  let mut x57: u64 = 0;
  let mut x58: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x57, &mut x58, 0x0, x40, x13);
  let mut x59: u64 = 0;
  let mut x60: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x59, &mut x60, x58, x53, x14);
  let mut x61: u64 = 0;
  let mut x62: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x61, &mut x62, x60, x55, x12);
  let mut x63: u64 = 0;
  let mut x64: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x63, &mut x64, 0x0, x57, x19);
  let mut x65: u64 = 0;
  let mut x66: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x65, &mut x66, x64, x59, x17);
  let mut x67: u64 = 0;
  let mut x68: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x67, &mut x68, x66, x61, x15);
  let mut x69: u64 = 0;
  let mut x70: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x69, &mut x70, 0x0, x42, x21);
  let mut x71: u64 = 0;
  let mut x72: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x71, &mut x72, x70, x63, x22);
  let mut x73: u64 = 0;
  let mut x74: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x73, &mut x74, x72, x65, x20);
  let mut x75: u64 = 0;
  let mut x76: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x75, &mut x76, x74, x67, x18);
  let mut x77: u64 = 0;
  let mut x78: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x77, &mut x78, 0x0, x69, x29);
  let mut x79: u64 = 0;
  let mut x80: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x79, &mut x80, x78, x71, x27);
  let mut x81: u64 = 0;
  let mut x82: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x81, &mut x82, x80, x73, x25);
  let mut x83: u64 = 0;
  let mut x84: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x83, &mut x84, x82, x75, x23);
  let mut x85: u64 = 0;
  let mut x86: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x85, &mut x86, 0x0, x44, x31);
  let mut x87: u64 = 0;
  let mut x88: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x87, &mut x88, x86, x77, x32);
  let mut x89: u64 = 0;
  let mut x90: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x89, &mut x90, x88, x79, x30);
  let mut x91: u64 = 0;
  let mut x92: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x91, &mut x92, x90, x81, x28);
  let mut x93: u64 = 0;
  let mut x94: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x93, &mut x94, x92, x83, x26);
  let mut x95: u64 = 0;
  let mut x96: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x95, &mut x96, 0x0, x85, x41);
  let mut x97: u64 = 0;
  let mut x98: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x97, &mut x98, x96, x87, x39);
  let mut x99: u64 = 0;
  let mut x100: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x99, &mut x100, x98, x89, x37);
  let mut x101: u64 = 0;
  let mut x102: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x101, &mut x102, x100, x91, x35);
  let mut x103: u64 = 0;
  let mut x104: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x103, &mut x104, x102, x93, x33);
  out1[0] = x43;
  out1[1] = x95;
  out1[2] = x97;
  out1[3] = x99;
  out1[4] = x101;
  out1[5] = x103;
}

/// The function fiat_secp256k1_jumpdivstep_precomp returns the precomputed value for the jump-version of Bernstein-Yang-inversion (in montgomery form).
/// Postconditions:
///   eval (from_montgomery out1) = ⌊(m - 1) / 2⌋^(if (log2 m) + 1 < 46 then ⌊(49 * ((log2 m) + 1) + 80) / 17⌋ else ⌊(49 * ((log2 m) + 1) + 57) / 17⌋)
///   0 ≤ eval out1 < m
///
/// Input Bounds:
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
#[inline]
pub fn fiat_secp256k1_jumpdivstep_precomp(out1: &mut [u64; 4]) -> () {
  out1[0] = 0x4d56d88874522dcb;
  out1[1] = 0x9a5860f27c0e3117;
  out1[2] = 0x6fa364e0a126570c;
  out1[3] = 0x38896b47c844e9ab;
}

/// The function fiat_secp256k1_outer_loop_body computes the body of the outer loop in BY-inversion (jumpdivstep version).
/// Postconditions:
///   0 ≤ eval arg1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
///   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
///   arg3: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
///   arg4: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
///   out2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
///   out3: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
///   out4: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
#[inline]
pub fn fiat_secp256k1_outer_loop_body(out1: &mut [u64; 5], out2: &mut [u64; 5], out3: &mut [u64; 4], out4: &mut [u64; 4], arg1: &[u64; 5], arg2: &[u64; 5], arg3: &[u64; 4], arg4: &[u64; 4]) -> () {
  let mut x1: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1, (((arg2[0]) & (0x1 as u64)) as fiat_secp256k1_u1), (0x1 as u64), 0xffffffffffffffff);
  let mut x2: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x2, (((arg2[0]) & (0x1 as u64)) as fiat_secp256k1_u1), (arg1[0]), (arg2[0]));
  let mut x3: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x3, (((arg2[0]) & (0x1 as u64)) as fiat_secp256k1_u1), (arg2[0]), (((((!(arg1[0])) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x4: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_cmovznz_u1(&mut x4, (((arg2[0]) & (0x1 as u64)) as fiat_secp256k1_u1), 0x1, 0x0);
  let mut x5: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_cmovznz_u1(&mut x5, (((arg2[0]) & (0x1 as u64)) as fiat_secp256k1_u1), 0x0, 0x1);
  let mut x6: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x6, (((arg2[0]) & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), 0xffffffffffffffff);
  let mut x7: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_cmovznz_u1(&mut x7, (((arg2[0]) & (0x1 as u64)) as fiat_secp256k1_u1), 0x1, 0x0);
  let mut x8: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x8, ((x3 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x2);
  let mut x9: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_cmovznz_u1(&mut x9, ((x3 & (0x1 as u64)) as fiat_secp256k1_u1), 0x0, x4);
  let mut x10: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_cmovznz_u1(&mut x10, ((x3 & (0x1 as u64)) as fiat_secp256k1_u1), 0x0, x5);
  let x11: u64 = (((((!((((0x1 as u128) + (x1 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x12: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x12, (((x11 >> 63) as fiat_secp256k1_u1) & ((((((((x3 as u128) + (x8 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x3 as u128) + (x8 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x1 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x1 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x13: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x13, (((x11 >> 63) as fiat_secp256k1_u1) & ((((((((x3 as u128) + (x8 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x3 as u128) + (x8 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x2, ((((((x3 as u128) + (x8 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x3 as u128) + (x8 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x14: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x14, (((x11 >> 63) as fiat_secp256k1_u1) & ((((((((x3 as u128) + (x8 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x3 as u128) + (x8 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x3 as u128) + (x8 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x3 as u128) + (x8 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x2) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x15: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x15, (((x11 >> 63) as fiat_secp256k1_u1) & ((((((((x3 as u128) + (x8 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x3 as u128) + (x8 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((x4 as u64) + (x4 as u64)), ((((x6 as u128) + (x9 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x16: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x16, (((x11 >> 63) as fiat_secp256k1_u1) & ((((((((x3 as u128) + (x8 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x3 as u128) + (x8 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((x5 as u64) + (x5 as u64)), ((x7 as u64) + (x10 as u64)));
  let mut x17: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x17, (((x11 >> 63) as fiat_secp256k1_u1) & ((((((((x3 as u128) + (x8 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x3 as u128) + (x8 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x6 as u128) + (x9 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((x4 as u64) + (x4 as u64))) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x18: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x18, (((x11 >> 63) as fiat_secp256k1_u1) & ((((((((x3 as u128) + (x8 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x3 as u128) + (x8 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((x7 as u64) + (x10 as u64)), (((((!((x5 as u64) + (x5 as u64))) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x19: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x19, ((x14 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x13);
  let mut x20: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x20, ((x14 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x15);
  let mut x21: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x21, ((x14 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x16);
  let x22: u64 = (((((!((((0x1 as u128) + (x12 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x23: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x23, (((x22 >> 63) as fiat_secp256k1_u1) & ((((((((x14 as u128) + (x19 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x14 as u128) + (x19 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x12 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x12 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x24: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x24, (((x22 >> 63) as fiat_secp256k1_u1) & ((((((((x14 as u128) + (x19 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x14 as u128) + (x19 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x13, ((((((x14 as u128) + (x19 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x14 as u128) + (x19 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x25: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x25, (((x22 >> 63) as fiat_secp256k1_u1) & ((((((((x14 as u128) + (x19 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x14 as u128) + (x19 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x14 as u128) + (x19 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x14 as u128) + (x19 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x13) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x26: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x26, (((x22 >> 63) as fiat_secp256k1_u1) & ((((((((x14 as u128) + (x19 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x14 as u128) + (x19 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x15 as u128) + (x15 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x17 as u128) + (x20 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x27: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x27, (((x22 >> 63) as fiat_secp256k1_u1) & ((((((((x14 as u128) + (x19 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x14 as u128) + (x19 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), (x16 + x16), ((((x18 as u128) + (x21 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x28: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x28, (((x22 >> 63) as fiat_secp256k1_u1) & ((((((((x14 as u128) + (x19 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x14 as u128) + (x19 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x17 as u128) + (x20 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x15 as u128) + (x15 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x29: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x29, (((x22 >> 63) as fiat_secp256k1_u1) & ((((((((x14 as u128) + (x19 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x14 as u128) + (x19 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x18 as u128) + (x21 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!(x16 + x16)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x30: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x30, ((x25 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x24);
  let mut x31: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x31, ((x25 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x26);
  let mut x32: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x32, ((x25 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x27);
  let x33: u64 = (((((!((((0x1 as u128) + (x23 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x34: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x34, (((x33 >> 63) as fiat_secp256k1_u1) & ((((((((x25 as u128) + (x30 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x25 as u128) + (x30 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x23 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x23 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x35: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x35, (((x33 >> 63) as fiat_secp256k1_u1) & ((((((((x25 as u128) + (x30 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x25 as u128) + (x30 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x24, ((((((x25 as u128) + (x30 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x25 as u128) + (x30 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x36: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x36, (((x33 >> 63) as fiat_secp256k1_u1) & ((((((((x25 as u128) + (x30 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x25 as u128) + (x30 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x25 as u128) + (x30 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x25 as u128) + (x30 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x24) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x37: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x37, (((x33 >> 63) as fiat_secp256k1_u1) & ((((((((x25 as u128) + (x30 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x25 as u128) + (x30 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x26 as u128) + (x26 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x28 as u128) + (x31 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x38: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x38, (((x33 >> 63) as fiat_secp256k1_u1) & ((((((((x25 as u128) + (x30 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x25 as u128) + (x30 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x27 as u128) + (x27 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x29 as u128) + (x32 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x39: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x39, (((x33 >> 63) as fiat_secp256k1_u1) & ((((((((x25 as u128) + (x30 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x25 as u128) + (x30 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x28 as u128) + (x31 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x26 as u128) + (x26 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x40: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x40, (((x33 >> 63) as fiat_secp256k1_u1) & ((((((((x25 as u128) + (x30 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x25 as u128) + (x30 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x29 as u128) + (x32 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x27 as u128) + (x27 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x41: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x41, ((x36 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x35);
  let mut x42: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x42, ((x36 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x37);
  let mut x43: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x43, ((x36 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x38);
  let x44: u64 = (((((!((((0x1 as u128) + (x34 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x45: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x45, (((x44 >> 63) as fiat_secp256k1_u1) & ((((((((x36 as u128) + (x41 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x36 as u128) + (x41 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x34 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x34 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x46: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x46, (((x44 >> 63) as fiat_secp256k1_u1) & ((((((((x36 as u128) + (x41 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x36 as u128) + (x41 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x35, ((((((x36 as u128) + (x41 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x36 as u128) + (x41 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x47: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x47, (((x44 >> 63) as fiat_secp256k1_u1) & ((((((((x36 as u128) + (x41 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x36 as u128) + (x41 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x36 as u128) + (x41 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x36 as u128) + (x41 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x35) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x48: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x48, (((x44 >> 63) as fiat_secp256k1_u1) & ((((((((x36 as u128) + (x41 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x36 as u128) + (x41 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x37 as u128) + (x37 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x39 as u128) + (x42 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x49: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x49, (((x44 >> 63) as fiat_secp256k1_u1) & ((((((((x36 as u128) + (x41 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x36 as u128) + (x41 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x38 as u128) + (x38 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x40 as u128) + (x43 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x50: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x50, (((x44 >> 63) as fiat_secp256k1_u1) & ((((((((x36 as u128) + (x41 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x36 as u128) + (x41 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x39 as u128) + (x42 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x37 as u128) + (x37 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x51: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x51, (((x44 >> 63) as fiat_secp256k1_u1) & ((((((((x36 as u128) + (x41 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x36 as u128) + (x41 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x40 as u128) + (x43 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x38 as u128) + (x38 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x52: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x52, ((x47 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x46);
  let mut x53: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x53, ((x47 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x48);
  let mut x54: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x54, ((x47 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x49);
  let x55: u64 = (((((!((((0x1 as u128) + (x45 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x56: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x56, (((x55 >> 63) as fiat_secp256k1_u1) & ((((((((x47 as u128) + (x52 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x47 as u128) + (x52 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x45 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x45 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x57: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x57, (((x55 >> 63) as fiat_secp256k1_u1) & ((((((((x47 as u128) + (x52 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x47 as u128) + (x52 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x46, ((((((x47 as u128) + (x52 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x47 as u128) + (x52 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x58: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x58, (((x55 >> 63) as fiat_secp256k1_u1) & ((((((((x47 as u128) + (x52 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x47 as u128) + (x52 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x47 as u128) + (x52 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x47 as u128) + (x52 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x46) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x59: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x59, (((x55 >> 63) as fiat_secp256k1_u1) & ((((((((x47 as u128) + (x52 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x47 as u128) + (x52 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x48 as u128) + (x48 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x50 as u128) + (x53 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x60: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x60, (((x55 >> 63) as fiat_secp256k1_u1) & ((((((((x47 as u128) + (x52 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x47 as u128) + (x52 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x49 as u128) + (x49 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x51 as u128) + (x54 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x61: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x61, (((x55 >> 63) as fiat_secp256k1_u1) & ((((((((x47 as u128) + (x52 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x47 as u128) + (x52 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x50 as u128) + (x53 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x48 as u128) + (x48 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x62: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x62, (((x55 >> 63) as fiat_secp256k1_u1) & ((((((((x47 as u128) + (x52 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x47 as u128) + (x52 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x51 as u128) + (x54 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x49 as u128) + (x49 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x63: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x63, ((x58 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x57);
  let mut x64: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x64, ((x58 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x59);
  let mut x65: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x65, ((x58 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x60);
  let x66: u64 = (((((!((((0x1 as u128) + (x56 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x67: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x67, (((x66 >> 63) as fiat_secp256k1_u1) & ((((((((x58 as u128) + (x63 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x58 as u128) + (x63 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x56 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x56 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x68: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x68, (((x66 >> 63) as fiat_secp256k1_u1) & ((((((((x58 as u128) + (x63 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x58 as u128) + (x63 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x57, ((((((x58 as u128) + (x63 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x58 as u128) + (x63 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x69: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x69, (((x66 >> 63) as fiat_secp256k1_u1) & ((((((((x58 as u128) + (x63 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x58 as u128) + (x63 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x58 as u128) + (x63 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x58 as u128) + (x63 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x57) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x70: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x70, (((x66 >> 63) as fiat_secp256k1_u1) & ((((((((x58 as u128) + (x63 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x58 as u128) + (x63 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x59 as u128) + (x59 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x61 as u128) + (x64 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x71: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x71, (((x66 >> 63) as fiat_secp256k1_u1) & ((((((((x58 as u128) + (x63 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x58 as u128) + (x63 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x60 as u128) + (x60 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x62 as u128) + (x65 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x72: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x72, (((x66 >> 63) as fiat_secp256k1_u1) & ((((((((x58 as u128) + (x63 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x58 as u128) + (x63 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x61 as u128) + (x64 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x59 as u128) + (x59 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x73: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x73, (((x66 >> 63) as fiat_secp256k1_u1) & ((((((((x58 as u128) + (x63 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x58 as u128) + (x63 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x62 as u128) + (x65 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x60 as u128) + (x60 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x74: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x74, ((x69 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x68);
  let mut x75: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x75, ((x69 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x70);
  let mut x76: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x76, ((x69 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x71);
  let x77: u64 = (((((!((((0x1 as u128) + (x67 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x78: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x78, (((x77 >> 63) as fiat_secp256k1_u1) & ((((((((x69 as u128) + (x74 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x69 as u128) + (x74 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x67 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x67 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x79: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x79, (((x77 >> 63) as fiat_secp256k1_u1) & ((((((((x69 as u128) + (x74 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x69 as u128) + (x74 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x68, ((((((x69 as u128) + (x74 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x69 as u128) + (x74 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x80: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x80, (((x77 >> 63) as fiat_secp256k1_u1) & ((((((((x69 as u128) + (x74 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x69 as u128) + (x74 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x69 as u128) + (x74 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x69 as u128) + (x74 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x68) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x81: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x81, (((x77 >> 63) as fiat_secp256k1_u1) & ((((((((x69 as u128) + (x74 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x69 as u128) + (x74 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x70 as u128) + (x70 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x72 as u128) + (x75 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x82: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x82, (((x77 >> 63) as fiat_secp256k1_u1) & ((((((((x69 as u128) + (x74 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x69 as u128) + (x74 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x71 as u128) + (x71 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x73 as u128) + (x76 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x83: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x83, (((x77 >> 63) as fiat_secp256k1_u1) & ((((((((x69 as u128) + (x74 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x69 as u128) + (x74 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x72 as u128) + (x75 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x70 as u128) + (x70 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x84: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x84, (((x77 >> 63) as fiat_secp256k1_u1) & ((((((((x69 as u128) + (x74 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x69 as u128) + (x74 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x73 as u128) + (x76 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x71 as u128) + (x71 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x85: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x85, ((x80 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x79);
  let mut x86: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x86, ((x80 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x81);
  let mut x87: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x87, ((x80 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x82);
  let x88: u64 = (((((!((((0x1 as u128) + (x78 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x89: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x89, (((x88 >> 63) as fiat_secp256k1_u1) & ((((((((x80 as u128) + (x85 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x80 as u128) + (x85 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x78 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x78 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x90: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x90, (((x88 >> 63) as fiat_secp256k1_u1) & ((((((((x80 as u128) + (x85 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x80 as u128) + (x85 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x79, ((((((x80 as u128) + (x85 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x80 as u128) + (x85 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x91: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x91, (((x88 >> 63) as fiat_secp256k1_u1) & ((((((((x80 as u128) + (x85 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x80 as u128) + (x85 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x80 as u128) + (x85 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x80 as u128) + (x85 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x79) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x92: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x92, (((x88 >> 63) as fiat_secp256k1_u1) & ((((((((x80 as u128) + (x85 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x80 as u128) + (x85 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x81 as u128) + (x81 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x83 as u128) + (x86 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x93: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x93, (((x88 >> 63) as fiat_secp256k1_u1) & ((((((((x80 as u128) + (x85 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x80 as u128) + (x85 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x82 as u128) + (x82 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x84 as u128) + (x87 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x94: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x94, (((x88 >> 63) as fiat_secp256k1_u1) & ((((((((x80 as u128) + (x85 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x80 as u128) + (x85 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x83 as u128) + (x86 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x81 as u128) + (x81 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x95: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x95, (((x88 >> 63) as fiat_secp256k1_u1) & ((((((((x80 as u128) + (x85 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x80 as u128) + (x85 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x84 as u128) + (x87 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x82 as u128) + (x82 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x96: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x96, ((x91 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x90);
  let mut x97: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x97, ((x91 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x92);
  let mut x98: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x98, ((x91 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x93);
  let x99: u64 = (((((!((((0x1 as u128) + (x89 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x100: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x100, (((x99 >> 63) as fiat_secp256k1_u1) & ((((((((x91 as u128) + (x96 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x91 as u128) + (x96 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x89 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x89 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x101: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x101, (((x99 >> 63) as fiat_secp256k1_u1) & ((((((((x91 as u128) + (x96 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x91 as u128) + (x96 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x90, ((((((x91 as u128) + (x96 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x91 as u128) + (x96 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x102: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x102, (((x99 >> 63) as fiat_secp256k1_u1) & ((((((((x91 as u128) + (x96 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x91 as u128) + (x96 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x91 as u128) + (x96 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x91 as u128) + (x96 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x90) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x103: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x103, (((x99 >> 63) as fiat_secp256k1_u1) & ((((((((x91 as u128) + (x96 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x91 as u128) + (x96 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x92 as u128) + (x92 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x94 as u128) + (x97 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x104: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x104, (((x99 >> 63) as fiat_secp256k1_u1) & ((((((((x91 as u128) + (x96 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x91 as u128) + (x96 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x93 as u128) + (x93 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x95 as u128) + (x98 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x105: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x105, (((x99 >> 63) as fiat_secp256k1_u1) & ((((((((x91 as u128) + (x96 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x91 as u128) + (x96 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x94 as u128) + (x97 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x92 as u128) + (x92 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x106: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x106, (((x99 >> 63) as fiat_secp256k1_u1) & ((((((((x91 as u128) + (x96 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x91 as u128) + (x96 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x95 as u128) + (x98 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x93 as u128) + (x93 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x107: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x107, ((x102 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x101);
  let mut x108: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x108, ((x102 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x103);
  let mut x109: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x109, ((x102 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x104);
  let x110: u64 = (((((!((((0x1 as u128) + (x100 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x111: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x111, (((x110 >> 63) as fiat_secp256k1_u1) & ((((((((x102 as u128) + (x107 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x102 as u128) + (x107 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x100 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x100 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x112: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x112, (((x110 >> 63) as fiat_secp256k1_u1) & ((((((((x102 as u128) + (x107 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x102 as u128) + (x107 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x101, ((((((x102 as u128) + (x107 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x102 as u128) + (x107 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x113: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x113, (((x110 >> 63) as fiat_secp256k1_u1) & ((((((((x102 as u128) + (x107 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x102 as u128) + (x107 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x102 as u128) + (x107 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x102 as u128) + (x107 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x101) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x114: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x114, (((x110 >> 63) as fiat_secp256k1_u1) & ((((((((x102 as u128) + (x107 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x102 as u128) + (x107 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x103 as u128) + (x103 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x105 as u128) + (x108 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x115: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x115, (((x110 >> 63) as fiat_secp256k1_u1) & ((((((((x102 as u128) + (x107 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x102 as u128) + (x107 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x104 as u128) + (x104 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x106 as u128) + (x109 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x116: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x116, (((x110 >> 63) as fiat_secp256k1_u1) & ((((((((x102 as u128) + (x107 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x102 as u128) + (x107 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x105 as u128) + (x108 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x103 as u128) + (x103 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x117: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x117, (((x110 >> 63) as fiat_secp256k1_u1) & ((((((((x102 as u128) + (x107 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x102 as u128) + (x107 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x106 as u128) + (x109 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x104 as u128) + (x104 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x118: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x118, ((x113 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x112);
  let mut x119: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x119, ((x113 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x114);
  let mut x120: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x120, ((x113 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x115);
  let x121: u64 = (((((!((((0x1 as u128) + (x111 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x122: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x122, (((x121 >> 63) as fiat_secp256k1_u1) & ((((((((x113 as u128) + (x118 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x113 as u128) + (x118 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x111 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x111 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x123: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x123, (((x121 >> 63) as fiat_secp256k1_u1) & ((((((((x113 as u128) + (x118 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x113 as u128) + (x118 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x112, ((((((x113 as u128) + (x118 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x113 as u128) + (x118 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x124: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x124, (((x121 >> 63) as fiat_secp256k1_u1) & ((((((((x113 as u128) + (x118 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x113 as u128) + (x118 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x113 as u128) + (x118 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x113 as u128) + (x118 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x112) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x125: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x125, (((x121 >> 63) as fiat_secp256k1_u1) & ((((((((x113 as u128) + (x118 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x113 as u128) + (x118 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x114 as u128) + (x114 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x116 as u128) + (x119 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x126: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x126, (((x121 >> 63) as fiat_secp256k1_u1) & ((((((((x113 as u128) + (x118 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x113 as u128) + (x118 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x115 as u128) + (x115 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x117 as u128) + (x120 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x127: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x127, (((x121 >> 63) as fiat_secp256k1_u1) & ((((((((x113 as u128) + (x118 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x113 as u128) + (x118 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x116 as u128) + (x119 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x114 as u128) + (x114 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x128: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x128, (((x121 >> 63) as fiat_secp256k1_u1) & ((((((((x113 as u128) + (x118 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x113 as u128) + (x118 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x117 as u128) + (x120 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x115 as u128) + (x115 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x129: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x129, ((x124 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x123);
  let mut x130: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x130, ((x124 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x125);
  let mut x131: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x131, ((x124 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x126);
  let x132: u64 = (((((!((((0x1 as u128) + (x122 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x133: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x133, (((x132 >> 63) as fiat_secp256k1_u1) & ((((((((x124 as u128) + (x129 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x124 as u128) + (x129 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x122 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x122 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x134: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x134, (((x132 >> 63) as fiat_secp256k1_u1) & ((((((((x124 as u128) + (x129 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x124 as u128) + (x129 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x123, ((((((x124 as u128) + (x129 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x124 as u128) + (x129 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x135: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x135, (((x132 >> 63) as fiat_secp256k1_u1) & ((((((((x124 as u128) + (x129 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x124 as u128) + (x129 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x124 as u128) + (x129 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x124 as u128) + (x129 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x123) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x136: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x136, (((x132 >> 63) as fiat_secp256k1_u1) & ((((((((x124 as u128) + (x129 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x124 as u128) + (x129 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x125 as u128) + (x125 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x127 as u128) + (x130 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x137: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x137, (((x132 >> 63) as fiat_secp256k1_u1) & ((((((((x124 as u128) + (x129 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x124 as u128) + (x129 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x126 as u128) + (x126 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x128 as u128) + (x131 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x138: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x138, (((x132 >> 63) as fiat_secp256k1_u1) & ((((((((x124 as u128) + (x129 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x124 as u128) + (x129 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x127 as u128) + (x130 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x125 as u128) + (x125 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x139: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x139, (((x132 >> 63) as fiat_secp256k1_u1) & ((((((((x124 as u128) + (x129 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x124 as u128) + (x129 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x128 as u128) + (x131 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x126 as u128) + (x126 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x140: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x140, ((x135 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x134);
  let mut x141: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x141, ((x135 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x136);
  let mut x142: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x142, ((x135 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x137);
  let x143: u64 = (((((!((((0x1 as u128) + (x133 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x144: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x144, (((x143 >> 63) as fiat_secp256k1_u1) & ((((((((x135 as u128) + (x140 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x135 as u128) + (x140 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x133 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x133 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x145: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x145, (((x143 >> 63) as fiat_secp256k1_u1) & ((((((((x135 as u128) + (x140 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x135 as u128) + (x140 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x134, ((((((x135 as u128) + (x140 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x135 as u128) + (x140 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x146: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x146, (((x143 >> 63) as fiat_secp256k1_u1) & ((((((((x135 as u128) + (x140 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x135 as u128) + (x140 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x135 as u128) + (x140 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x135 as u128) + (x140 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x134) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x147: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x147, (((x143 >> 63) as fiat_secp256k1_u1) & ((((((((x135 as u128) + (x140 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x135 as u128) + (x140 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x136 as u128) + (x136 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x138 as u128) + (x141 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x148: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x148, (((x143 >> 63) as fiat_secp256k1_u1) & ((((((((x135 as u128) + (x140 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x135 as u128) + (x140 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x137 as u128) + (x137 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x139 as u128) + (x142 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x149: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x149, (((x143 >> 63) as fiat_secp256k1_u1) & ((((((((x135 as u128) + (x140 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x135 as u128) + (x140 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x138 as u128) + (x141 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x136 as u128) + (x136 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x150: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x150, (((x143 >> 63) as fiat_secp256k1_u1) & ((((((((x135 as u128) + (x140 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x135 as u128) + (x140 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x139 as u128) + (x142 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x137 as u128) + (x137 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x151: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x151, ((x146 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x145);
  let mut x152: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x152, ((x146 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x147);
  let mut x153: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x153, ((x146 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x148);
  let x154: u64 = (((((!((((0x1 as u128) + (x144 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x155: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x155, (((x154 >> 63) as fiat_secp256k1_u1) & ((((((((x146 as u128) + (x151 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x146 as u128) + (x151 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x144 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x144 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x156: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x156, (((x154 >> 63) as fiat_secp256k1_u1) & ((((((((x146 as u128) + (x151 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x146 as u128) + (x151 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x145, ((((((x146 as u128) + (x151 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x146 as u128) + (x151 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x157: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x157, (((x154 >> 63) as fiat_secp256k1_u1) & ((((((((x146 as u128) + (x151 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x146 as u128) + (x151 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x146 as u128) + (x151 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x146 as u128) + (x151 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x145) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x158: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x158, (((x154 >> 63) as fiat_secp256k1_u1) & ((((((((x146 as u128) + (x151 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x146 as u128) + (x151 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x147 as u128) + (x147 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x149 as u128) + (x152 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x159: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x159, (((x154 >> 63) as fiat_secp256k1_u1) & ((((((((x146 as u128) + (x151 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x146 as u128) + (x151 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x148 as u128) + (x148 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x150 as u128) + (x153 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x160: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x160, (((x154 >> 63) as fiat_secp256k1_u1) & ((((((((x146 as u128) + (x151 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x146 as u128) + (x151 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x149 as u128) + (x152 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x147 as u128) + (x147 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x161: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x161, (((x154 >> 63) as fiat_secp256k1_u1) & ((((((((x146 as u128) + (x151 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x146 as u128) + (x151 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x150 as u128) + (x153 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x148 as u128) + (x148 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x162: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x162, ((x157 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x156);
  let mut x163: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x163, ((x157 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x158);
  let mut x164: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x164, ((x157 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x159);
  let x165: u64 = (((((!((((0x1 as u128) + (x155 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x166: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x166, (((x165 >> 63) as fiat_secp256k1_u1) & ((((((((x157 as u128) + (x162 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x157 as u128) + (x162 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x155 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x155 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x167: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x167, (((x165 >> 63) as fiat_secp256k1_u1) & ((((((((x157 as u128) + (x162 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x157 as u128) + (x162 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x156, ((((((x157 as u128) + (x162 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x157 as u128) + (x162 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x168: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x168, (((x165 >> 63) as fiat_secp256k1_u1) & ((((((((x157 as u128) + (x162 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x157 as u128) + (x162 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x157 as u128) + (x162 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x157 as u128) + (x162 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x156) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x169: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x169, (((x165 >> 63) as fiat_secp256k1_u1) & ((((((((x157 as u128) + (x162 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x157 as u128) + (x162 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x158 as u128) + (x158 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x160 as u128) + (x163 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x170: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x170, (((x165 >> 63) as fiat_secp256k1_u1) & ((((((((x157 as u128) + (x162 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x157 as u128) + (x162 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x159 as u128) + (x159 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x161 as u128) + (x164 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x171: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x171, (((x165 >> 63) as fiat_secp256k1_u1) & ((((((((x157 as u128) + (x162 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x157 as u128) + (x162 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x160 as u128) + (x163 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x158 as u128) + (x158 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x172: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x172, (((x165 >> 63) as fiat_secp256k1_u1) & ((((((((x157 as u128) + (x162 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x157 as u128) + (x162 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x161 as u128) + (x164 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x159 as u128) + (x159 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x173: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x173, ((x168 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x167);
  let mut x174: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x174, ((x168 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x169);
  let mut x175: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x175, ((x168 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x170);
  let x176: u64 = (((((!((((0x1 as u128) + (x166 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x177: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x177, (((x176 >> 63) as fiat_secp256k1_u1) & ((((((((x168 as u128) + (x173 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x168 as u128) + (x173 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x166 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x166 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x178: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x178, (((x176 >> 63) as fiat_secp256k1_u1) & ((((((((x168 as u128) + (x173 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x168 as u128) + (x173 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x167, ((((((x168 as u128) + (x173 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x168 as u128) + (x173 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x179: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x179, (((x176 >> 63) as fiat_secp256k1_u1) & ((((((((x168 as u128) + (x173 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x168 as u128) + (x173 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x168 as u128) + (x173 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x168 as u128) + (x173 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x167) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x180: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x180, (((x176 >> 63) as fiat_secp256k1_u1) & ((((((((x168 as u128) + (x173 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x168 as u128) + (x173 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x169 as u128) + (x169 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x171 as u128) + (x174 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x181: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x181, (((x176 >> 63) as fiat_secp256k1_u1) & ((((((((x168 as u128) + (x173 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x168 as u128) + (x173 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x170 as u128) + (x170 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x172 as u128) + (x175 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x182: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x182, (((x176 >> 63) as fiat_secp256k1_u1) & ((((((((x168 as u128) + (x173 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x168 as u128) + (x173 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x171 as u128) + (x174 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x169 as u128) + (x169 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x183: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x183, (((x176 >> 63) as fiat_secp256k1_u1) & ((((((((x168 as u128) + (x173 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x168 as u128) + (x173 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x172 as u128) + (x175 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x170 as u128) + (x170 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x184: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x184, ((x179 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x178);
  let mut x185: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x185, ((x179 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x180);
  let mut x186: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x186, ((x179 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x181);
  let x187: u64 = (((((!((((0x1 as u128) + (x177 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x188: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x188, (((x187 >> 63) as fiat_secp256k1_u1) & ((((((((x179 as u128) + (x184 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x179 as u128) + (x184 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x177 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x177 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x189: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x189, (((x187 >> 63) as fiat_secp256k1_u1) & ((((((((x179 as u128) + (x184 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x179 as u128) + (x184 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x178, ((((((x179 as u128) + (x184 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x179 as u128) + (x184 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x190: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x190, (((x187 >> 63) as fiat_secp256k1_u1) & ((((((((x179 as u128) + (x184 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x179 as u128) + (x184 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x179 as u128) + (x184 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x179 as u128) + (x184 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x178) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x191: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x191, (((x187 >> 63) as fiat_secp256k1_u1) & ((((((((x179 as u128) + (x184 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x179 as u128) + (x184 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x180 as u128) + (x180 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x182 as u128) + (x185 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x192: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x192, (((x187 >> 63) as fiat_secp256k1_u1) & ((((((((x179 as u128) + (x184 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x179 as u128) + (x184 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x181 as u128) + (x181 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x183 as u128) + (x186 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x193: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x193, (((x187 >> 63) as fiat_secp256k1_u1) & ((((((((x179 as u128) + (x184 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x179 as u128) + (x184 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x182 as u128) + (x185 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x180 as u128) + (x180 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x194: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x194, (((x187 >> 63) as fiat_secp256k1_u1) & ((((((((x179 as u128) + (x184 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x179 as u128) + (x184 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x183 as u128) + (x186 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x181 as u128) + (x181 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x195: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x195, ((x190 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x189);
  let mut x196: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x196, ((x190 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x191);
  let mut x197: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x197, ((x190 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x192);
  let x198: u64 = (((((!((((0x1 as u128) + (x188 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x199: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x199, (((x198 >> 63) as fiat_secp256k1_u1) & ((((((((x190 as u128) + (x195 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x190 as u128) + (x195 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x188 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x188 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x200: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x200, (((x198 >> 63) as fiat_secp256k1_u1) & ((((((((x190 as u128) + (x195 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x190 as u128) + (x195 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x189, ((((((x190 as u128) + (x195 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x190 as u128) + (x195 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x201: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x201, (((x198 >> 63) as fiat_secp256k1_u1) & ((((((((x190 as u128) + (x195 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x190 as u128) + (x195 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x190 as u128) + (x195 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x190 as u128) + (x195 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x189) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x202: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x202, (((x198 >> 63) as fiat_secp256k1_u1) & ((((((((x190 as u128) + (x195 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x190 as u128) + (x195 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x191 as u128) + (x191 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x193 as u128) + (x196 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x203: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x203, (((x198 >> 63) as fiat_secp256k1_u1) & ((((((((x190 as u128) + (x195 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x190 as u128) + (x195 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x192 as u128) + (x192 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x194 as u128) + (x197 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x204: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x204, (((x198 >> 63) as fiat_secp256k1_u1) & ((((((((x190 as u128) + (x195 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x190 as u128) + (x195 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x193 as u128) + (x196 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x191 as u128) + (x191 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x205: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x205, (((x198 >> 63) as fiat_secp256k1_u1) & ((((((((x190 as u128) + (x195 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x190 as u128) + (x195 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x194 as u128) + (x197 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x192 as u128) + (x192 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x206: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x206, ((x201 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x200);
  let mut x207: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x207, ((x201 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x202);
  let mut x208: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x208, ((x201 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x203);
  let x209: u64 = (((((!((((0x1 as u128) + (x199 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x210: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x210, (((x209 >> 63) as fiat_secp256k1_u1) & ((((((((x201 as u128) + (x206 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x201 as u128) + (x206 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x199 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x199 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x211: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x211, (((x209 >> 63) as fiat_secp256k1_u1) & ((((((((x201 as u128) + (x206 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x201 as u128) + (x206 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x200, ((((((x201 as u128) + (x206 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x201 as u128) + (x206 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x212: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x212, (((x209 >> 63) as fiat_secp256k1_u1) & ((((((((x201 as u128) + (x206 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x201 as u128) + (x206 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x201 as u128) + (x206 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x201 as u128) + (x206 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x200) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x213: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x213, (((x209 >> 63) as fiat_secp256k1_u1) & ((((((((x201 as u128) + (x206 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x201 as u128) + (x206 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x202 as u128) + (x202 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x204 as u128) + (x207 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x214: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x214, (((x209 >> 63) as fiat_secp256k1_u1) & ((((((((x201 as u128) + (x206 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x201 as u128) + (x206 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x203 as u128) + (x203 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x205 as u128) + (x208 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x215: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x215, (((x209 >> 63) as fiat_secp256k1_u1) & ((((((((x201 as u128) + (x206 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x201 as u128) + (x206 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x204 as u128) + (x207 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x202 as u128) + (x202 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x216: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x216, (((x209 >> 63) as fiat_secp256k1_u1) & ((((((((x201 as u128) + (x206 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x201 as u128) + (x206 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x205 as u128) + (x208 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x203 as u128) + (x203 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x217: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x217, ((x212 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x211);
  let mut x218: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x218, ((x212 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x213);
  let mut x219: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x219, ((x212 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x214);
  let x220: u64 = (((((!((((0x1 as u128) + (x210 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x221: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x221, (((x220 >> 63) as fiat_secp256k1_u1) & ((((((((x212 as u128) + (x217 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x212 as u128) + (x217 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x210 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x210 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x222: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x222, (((x220 >> 63) as fiat_secp256k1_u1) & ((((((((x212 as u128) + (x217 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x212 as u128) + (x217 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x211, ((((((x212 as u128) + (x217 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x212 as u128) + (x217 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x223: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x223, (((x220 >> 63) as fiat_secp256k1_u1) & ((((((((x212 as u128) + (x217 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x212 as u128) + (x217 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x212 as u128) + (x217 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x212 as u128) + (x217 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x211) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x224: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x224, (((x220 >> 63) as fiat_secp256k1_u1) & ((((((((x212 as u128) + (x217 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x212 as u128) + (x217 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x213 as u128) + (x213 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x215 as u128) + (x218 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x225: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x225, (((x220 >> 63) as fiat_secp256k1_u1) & ((((((((x212 as u128) + (x217 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x212 as u128) + (x217 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x214 as u128) + (x214 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x216 as u128) + (x219 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x226: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x226, (((x220 >> 63) as fiat_secp256k1_u1) & ((((((((x212 as u128) + (x217 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x212 as u128) + (x217 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x215 as u128) + (x218 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x213 as u128) + (x213 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x227: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x227, (((x220 >> 63) as fiat_secp256k1_u1) & ((((((((x212 as u128) + (x217 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x212 as u128) + (x217 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x216 as u128) + (x219 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x214 as u128) + (x214 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x228: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x228, ((x223 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x222);
  let mut x229: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x229, ((x223 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x224);
  let mut x230: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x230, ((x223 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x225);
  let x231: u64 = (((((!((((0x1 as u128) + (x221 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x232: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x232, (((x231 >> 63) as fiat_secp256k1_u1) & ((((((((x223 as u128) + (x228 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x223 as u128) + (x228 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x221 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x221 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x233: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x233, (((x231 >> 63) as fiat_secp256k1_u1) & ((((((((x223 as u128) + (x228 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x223 as u128) + (x228 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x222, ((((((x223 as u128) + (x228 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x223 as u128) + (x228 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x234: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x234, (((x231 >> 63) as fiat_secp256k1_u1) & ((((((((x223 as u128) + (x228 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x223 as u128) + (x228 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x223 as u128) + (x228 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x223 as u128) + (x228 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x222) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x235: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x235, (((x231 >> 63) as fiat_secp256k1_u1) & ((((((((x223 as u128) + (x228 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x223 as u128) + (x228 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x224 as u128) + (x224 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x226 as u128) + (x229 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x236: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x236, (((x231 >> 63) as fiat_secp256k1_u1) & ((((((((x223 as u128) + (x228 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x223 as u128) + (x228 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x225 as u128) + (x225 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x227 as u128) + (x230 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x237: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x237, (((x231 >> 63) as fiat_secp256k1_u1) & ((((((((x223 as u128) + (x228 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x223 as u128) + (x228 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x226 as u128) + (x229 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x224 as u128) + (x224 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x238: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x238, (((x231 >> 63) as fiat_secp256k1_u1) & ((((((((x223 as u128) + (x228 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x223 as u128) + (x228 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x227 as u128) + (x230 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x225 as u128) + (x225 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x239: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x239, ((x234 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x233);
  let mut x240: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x240, ((x234 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x235);
  let mut x241: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x241, ((x234 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x236);
  let x242: u64 = (((((!((((0x1 as u128) + (x232 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x243: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x243, (((x242 >> 63) as fiat_secp256k1_u1) & ((((((((x234 as u128) + (x239 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x234 as u128) + (x239 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x232 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x232 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x244: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x244, (((x242 >> 63) as fiat_secp256k1_u1) & ((((((((x234 as u128) + (x239 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x234 as u128) + (x239 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x233, ((((((x234 as u128) + (x239 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x234 as u128) + (x239 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x245: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x245, (((x242 >> 63) as fiat_secp256k1_u1) & ((((((((x234 as u128) + (x239 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x234 as u128) + (x239 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x234 as u128) + (x239 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x234 as u128) + (x239 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x233) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x246: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x246, (((x242 >> 63) as fiat_secp256k1_u1) & ((((((((x234 as u128) + (x239 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x234 as u128) + (x239 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x235 as u128) + (x235 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x237 as u128) + (x240 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x247: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x247, (((x242 >> 63) as fiat_secp256k1_u1) & ((((((((x234 as u128) + (x239 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x234 as u128) + (x239 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x236 as u128) + (x236 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x238 as u128) + (x241 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x248: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x248, (((x242 >> 63) as fiat_secp256k1_u1) & ((((((((x234 as u128) + (x239 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x234 as u128) + (x239 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x237 as u128) + (x240 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x235 as u128) + (x235 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x249: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x249, (((x242 >> 63) as fiat_secp256k1_u1) & ((((((((x234 as u128) + (x239 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x234 as u128) + (x239 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x238 as u128) + (x241 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x236 as u128) + (x236 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x250: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x250, ((x245 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x244);
  let mut x251: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x251, ((x245 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x246);
  let mut x252: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x252, ((x245 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x247);
  let x253: u64 = (((((!((((0x1 as u128) + (x243 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x254: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x254, (((x253 >> 63) as fiat_secp256k1_u1) & ((((((((x245 as u128) + (x250 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x245 as u128) + (x250 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x243 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x243 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x255: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x255, (((x253 >> 63) as fiat_secp256k1_u1) & ((((((((x245 as u128) + (x250 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x245 as u128) + (x250 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x244, ((((((x245 as u128) + (x250 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x245 as u128) + (x250 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x256: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x256, (((x253 >> 63) as fiat_secp256k1_u1) & ((((((((x245 as u128) + (x250 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x245 as u128) + (x250 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x245 as u128) + (x250 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x245 as u128) + (x250 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x244) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x257: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x257, (((x253 >> 63) as fiat_secp256k1_u1) & ((((((((x245 as u128) + (x250 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x245 as u128) + (x250 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x246 as u128) + (x246 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x248 as u128) + (x251 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x258: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x258, (((x253 >> 63) as fiat_secp256k1_u1) & ((((((((x245 as u128) + (x250 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x245 as u128) + (x250 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x247 as u128) + (x247 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x249 as u128) + (x252 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x259: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x259, (((x253 >> 63) as fiat_secp256k1_u1) & ((((((((x245 as u128) + (x250 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x245 as u128) + (x250 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x248 as u128) + (x251 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x246 as u128) + (x246 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x260: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x260, (((x253 >> 63) as fiat_secp256k1_u1) & ((((((((x245 as u128) + (x250 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x245 as u128) + (x250 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x249 as u128) + (x252 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x247 as u128) + (x247 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x261: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x261, ((x256 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x255);
  let mut x262: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x262, ((x256 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x257);
  let mut x263: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x263, ((x256 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x258);
  let x264: u64 = (((((!((((0x1 as u128) + (x254 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x265: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x265, (((x264 >> 63) as fiat_secp256k1_u1) & ((((((((x256 as u128) + (x261 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x256 as u128) + (x261 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x254 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x254 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x266: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x266, (((x264 >> 63) as fiat_secp256k1_u1) & ((((((((x256 as u128) + (x261 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x256 as u128) + (x261 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x255, ((((((x256 as u128) + (x261 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x256 as u128) + (x261 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x267: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x267, (((x264 >> 63) as fiat_secp256k1_u1) & ((((((((x256 as u128) + (x261 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x256 as u128) + (x261 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x256 as u128) + (x261 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x256 as u128) + (x261 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x255) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x268: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x268, (((x264 >> 63) as fiat_secp256k1_u1) & ((((((((x256 as u128) + (x261 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x256 as u128) + (x261 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x257 as u128) + (x257 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x259 as u128) + (x262 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x269: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x269, (((x264 >> 63) as fiat_secp256k1_u1) & ((((((((x256 as u128) + (x261 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x256 as u128) + (x261 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x258 as u128) + (x258 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x260 as u128) + (x263 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x270: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x270, (((x264 >> 63) as fiat_secp256k1_u1) & ((((((((x256 as u128) + (x261 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x256 as u128) + (x261 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x259 as u128) + (x262 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x257 as u128) + (x257 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x271: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x271, (((x264 >> 63) as fiat_secp256k1_u1) & ((((((((x256 as u128) + (x261 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x256 as u128) + (x261 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x260 as u128) + (x263 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x258 as u128) + (x258 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x272: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x272, ((x267 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x266);
  let mut x273: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x273, ((x267 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x268);
  let mut x274: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x274, ((x267 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x269);
  let x275: u64 = (((((!((((0x1 as u128) + (x265 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x276: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x276, (((x275 >> 63) as fiat_secp256k1_u1) & ((((((((x267 as u128) + (x272 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x267 as u128) + (x272 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x265 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x265 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x277: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x277, (((x275 >> 63) as fiat_secp256k1_u1) & ((((((((x267 as u128) + (x272 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x267 as u128) + (x272 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x266, ((((((x267 as u128) + (x272 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x267 as u128) + (x272 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x278: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x278, (((x275 >> 63) as fiat_secp256k1_u1) & ((((((((x267 as u128) + (x272 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x267 as u128) + (x272 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x267 as u128) + (x272 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x267 as u128) + (x272 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x266) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x279: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x279, (((x275 >> 63) as fiat_secp256k1_u1) & ((((((((x267 as u128) + (x272 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x267 as u128) + (x272 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x268 as u128) + (x268 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x270 as u128) + (x273 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x280: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x280, (((x275 >> 63) as fiat_secp256k1_u1) & ((((((((x267 as u128) + (x272 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x267 as u128) + (x272 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x269 as u128) + (x269 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x271 as u128) + (x274 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x281: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x281, (((x275 >> 63) as fiat_secp256k1_u1) & ((((((((x267 as u128) + (x272 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x267 as u128) + (x272 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x270 as u128) + (x273 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x268 as u128) + (x268 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x282: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x282, (((x275 >> 63) as fiat_secp256k1_u1) & ((((((((x267 as u128) + (x272 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x267 as u128) + (x272 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x271 as u128) + (x274 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x269 as u128) + (x269 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x283: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x283, ((x278 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x277);
  let mut x284: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x284, ((x278 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x279);
  let mut x285: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x285, ((x278 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x280);
  let x286: u64 = (((((!((((0x1 as u128) + (x276 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x287: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x287, (((x286 >> 63) as fiat_secp256k1_u1) & ((((((((x278 as u128) + (x283 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x278 as u128) + (x283 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x276 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x276 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x288: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x288, (((x286 >> 63) as fiat_secp256k1_u1) & ((((((((x278 as u128) + (x283 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x278 as u128) + (x283 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x277, ((((((x278 as u128) + (x283 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x278 as u128) + (x283 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x289: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x289, (((x286 >> 63) as fiat_secp256k1_u1) & ((((((((x278 as u128) + (x283 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x278 as u128) + (x283 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x278 as u128) + (x283 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x278 as u128) + (x283 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x277) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x290: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x290, (((x286 >> 63) as fiat_secp256k1_u1) & ((((((((x278 as u128) + (x283 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x278 as u128) + (x283 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x279 as u128) + (x279 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x281 as u128) + (x284 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x291: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x291, (((x286 >> 63) as fiat_secp256k1_u1) & ((((((((x278 as u128) + (x283 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x278 as u128) + (x283 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x280 as u128) + (x280 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x282 as u128) + (x285 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x292: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x292, (((x286 >> 63) as fiat_secp256k1_u1) & ((((((((x278 as u128) + (x283 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x278 as u128) + (x283 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x281 as u128) + (x284 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x279 as u128) + (x279 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x293: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x293, (((x286 >> 63) as fiat_secp256k1_u1) & ((((((((x278 as u128) + (x283 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x278 as u128) + (x283 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x282 as u128) + (x285 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x280 as u128) + (x280 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x294: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x294, ((x289 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x288);
  let mut x295: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x295, ((x289 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x290);
  let mut x296: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x296, ((x289 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x291);
  let x297: u64 = (((((!((((0x1 as u128) + (x287 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x298: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x298, (((x297 >> 63) as fiat_secp256k1_u1) & ((((((((x289 as u128) + (x294 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x289 as u128) + (x294 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x287 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x287 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x299: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x299, (((x297 >> 63) as fiat_secp256k1_u1) & ((((((((x289 as u128) + (x294 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x289 as u128) + (x294 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x288, ((((((x289 as u128) + (x294 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x289 as u128) + (x294 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x300: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x300, (((x297 >> 63) as fiat_secp256k1_u1) & ((((((((x289 as u128) + (x294 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x289 as u128) + (x294 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x289 as u128) + (x294 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x289 as u128) + (x294 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x288) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x301: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x301, (((x297 >> 63) as fiat_secp256k1_u1) & ((((((((x289 as u128) + (x294 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x289 as u128) + (x294 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x290 as u128) + (x290 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x292 as u128) + (x295 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x302: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x302, (((x297 >> 63) as fiat_secp256k1_u1) & ((((((((x289 as u128) + (x294 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x289 as u128) + (x294 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x291 as u128) + (x291 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x293 as u128) + (x296 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x303: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x303, (((x297 >> 63) as fiat_secp256k1_u1) & ((((((((x289 as u128) + (x294 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x289 as u128) + (x294 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x292 as u128) + (x295 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x290 as u128) + (x290 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x304: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x304, (((x297 >> 63) as fiat_secp256k1_u1) & ((((((((x289 as u128) + (x294 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x289 as u128) + (x294 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x293 as u128) + (x296 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x291 as u128) + (x291 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x305: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x305, ((x300 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x299);
  let mut x306: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x306, ((x300 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x301);
  let mut x307: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x307, ((x300 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x302);
  let x308: u64 = (((((!((((0x1 as u128) + (x298 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x309: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x309, (((x308 >> 63) as fiat_secp256k1_u1) & ((((((((x300 as u128) + (x305 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x300 as u128) + (x305 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x298 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x298 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x310: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x310, (((x308 >> 63) as fiat_secp256k1_u1) & ((((((((x300 as u128) + (x305 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x300 as u128) + (x305 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x299, ((((((x300 as u128) + (x305 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x300 as u128) + (x305 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x311: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x311, (((x308 >> 63) as fiat_secp256k1_u1) & ((((((((x300 as u128) + (x305 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x300 as u128) + (x305 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x300 as u128) + (x305 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x300 as u128) + (x305 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x299) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x312: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x312, (((x308 >> 63) as fiat_secp256k1_u1) & ((((((((x300 as u128) + (x305 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x300 as u128) + (x305 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x301 as u128) + (x301 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x303 as u128) + (x306 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x313: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x313, (((x308 >> 63) as fiat_secp256k1_u1) & ((((((((x300 as u128) + (x305 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x300 as u128) + (x305 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x302 as u128) + (x302 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x304 as u128) + (x307 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x314: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x314, (((x308 >> 63) as fiat_secp256k1_u1) & ((((((((x300 as u128) + (x305 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x300 as u128) + (x305 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x303 as u128) + (x306 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x301 as u128) + (x301 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x315: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x315, (((x308 >> 63) as fiat_secp256k1_u1) & ((((((((x300 as u128) + (x305 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x300 as u128) + (x305 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x304 as u128) + (x307 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x302 as u128) + (x302 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x316: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x316, ((x311 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x310);
  let mut x317: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x317, ((x311 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x312);
  let mut x318: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x318, ((x311 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x313);
  let x319: u64 = (((((!((((0x1 as u128) + (x309 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x320: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x320, (((x319 >> 63) as fiat_secp256k1_u1) & ((((((((x311 as u128) + (x316 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x311 as u128) + (x316 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x309 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x309 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x321: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x321, (((x319 >> 63) as fiat_secp256k1_u1) & ((((((((x311 as u128) + (x316 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x311 as u128) + (x316 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x310, ((((((x311 as u128) + (x316 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x311 as u128) + (x316 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x322: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x322, (((x319 >> 63) as fiat_secp256k1_u1) & ((((((((x311 as u128) + (x316 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x311 as u128) + (x316 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x311 as u128) + (x316 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x311 as u128) + (x316 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x310) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x323: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x323, (((x319 >> 63) as fiat_secp256k1_u1) & ((((((((x311 as u128) + (x316 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x311 as u128) + (x316 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x312 as u128) + (x312 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x314 as u128) + (x317 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x324: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x324, (((x319 >> 63) as fiat_secp256k1_u1) & ((((((((x311 as u128) + (x316 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x311 as u128) + (x316 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x313 as u128) + (x313 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x315 as u128) + (x318 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x325: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x325, (((x319 >> 63) as fiat_secp256k1_u1) & ((((((((x311 as u128) + (x316 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x311 as u128) + (x316 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x314 as u128) + (x317 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x312 as u128) + (x312 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x326: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x326, (((x319 >> 63) as fiat_secp256k1_u1) & ((((((((x311 as u128) + (x316 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x311 as u128) + (x316 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x315 as u128) + (x318 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x313 as u128) + (x313 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x327: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x327, ((x322 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x321);
  let mut x328: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x328, ((x322 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x323);
  let mut x329: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x329, ((x322 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x324);
  let x330: u64 = (((((!((((0x1 as u128) + (x320 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x331: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x331, (((x330 >> 63) as fiat_secp256k1_u1) & ((((((((x322 as u128) + (x327 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x322 as u128) + (x327 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x320 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x320 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x332: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x332, (((x330 >> 63) as fiat_secp256k1_u1) & ((((((((x322 as u128) + (x327 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x322 as u128) + (x327 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x321, ((((((x322 as u128) + (x327 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x322 as u128) + (x327 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x333: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x333, (((x330 >> 63) as fiat_secp256k1_u1) & ((((((((x322 as u128) + (x327 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x322 as u128) + (x327 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x322 as u128) + (x327 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x322 as u128) + (x327 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x321) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x334: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x334, (((x330 >> 63) as fiat_secp256k1_u1) & ((((((((x322 as u128) + (x327 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x322 as u128) + (x327 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x323 as u128) + (x323 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x325 as u128) + (x328 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x335: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x335, (((x330 >> 63) as fiat_secp256k1_u1) & ((((((((x322 as u128) + (x327 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x322 as u128) + (x327 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x324 as u128) + (x324 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x326 as u128) + (x329 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x336: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x336, (((x330 >> 63) as fiat_secp256k1_u1) & ((((((((x322 as u128) + (x327 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x322 as u128) + (x327 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x325 as u128) + (x328 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x323 as u128) + (x323 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x337: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x337, (((x330 >> 63) as fiat_secp256k1_u1) & ((((((((x322 as u128) + (x327 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x322 as u128) + (x327 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x326 as u128) + (x329 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x324 as u128) + (x324 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x338: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x338, ((x333 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x332);
  let mut x339: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x339, ((x333 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x334);
  let mut x340: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x340, ((x333 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x335);
  let x341: u64 = (((((!((((0x1 as u128) + (x331 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x342: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x342, (((x341 >> 63) as fiat_secp256k1_u1) & ((((((((x333 as u128) + (x338 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x333 as u128) + (x338 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x331 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x331 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x343: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x343, (((x341 >> 63) as fiat_secp256k1_u1) & ((((((((x333 as u128) + (x338 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x333 as u128) + (x338 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x332, ((((((x333 as u128) + (x338 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x333 as u128) + (x338 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x344: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x344, (((x341 >> 63) as fiat_secp256k1_u1) & ((((((((x333 as u128) + (x338 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x333 as u128) + (x338 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x333 as u128) + (x338 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x333 as u128) + (x338 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x332) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x345: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x345, (((x341 >> 63) as fiat_secp256k1_u1) & ((((((((x333 as u128) + (x338 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x333 as u128) + (x338 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x334 as u128) + (x334 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x336 as u128) + (x339 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x346: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x346, (((x341 >> 63) as fiat_secp256k1_u1) & ((((((((x333 as u128) + (x338 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x333 as u128) + (x338 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x335 as u128) + (x335 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x337 as u128) + (x340 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x347: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x347, (((x341 >> 63) as fiat_secp256k1_u1) & ((((((((x333 as u128) + (x338 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x333 as u128) + (x338 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x336 as u128) + (x339 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x334 as u128) + (x334 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x348: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x348, (((x341 >> 63) as fiat_secp256k1_u1) & ((((((((x333 as u128) + (x338 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x333 as u128) + (x338 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x337 as u128) + (x340 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x335 as u128) + (x335 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x349: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x349, ((x344 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x343);
  let mut x350: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x350, ((x344 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x345);
  let mut x351: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x351, ((x344 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x346);
  let x352: u64 = (((((!((((0x1 as u128) + (x342 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x353: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x353, (((x352 >> 63) as fiat_secp256k1_u1) & ((((((((x344 as u128) + (x349 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x344 as u128) + (x349 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x342 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x342 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x354: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x354, (((x352 >> 63) as fiat_secp256k1_u1) & ((((((((x344 as u128) + (x349 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x344 as u128) + (x349 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x343, ((((((x344 as u128) + (x349 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x344 as u128) + (x349 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x355: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x355, (((x352 >> 63) as fiat_secp256k1_u1) & ((((((((x344 as u128) + (x349 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x344 as u128) + (x349 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x344 as u128) + (x349 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x344 as u128) + (x349 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x343) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x356: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x356, (((x352 >> 63) as fiat_secp256k1_u1) & ((((((((x344 as u128) + (x349 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x344 as u128) + (x349 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x345 as u128) + (x345 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x347 as u128) + (x350 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x357: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x357, (((x352 >> 63) as fiat_secp256k1_u1) & ((((((((x344 as u128) + (x349 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x344 as u128) + (x349 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x346 as u128) + (x346 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x348 as u128) + (x351 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x358: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x358, (((x352 >> 63) as fiat_secp256k1_u1) & ((((((((x344 as u128) + (x349 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x344 as u128) + (x349 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x347 as u128) + (x350 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x345 as u128) + (x345 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x359: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x359, (((x352 >> 63) as fiat_secp256k1_u1) & ((((((((x344 as u128) + (x349 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x344 as u128) + (x349 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x348 as u128) + (x351 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x346 as u128) + (x346 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x360: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x360, ((x355 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x354);
  let mut x361: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x361, ((x355 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x356);
  let mut x362: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x362, ((x355 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x357);
  let x363: u64 = (((((!((((0x1 as u128) + (x353 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x364: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x364, (((x363 >> 63) as fiat_secp256k1_u1) & ((((((((x355 as u128) + (x360 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x355 as u128) + (x360 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x353 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x353 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x365: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x365, (((x363 >> 63) as fiat_secp256k1_u1) & ((((((((x355 as u128) + (x360 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x355 as u128) + (x360 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x354, ((((((x355 as u128) + (x360 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x355 as u128) + (x360 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x366: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x366, (((x363 >> 63) as fiat_secp256k1_u1) & ((((((((x355 as u128) + (x360 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x355 as u128) + (x360 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x355 as u128) + (x360 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x355 as u128) + (x360 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x354) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x367: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x367, (((x363 >> 63) as fiat_secp256k1_u1) & ((((((((x355 as u128) + (x360 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x355 as u128) + (x360 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x356 as u128) + (x356 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x358 as u128) + (x361 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x368: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x368, (((x363 >> 63) as fiat_secp256k1_u1) & ((((((((x355 as u128) + (x360 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x355 as u128) + (x360 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x357 as u128) + (x357 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x359 as u128) + (x362 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x369: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x369, (((x363 >> 63) as fiat_secp256k1_u1) & ((((((((x355 as u128) + (x360 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x355 as u128) + (x360 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x358 as u128) + (x361 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x356 as u128) + (x356 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x370: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x370, (((x363 >> 63) as fiat_secp256k1_u1) & ((((((((x355 as u128) + (x360 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x355 as u128) + (x360 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x359 as u128) + (x362 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x357 as u128) + (x357 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x371: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x371, ((x366 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x365);
  let mut x372: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x372, ((x366 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x367);
  let mut x373: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x373, ((x366 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x368);
  let x374: u64 = (((((!((((0x1 as u128) + (x364 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x375: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x375, (((x374 >> 63) as fiat_secp256k1_u1) & ((((((((x366 as u128) + (x371 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x366 as u128) + (x371 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x364 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x364 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x376: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x376, (((x374 >> 63) as fiat_secp256k1_u1) & ((((((((x366 as u128) + (x371 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x366 as u128) + (x371 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x365, ((((((x366 as u128) + (x371 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x366 as u128) + (x371 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x377: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x377, (((x374 >> 63) as fiat_secp256k1_u1) & ((((((((x366 as u128) + (x371 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x366 as u128) + (x371 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x366 as u128) + (x371 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x366 as u128) + (x371 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x365) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x378: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x378, (((x374 >> 63) as fiat_secp256k1_u1) & ((((((((x366 as u128) + (x371 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x366 as u128) + (x371 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x367 as u128) + (x367 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x369 as u128) + (x372 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x379: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x379, (((x374 >> 63) as fiat_secp256k1_u1) & ((((((((x366 as u128) + (x371 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x366 as u128) + (x371 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x368 as u128) + (x368 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x370 as u128) + (x373 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x380: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x380, (((x374 >> 63) as fiat_secp256k1_u1) & ((((((((x366 as u128) + (x371 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x366 as u128) + (x371 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x369 as u128) + (x372 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x367 as u128) + (x367 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x381: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x381, (((x374 >> 63) as fiat_secp256k1_u1) & ((((((((x366 as u128) + (x371 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x366 as u128) + (x371 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x370 as u128) + (x373 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x368 as u128) + (x368 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x382: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x382, ((x377 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x376);
  let mut x383: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x383, ((x377 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x378);
  let mut x384: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x384, ((x377 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x379);
  let x385: u64 = (((((!((((0x1 as u128) + (x375 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x386: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x386, (((x385 >> 63) as fiat_secp256k1_u1) & ((((((((x377 as u128) + (x382 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x377 as u128) + (x382 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x375 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x375 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x387: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x387, (((x385 >> 63) as fiat_secp256k1_u1) & ((((((((x377 as u128) + (x382 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x377 as u128) + (x382 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x376, ((((((x377 as u128) + (x382 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x377 as u128) + (x382 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x388: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x388, (((x385 >> 63) as fiat_secp256k1_u1) & ((((((((x377 as u128) + (x382 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x377 as u128) + (x382 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x377 as u128) + (x382 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x377 as u128) + (x382 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x376) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x389: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x389, (((x385 >> 63) as fiat_secp256k1_u1) & ((((((((x377 as u128) + (x382 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x377 as u128) + (x382 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x378 as u128) + (x378 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x380 as u128) + (x383 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x390: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x390, (((x385 >> 63) as fiat_secp256k1_u1) & ((((((((x377 as u128) + (x382 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x377 as u128) + (x382 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x379 as u128) + (x379 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x381 as u128) + (x384 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x391: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x391, (((x385 >> 63) as fiat_secp256k1_u1) & ((((((((x377 as u128) + (x382 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x377 as u128) + (x382 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x380 as u128) + (x383 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x378 as u128) + (x378 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x392: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x392, (((x385 >> 63) as fiat_secp256k1_u1) & ((((((((x377 as u128) + (x382 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x377 as u128) + (x382 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x381 as u128) + (x384 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x379 as u128) + (x379 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x393: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x393, ((x388 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x387);
  let mut x394: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x394, ((x388 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x389);
  let mut x395: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x395, ((x388 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x390);
  let x396: u64 = (((((!((((0x1 as u128) + (x386 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x397: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x397, (((x396 >> 63) as fiat_secp256k1_u1) & ((((((((x388 as u128) + (x393 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x388 as u128) + (x393 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x386 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x386 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x398: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x398, (((x396 >> 63) as fiat_secp256k1_u1) & ((((((((x388 as u128) + (x393 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x388 as u128) + (x393 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x387, ((((((x388 as u128) + (x393 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x388 as u128) + (x393 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x399: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x399, (((x396 >> 63) as fiat_secp256k1_u1) & ((((((((x388 as u128) + (x393 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x388 as u128) + (x393 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x388 as u128) + (x393 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x388 as u128) + (x393 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x387) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x400: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x400, (((x396 >> 63) as fiat_secp256k1_u1) & ((((((((x388 as u128) + (x393 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x388 as u128) + (x393 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x389 as u128) + (x389 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x391 as u128) + (x394 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x401: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x401, (((x396 >> 63) as fiat_secp256k1_u1) & ((((((((x388 as u128) + (x393 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x388 as u128) + (x393 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x390 as u128) + (x390 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x392 as u128) + (x395 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x402: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x402, (((x396 >> 63) as fiat_secp256k1_u1) & ((((((((x388 as u128) + (x393 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x388 as u128) + (x393 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x391 as u128) + (x394 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x389 as u128) + (x389 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x403: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x403, (((x396 >> 63) as fiat_secp256k1_u1) & ((((((((x388 as u128) + (x393 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x388 as u128) + (x393 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x392 as u128) + (x395 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x390 as u128) + (x390 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x404: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x404, ((x399 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x398);
  let mut x405: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x405, ((x399 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x400);
  let mut x406: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x406, ((x399 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x401);
  let x407: u64 = (((((!((((0x1 as u128) + (x397 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x408: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x408, (((x407 >> 63) as fiat_secp256k1_u1) & ((((((((x399 as u128) + (x404 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x399 as u128) + (x404 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x397 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x397 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x409: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x409, (((x407 >> 63) as fiat_secp256k1_u1) & ((((((((x399 as u128) + (x404 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x399 as u128) + (x404 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x398, ((((((x399 as u128) + (x404 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x399 as u128) + (x404 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x410: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x410, (((x407 >> 63) as fiat_secp256k1_u1) & ((((((((x399 as u128) + (x404 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x399 as u128) + (x404 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x399 as u128) + (x404 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x399 as u128) + (x404 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x398) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x411: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x411, (((x407 >> 63) as fiat_secp256k1_u1) & ((((((((x399 as u128) + (x404 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x399 as u128) + (x404 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x400 as u128) + (x400 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x402 as u128) + (x405 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x412: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x412, (((x407 >> 63) as fiat_secp256k1_u1) & ((((((((x399 as u128) + (x404 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x399 as u128) + (x404 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x401 as u128) + (x401 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x403 as u128) + (x406 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x413: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x413, (((x407 >> 63) as fiat_secp256k1_u1) & ((((((((x399 as u128) + (x404 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x399 as u128) + (x404 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x402 as u128) + (x405 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x400 as u128) + (x400 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x414: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x414, (((x407 >> 63) as fiat_secp256k1_u1) & ((((((((x399 as u128) + (x404 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x399 as u128) + (x404 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x403 as u128) + (x406 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x401 as u128) + (x401 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x415: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x415, ((x410 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x409);
  let mut x416: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x416, ((x410 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x411);
  let mut x417: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x417, ((x410 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x412);
  let x418: u64 = (((((!((((0x1 as u128) + (x408 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x419: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x419, (((x418 >> 63) as fiat_secp256k1_u1) & ((((((((x410 as u128) + (x415 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x410 as u128) + (x415 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x408 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x408 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x420: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x420, (((x418 >> 63) as fiat_secp256k1_u1) & ((((((((x410 as u128) + (x415 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x410 as u128) + (x415 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x409, ((((((x410 as u128) + (x415 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x410 as u128) + (x415 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x421: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x421, (((x418 >> 63) as fiat_secp256k1_u1) & ((((((((x410 as u128) + (x415 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x410 as u128) + (x415 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x410 as u128) + (x415 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x410 as u128) + (x415 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x409) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x422: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x422, (((x418 >> 63) as fiat_secp256k1_u1) & ((((((((x410 as u128) + (x415 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x410 as u128) + (x415 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x411 as u128) + (x411 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x413 as u128) + (x416 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x423: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x423, (((x418 >> 63) as fiat_secp256k1_u1) & ((((((((x410 as u128) + (x415 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x410 as u128) + (x415 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x412 as u128) + (x412 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x414 as u128) + (x417 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x424: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x424, (((x418 >> 63) as fiat_secp256k1_u1) & ((((((((x410 as u128) + (x415 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x410 as u128) + (x415 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x413 as u128) + (x416 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x411 as u128) + (x411 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x425: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x425, (((x418 >> 63) as fiat_secp256k1_u1) & ((((((((x410 as u128) + (x415 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x410 as u128) + (x415 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x414 as u128) + (x417 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x412 as u128) + (x412 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x426: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x426, ((x421 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x420);
  let mut x427: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x427, ((x421 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x422);
  let mut x428: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x428, ((x421 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x423);
  let x429: u64 = (((((!((((0x1 as u128) + (x419 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x430: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x430, (((x429 >> 63) as fiat_secp256k1_u1) & ((((((((x421 as u128) + (x426 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x421 as u128) + (x426 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x419 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x419 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x431: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x431, (((x429 >> 63) as fiat_secp256k1_u1) & ((((((((x421 as u128) + (x426 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x421 as u128) + (x426 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x420, ((((((x421 as u128) + (x426 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x421 as u128) + (x426 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x432: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x432, (((x429 >> 63) as fiat_secp256k1_u1) & ((((((((x421 as u128) + (x426 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x421 as u128) + (x426 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x421 as u128) + (x426 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x421 as u128) + (x426 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x420) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x433: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x433, (((x429 >> 63) as fiat_secp256k1_u1) & ((((((((x421 as u128) + (x426 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x421 as u128) + (x426 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x422 as u128) + (x422 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x424 as u128) + (x427 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x434: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x434, (((x429 >> 63) as fiat_secp256k1_u1) & ((((((((x421 as u128) + (x426 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x421 as u128) + (x426 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x423 as u128) + (x423 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x425 as u128) + (x428 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x435: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x435, (((x429 >> 63) as fiat_secp256k1_u1) & ((((((((x421 as u128) + (x426 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x421 as u128) + (x426 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x424 as u128) + (x427 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x422 as u128) + (x422 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x436: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x436, (((x429 >> 63) as fiat_secp256k1_u1) & ((((((((x421 as u128) + (x426 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x421 as u128) + (x426 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x425 as u128) + (x428 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x423 as u128) + (x423 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x437: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x437, ((x432 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x431);
  let mut x438: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x438, ((x432 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x433);
  let mut x439: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x439, ((x432 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x434);
  let x440: u64 = (((((!((((0x1 as u128) + (x430 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x441: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x441, (((x440 >> 63) as fiat_secp256k1_u1) & ((((((((x432 as u128) + (x437 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x432 as u128) + (x437 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x430 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x430 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x442: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x442, (((x440 >> 63) as fiat_secp256k1_u1) & ((((((((x432 as u128) + (x437 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x432 as u128) + (x437 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x431, ((((((x432 as u128) + (x437 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x432 as u128) + (x437 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x443: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x443, (((x440 >> 63) as fiat_secp256k1_u1) & ((((((((x432 as u128) + (x437 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x432 as u128) + (x437 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x432 as u128) + (x437 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x432 as u128) + (x437 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x431) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x444: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x444, (((x440 >> 63) as fiat_secp256k1_u1) & ((((((((x432 as u128) + (x437 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x432 as u128) + (x437 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x433 as u128) + (x433 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x435 as u128) + (x438 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x445: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x445, (((x440 >> 63) as fiat_secp256k1_u1) & ((((((((x432 as u128) + (x437 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x432 as u128) + (x437 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x434 as u128) + (x434 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x436 as u128) + (x439 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x446: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x446, (((x440 >> 63) as fiat_secp256k1_u1) & ((((((((x432 as u128) + (x437 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x432 as u128) + (x437 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x435 as u128) + (x438 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x433 as u128) + (x433 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x447: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x447, (((x440 >> 63) as fiat_secp256k1_u1) & ((((((((x432 as u128) + (x437 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x432 as u128) + (x437 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x436 as u128) + (x439 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x434 as u128) + (x434 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x448: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x448, ((x443 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x442);
  let mut x449: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x449, ((x443 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x444);
  let mut x450: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x450, ((x443 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x445);
  let x451: u64 = (((((!((((0x1 as u128) + (x441 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x452: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x452, (((x451 >> 63) as fiat_secp256k1_u1) & ((((((((x443 as u128) + (x448 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x443 as u128) + (x448 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x441 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x441 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x453: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x453, (((x451 >> 63) as fiat_secp256k1_u1) & ((((((((x443 as u128) + (x448 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x443 as u128) + (x448 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x442, ((((((x443 as u128) + (x448 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x443 as u128) + (x448 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x454: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x454, (((x451 >> 63) as fiat_secp256k1_u1) & ((((((((x443 as u128) + (x448 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x443 as u128) + (x448 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x443 as u128) + (x448 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x443 as u128) + (x448 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x442) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x455: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x455, (((x451 >> 63) as fiat_secp256k1_u1) & ((((((((x443 as u128) + (x448 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x443 as u128) + (x448 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x444 as u128) + (x444 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x446 as u128) + (x449 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x456: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x456, (((x451 >> 63) as fiat_secp256k1_u1) & ((((((((x443 as u128) + (x448 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x443 as u128) + (x448 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x445 as u128) + (x445 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x447 as u128) + (x450 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x457: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x457, (((x451 >> 63) as fiat_secp256k1_u1) & ((((((((x443 as u128) + (x448 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x443 as u128) + (x448 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x446 as u128) + (x449 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x444 as u128) + (x444 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x458: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x458, (((x451 >> 63) as fiat_secp256k1_u1) & ((((((((x443 as u128) + (x448 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x443 as u128) + (x448 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x447 as u128) + (x450 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x445 as u128) + (x445 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x459: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x459, ((x454 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x453);
  let mut x460: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x460, ((x454 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x455);
  let mut x461: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x461, ((x454 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x456);
  let x462: u64 = (((((!((((0x1 as u128) + (x452 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x463: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x463, (((x462 >> 63) as fiat_secp256k1_u1) & ((((((((x454 as u128) + (x459 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x454 as u128) + (x459 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x452 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x452 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x464: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x464, (((x462 >> 63) as fiat_secp256k1_u1) & ((((((((x454 as u128) + (x459 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x454 as u128) + (x459 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x453, ((((((x454 as u128) + (x459 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x454 as u128) + (x459 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x465: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x465, (((x462 >> 63) as fiat_secp256k1_u1) & ((((((((x454 as u128) + (x459 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x454 as u128) + (x459 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x454 as u128) + (x459 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x454 as u128) + (x459 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x453) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x466: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x466, (((x462 >> 63) as fiat_secp256k1_u1) & ((((((((x454 as u128) + (x459 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x454 as u128) + (x459 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x455 as u128) + (x455 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x457 as u128) + (x460 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x467: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x467, (((x462 >> 63) as fiat_secp256k1_u1) & ((((((((x454 as u128) + (x459 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x454 as u128) + (x459 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x456 as u128) + (x456 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x458 as u128) + (x461 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x468: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x468, (((x462 >> 63) as fiat_secp256k1_u1) & ((((((((x454 as u128) + (x459 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x454 as u128) + (x459 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x457 as u128) + (x460 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x455 as u128) + (x455 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x469: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x469, (((x462 >> 63) as fiat_secp256k1_u1) & ((((((((x454 as u128) + (x459 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x454 as u128) + (x459 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x458 as u128) + (x461 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x456 as u128) + (x456 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x470: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x470, ((x465 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x464);
  let mut x471: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x471, ((x465 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x466);
  let mut x472: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x472, ((x465 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x467);
  let x473: u64 = (((((!((((0x1 as u128) + (x463 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x474: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x474, (((x473 >> 63) as fiat_secp256k1_u1) & ((((((((x465 as u128) + (x470 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x465 as u128) + (x470 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x463 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x463 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x475: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x475, (((x473 >> 63) as fiat_secp256k1_u1) & ((((((((x465 as u128) + (x470 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x465 as u128) + (x470 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x464, ((((((x465 as u128) + (x470 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x465 as u128) + (x470 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x476: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x476, (((x473 >> 63) as fiat_secp256k1_u1) & ((((((((x465 as u128) + (x470 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x465 as u128) + (x470 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x465 as u128) + (x470 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x465 as u128) + (x470 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x464) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x477: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x477, (((x473 >> 63) as fiat_secp256k1_u1) & ((((((((x465 as u128) + (x470 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x465 as u128) + (x470 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x466 as u128) + (x466 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x468 as u128) + (x471 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x478: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x478, (((x473 >> 63) as fiat_secp256k1_u1) & ((((((((x465 as u128) + (x470 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x465 as u128) + (x470 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x467 as u128) + (x467 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x469 as u128) + (x472 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x479: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x479, (((x473 >> 63) as fiat_secp256k1_u1) & ((((((((x465 as u128) + (x470 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x465 as u128) + (x470 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x468 as u128) + (x471 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x466 as u128) + (x466 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x480: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x480, (((x473 >> 63) as fiat_secp256k1_u1) & ((((((((x465 as u128) + (x470 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x465 as u128) + (x470 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x469 as u128) + (x472 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x467 as u128) + (x467 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x481: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x481, ((x476 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x475);
  let mut x482: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x482, ((x476 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x477);
  let mut x483: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x483, ((x476 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x478);
  let x484: u64 = (((((!((((0x1 as u128) + (x474 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x485: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x485, (((x484 >> 63) as fiat_secp256k1_u1) & ((((((((x476 as u128) + (x481 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x476 as u128) + (x481 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x474 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x474 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x486: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x486, (((x484 >> 63) as fiat_secp256k1_u1) & ((((((((x476 as u128) + (x481 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x476 as u128) + (x481 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x475, ((((((x476 as u128) + (x481 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x476 as u128) + (x481 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x487: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x487, (((x484 >> 63) as fiat_secp256k1_u1) & ((((((((x476 as u128) + (x481 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x476 as u128) + (x481 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x476 as u128) + (x481 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x476 as u128) + (x481 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x475) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x488: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x488, (((x484 >> 63) as fiat_secp256k1_u1) & ((((((((x476 as u128) + (x481 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x476 as u128) + (x481 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x477 as u128) + (x477 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x479 as u128) + (x482 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x489: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x489, (((x484 >> 63) as fiat_secp256k1_u1) & ((((((((x476 as u128) + (x481 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x476 as u128) + (x481 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x478 as u128) + (x478 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x480 as u128) + (x483 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x490: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x490, (((x484 >> 63) as fiat_secp256k1_u1) & ((((((((x476 as u128) + (x481 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x476 as u128) + (x481 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x479 as u128) + (x482 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x477 as u128) + (x477 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x491: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x491, (((x484 >> 63) as fiat_secp256k1_u1) & ((((((((x476 as u128) + (x481 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x476 as u128) + (x481 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x480 as u128) + (x483 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x478 as u128) + (x478 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x492: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x492, ((x487 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x486);
  let mut x493: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x493, ((x487 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x488);
  let mut x494: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x494, ((x487 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x489);
  let x495: u64 = (((((!((((0x1 as u128) + (x485 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x496: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x496, (((x495 >> 63) as fiat_secp256k1_u1) & ((((((((x487 as u128) + (x492 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x487 as u128) + (x492 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x485 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x485 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x497: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x497, (((x495 >> 63) as fiat_secp256k1_u1) & ((((((((x487 as u128) + (x492 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x487 as u128) + (x492 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x486, ((((((x487 as u128) + (x492 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x487 as u128) + (x492 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x498: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x498, (((x495 >> 63) as fiat_secp256k1_u1) & ((((((((x487 as u128) + (x492 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x487 as u128) + (x492 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x487 as u128) + (x492 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x487 as u128) + (x492 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x486) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x499: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x499, (((x495 >> 63) as fiat_secp256k1_u1) & ((((((((x487 as u128) + (x492 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x487 as u128) + (x492 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x488 as u128) + (x488 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x490 as u128) + (x493 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x500: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x500, (((x495 >> 63) as fiat_secp256k1_u1) & ((((((((x487 as u128) + (x492 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x487 as u128) + (x492 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x489 as u128) + (x489 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x491 as u128) + (x494 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x501: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x501, (((x495 >> 63) as fiat_secp256k1_u1) & ((((((((x487 as u128) + (x492 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x487 as u128) + (x492 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x490 as u128) + (x493 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x488 as u128) + (x488 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x502: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x502, (((x495 >> 63) as fiat_secp256k1_u1) & ((((((((x487 as u128) + (x492 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x487 as u128) + (x492 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x491 as u128) + (x494 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x489 as u128) + (x489 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x503: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x503, ((x498 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x497);
  let mut x504: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x504, ((x498 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x499);
  let mut x505: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x505, ((x498 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x500);
  let x506: u64 = (((((!((((0x1 as u128) + (x496 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x507: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x507, (((x506 >> 63) as fiat_secp256k1_u1) & ((((((((x498 as u128) + (x503 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x498 as u128) + (x503 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x496 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x496 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x508: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x508, (((x506 >> 63) as fiat_secp256k1_u1) & ((((((((x498 as u128) + (x503 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x498 as u128) + (x503 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x497, ((((((x498 as u128) + (x503 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x498 as u128) + (x503 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x509: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x509, (((x506 >> 63) as fiat_secp256k1_u1) & ((((((((x498 as u128) + (x503 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x498 as u128) + (x503 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x498 as u128) + (x503 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x498 as u128) + (x503 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x497) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x510: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x510, (((x506 >> 63) as fiat_secp256k1_u1) & ((((((((x498 as u128) + (x503 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x498 as u128) + (x503 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x499 as u128) + (x499 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x501 as u128) + (x504 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x511: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x511, (((x506 >> 63) as fiat_secp256k1_u1) & ((((((((x498 as u128) + (x503 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x498 as u128) + (x503 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x500 as u128) + (x500 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x502 as u128) + (x505 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x512: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x512, (((x506 >> 63) as fiat_secp256k1_u1) & ((((((((x498 as u128) + (x503 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x498 as u128) + (x503 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x501 as u128) + (x504 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x499 as u128) + (x499 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x513: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x513, (((x506 >> 63) as fiat_secp256k1_u1) & ((((((((x498 as u128) + (x503 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x498 as u128) + (x503 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x502 as u128) + (x505 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x500 as u128) + (x500 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x514: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x514, ((x509 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x508);
  let mut x515: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x515, ((x509 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x510);
  let mut x516: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x516, ((x509 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x511);
  let x517: u64 = (((((!((((0x1 as u128) + (x507 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x518: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x518, (((x517 >> 63) as fiat_secp256k1_u1) & ((((((((x509 as u128) + (x514 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x509 as u128) + (x514 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x507 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x507 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x519: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x519, (((x517 >> 63) as fiat_secp256k1_u1) & ((((((((x509 as u128) + (x514 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x509 as u128) + (x514 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x508, ((((((x509 as u128) + (x514 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x509 as u128) + (x514 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x520: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x520, (((x517 >> 63) as fiat_secp256k1_u1) & ((((((((x509 as u128) + (x514 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x509 as u128) + (x514 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x509 as u128) + (x514 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x509 as u128) + (x514 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x508) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x521: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x521, (((x517 >> 63) as fiat_secp256k1_u1) & ((((((((x509 as u128) + (x514 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x509 as u128) + (x514 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x510 as u128) + (x510 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x512 as u128) + (x515 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x522: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x522, (((x517 >> 63) as fiat_secp256k1_u1) & ((((((((x509 as u128) + (x514 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x509 as u128) + (x514 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x511 as u128) + (x511 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x513 as u128) + (x516 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x523: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x523, (((x517 >> 63) as fiat_secp256k1_u1) & ((((((((x509 as u128) + (x514 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x509 as u128) + (x514 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x512 as u128) + (x515 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x510 as u128) + (x510 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x524: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x524, (((x517 >> 63) as fiat_secp256k1_u1) & ((((((((x509 as u128) + (x514 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x509 as u128) + (x514 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x513 as u128) + (x516 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x511 as u128) + (x511 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x525: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x525, ((x520 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x519);
  let mut x526: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x526, ((x520 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x521);
  let mut x527: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x527, ((x520 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x522);
  let x528: u64 = (((((!((((0x1 as u128) + (x518 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x529: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x529, (((x528 >> 63) as fiat_secp256k1_u1) & ((((((((x520 as u128) + (x525 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x520 as u128) + (x525 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x518 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x518 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x530: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x530, (((x528 >> 63) as fiat_secp256k1_u1) & ((((((((x520 as u128) + (x525 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x520 as u128) + (x525 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x519, ((((((x520 as u128) + (x525 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x520 as u128) + (x525 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x531: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x531, (((x528 >> 63) as fiat_secp256k1_u1) & ((((((((x520 as u128) + (x525 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x520 as u128) + (x525 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x520 as u128) + (x525 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x520 as u128) + (x525 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x519) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x532: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x532, (((x528 >> 63) as fiat_secp256k1_u1) & ((((((((x520 as u128) + (x525 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x520 as u128) + (x525 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x521 as u128) + (x521 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x523 as u128) + (x526 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x533: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x533, (((x528 >> 63) as fiat_secp256k1_u1) & ((((((((x520 as u128) + (x525 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x520 as u128) + (x525 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x522 as u128) + (x522 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x524 as u128) + (x527 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x534: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x534, (((x528 >> 63) as fiat_secp256k1_u1) & ((((((((x520 as u128) + (x525 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x520 as u128) + (x525 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x523 as u128) + (x526 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x521 as u128) + (x521 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x535: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x535, (((x528 >> 63) as fiat_secp256k1_u1) & ((((((((x520 as u128) + (x525 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x520 as u128) + (x525 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x524 as u128) + (x527 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x522 as u128) + (x522 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x536: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x536, ((x531 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x530);
  let mut x537: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x537, ((x531 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x532);
  let mut x538: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x538, ((x531 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x533);
  let x539: u64 = (((((!((((0x1 as u128) + (x529 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x540: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x540, (((x539 >> 63) as fiat_secp256k1_u1) & ((((((((x531 as u128) + (x536 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x531 as u128) + (x536 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x529 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x529 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x541: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x541, (((x539 >> 63) as fiat_secp256k1_u1) & ((((((((x531 as u128) + (x536 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x531 as u128) + (x536 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x530, ((((((x531 as u128) + (x536 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x531 as u128) + (x536 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x542: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x542, (((x539 >> 63) as fiat_secp256k1_u1) & ((((((((x531 as u128) + (x536 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x531 as u128) + (x536 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x531 as u128) + (x536 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x531 as u128) + (x536 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x530) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x543: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x543, (((x539 >> 63) as fiat_secp256k1_u1) & ((((((((x531 as u128) + (x536 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x531 as u128) + (x536 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x532 as u128) + (x532 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x534 as u128) + (x537 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x544: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x544, (((x539 >> 63) as fiat_secp256k1_u1) & ((((((((x531 as u128) + (x536 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x531 as u128) + (x536 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x533 as u128) + (x533 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x535 as u128) + (x538 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x545: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x545, (((x539 >> 63) as fiat_secp256k1_u1) & ((((((((x531 as u128) + (x536 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x531 as u128) + (x536 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x534 as u128) + (x537 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x532 as u128) + (x532 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x546: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x546, (((x539 >> 63) as fiat_secp256k1_u1) & ((((((((x531 as u128) + (x536 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x531 as u128) + (x536 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x535 as u128) + (x538 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x533 as u128) + (x533 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x547: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x547, ((x542 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x541);
  let mut x548: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x548, ((x542 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x543);
  let mut x549: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x549, ((x542 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x544);
  let x550: u64 = (((((!((((0x1 as u128) + (x540 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x551: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x551, (((x550 >> 63) as fiat_secp256k1_u1) & ((((((((x542 as u128) + (x547 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x542 as u128) + (x547 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x540 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x540 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x552: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x552, (((x550 >> 63) as fiat_secp256k1_u1) & ((((((((x542 as u128) + (x547 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x542 as u128) + (x547 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x541, ((((((x542 as u128) + (x547 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x542 as u128) + (x547 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x553: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x553, (((x550 >> 63) as fiat_secp256k1_u1) & ((((((((x542 as u128) + (x547 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x542 as u128) + (x547 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x542 as u128) + (x547 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x542 as u128) + (x547 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x541) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x554: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x554, (((x550 >> 63) as fiat_secp256k1_u1) & ((((((((x542 as u128) + (x547 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x542 as u128) + (x547 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x543 as u128) + (x543 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x545 as u128) + (x548 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x555: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x555, (((x550 >> 63) as fiat_secp256k1_u1) & ((((((((x542 as u128) + (x547 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x542 as u128) + (x547 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x544 as u128) + (x544 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x546 as u128) + (x549 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x556: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x556, (((x550 >> 63) as fiat_secp256k1_u1) & ((((((((x542 as u128) + (x547 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x542 as u128) + (x547 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x545 as u128) + (x548 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x543 as u128) + (x543 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x557: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x557, (((x550 >> 63) as fiat_secp256k1_u1) & ((((((((x542 as u128) + (x547 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x542 as u128) + (x547 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x546 as u128) + (x549 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x544 as u128) + (x544 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x558: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x558, ((x553 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x552);
  let mut x559: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x559, ((x553 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x554);
  let mut x560: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x560, ((x553 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x555);
  let x561: u64 = (((((!((((0x1 as u128) + (x551 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x562: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x562, (((x561 >> 63) as fiat_secp256k1_u1) & ((((((((x553 as u128) + (x558 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x553 as u128) + (x558 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x551 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x551 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x563: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x563, (((x561 >> 63) as fiat_secp256k1_u1) & ((((((((x553 as u128) + (x558 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x553 as u128) + (x558 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x552, ((((((x553 as u128) + (x558 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x553 as u128) + (x558 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x564: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x564, (((x561 >> 63) as fiat_secp256k1_u1) & ((((((((x553 as u128) + (x558 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x553 as u128) + (x558 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x553 as u128) + (x558 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x553 as u128) + (x558 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x552) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x565: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x565, (((x561 >> 63) as fiat_secp256k1_u1) & ((((((((x553 as u128) + (x558 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x553 as u128) + (x558 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x554 as u128) + (x554 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x556 as u128) + (x559 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x566: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x566, (((x561 >> 63) as fiat_secp256k1_u1) & ((((((((x553 as u128) + (x558 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x553 as u128) + (x558 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x555 as u128) + (x555 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x557 as u128) + (x560 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x567: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x567, (((x561 >> 63) as fiat_secp256k1_u1) & ((((((((x553 as u128) + (x558 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x553 as u128) + (x558 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x556 as u128) + (x559 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x554 as u128) + (x554 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x568: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x568, (((x561 >> 63) as fiat_secp256k1_u1) & ((((((((x553 as u128) + (x558 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x553 as u128) + (x558 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x557 as u128) + (x560 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x555 as u128) + (x555 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x569: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x569, ((x564 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x563);
  let mut x570: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x570, ((x564 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x565);
  let mut x571: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x571, ((x564 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x566);
  let x572: u64 = (((((!((((0x1 as u128) + (x562 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x573: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x573, (((x572 >> 63) as fiat_secp256k1_u1) & ((((((((x564 as u128) + (x569 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x564 as u128) + (x569 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x562 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x562 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x574: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x574, (((x572 >> 63) as fiat_secp256k1_u1) & ((((((((x564 as u128) + (x569 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x564 as u128) + (x569 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x563, ((((((x564 as u128) + (x569 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x564 as u128) + (x569 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x575: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x575, (((x572 >> 63) as fiat_secp256k1_u1) & ((((((((x564 as u128) + (x569 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x564 as u128) + (x569 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x564 as u128) + (x569 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x564 as u128) + (x569 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x563) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x576: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x576, (((x572 >> 63) as fiat_secp256k1_u1) & ((((((((x564 as u128) + (x569 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x564 as u128) + (x569 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x565 as u128) + (x565 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x567 as u128) + (x570 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x577: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x577, (((x572 >> 63) as fiat_secp256k1_u1) & ((((((((x564 as u128) + (x569 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x564 as u128) + (x569 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x566 as u128) + (x566 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x568 as u128) + (x571 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x578: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x578, (((x572 >> 63) as fiat_secp256k1_u1) & ((((((((x564 as u128) + (x569 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x564 as u128) + (x569 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x567 as u128) + (x570 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x565 as u128) + (x565 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x579: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x579, (((x572 >> 63) as fiat_secp256k1_u1) & ((((((((x564 as u128) + (x569 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x564 as u128) + (x569 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x568 as u128) + (x571 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x566 as u128) + (x566 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x580: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x580, ((x575 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x574);
  let mut x581: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x581, ((x575 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x576);
  let mut x582: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x582, ((x575 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x577);
  let x583: u64 = (((((!((((0x1 as u128) + (x573 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x584: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x584, (((x583 >> 63) as fiat_secp256k1_u1) & ((((((((x575 as u128) + (x580 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x575 as u128) + (x580 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x573 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x573 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x585: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x585, (((x583 >> 63) as fiat_secp256k1_u1) & ((((((((x575 as u128) + (x580 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x575 as u128) + (x580 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x574, ((((((x575 as u128) + (x580 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x575 as u128) + (x580 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x586: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x586, (((x583 >> 63) as fiat_secp256k1_u1) & ((((((((x575 as u128) + (x580 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x575 as u128) + (x580 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x575 as u128) + (x580 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x575 as u128) + (x580 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x574) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x587: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x587, (((x583 >> 63) as fiat_secp256k1_u1) & ((((((((x575 as u128) + (x580 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x575 as u128) + (x580 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x576 as u128) + (x576 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x578 as u128) + (x581 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x588: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x588, (((x583 >> 63) as fiat_secp256k1_u1) & ((((((((x575 as u128) + (x580 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x575 as u128) + (x580 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x577 as u128) + (x577 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x579 as u128) + (x582 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x589: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x589, (((x583 >> 63) as fiat_secp256k1_u1) & ((((((((x575 as u128) + (x580 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x575 as u128) + (x580 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x578 as u128) + (x581 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x576 as u128) + (x576 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x590: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x590, (((x583 >> 63) as fiat_secp256k1_u1) & ((((((((x575 as u128) + (x580 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x575 as u128) + (x580 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x579 as u128) + (x582 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x577 as u128) + (x577 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x591: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x591, ((x586 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x585);
  let mut x592: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x592, ((x586 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x587);
  let mut x593: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x593, ((x586 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x588);
  let x594: u64 = (((((!((((0x1 as u128) + (x584 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x595: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x595, (((x594 >> 63) as fiat_secp256k1_u1) & ((((((((x586 as u128) + (x591 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x586 as u128) + (x591 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x584 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x584 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x596: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x596, (((x594 >> 63) as fiat_secp256k1_u1) & ((((((((x586 as u128) + (x591 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x586 as u128) + (x591 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x585, ((((((x586 as u128) + (x591 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x586 as u128) + (x591 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x597: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x597, (((x594 >> 63) as fiat_secp256k1_u1) & ((((((((x586 as u128) + (x591 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x586 as u128) + (x591 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x586 as u128) + (x591 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x586 as u128) + (x591 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x585) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x598: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x598, (((x594 >> 63) as fiat_secp256k1_u1) & ((((((((x586 as u128) + (x591 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x586 as u128) + (x591 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x587 as u128) + (x587 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x589 as u128) + (x592 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x599: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x599, (((x594 >> 63) as fiat_secp256k1_u1) & ((((((((x586 as u128) + (x591 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x586 as u128) + (x591 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x588 as u128) + (x588 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x590 as u128) + (x593 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x600: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x600, (((x594 >> 63) as fiat_secp256k1_u1) & ((((((((x586 as u128) + (x591 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x586 as u128) + (x591 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x589 as u128) + (x592 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x587 as u128) + (x587 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x601: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x601, (((x594 >> 63) as fiat_secp256k1_u1) & ((((((((x586 as u128) + (x591 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x586 as u128) + (x591 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x590 as u128) + (x593 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x588 as u128) + (x588 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x602: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x602, ((x597 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x596);
  let mut x603: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x603, ((x597 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x598);
  let mut x604: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x604, ((x597 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x599);
  let x605: u64 = (((((!((((0x1 as u128) + (x595 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x606: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x606, (((x605 >> 63) as fiat_secp256k1_u1) & ((((((((x597 as u128) + (x602 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x597 as u128) + (x602 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x595 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x595 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x607: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x607, (((x605 >> 63) as fiat_secp256k1_u1) & ((((((((x597 as u128) + (x602 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x597 as u128) + (x602 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x596, ((((((x597 as u128) + (x602 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x597 as u128) + (x602 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x608: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x608, (((x605 >> 63) as fiat_secp256k1_u1) & ((((((((x597 as u128) + (x602 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x597 as u128) + (x602 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x597 as u128) + (x602 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x597 as u128) + (x602 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x596) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x609: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x609, (((x605 >> 63) as fiat_secp256k1_u1) & ((((((((x597 as u128) + (x602 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x597 as u128) + (x602 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x598 as u128) + (x598 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x600 as u128) + (x603 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x610: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x610, (((x605 >> 63) as fiat_secp256k1_u1) & ((((((((x597 as u128) + (x602 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x597 as u128) + (x602 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x599 as u128) + (x599 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x601 as u128) + (x604 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x611: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x611, (((x605 >> 63) as fiat_secp256k1_u1) & ((((((((x597 as u128) + (x602 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x597 as u128) + (x602 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x600 as u128) + (x603 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x598 as u128) + (x598 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x612: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x612, (((x605 >> 63) as fiat_secp256k1_u1) & ((((((((x597 as u128) + (x602 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x597 as u128) + (x602 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x601 as u128) + (x604 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x599 as u128) + (x599 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x613: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x613, ((x608 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x607);
  let mut x614: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x614, ((x608 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x609);
  let mut x615: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x615, ((x608 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x610);
  let x616: u64 = (((((!((((0x1 as u128) + (x606 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x617: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x617, (((x616 >> 63) as fiat_secp256k1_u1) & ((((((((x608 as u128) + (x613 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x608 as u128) + (x613 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x606 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x606 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x618: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x618, (((x616 >> 63) as fiat_secp256k1_u1) & ((((((((x608 as u128) + (x613 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x608 as u128) + (x613 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x607, ((((((x608 as u128) + (x613 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x608 as u128) + (x613 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x619: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x619, (((x616 >> 63) as fiat_secp256k1_u1) & ((((((((x608 as u128) + (x613 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x608 as u128) + (x613 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x608 as u128) + (x613 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x608 as u128) + (x613 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x607) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x620: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x620, (((x616 >> 63) as fiat_secp256k1_u1) & ((((((((x608 as u128) + (x613 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x608 as u128) + (x613 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x609 as u128) + (x609 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x611 as u128) + (x614 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x621: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x621, (((x616 >> 63) as fiat_secp256k1_u1) & ((((((((x608 as u128) + (x613 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x608 as u128) + (x613 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x610 as u128) + (x610 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x612 as u128) + (x615 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x622: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x622, (((x616 >> 63) as fiat_secp256k1_u1) & ((((((((x608 as u128) + (x613 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x608 as u128) + (x613 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x611 as u128) + (x614 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x609 as u128) + (x609 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x623: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x623, (((x616 >> 63) as fiat_secp256k1_u1) & ((((((((x608 as u128) + (x613 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x608 as u128) + (x613 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x612 as u128) + (x615 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x610 as u128) + (x610 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x624: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x624, ((x619 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x618);
  let mut x625: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x625, ((x619 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x620);
  let mut x626: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x626, ((x619 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x621);
  let x627: u64 = (((((!((((0x1 as u128) + (x617 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x628: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x628, (((x627 >> 63) as fiat_secp256k1_u1) & ((((((((x619 as u128) + (x624 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x619 as u128) + (x624 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x617 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x617 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x629: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x629, (((x627 >> 63) as fiat_secp256k1_u1) & ((((((((x619 as u128) + (x624 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x619 as u128) + (x624 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x618, ((((((x619 as u128) + (x624 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x619 as u128) + (x624 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x630: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x630, (((x627 >> 63) as fiat_secp256k1_u1) & ((((((((x619 as u128) + (x624 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x619 as u128) + (x624 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x619 as u128) + (x624 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x619 as u128) + (x624 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x618) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x631: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x631, (((x627 >> 63) as fiat_secp256k1_u1) & ((((((((x619 as u128) + (x624 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x619 as u128) + (x624 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x620 as u128) + (x620 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x622 as u128) + (x625 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x632: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x632, (((x627 >> 63) as fiat_secp256k1_u1) & ((((((((x619 as u128) + (x624 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x619 as u128) + (x624 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x621 as u128) + (x621 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x623 as u128) + (x626 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x633: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x633, (((x627 >> 63) as fiat_secp256k1_u1) & ((((((((x619 as u128) + (x624 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x619 as u128) + (x624 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x622 as u128) + (x625 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x620 as u128) + (x620 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x634: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x634, (((x627 >> 63) as fiat_secp256k1_u1) & ((((((((x619 as u128) + (x624 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x619 as u128) + (x624 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x623 as u128) + (x626 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x621 as u128) + (x621 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x635: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x635, ((x630 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x629);
  let mut x636: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x636, ((x630 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x631);
  let mut x637: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x637, ((x630 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x632);
  let x638: u64 = (((((!((((0x1 as u128) + (x628 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x639: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x639, (((x638 >> 63) as fiat_secp256k1_u1) & ((((((((x630 as u128) + (x635 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x630 as u128) + (x635 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x628 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x628 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x640: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x640, (((x638 >> 63) as fiat_secp256k1_u1) & ((((((((x630 as u128) + (x635 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x630 as u128) + (x635 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x629, ((((((x630 as u128) + (x635 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x630 as u128) + (x635 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x641: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x641, (((x638 >> 63) as fiat_secp256k1_u1) & ((((((((x630 as u128) + (x635 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x630 as u128) + (x635 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x630 as u128) + (x635 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x630 as u128) + (x635 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x629) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x642: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x642, (((x638 >> 63) as fiat_secp256k1_u1) & ((((((((x630 as u128) + (x635 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x630 as u128) + (x635 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x631 as u128) + (x631 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x633 as u128) + (x636 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x643: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x643, (((x638 >> 63) as fiat_secp256k1_u1) & ((((((((x630 as u128) + (x635 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x630 as u128) + (x635 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x632 as u128) + (x632 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x634 as u128) + (x637 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x644: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x644, (((x638 >> 63) as fiat_secp256k1_u1) & ((((((((x630 as u128) + (x635 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x630 as u128) + (x635 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x633 as u128) + (x636 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x631 as u128) + (x631 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x645: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x645, (((x638 >> 63) as fiat_secp256k1_u1) & ((((((((x630 as u128) + (x635 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x630 as u128) + (x635 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x634 as u128) + (x637 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x632 as u128) + (x632 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x646: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x646, ((x641 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x640);
  let mut x647: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x647, ((x641 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x642);
  let mut x648: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x648, ((x641 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x643);
  let x649: u64 = (((((!((((0x1 as u128) + (x639 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x650: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x650, (((x649 >> 63) as fiat_secp256k1_u1) & ((((((((x641 as u128) + (x646 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x641 as u128) + (x646 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x639 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x639 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x651: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x651, (((x649 >> 63) as fiat_secp256k1_u1) & ((((((((x641 as u128) + (x646 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x641 as u128) + (x646 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x640, ((((((x641 as u128) + (x646 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x641 as u128) + (x646 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x652: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x652, (((x649 >> 63) as fiat_secp256k1_u1) & ((((((((x641 as u128) + (x646 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x641 as u128) + (x646 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x641 as u128) + (x646 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x641 as u128) + (x646 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x640) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x653: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x653, (((x649 >> 63) as fiat_secp256k1_u1) & ((((((((x641 as u128) + (x646 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x641 as u128) + (x646 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x642 as u128) + (x642 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x644 as u128) + (x647 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x654: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x654, (((x649 >> 63) as fiat_secp256k1_u1) & ((((((((x641 as u128) + (x646 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x641 as u128) + (x646 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x643 as u128) + (x643 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x645 as u128) + (x648 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x655: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x655, (((x649 >> 63) as fiat_secp256k1_u1) & ((((((((x641 as u128) + (x646 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x641 as u128) + (x646 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x644 as u128) + (x647 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x642 as u128) + (x642 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x656: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x656, (((x649 >> 63) as fiat_secp256k1_u1) & ((((((((x641 as u128) + (x646 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x641 as u128) + (x646 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x645 as u128) + (x648 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x643 as u128) + (x643 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x657: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x657, ((x652 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x651);
  let mut x658: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x658, ((x652 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x653);
  let mut x659: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x659, ((x652 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x654);
  let x660: u64 = (((((!((((0x1 as u128) + (x650 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x661: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x661, (((x660 >> 63) as fiat_secp256k1_u1) & ((((((((x652 as u128) + (x657 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x652 as u128) + (x657 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((0x1 as u128) + (x650 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((0x1 as u128) + (x650 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x662: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x662, (((x660 >> 63) as fiat_secp256k1_u1) & ((((((((x652 as u128) + (x657 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x652 as u128) + (x657 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), x651, ((((((x652 as u128) + (x657 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x652 as u128) + (x657 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)));
  let mut x663: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x663, (((x660 >> 63) as fiat_secp256k1_u1) & ((((((((x652 as u128) + (x657 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x652 as u128) + (x657 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x652 as u128) + (x657 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x652 as u128) + (x657 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x651) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x664: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x664, (((x660 >> 63) as fiat_secp256k1_u1) & ((((((((x652 as u128) + (x657 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x652 as u128) + (x657 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x653 as u128) + (x653 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x655 as u128) + (x658 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x665: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x665, (((x660 >> 63) as fiat_secp256k1_u1) & ((((((((x652 as u128) + (x657 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x652 as u128) + (x657 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x654 as u128) + (x654 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x656 as u128) + (x659 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x666: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x666, (((x660 >> 63) as fiat_secp256k1_u1) & ((((((((x652 as u128) + (x657 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x652 as u128) + (x657 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x655 as u128) + (x658 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x653 as u128) + (x653 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x667: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x667, (((x660 >> 63) as fiat_secp256k1_u1) & ((((((((x652 as u128) + (x657 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x652 as u128) + (x657 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x656 as u128) + (x659 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x654 as u128) + (x654 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x668: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x668, ((x663 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x662);
  let mut x669: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x669, ((x663 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x664);
  let mut x670: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x670, ((x663 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x665);
  let x671: u64 = (((((!((((0x1 as u128) + (x661 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x672: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x672, (((x671 >> 63) as fiat_secp256k1_u1) & ((((((((x663 as u128) + (x668 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x663 as u128) + (x668 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((((x663 as u128) + (x668 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x663 as u128) + (x668 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)), (((((!x662) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x673: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x673, (((x671 >> 63) as fiat_secp256k1_u1) & ((((((((x663 as u128) + (x668 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x663 as u128) + (x668 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x664 as u128) + (x664 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x666 as u128) + (x669 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x674: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x674, (((x671 >> 63) as fiat_secp256k1_u1) & ((((((((x663 as u128) + (x668 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x663 as u128) + (x668 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x665 as u128) + (x665 as u128)) & (0xffffffffffffffff as u128)) as u64), ((((x667 as u128) + (x670 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x675: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x675, (((x671 >> 63) as fiat_secp256k1_u1) & ((((((((x663 as u128) + (x668 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x663 as u128) + (x668 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x666 as u128) + (x669 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x664 as u128) + (x664 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x676: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x676, (((x671 >> 63) as fiat_secp256k1_u1) & ((((((((x663 as u128) + (x668 as u128)) & (0xffffffffffffffff as u128)) as u64) & 0x8000000000000000) | (((((x663 as u128) + (x668 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 1)) & (0x1 as u64)) as fiat_secp256k1_u1)), ((((x667 as u128) + (x670 as u128)) & (0xffffffffffffffff as u128)) as u64), (((((!((((x665 as u128) + (x665 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64));
  let mut x677: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x677, ((x672 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x673);
  let mut x678: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x678, ((x672 & (0x1 as u64)) as fiat_secp256k1_u1), (0x0 as u64), x674);
  let mut x679: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x679, (((arg1[4]) >> 63) as fiat_secp256k1_u1), (0x0 as u64), 0xffffffffffffffff);
  let mut x680: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x680, ((((((x673 as u128) + (x673 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 63) as fiat_secp256k1_u1), (0x0 as u64), 0xffffffffffffffff);
  let mut x681: u64 = 0;
  let mut x682: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x681, &mut x682, x680, (arg1[0]));
  let mut x683: u64 = 0;
  let mut x684: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x683, &mut x684, x680, (arg1[1]));
  let mut x685: u64 = 0;
  let mut x686: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x685, &mut x686, x680, (arg1[0]));
  let mut x687: u64 = 0;
  let mut x688: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x687, &mut x688, x680, (arg1[2]));
  let mut x689: u64 = 0;
  let mut x690: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x689, &mut x690, x680, (arg1[1]));
  let mut x691: u64 = 0;
  let mut x692: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x691, &mut x692, x680, (arg1[0]));
  let mut x693: u64 = 0;
  let mut x694: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x693, &mut x694, x680, (arg1[3]));
  let mut x695: u64 = 0;
  let mut x696: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x695, &mut x696, x680, (arg1[2]));
  let mut x697: u64 = 0;
  let mut x698: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x697, &mut x698, x680, (arg1[1]));
  let mut x699: u64 = 0;
  let mut x700: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x699, &mut x700, x680, (arg1[0]));
  let mut x701: u64 = 0;
  let mut x702: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x701, &mut x702, x680, (arg1[4]));
  let mut x703: u64 = 0;
  let mut x704: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x703, &mut x704, x680, (arg1[3]));
  let mut x705: u64 = 0;
  let mut x706: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x705, &mut x706, x680, (arg1[2]));
  let mut x707: u64 = 0;
  let mut x708: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x707, &mut x708, x680, (arg1[1]));
  let mut x709: u64 = 0;
  let mut x710: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x709, &mut x710, x680, (arg1[0]));
  let mut x711: u64 = 0;
  let mut x712: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x711, &mut x712, ((((x673 as u128) + (x673 as u128)) & (0xffffffffffffffff as u128)) as u64), x679);
  let mut x713: u64 = 0;
  let mut x714: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x713, &mut x714, ((((x673 as u128) + (x673 as u128)) & (0xffffffffffffffff as u128)) as u64), (arg1[4]));
  let mut x715: u64 = 0;
  let mut x716: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x715, &mut x716, ((((x673 as u128) + (x673 as u128)) & (0xffffffffffffffff as u128)) as u64), (arg1[3]));
  let mut x717: u64 = 0;
  let mut x718: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x717, &mut x718, ((((x673 as u128) + (x673 as u128)) & (0xffffffffffffffff as u128)) as u64), (arg1[2]));
  let mut x719: u64 = 0;
  let mut x720: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x719, &mut x720, ((((x673 as u128) + (x673 as u128)) & (0xffffffffffffffff as u128)) as u64), (arg1[1]));
  let mut x721: u64 = 0;
  let mut x722: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x721, &mut x722, ((((x673 as u128) + (x673 as u128)) & (0xffffffffffffffff as u128)) as u64), (arg1[0]));
  let mut x723: u64 = 0;
  let mut x724: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x723, &mut x724, 0x0, x714, x681);
  let mut x725: u64 = 0;
  let mut x726: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x725, &mut x726, 0x0, x723, x683);
  let mut x727: u64 = 0;
  let mut x728: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x727, &mut x728, 0x0, x716, x685);
  let mut x729: u64 = 0;
  let mut x730: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x729, &mut x730, x728, x725, x686);
  let mut x731: u64 = 0;
  let mut x732: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x731, &mut x732, 0x0, x727, x689);
  let mut x733: u64 = 0;
  let mut x734: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x733, &mut x734, x732, x729, x687);
  let mut x735: u64 = 0;
  let mut x736: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x735, &mut x736, 0x0, x718, x691);
  let mut x737: u64 = 0;
  let mut x738: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x737, &mut x738, x736, x731, x692);
  let mut x739: u64 = 0;
  let mut x740: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x739, &mut x740, x738, x733, x690);
  let mut x741: u64 = 0;
  let mut x742: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x741, &mut x742, 0x0, x735, x697);
  let mut x743: u64 = 0;
  let mut x744: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x743, &mut x744, x742, x737, x695);
  let mut x745: u64 = 0;
  let mut x746: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x745, &mut x746, x744, x739, x693);
  let mut x747: u64 = 0;
  let mut x748: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x747, &mut x748, 0x0, x720, x699);
  let mut x749: u64 = 0;
  let mut x750: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x749, &mut x750, x748, x741, x700);
  let mut x751: u64 = 0;
  let mut x752: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x751, &mut x752, x750, x743, x698);
  let mut x753: u64 = 0;
  let mut x754: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x753, &mut x754, x752, x745, x696);
  let mut x755: u64 = 0;
  let mut x756: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x755, &mut x756, 0x0, x747, x707);
  let mut x757: u64 = 0;
  let mut x758: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x757, &mut x758, x756, x749, x705);
  let mut x759: u64 = 0;
  let mut x760: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x759, &mut x760, x758, x751, x703);
  let mut x761: u64 = 0;
  let mut x762: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x761, &mut x762, x760, x753, x701);
  let mut x763: u64 = 0;
  let mut x764: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x763, &mut x764, 0x0, x722, x709);
  let mut x765: u64 = 0;
  let mut x766: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x765, &mut x766, x764, x755, x710);
  let mut x767: u64 = 0;
  let mut x768: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x767, &mut x768, x766, x757, x708);
  let mut x769: u64 = 0;
  let mut x770: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x769, &mut x770, x768, x759, x706);
  let mut x771: u64 = 0;
  let mut x772: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x771, &mut x772, x770, x761, x704);
  let mut x773: u64 = 0;
  let mut x774: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x773, &mut x774, 0x0, x763, x719);
  let mut x775: u64 = 0;
  let mut x776: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x775, &mut x776, x774, x765, x717);
  let mut x777: u64 = 0;
  let mut x778: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x777, &mut x778, x776, x767, x715);
  let mut x779: u64 = 0;
  let mut x780: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x779, &mut x780, x778, x769, x713);
  let mut x781: u64 = 0;
  let mut x782: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x781, &mut x782, x780, x771, x711);
  let mut x783: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x783, (((arg2[4]) >> 63) as fiat_secp256k1_u1), (0x0 as u64), 0xffffffffffffffff);
  let mut x784: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x784, ((((((x674 as u128) + (x674 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 63) as fiat_secp256k1_u1), (0x0 as u64), 0xffffffffffffffff);
  let mut x785: u64 = 0;
  let mut x786: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x785, &mut x786, x784, (arg2[0]));
  let mut x787: u64 = 0;
  let mut x788: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x787, &mut x788, x784, (arg2[1]));
  let mut x789: u64 = 0;
  let mut x790: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x789, &mut x790, x784, (arg2[0]));
  let mut x791: u64 = 0;
  let mut x792: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x791, &mut x792, x784, (arg2[2]));
  let mut x793: u64 = 0;
  let mut x794: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x793, &mut x794, x784, (arg2[1]));
  let mut x795: u64 = 0;
  let mut x796: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x795, &mut x796, x784, (arg2[0]));
  let mut x797: u64 = 0;
  let mut x798: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x797, &mut x798, x784, (arg2[3]));
  let mut x799: u64 = 0;
  let mut x800: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x799, &mut x800, x784, (arg2[2]));
  let mut x801: u64 = 0;
  let mut x802: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x801, &mut x802, x784, (arg2[1]));
  let mut x803: u64 = 0;
  let mut x804: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x803, &mut x804, x784, (arg2[0]));
  let mut x805: u64 = 0;
  let mut x806: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x805, &mut x806, x784, (arg2[4]));
  let mut x807: u64 = 0;
  let mut x808: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x807, &mut x808, x784, (arg2[3]));
  let mut x809: u64 = 0;
  let mut x810: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x809, &mut x810, x784, (arg2[2]));
  let mut x811: u64 = 0;
  let mut x812: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x811, &mut x812, x784, (arg2[1]));
  let mut x813: u64 = 0;
  let mut x814: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x813, &mut x814, x784, (arg2[0]));
  let mut x815: u64 = 0;
  let mut x816: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x815, &mut x816, ((((x674 as u128) + (x674 as u128)) & (0xffffffffffffffff as u128)) as u64), x783);
  let mut x817: u64 = 0;
  let mut x818: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x817, &mut x818, ((((x674 as u128) + (x674 as u128)) & (0xffffffffffffffff as u128)) as u64), (arg2[4]));
  let mut x819: u64 = 0;
  let mut x820: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x819, &mut x820, ((((x674 as u128) + (x674 as u128)) & (0xffffffffffffffff as u128)) as u64), (arg2[3]));
  let mut x821: u64 = 0;
  let mut x822: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x821, &mut x822, ((((x674 as u128) + (x674 as u128)) & (0xffffffffffffffff as u128)) as u64), (arg2[2]));
  let mut x823: u64 = 0;
  let mut x824: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x823, &mut x824, ((((x674 as u128) + (x674 as u128)) & (0xffffffffffffffff as u128)) as u64), (arg2[1]));
  let mut x825: u64 = 0;
  let mut x826: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x825, &mut x826, ((((x674 as u128) + (x674 as u128)) & (0xffffffffffffffff as u128)) as u64), (arg2[0]));
  let mut x827: u64 = 0;
  let mut x828: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x827, &mut x828, 0x0, x818, x785);
  let mut x829: u64 = 0;
  let mut x830: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x829, &mut x830, 0x0, x827, x787);
  let mut x831: u64 = 0;
  let mut x832: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x831, &mut x832, 0x0, x820, x789);
  let mut x833: u64 = 0;
  let mut x834: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x833, &mut x834, x832, x829, x790);
  let mut x835: u64 = 0;
  let mut x836: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x835, &mut x836, 0x0, x831, x793);
  let mut x837: u64 = 0;
  let mut x838: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x837, &mut x838, x836, x833, x791);
  let mut x839: u64 = 0;
  let mut x840: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x839, &mut x840, 0x0, x822, x795);
  let mut x841: u64 = 0;
  let mut x842: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x841, &mut x842, x840, x835, x796);
  let mut x843: u64 = 0;
  let mut x844: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x843, &mut x844, x842, x837, x794);
  let mut x845: u64 = 0;
  let mut x846: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x845, &mut x846, 0x0, x839, x801);
  let mut x847: u64 = 0;
  let mut x848: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x847, &mut x848, x846, x841, x799);
  let mut x849: u64 = 0;
  let mut x850: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x849, &mut x850, x848, x843, x797);
  let mut x851: u64 = 0;
  let mut x852: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x851, &mut x852, 0x0, x824, x803);
  let mut x853: u64 = 0;
  let mut x854: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x853, &mut x854, x852, x845, x804);
  let mut x855: u64 = 0;
  let mut x856: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x855, &mut x856, x854, x847, x802);
  let mut x857: u64 = 0;
  let mut x858: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x857, &mut x858, x856, x849, x800);
  let mut x859: u64 = 0;
  let mut x860: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x859, &mut x860, 0x0, x851, x811);
  let mut x861: u64 = 0;
  let mut x862: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x861, &mut x862, x860, x853, x809);
  let mut x863: u64 = 0;
  let mut x864: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x863, &mut x864, x862, x855, x807);
  let mut x865: u64 = 0;
  let mut x866: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x865, &mut x866, x864, x857, x805);
  let mut x867: u64 = 0;
  let mut x868: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x867, &mut x868, 0x0, x826, x813);
  let mut x869: u64 = 0;
  let mut x870: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x869, &mut x870, x868, x859, x814);
  let mut x871: u64 = 0;
  let mut x872: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x871, &mut x872, x870, x861, x812);
  let mut x873: u64 = 0;
  let mut x874: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x873, &mut x874, x872, x863, x810);
  let mut x875: u64 = 0;
  let mut x876: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x875, &mut x876, x874, x865, x808);
  let mut x877: u64 = 0;
  let mut x878: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x877, &mut x878, 0x0, x867, x823);
  let mut x879: u64 = 0;
  let mut x880: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x879, &mut x880, x878, x869, x821);
  let mut x881: u64 = 0;
  let mut x882: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x881, &mut x882, x880, x871, x819);
  let mut x883: u64 = 0;
  let mut x884: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x883, &mut x884, x882, x873, x817);
  let mut x885: u64 = 0;
  let mut x886: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x885, &mut x886, x884, x875, x815);
  let mut x887: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x887, (((arg1[4]) >> 63) as fiat_secp256k1_u1), (0x0 as u64), 0xffffffffffffffff);
  let mut x888: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x888, ((((((x675 as u128) + (x677 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 63) as fiat_secp256k1_u1), (0x0 as u64), 0xffffffffffffffff);
  let mut x889: u64 = 0;
  let mut x890: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x889, &mut x890, x888, (arg1[0]));
  let mut x891: u64 = 0;
  let mut x892: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x891, &mut x892, x888, (arg1[1]));
  let mut x893: u64 = 0;
  let mut x894: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x893, &mut x894, x888, (arg1[0]));
  let mut x895: u64 = 0;
  let mut x896: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x895, &mut x896, x888, (arg1[2]));
  let mut x897: u64 = 0;
  let mut x898: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x897, &mut x898, x888, (arg1[1]));
  let mut x899: u64 = 0;
  let mut x900: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x899, &mut x900, x888, (arg1[0]));
  let mut x901: u64 = 0;
  let mut x902: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x901, &mut x902, x888, (arg1[3]));
  let mut x903: u64 = 0;
  let mut x904: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x903, &mut x904, x888, (arg1[2]));
  let mut x905: u64 = 0;
  let mut x906: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x905, &mut x906, x888, (arg1[1]));
  let mut x907: u64 = 0;
  let mut x908: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x907, &mut x908, x888, (arg1[0]));
  let mut x909: u64 = 0;
  let mut x910: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x909, &mut x910, x888, (arg1[4]));
  let mut x911: u64 = 0;
  let mut x912: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x911, &mut x912, x888, (arg1[3]));
  let mut x913: u64 = 0;
  let mut x914: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x913, &mut x914, x888, (arg1[2]));
  let mut x915: u64 = 0;
  let mut x916: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x915, &mut x916, x888, (arg1[1]));
  let mut x917: u64 = 0;
  let mut x918: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x917, &mut x918, x888, (arg1[0]));
  let mut x919: u64 = 0;
  let mut x920: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x919, &mut x920, ((((x675 as u128) + (x677 as u128)) & (0xffffffffffffffff as u128)) as u64), x887);
  let mut x921: u64 = 0;
  let mut x922: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x921, &mut x922, ((((x675 as u128) + (x677 as u128)) & (0xffffffffffffffff as u128)) as u64), (arg1[4]));
  let mut x923: u64 = 0;
  let mut x924: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x923, &mut x924, ((((x675 as u128) + (x677 as u128)) & (0xffffffffffffffff as u128)) as u64), (arg1[3]));
  let mut x925: u64 = 0;
  let mut x926: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x925, &mut x926, ((((x675 as u128) + (x677 as u128)) & (0xffffffffffffffff as u128)) as u64), (arg1[2]));
  let mut x927: u64 = 0;
  let mut x928: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x927, &mut x928, ((((x675 as u128) + (x677 as u128)) & (0xffffffffffffffff as u128)) as u64), (arg1[1]));
  let mut x929: u64 = 0;
  let mut x930: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x929, &mut x930, ((((x675 as u128) + (x677 as u128)) & (0xffffffffffffffff as u128)) as u64), (arg1[0]));
  let mut x931: u64 = 0;
  let mut x932: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x931, &mut x932, 0x0, x922, x889);
  let mut x933: u64 = 0;
  let mut x934: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x933, &mut x934, 0x0, x931, x891);
  let mut x935: u64 = 0;
  let mut x936: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x935, &mut x936, 0x0, x924, x893);
  let mut x937: u64 = 0;
  let mut x938: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x937, &mut x938, x936, x933, x894);
  let mut x939: u64 = 0;
  let mut x940: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x939, &mut x940, 0x0, x935, x897);
  let mut x941: u64 = 0;
  let mut x942: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x941, &mut x942, x940, x937, x895);
  let mut x943: u64 = 0;
  let mut x944: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x943, &mut x944, 0x0, x926, x899);
  let mut x945: u64 = 0;
  let mut x946: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x945, &mut x946, x944, x939, x900);
  let mut x947: u64 = 0;
  let mut x948: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x947, &mut x948, x946, x941, x898);
  let mut x949: u64 = 0;
  let mut x950: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x949, &mut x950, 0x0, x943, x905);
  let mut x951: u64 = 0;
  let mut x952: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x951, &mut x952, x950, x945, x903);
  let mut x953: u64 = 0;
  let mut x954: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x953, &mut x954, x952, x947, x901);
  let mut x955: u64 = 0;
  let mut x956: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x955, &mut x956, 0x0, x928, x907);
  let mut x957: u64 = 0;
  let mut x958: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x957, &mut x958, x956, x949, x908);
  let mut x959: u64 = 0;
  let mut x960: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x959, &mut x960, x958, x951, x906);
  let mut x961: u64 = 0;
  let mut x962: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x961, &mut x962, x960, x953, x904);
  let mut x963: u64 = 0;
  let mut x964: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x963, &mut x964, 0x0, x955, x915);
  let mut x965: u64 = 0;
  let mut x966: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x965, &mut x966, x964, x957, x913);
  let mut x967: u64 = 0;
  let mut x968: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x967, &mut x968, x966, x959, x911);
  let mut x969: u64 = 0;
  let mut x970: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x969, &mut x970, x968, x961, x909);
  let mut x971: u64 = 0;
  let mut x972: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x971, &mut x972, 0x0, x930, x917);
  let mut x973: u64 = 0;
  let mut x974: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x973, &mut x974, x972, x963, x918);
  let mut x975: u64 = 0;
  let mut x976: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x975, &mut x976, x974, x965, x916);
  let mut x977: u64 = 0;
  let mut x978: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x977, &mut x978, x976, x967, x914);
  let mut x979: u64 = 0;
  let mut x980: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x979, &mut x980, x978, x969, x912);
  let mut x981: u64 = 0;
  let mut x982: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x981, &mut x982, 0x0, x971, x927);
  let mut x983: u64 = 0;
  let mut x984: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x983, &mut x984, x982, x973, x925);
  let mut x985: u64 = 0;
  let mut x986: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x985, &mut x986, x984, x975, x923);
  let mut x987: u64 = 0;
  let mut x988: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x987, &mut x988, x986, x977, x921);
  let mut x989: u64 = 0;
  let mut x990: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x989, &mut x990, x988, x979, x919);
  let mut x991: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x991, (((arg2[4]) >> 63) as fiat_secp256k1_u1), (0x0 as u64), 0xffffffffffffffff);
  let mut x992: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x992, ((((((x676 as u128) + (x678 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 63) as fiat_secp256k1_u1), (0x0 as u64), 0xffffffffffffffff);
  let mut x993: u64 = 0;
  let mut x994: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x993, &mut x994, x992, (arg2[0]));
  let mut x995: u64 = 0;
  let mut x996: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x995, &mut x996, x992, (arg2[1]));
  let mut x997: u64 = 0;
  let mut x998: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x997, &mut x998, x992, (arg2[0]));
  let mut x999: u64 = 0;
  let mut x1000: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x999, &mut x1000, x992, (arg2[2]));
  let mut x1001: u64 = 0;
  let mut x1002: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1001, &mut x1002, x992, (arg2[1]));
  let mut x1003: u64 = 0;
  let mut x1004: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1003, &mut x1004, x992, (arg2[0]));
  let mut x1005: u64 = 0;
  let mut x1006: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1005, &mut x1006, x992, (arg2[3]));
  let mut x1007: u64 = 0;
  let mut x1008: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1007, &mut x1008, x992, (arg2[2]));
  let mut x1009: u64 = 0;
  let mut x1010: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1009, &mut x1010, x992, (arg2[1]));
  let mut x1011: u64 = 0;
  let mut x1012: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1011, &mut x1012, x992, (arg2[0]));
  let mut x1013: u64 = 0;
  let mut x1014: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1013, &mut x1014, x992, (arg2[4]));
  let mut x1015: u64 = 0;
  let mut x1016: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1015, &mut x1016, x992, (arg2[3]));
  let mut x1017: u64 = 0;
  let mut x1018: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1017, &mut x1018, x992, (arg2[2]));
  let mut x1019: u64 = 0;
  let mut x1020: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1019, &mut x1020, x992, (arg2[1]));
  let mut x1021: u64 = 0;
  let mut x1022: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1021, &mut x1022, x992, (arg2[0]));
  let mut x1023: u64 = 0;
  let mut x1024: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1023, &mut x1024, ((((x676 as u128) + (x678 as u128)) & (0xffffffffffffffff as u128)) as u64), x991);
  let mut x1025: u64 = 0;
  let mut x1026: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1025, &mut x1026, ((((x676 as u128) + (x678 as u128)) & (0xffffffffffffffff as u128)) as u64), (arg2[4]));
  let mut x1027: u64 = 0;
  let mut x1028: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1027, &mut x1028, ((((x676 as u128) + (x678 as u128)) & (0xffffffffffffffff as u128)) as u64), (arg2[3]));
  let mut x1029: u64 = 0;
  let mut x1030: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1029, &mut x1030, ((((x676 as u128) + (x678 as u128)) & (0xffffffffffffffff as u128)) as u64), (arg2[2]));
  let mut x1031: u64 = 0;
  let mut x1032: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1031, &mut x1032, ((((x676 as u128) + (x678 as u128)) & (0xffffffffffffffff as u128)) as u64), (arg2[1]));
  let mut x1033: u64 = 0;
  let mut x1034: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1033, &mut x1034, ((((x676 as u128) + (x678 as u128)) & (0xffffffffffffffff as u128)) as u64), (arg2[0]));
  let mut x1035: u64 = 0;
  let mut x1036: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1035, &mut x1036, 0x0, x1026, x993);
  let mut x1037: u64 = 0;
  let mut x1038: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1037, &mut x1038, 0x0, x1035, x995);
  let mut x1039: u64 = 0;
  let mut x1040: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1039, &mut x1040, 0x0, x1028, x997);
  let mut x1041: u64 = 0;
  let mut x1042: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1041, &mut x1042, x1040, x1037, x998);
  let mut x1043: u64 = 0;
  let mut x1044: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1043, &mut x1044, 0x0, x1039, x1001);
  let mut x1045: u64 = 0;
  let mut x1046: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1045, &mut x1046, x1044, x1041, x999);
  let mut x1047: u64 = 0;
  let mut x1048: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1047, &mut x1048, 0x0, x1030, x1003);
  let mut x1049: u64 = 0;
  let mut x1050: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1049, &mut x1050, x1048, x1043, x1004);
  let mut x1051: u64 = 0;
  let mut x1052: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1051, &mut x1052, x1050, x1045, x1002);
  let mut x1053: u64 = 0;
  let mut x1054: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1053, &mut x1054, 0x0, x1047, x1009);
  let mut x1055: u64 = 0;
  let mut x1056: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1055, &mut x1056, x1054, x1049, x1007);
  let mut x1057: u64 = 0;
  let mut x1058: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1057, &mut x1058, x1056, x1051, x1005);
  let mut x1059: u64 = 0;
  let mut x1060: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1059, &mut x1060, 0x0, x1032, x1011);
  let mut x1061: u64 = 0;
  let mut x1062: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1061, &mut x1062, x1060, x1053, x1012);
  let mut x1063: u64 = 0;
  let mut x1064: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1063, &mut x1064, x1062, x1055, x1010);
  let mut x1065: u64 = 0;
  let mut x1066: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1065, &mut x1066, x1064, x1057, x1008);
  let mut x1067: u64 = 0;
  let mut x1068: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1067, &mut x1068, 0x0, x1059, x1019);
  let mut x1069: u64 = 0;
  let mut x1070: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1069, &mut x1070, x1068, x1061, x1017);
  let mut x1071: u64 = 0;
  let mut x1072: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1071, &mut x1072, x1070, x1063, x1015);
  let mut x1073: u64 = 0;
  let mut x1074: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1073, &mut x1074, x1072, x1065, x1013);
  let mut x1075: u64 = 0;
  let mut x1076: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1075, &mut x1076, 0x0, x1034, x1021);
  let mut x1077: u64 = 0;
  let mut x1078: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1077, &mut x1078, x1076, x1067, x1022);
  let mut x1079: u64 = 0;
  let mut x1080: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1079, &mut x1080, x1078, x1069, x1020);
  let mut x1081: u64 = 0;
  let mut x1082: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1081, &mut x1082, x1080, x1071, x1018);
  let mut x1083: u64 = 0;
  let mut x1084: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1083, &mut x1084, x1082, x1073, x1016);
  let mut x1085: u64 = 0;
  let mut x1086: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1085, &mut x1086, 0x0, x1075, x1031);
  let mut x1087: u64 = 0;
  let mut x1088: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1087, &mut x1088, x1086, x1077, x1029);
  let mut x1089: u64 = 0;
  let mut x1090: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1089, &mut x1090, x1088, x1079, x1027);
  let mut x1091: u64 = 0;
  let mut x1092: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1091, &mut x1092, x1090, x1081, x1025);
  let mut x1093: u64 = 0;
  let mut x1094: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1093, &mut x1094, x1092, x1083, x1023);
  let mut x1095: u64 = 0;
  let mut x1096: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1095, &mut x1096, 0x0, x721, x825);
  let mut x1097: u64 = 0;
  let mut x1098: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1097, &mut x1098, x1096, x773, x877);
  let mut x1099: u64 = 0;
  let mut x1100: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1099, &mut x1100, x1098, x775, x879);
  let mut x1101: u64 = 0;
  let mut x1102: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1101, &mut x1102, x1100, x777, x881);
  let mut x1103: u64 = 0;
  let mut x1104: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1103, &mut x1104, x1102, x779, x883);
  let mut x1105: u64 = 0;
  let mut x1106: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1105, &mut x1106, x1104, x781, x885);
  let mut x1107: u64 = 0;
  let mut x1108: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1107, &mut x1108, 0x0, x929, x1033);
  let mut x1109: u64 = 0;
  let mut x1110: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1109, &mut x1110, x1108, x981, x1085);
  let mut x1111: u64 = 0;
  let mut x1112: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1111, &mut x1112, x1110, x983, x1087);
  let mut x1113: u64 = 0;
  let mut x1114: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1113, &mut x1114, x1112, x985, x1089);
  let mut x1115: u64 = 0;
  let mut x1116: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1115, &mut x1116, x1114, x987, x1091);
  let mut x1117: u64 = 0;
  let mut x1118: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1117, &mut x1118, x1116, x989, x1093);
  let x1119: u64 = ((x1095 >> 62) | ((x1097 << 2) & 0xffffffffffffffff));
  let x1120: u64 = ((x1097 >> 62) | ((x1099 << 2) & 0xffffffffffffffff));
  let x1121: u64 = ((x1099 >> 62) | ((x1101 << 2) & 0xffffffffffffffff));
  let x1122: u64 = ((x1101 >> 62) | ((x1103 << 2) & 0xffffffffffffffff));
  let x1123: u64 = ((x1103 >> 62) | ((x1105 << 2) & 0xffffffffffffffff));
  let x1124: u64 = ((x1107 >> 62) | ((x1109 << 2) & 0xffffffffffffffff));
  let x1125: u64 = ((x1109 >> 62) | ((x1111 << 2) & 0xffffffffffffffff));
  let x1126: u64 = ((x1111 >> 62) | ((x1113 << 2) & 0xffffffffffffffff));
  let x1127: u64 = ((x1113 >> 62) | ((x1115 << 2) & 0xffffffffffffffff));
  let x1128: u64 = ((x1115 >> 62) | ((x1117 << 2) & 0xffffffffffffffff));
  let x1129: fiat_secp256k1_u1 = ((((((x673 as u128) + (x673 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 63) as fiat_secp256k1_u1);
  let x1130: u64 = (((((!((((x673 as u128) + (x673 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let x1131: u64 = ((((x673 as u128) + (x673 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x1132: u64 = 0;
  let mut x1133: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1132, &mut x1133, 0x0, (0x0 as u64), x1130);
  let mut x1134: u64 = 0;
  let mut x1135: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1134, &mut x1135, x1133, (0x0 as u64), (0x0 as u64));
  let mut x1136: u64 = 0;
  let mut x1137: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1136, &mut x1137, x1135, (0x0 as u64), (0x0 as u64));
  let mut x1138: u64 = 0;
  let mut x1139: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1138, &mut x1139, x1137, (0x0 as u64), (0x0 as u64));
  let mut x1140: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1140, x1139, (0x0 as u64), 0xffffffffffffffff);
  let mut x1141: u64 = 0;
  let mut x1142: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1141, &mut x1142, 0x0, x1132, (x1140 & 0xfffffffefffffc2f));
  let mut x1143: u64 = 0;
  let mut x1144: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1143, &mut x1144, x1142, x1134, x1140);
  let mut x1145: u64 = 0;
  let mut x1146: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1145, &mut x1146, x1144, x1136, x1140);
  let mut x1147: u64 = 0;
  let mut x1148: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1147, &mut x1148, x1146, x1138, x1140);
  let mut x1149: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1149, x1129, x1131, x1141);
  let mut x1150: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1150, x1129, (0x0 as u64), x1143);
  let mut x1151: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1151, x1129, (0x0 as u64), x1145);
  let mut x1152: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1152, x1129, (0x0 as u64), x1147);
  let x1153: fiat_secp256k1_u1 = ((((((x674 as u128) + (x674 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 63) as fiat_secp256k1_u1);
  let x1154: u64 = (((((!((((x674 as u128) + (x674 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let x1155: u64 = ((((x674 as u128) + (x674 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x1156: u64 = 0;
  let mut x1157: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1156, &mut x1157, 0x0, (0x0 as u64), x1154);
  let mut x1158: u64 = 0;
  let mut x1159: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1158, &mut x1159, x1157, (0x0 as u64), (0x0 as u64));
  let mut x1160: u64 = 0;
  let mut x1161: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1160, &mut x1161, x1159, (0x0 as u64), (0x0 as u64));
  let mut x1162: u64 = 0;
  let mut x1163: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1162, &mut x1163, x1161, (0x0 as u64), (0x0 as u64));
  let mut x1164: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1164, x1163, (0x0 as u64), 0xffffffffffffffff);
  let mut x1165: u64 = 0;
  let mut x1166: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1165, &mut x1166, 0x0, x1156, (x1164 & 0xfffffffefffffc2f));
  let mut x1167: u64 = 0;
  let mut x1168: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1167, &mut x1168, x1166, x1158, x1164);
  let mut x1169: u64 = 0;
  let mut x1170: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1169, &mut x1170, x1168, x1160, x1164);
  let mut x1171: u64 = 0;
  let mut x1172: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1171, &mut x1172, x1170, x1162, x1164);
  let mut x1173: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1173, x1153, x1155, x1165);
  let mut x1174: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1174, x1153, (0x0 as u64), x1167);
  let mut x1175: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1175, x1153, (0x0 as u64), x1169);
  let mut x1176: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1176, x1153, (0x0 as u64), x1171);
  let x1177: fiat_secp256k1_u1 = ((((((x675 as u128) + (x677 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 63) as fiat_secp256k1_u1);
  let x1178: u64 = (((((!((((x675 as u128) + (x677 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let x1179: u64 = ((((x675 as u128) + (x677 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x1180: u64 = 0;
  let mut x1181: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1180, &mut x1181, 0x0, (0x0 as u64), x1178);
  let mut x1182: u64 = 0;
  let mut x1183: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1182, &mut x1183, x1181, (0x0 as u64), (0x0 as u64));
  let mut x1184: u64 = 0;
  let mut x1185: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1184, &mut x1185, x1183, (0x0 as u64), (0x0 as u64));
  let mut x1186: u64 = 0;
  let mut x1187: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1186, &mut x1187, x1185, (0x0 as u64), (0x0 as u64));
  let mut x1188: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1188, x1187, (0x0 as u64), 0xffffffffffffffff);
  let mut x1189: u64 = 0;
  let mut x1190: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1189, &mut x1190, 0x0, x1180, (x1188 & 0xfffffffefffffc2f));
  let mut x1191: u64 = 0;
  let mut x1192: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1191, &mut x1192, x1190, x1182, x1188);
  let mut x1193: u64 = 0;
  let mut x1194: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1193, &mut x1194, x1192, x1184, x1188);
  let mut x1195: u64 = 0;
  let mut x1196: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1195, &mut x1196, x1194, x1186, x1188);
  let mut x1197: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1197, x1177, x1179, x1189);
  let mut x1198: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1198, x1177, (0x0 as u64), x1191);
  let mut x1199: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1199, x1177, (0x0 as u64), x1193);
  let mut x1200: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1200, x1177, (0x0 as u64), x1195);
  let x1201: fiat_secp256k1_u1 = ((((((x676 as u128) + (x678 as u128)) & (0xffffffffffffffff as u128)) as u64) >> 63) as fiat_secp256k1_u1);
  let x1202: u64 = (((((!((((x676 as u128) + (x678 as u128)) & (0xffffffffffffffff as u128)) as u64)) as u128) + (0x1 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let x1203: u64 = ((((x676 as u128) + (x678 as u128)) & (0xffffffffffffffff as u128)) as u64);
  let mut x1204: u64 = 0;
  let mut x1205: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1204, &mut x1205, 0x0, (0x0 as u64), x1202);
  let mut x1206: u64 = 0;
  let mut x1207: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1206, &mut x1207, x1205, (0x0 as u64), (0x0 as u64));
  let mut x1208: u64 = 0;
  let mut x1209: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1208, &mut x1209, x1207, (0x0 as u64), (0x0 as u64));
  let mut x1210: u64 = 0;
  let mut x1211: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1210, &mut x1211, x1209, (0x0 as u64), (0x0 as u64));
  let mut x1212: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1212, x1211, (0x0 as u64), 0xffffffffffffffff);
  let mut x1213: u64 = 0;
  let mut x1214: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1213, &mut x1214, 0x0, x1204, (x1212 & 0xfffffffefffffc2f));
  let mut x1215: u64 = 0;
  let mut x1216: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1215, &mut x1216, x1214, x1206, x1212);
  let mut x1217: u64 = 0;
  let mut x1218: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1217, &mut x1218, x1216, x1208, x1212);
  let mut x1219: u64 = 0;
  let mut x1220: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1219, &mut x1220, x1218, x1210, x1212);
  let mut x1221: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1221, x1201, x1203, x1213);
  let mut x1222: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1222, x1201, (0x0 as u64), x1215);
  let mut x1223: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1223, x1201, (0x0 as u64), x1217);
  let mut x1224: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1224, x1201, (0x0 as u64), x1219);
  let mut x1225: u64 = 0;
  let mut x1226: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1225, &mut x1226, x1149, (arg3[3]));
  let mut x1227: u64 = 0;
  let mut x1228: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1227, &mut x1228, x1149, (arg3[2]));
  let mut x1229: u64 = 0;
  let mut x1230: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1229, &mut x1230, x1149, (arg3[1]));
  let mut x1231: u64 = 0;
  let mut x1232: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1231, &mut x1232, x1149, (arg3[0]));
  let mut x1233: u64 = 0;
  let mut x1234: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1233, &mut x1234, 0x0, x1232, x1229);
  let mut x1235: u64 = 0;
  let mut x1236: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1235, &mut x1236, x1234, x1230, x1227);
  let mut x1237: u64 = 0;
  let mut x1238: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1237, &mut x1238, x1236, x1228, x1225);
  let x1239: u64 = ((x1238 as u64) + x1226);
  let mut x1240: u64 = 0;
  let mut x1241: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1240, &mut x1241, x1231, 0xd838091dd2253531);
  let mut x1242: u64 = 0;
  let mut x1243: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1242, &mut x1243, x1240, 0xffffffffffffffff);
  let mut x1244: u64 = 0;
  let mut x1245: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1244, &mut x1245, x1240, 0xffffffffffffffff);
  let mut x1246: u64 = 0;
  let mut x1247: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1246, &mut x1247, x1240, 0xffffffffffffffff);
  let mut x1248: u64 = 0;
  let mut x1249: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1248, &mut x1249, x1240, 0xfffffffefffffc2f);
  let mut x1250: u64 = 0;
  let mut x1251: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1250, &mut x1251, 0x0, x1249, x1246);
  let mut x1252: u64 = 0;
  let mut x1253: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1252, &mut x1253, x1251, x1247, x1244);
  let mut x1254: u64 = 0;
  let mut x1255: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1254, &mut x1255, x1253, x1245, x1242);
  let x1256: u64 = ((x1255 as u64) + x1243);
  let mut x1257: u64 = 0;
  let mut x1258: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1257, &mut x1258, 0x0, x1231, x1248);
  let mut x1259: u64 = 0;
  let mut x1260: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1259, &mut x1260, x1258, x1233, x1250);
  let mut x1261: u64 = 0;
  let mut x1262: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1261, &mut x1262, x1260, x1235, x1252);
  let mut x1263: u64 = 0;
  let mut x1264: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1263, &mut x1264, x1262, x1237, x1254);
  let mut x1265: u64 = 0;
  let mut x1266: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1265, &mut x1266, x1264, x1239, x1256);
  let mut x1267: u64 = 0;
  let mut x1268: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1267, &mut x1268, x1150, (arg3[3]));
  let mut x1269: u64 = 0;
  let mut x1270: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1269, &mut x1270, x1150, (arg3[2]));
  let mut x1271: u64 = 0;
  let mut x1272: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1271, &mut x1272, x1150, (arg3[1]));
  let mut x1273: u64 = 0;
  let mut x1274: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1273, &mut x1274, x1150, (arg3[0]));
  let mut x1275: u64 = 0;
  let mut x1276: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1275, &mut x1276, 0x0, x1274, x1271);
  let mut x1277: u64 = 0;
  let mut x1278: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1277, &mut x1278, x1276, x1272, x1269);
  let mut x1279: u64 = 0;
  let mut x1280: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1279, &mut x1280, x1278, x1270, x1267);
  let x1281: u64 = ((x1280 as u64) + x1268);
  let mut x1282: u64 = 0;
  let mut x1283: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1282, &mut x1283, 0x0, x1259, x1273);
  let mut x1284: u64 = 0;
  let mut x1285: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1284, &mut x1285, x1283, x1261, x1275);
  let mut x1286: u64 = 0;
  let mut x1287: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1286, &mut x1287, x1285, x1263, x1277);
  let mut x1288: u64 = 0;
  let mut x1289: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1288, &mut x1289, x1287, x1265, x1279);
  let mut x1290: u64 = 0;
  let mut x1291: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1290, &mut x1291, x1289, (x1266 as u64), x1281);
  let mut x1292: u64 = 0;
  let mut x1293: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1292, &mut x1293, x1282, 0xd838091dd2253531);
  let mut x1294: u64 = 0;
  let mut x1295: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1294, &mut x1295, x1292, 0xffffffffffffffff);
  let mut x1296: u64 = 0;
  let mut x1297: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1296, &mut x1297, x1292, 0xffffffffffffffff);
  let mut x1298: u64 = 0;
  let mut x1299: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1298, &mut x1299, x1292, 0xffffffffffffffff);
  let mut x1300: u64 = 0;
  let mut x1301: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1300, &mut x1301, x1292, 0xfffffffefffffc2f);
  let mut x1302: u64 = 0;
  let mut x1303: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1302, &mut x1303, 0x0, x1301, x1298);
  let mut x1304: u64 = 0;
  let mut x1305: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1304, &mut x1305, x1303, x1299, x1296);
  let mut x1306: u64 = 0;
  let mut x1307: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1306, &mut x1307, x1305, x1297, x1294);
  let x1308: u64 = ((x1307 as u64) + x1295);
  let mut x1309: u64 = 0;
  let mut x1310: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1309, &mut x1310, 0x0, x1282, x1300);
  let mut x1311: u64 = 0;
  let mut x1312: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1311, &mut x1312, x1310, x1284, x1302);
  let mut x1313: u64 = 0;
  let mut x1314: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1313, &mut x1314, x1312, x1286, x1304);
  let mut x1315: u64 = 0;
  let mut x1316: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1315, &mut x1316, x1314, x1288, x1306);
  let mut x1317: u64 = 0;
  let mut x1318: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1317, &mut x1318, x1316, x1290, x1308);
  let x1319: u64 = ((x1318 as u64) + (x1291 as u64));
  let mut x1320: u64 = 0;
  let mut x1321: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1320, &mut x1321, x1151, (arg3[3]));
  let mut x1322: u64 = 0;
  let mut x1323: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1322, &mut x1323, x1151, (arg3[2]));
  let mut x1324: u64 = 0;
  let mut x1325: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1324, &mut x1325, x1151, (arg3[1]));
  let mut x1326: u64 = 0;
  let mut x1327: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1326, &mut x1327, x1151, (arg3[0]));
  let mut x1328: u64 = 0;
  let mut x1329: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1328, &mut x1329, 0x0, x1327, x1324);
  let mut x1330: u64 = 0;
  let mut x1331: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1330, &mut x1331, x1329, x1325, x1322);
  let mut x1332: u64 = 0;
  let mut x1333: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1332, &mut x1333, x1331, x1323, x1320);
  let x1334: u64 = ((x1333 as u64) + x1321);
  let mut x1335: u64 = 0;
  let mut x1336: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1335, &mut x1336, 0x0, x1311, x1326);
  let mut x1337: u64 = 0;
  let mut x1338: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1337, &mut x1338, x1336, x1313, x1328);
  let mut x1339: u64 = 0;
  let mut x1340: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1339, &mut x1340, x1338, x1315, x1330);
  let mut x1341: u64 = 0;
  let mut x1342: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1341, &mut x1342, x1340, x1317, x1332);
  let mut x1343: u64 = 0;
  let mut x1344: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1343, &mut x1344, x1342, x1319, x1334);
  let mut x1345: u64 = 0;
  let mut x1346: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1345, &mut x1346, x1335, 0xd838091dd2253531);
  let mut x1347: u64 = 0;
  let mut x1348: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1347, &mut x1348, x1345, 0xffffffffffffffff);
  let mut x1349: u64 = 0;
  let mut x1350: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1349, &mut x1350, x1345, 0xffffffffffffffff);
  let mut x1351: u64 = 0;
  let mut x1352: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1351, &mut x1352, x1345, 0xffffffffffffffff);
  let mut x1353: u64 = 0;
  let mut x1354: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1353, &mut x1354, x1345, 0xfffffffefffffc2f);
  let mut x1355: u64 = 0;
  let mut x1356: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1355, &mut x1356, 0x0, x1354, x1351);
  let mut x1357: u64 = 0;
  let mut x1358: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1357, &mut x1358, x1356, x1352, x1349);
  let mut x1359: u64 = 0;
  let mut x1360: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1359, &mut x1360, x1358, x1350, x1347);
  let x1361: u64 = ((x1360 as u64) + x1348);
  let mut x1362: u64 = 0;
  let mut x1363: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1362, &mut x1363, 0x0, x1335, x1353);
  let mut x1364: u64 = 0;
  let mut x1365: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1364, &mut x1365, x1363, x1337, x1355);
  let mut x1366: u64 = 0;
  let mut x1367: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1366, &mut x1367, x1365, x1339, x1357);
  let mut x1368: u64 = 0;
  let mut x1369: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1368, &mut x1369, x1367, x1341, x1359);
  let mut x1370: u64 = 0;
  let mut x1371: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1370, &mut x1371, x1369, x1343, x1361);
  let x1372: u64 = ((x1371 as u64) + (x1344 as u64));
  let mut x1373: u64 = 0;
  let mut x1374: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1373, &mut x1374, x1152, (arg3[3]));
  let mut x1375: u64 = 0;
  let mut x1376: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1375, &mut x1376, x1152, (arg3[2]));
  let mut x1377: u64 = 0;
  let mut x1378: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1377, &mut x1378, x1152, (arg3[1]));
  let mut x1379: u64 = 0;
  let mut x1380: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1379, &mut x1380, x1152, (arg3[0]));
  let mut x1381: u64 = 0;
  let mut x1382: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1381, &mut x1382, 0x0, x1380, x1377);
  let mut x1383: u64 = 0;
  let mut x1384: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1383, &mut x1384, x1382, x1378, x1375);
  let mut x1385: u64 = 0;
  let mut x1386: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1385, &mut x1386, x1384, x1376, x1373);
  let x1387: u64 = ((x1386 as u64) + x1374);
  let mut x1388: u64 = 0;
  let mut x1389: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1388, &mut x1389, 0x0, x1364, x1379);
  let mut x1390: u64 = 0;
  let mut x1391: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1390, &mut x1391, x1389, x1366, x1381);
  let mut x1392: u64 = 0;
  let mut x1393: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1392, &mut x1393, x1391, x1368, x1383);
  let mut x1394: u64 = 0;
  let mut x1395: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1394, &mut x1395, x1393, x1370, x1385);
  let mut x1396: u64 = 0;
  let mut x1397: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1396, &mut x1397, x1395, x1372, x1387);
  let mut x1398: u64 = 0;
  let mut x1399: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1398, &mut x1399, x1388, 0xd838091dd2253531);
  let mut x1400: u64 = 0;
  let mut x1401: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1400, &mut x1401, x1398, 0xffffffffffffffff);
  let mut x1402: u64 = 0;
  let mut x1403: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1402, &mut x1403, x1398, 0xffffffffffffffff);
  let mut x1404: u64 = 0;
  let mut x1405: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1404, &mut x1405, x1398, 0xffffffffffffffff);
  let mut x1406: u64 = 0;
  let mut x1407: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1406, &mut x1407, x1398, 0xfffffffefffffc2f);
  let mut x1408: u64 = 0;
  let mut x1409: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1408, &mut x1409, 0x0, x1407, x1404);
  let mut x1410: u64 = 0;
  let mut x1411: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1410, &mut x1411, x1409, x1405, x1402);
  let mut x1412: u64 = 0;
  let mut x1413: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1412, &mut x1413, x1411, x1403, x1400);
  let x1414: u64 = ((x1413 as u64) + x1401);
  let mut x1415: u64 = 0;
  let mut x1416: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1415, &mut x1416, 0x0, x1388, x1406);
  let mut x1417: u64 = 0;
  let mut x1418: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1417, &mut x1418, x1416, x1390, x1408);
  let mut x1419: u64 = 0;
  let mut x1420: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1419, &mut x1420, x1418, x1392, x1410);
  let mut x1421: u64 = 0;
  let mut x1422: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1421, &mut x1422, x1420, x1394, x1412);
  let mut x1423: u64 = 0;
  let mut x1424: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1423, &mut x1424, x1422, x1396, x1414);
  let x1425: u64 = ((x1424 as u64) + (x1397 as u64));
  let mut x1426: u64 = 0;
  let mut x1427: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1426, &mut x1427, 0x0, x1417, 0xfffffffefffffc2f);
  let mut x1428: u64 = 0;
  let mut x1429: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1428, &mut x1429, x1427, x1419, 0xffffffffffffffff);
  let mut x1430: u64 = 0;
  let mut x1431: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1430, &mut x1431, x1429, x1421, 0xffffffffffffffff);
  let mut x1432: u64 = 0;
  let mut x1433: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1432, &mut x1433, x1431, x1423, 0xffffffffffffffff);
  let mut x1434: u64 = 0;
  let mut x1435: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1434, &mut x1435, x1433, x1425, (0x0 as u64));
  let mut x1436: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1436, x1435, x1426, x1417);
  let mut x1437: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1437, x1435, x1428, x1419);
  let mut x1438: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1438, x1435, x1430, x1421);
  let mut x1439: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1439, x1435, x1432, x1423);
  let mut x1440: u64 = 0;
  let mut x1441: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1440, &mut x1441, x1173, (arg4[3]));
  let mut x1442: u64 = 0;
  let mut x1443: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1442, &mut x1443, x1173, (arg4[2]));
  let mut x1444: u64 = 0;
  let mut x1445: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1444, &mut x1445, x1173, (arg4[1]));
  let mut x1446: u64 = 0;
  let mut x1447: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1446, &mut x1447, x1173, (arg4[0]));
  let mut x1448: u64 = 0;
  let mut x1449: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1448, &mut x1449, 0x0, x1447, x1444);
  let mut x1450: u64 = 0;
  let mut x1451: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1450, &mut x1451, x1449, x1445, x1442);
  let mut x1452: u64 = 0;
  let mut x1453: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1452, &mut x1453, x1451, x1443, x1440);
  let x1454: u64 = ((x1453 as u64) + x1441);
  let mut x1455: u64 = 0;
  let mut x1456: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1455, &mut x1456, x1446, 0xd838091dd2253531);
  let mut x1457: u64 = 0;
  let mut x1458: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1457, &mut x1458, x1455, 0xffffffffffffffff);
  let mut x1459: u64 = 0;
  let mut x1460: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1459, &mut x1460, x1455, 0xffffffffffffffff);
  let mut x1461: u64 = 0;
  let mut x1462: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1461, &mut x1462, x1455, 0xffffffffffffffff);
  let mut x1463: u64 = 0;
  let mut x1464: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1463, &mut x1464, x1455, 0xfffffffefffffc2f);
  let mut x1465: u64 = 0;
  let mut x1466: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1465, &mut x1466, 0x0, x1464, x1461);
  let mut x1467: u64 = 0;
  let mut x1468: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1467, &mut x1468, x1466, x1462, x1459);
  let mut x1469: u64 = 0;
  let mut x1470: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1469, &mut x1470, x1468, x1460, x1457);
  let x1471: u64 = ((x1470 as u64) + x1458);
  let mut x1472: u64 = 0;
  let mut x1473: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1472, &mut x1473, 0x0, x1446, x1463);
  let mut x1474: u64 = 0;
  let mut x1475: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1474, &mut x1475, x1473, x1448, x1465);
  let mut x1476: u64 = 0;
  let mut x1477: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1476, &mut x1477, x1475, x1450, x1467);
  let mut x1478: u64 = 0;
  let mut x1479: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1478, &mut x1479, x1477, x1452, x1469);
  let mut x1480: u64 = 0;
  let mut x1481: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1480, &mut x1481, x1479, x1454, x1471);
  let mut x1482: u64 = 0;
  let mut x1483: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1482, &mut x1483, x1174, (arg4[3]));
  let mut x1484: u64 = 0;
  let mut x1485: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1484, &mut x1485, x1174, (arg4[2]));
  let mut x1486: u64 = 0;
  let mut x1487: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1486, &mut x1487, x1174, (arg4[1]));
  let mut x1488: u64 = 0;
  let mut x1489: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1488, &mut x1489, x1174, (arg4[0]));
  let mut x1490: u64 = 0;
  let mut x1491: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1490, &mut x1491, 0x0, x1489, x1486);
  let mut x1492: u64 = 0;
  let mut x1493: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1492, &mut x1493, x1491, x1487, x1484);
  let mut x1494: u64 = 0;
  let mut x1495: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1494, &mut x1495, x1493, x1485, x1482);
  let x1496: u64 = ((x1495 as u64) + x1483);
  let mut x1497: u64 = 0;
  let mut x1498: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1497, &mut x1498, 0x0, x1474, x1488);
  let mut x1499: u64 = 0;
  let mut x1500: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1499, &mut x1500, x1498, x1476, x1490);
  let mut x1501: u64 = 0;
  let mut x1502: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1501, &mut x1502, x1500, x1478, x1492);
  let mut x1503: u64 = 0;
  let mut x1504: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1503, &mut x1504, x1502, x1480, x1494);
  let mut x1505: u64 = 0;
  let mut x1506: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1505, &mut x1506, x1504, (x1481 as u64), x1496);
  let mut x1507: u64 = 0;
  let mut x1508: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1507, &mut x1508, x1497, 0xd838091dd2253531);
  let mut x1509: u64 = 0;
  let mut x1510: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1509, &mut x1510, x1507, 0xffffffffffffffff);
  let mut x1511: u64 = 0;
  let mut x1512: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1511, &mut x1512, x1507, 0xffffffffffffffff);
  let mut x1513: u64 = 0;
  let mut x1514: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1513, &mut x1514, x1507, 0xffffffffffffffff);
  let mut x1515: u64 = 0;
  let mut x1516: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1515, &mut x1516, x1507, 0xfffffffefffffc2f);
  let mut x1517: u64 = 0;
  let mut x1518: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1517, &mut x1518, 0x0, x1516, x1513);
  let mut x1519: u64 = 0;
  let mut x1520: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1519, &mut x1520, x1518, x1514, x1511);
  let mut x1521: u64 = 0;
  let mut x1522: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1521, &mut x1522, x1520, x1512, x1509);
  let x1523: u64 = ((x1522 as u64) + x1510);
  let mut x1524: u64 = 0;
  let mut x1525: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1524, &mut x1525, 0x0, x1497, x1515);
  let mut x1526: u64 = 0;
  let mut x1527: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1526, &mut x1527, x1525, x1499, x1517);
  let mut x1528: u64 = 0;
  let mut x1529: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1528, &mut x1529, x1527, x1501, x1519);
  let mut x1530: u64 = 0;
  let mut x1531: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1530, &mut x1531, x1529, x1503, x1521);
  let mut x1532: u64 = 0;
  let mut x1533: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1532, &mut x1533, x1531, x1505, x1523);
  let x1534: u64 = ((x1533 as u64) + (x1506 as u64));
  let mut x1535: u64 = 0;
  let mut x1536: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1535, &mut x1536, x1175, (arg4[3]));
  let mut x1537: u64 = 0;
  let mut x1538: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1537, &mut x1538, x1175, (arg4[2]));
  let mut x1539: u64 = 0;
  let mut x1540: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1539, &mut x1540, x1175, (arg4[1]));
  let mut x1541: u64 = 0;
  let mut x1542: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1541, &mut x1542, x1175, (arg4[0]));
  let mut x1543: u64 = 0;
  let mut x1544: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1543, &mut x1544, 0x0, x1542, x1539);
  let mut x1545: u64 = 0;
  let mut x1546: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1545, &mut x1546, x1544, x1540, x1537);
  let mut x1547: u64 = 0;
  let mut x1548: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1547, &mut x1548, x1546, x1538, x1535);
  let x1549: u64 = ((x1548 as u64) + x1536);
  let mut x1550: u64 = 0;
  let mut x1551: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1550, &mut x1551, 0x0, x1526, x1541);
  let mut x1552: u64 = 0;
  let mut x1553: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1552, &mut x1553, x1551, x1528, x1543);
  let mut x1554: u64 = 0;
  let mut x1555: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1554, &mut x1555, x1553, x1530, x1545);
  let mut x1556: u64 = 0;
  let mut x1557: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1556, &mut x1557, x1555, x1532, x1547);
  let mut x1558: u64 = 0;
  let mut x1559: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1558, &mut x1559, x1557, x1534, x1549);
  let mut x1560: u64 = 0;
  let mut x1561: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1560, &mut x1561, x1550, 0xd838091dd2253531);
  let mut x1562: u64 = 0;
  let mut x1563: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1562, &mut x1563, x1560, 0xffffffffffffffff);
  let mut x1564: u64 = 0;
  let mut x1565: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1564, &mut x1565, x1560, 0xffffffffffffffff);
  let mut x1566: u64 = 0;
  let mut x1567: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1566, &mut x1567, x1560, 0xffffffffffffffff);
  let mut x1568: u64 = 0;
  let mut x1569: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1568, &mut x1569, x1560, 0xfffffffefffffc2f);
  let mut x1570: u64 = 0;
  let mut x1571: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1570, &mut x1571, 0x0, x1569, x1566);
  let mut x1572: u64 = 0;
  let mut x1573: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1572, &mut x1573, x1571, x1567, x1564);
  let mut x1574: u64 = 0;
  let mut x1575: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1574, &mut x1575, x1573, x1565, x1562);
  let x1576: u64 = ((x1575 as u64) + x1563);
  let mut x1577: u64 = 0;
  let mut x1578: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1577, &mut x1578, 0x0, x1550, x1568);
  let mut x1579: u64 = 0;
  let mut x1580: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1579, &mut x1580, x1578, x1552, x1570);
  let mut x1581: u64 = 0;
  let mut x1582: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1581, &mut x1582, x1580, x1554, x1572);
  let mut x1583: u64 = 0;
  let mut x1584: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1583, &mut x1584, x1582, x1556, x1574);
  let mut x1585: u64 = 0;
  let mut x1586: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1585, &mut x1586, x1584, x1558, x1576);
  let x1587: u64 = ((x1586 as u64) + (x1559 as u64));
  let mut x1588: u64 = 0;
  let mut x1589: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1588, &mut x1589, x1176, (arg4[3]));
  let mut x1590: u64 = 0;
  let mut x1591: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1590, &mut x1591, x1176, (arg4[2]));
  let mut x1592: u64 = 0;
  let mut x1593: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1592, &mut x1593, x1176, (arg4[1]));
  let mut x1594: u64 = 0;
  let mut x1595: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1594, &mut x1595, x1176, (arg4[0]));
  let mut x1596: u64 = 0;
  let mut x1597: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1596, &mut x1597, 0x0, x1595, x1592);
  let mut x1598: u64 = 0;
  let mut x1599: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1598, &mut x1599, x1597, x1593, x1590);
  let mut x1600: u64 = 0;
  let mut x1601: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1600, &mut x1601, x1599, x1591, x1588);
  let x1602: u64 = ((x1601 as u64) + x1589);
  let mut x1603: u64 = 0;
  let mut x1604: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1603, &mut x1604, 0x0, x1579, x1594);
  let mut x1605: u64 = 0;
  let mut x1606: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1605, &mut x1606, x1604, x1581, x1596);
  let mut x1607: u64 = 0;
  let mut x1608: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1607, &mut x1608, x1606, x1583, x1598);
  let mut x1609: u64 = 0;
  let mut x1610: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1609, &mut x1610, x1608, x1585, x1600);
  let mut x1611: u64 = 0;
  let mut x1612: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1611, &mut x1612, x1610, x1587, x1602);
  let mut x1613: u64 = 0;
  let mut x1614: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1613, &mut x1614, x1603, 0xd838091dd2253531);
  let mut x1615: u64 = 0;
  let mut x1616: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1615, &mut x1616, x1613, 0xffffffffffffffff);
  let mut x1617: u64 = 0;
  let mut x1618: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1617, &mut x1618, x1613, 0xffffffffffffffff);
  let mut x1619: u64 = 0;
  let mut x1620: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1619, &mut x1620, x1613, 0xffffffffffffffff);
  let mut x1621: u64 = 0;
  let mut x1622: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1621, &mut x1622, x1613, 0xfffffffefffffc2f);
  let mut x1623: u64 = 0;
  let mut x1624: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1623, &mut x1624, 0x0, x1622, x1619);
  let mut x1625: u64 = 0;
  let mut x1626: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1625, &mut x1626, x1624, x1620, x1617);
  let mut x1627: u64 = 0;
  let mut x1628: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1627, &mut x1628, x1626, x1618, x1615);
  let x1629: u64 = ((x1628 as u64) + x1616);
  let mut x1630: u64 = 0;
  let mut x1631: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1630, &mut x1631, 0x0, x1603, x1621);
  let mut x1632: u64 = 0;
  let mut x1633: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1632, &mut x1633, x1631, x1605, x1623);
  let mut x1634: u64 = 0;
  let mut x1635: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1634, &mut x1635, x1633, x1607, x1625);
  let mut x1636: u64 = 0;
  let mut x1637: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1636, &mut x1637, x1635, x1609, x1627);
  let mut x1638: u64 = 0;
  let mut x1639: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1638, &mut x1639, x1637, x1611, x1629);
  let x1640: u64 = ((x1639 as u64) + (x1612 as u64));
  let mut x1641: u64 = 0;
  let mut x1642: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1641, &mut x1642, 0x0, x1632, 0xfffffffefffffc2f);
  let mut x1643: u64 = 0;
  let mut x1644: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1643, &mut x1644, x1642, x1634, 0xffffffffffffffff);
  let mut x1645: u64 = 0;
  let mut x1646: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1645, &mut x1646, x1644, x1636, 0xffffffffffffffff);
  let mut x1647: u64 = 0;
  let mut x1648: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1647, &mut x1648, x1646, x1638, 0xffffffffffffffff);
  let mut x1649: u64 = 0;
  let mut x1650: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1649, &mut x1650, x1648, x1640, (0x0 as u64));
  let mut x1651: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1651, x1650, x1641, x1632);
  let mut x1652: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1652, x1650, x1643, x1634);
  let mut x1653: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1653, x1650, x1645, x1636);
  let mut x1654: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1654, x1650, x1647, x1638);
  let mut x1655: u64 = 0;
  let mut x1656: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1655, &mut x1656, x1197, (arg3[3]));
  let mut x1657: u64 = 0;
  let mut x1658: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1657, &mut x1658, x1197, (arg3[2]));
  let mut x1659: u64 = 0;
  let mut x1660: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1659, &mut x1660, x1197, (arg3[1]));
  let mut x1661: u64 = 0;
  let mut x1662: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1661, &mut x1662, x1197, (arg3[0]));
  let mut x1663: u64 = 0;
  let mut x1664: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1663, &mut x1664, 0x0, x1662, x1659);
  let mut x1665: u64 = 0;
  let mut x1666: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1665, &mut x1666, x1664, x1660, x1657);
  let mut x1667: u64 = 0;
  let mut x1668: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1667, &mut x1668, x1666, x1658, x1655);
  let x1669: u64 = ((x1668 as u64) + x1656);
  let mut x1670: u64 = 0;
  let mut x1671: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1670, &mut x1671, x1661, 0xd838091dd2253531);
  let mut x1672: u64 = 0;
  let mut x1673: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1672, &mut x1673, x1670, 0xffffffffffffffff);
  let mut x1674: u64 = 0;
  let mut x1675: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1674, &mut x1675, x1670, 0xffffffffffffffff);
  let mut x1676: u64 = 0;
  let mut x1677: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1676, &mut x1677, x1670, 0xffffffffffffffff);
  let mut x1678: u64 = 0;
  let mut x1679: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1678, &mut x1679, x1670, 0xfffffffefffffc2f);
  let mut x1680: u64 = 0;
  let mut x1681: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1680, &mut x1681, 0x0, x1679, x1676);
  let mut x1682: u64 = 0;
  let mut x1683: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1682, &mut x1683, x1681, x1677, x1674);
  let mut x1684: u64 = 0;
  let mut x1685: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1684, &mut x1685, x1683, x1675, x1672);
  let x1686: u64 = ((x1685 as u64) + x1673);
  let mut x1687: u64 = 0;
  let mut x1688: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1687, &mut x1688, 0x0, x1661, x1678);
  let mut x1689: u64 = 0;
  let mut x1690: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1689, &mut x1690, x1688, x1663, x1680);
  let mut x1691: u64 = 0;
  let mut x1692: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1691, &mut x1692, x1690, x1665, x1682);
  let mut x1693: u64 = 0;
  let mut x1694: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1693, &mut x1694, x1692, x1667, x1684);
  let mut x1695: u64 = 0;
  let mut x1696: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1695, &mut x1696, x1694, x1669, x1686);
  let mut x1697: u64 = 0;
  let mut x1698: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1697, &mut x1698, x1198, (arg3[3]));
  let mut x1699: u64 = 0;
  let mut x1700: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1699, &mut x1700, x1198, (arg3[2]));
  let mut x1701: u64 = 0;
  let mut x1702: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1701, &mut x1702, x1198, (arg3[1]));
  let mut x1703: u64 = 0;
  let mut x1704: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1703, &mut x1704, x1198, (arg3[0]));
  let mut x1705: u64 = 0;
  let mut x1706: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1705, &mut x1706, 0x0, x1704, x1701);
  let mut x1707: u64 = 0;
  let mut x1708: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1707, &mut x1708, x1706, x1702, x1699);
  let mut x1709: u64 = 0;
  let mut x1710: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1709, &mut x1710, x1708, x1700, x1697);
  let x1711: u64 = ((x1710 as u64) + x1698);
  let mut x1712: u64 = 0;
  let mut x1713: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1712, &mut x1713, 0x0, x1689, x1703);
  let mut x1714: u64 = 0;
  let mut x1715: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1714, &mut x1715, x1713, x1691, x1705);
  let mut x1716: u64 = 0;
  let mut x1717: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1716, &mut x1717, x1715, x1693, x1707);
  let mut x1718: u64 = 0;
  let mut x1719: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1718, &mut x1719, x1717, x1695, x1709);
  let mut x1720: u64 = 0;
  let mut x1721: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1720, &mut x1721, x1719, (x1696 as u64), x1711);
  let mut x1722: u64 = 0;
  let mut x1723: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1722, &mut x1723, x1712, 0xd838091dd2253531);
  let mut x1724: u64 = 0;
  let mut x1725: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1724, &mut x1725, x1722, 0xffffffffffffffff);
  let mut x1726: u64 = 0;
  let mut x1727: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1726, &mut x1727, x1722, 0xffffffffffffffff);
  let mut x1728: u64 = 0;
  let mut x1729: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1728, &mut x1729, x1722, 0xffffffffffffffff);
  let mut x1730: u64 = 0;
  let mut x1731: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1730, &mut x1731, x1722, 0xfffffffefffffc2f);
  let mut x1732: u64 = 0;
  let mut x1733: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1732, &mut x1733, 0x0, x1731, x1728);
  let mut x1734: u64 = 0;
  let mut x1735: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1734, &mut x1735, x1733, x1729, x1726);
  let mut x1736: u64 = 0;
  let mut x1737: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1736, &mut x1737, x1735, x1727, x1724);
  let x1738: u64 = ((x1737 as u64) + x1725);
  let mut x1739: u64 = 0;
  let mut x1740: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1739, &mut x1740, 0x0, x1712, x1730);
  let mut x1741: u64 = 0;
  let mut x1742: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1741, &mut x1742, x1740, x1714, x1732);
  let mut x1743: u64 = 0;
  let mut x1744: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1743, &mut x1744, x1742, x1716, x1734);
  let mut x1745: u64 = 0;
  let mut x1746: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1745, &mut x1746, x1744, x1718, x1736);
  let mut x1747: u64 = 0;
  let mut x1748: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1747, &mut x1748, x1746, x1720, x1738);
  let x1749: u64 = ((x1748 as u64) + (x1721 as u64));
  let mut x1750: u64 = 0;
  let mut x1751: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1750, &mut x1751, x1199, (arg3[3]));
  let mut x1752: u64 = 0;
  let mut x1753: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1752, &mut x1753, x1199, (arg3[2]));
  let mut x1754: u64 = 0;
  let mut x1755: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1754, &mut x1755, x1199, (arg3[1]));
  let mut x1756: u64 = 0;
  let mut x1757: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1756, &mut x1757, x1199, (arg3[0]));
  let mut x1758: u64 = 0;
  let mut x1759: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1758, &mut x1759, 0x0, x1757, x1754);
  let mut x1760: u64 = 0;
  let mut x1761: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1760, &mut x1761, x1759, x1755, x1752);
  let mut x1762: u64 = 0;
  let mut x1763: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1762, &mut x1763, x1761, x1753, x1750);
  let x1764: u64 = ((x1763 as u64) + x1751);
  let mut x1765: u64 = 0;
  let mut x1766: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1765, &mut x1766, 0x0, x1741, x1756);
  let mut x1767: u64 = 0;
  let mut x1768: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1767, &mut x1768, x1766, x1743, x1758);
  let mut x1769: u64 = 0;
  let mut x1770: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1769, &mut x1770, x1768, x1745, x1760);
  let mut x1771: u64 = 0;
  let mut x1772: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1771, &mut x1772, x1770, x1747, x1762);
  let mut x1773: u64 = 0;
  let mut x1774: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1773, &mut x1774, x1772, x1749, x1764);
  let mut x1775: u64 = 0;
  let mut x1776: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1775, &mut x1776, x1765, 0xd838091dd2253531);
  let mut x1777: u64 = 0;
  let mut x1778: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1777, &mut x1778, x1775, 0xffffffffffffffff);
  let mut x1779: u64 = 0;
  let mut x1780: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1779, &mut x1780, x1775, 0xffffffffffffffff);
  let mut x1781: u64 = 0;
  let mut x1782: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1781, &mut x1782, x1775, 0xffffffffffffffff);
  let mut x1783: u64 = 0;
  let mut x1784: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1783, &mut x1784, x1775, 0xfffffffefffffc2f);
  let mut x1785: u64 = 0;
  let mut x1786: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1785, &mut x1786, 0x0, x1784, x1781);
  let mut x1787: u64 = 0;
  let mut x1788: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1787, &mut x1788, x1786, x1782, x1779);
  let mut x1789: u64 = 0;
  let mut x1790: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1789, &mut x1790, x1788, x1780, x1777);
  let x1791: u64 = ((x1790 as u64) + x1778);
  let mut x1792: u64 = 0;
  let mut x1793: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1792, &mut x1793, 0x0, x1765, x1783);
  let mut x1794: u64 = 0;
  let mut x1795: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1794, &mut x1795, x1793, x1767, x1785);
  let mut x1796: u64 = 0;
  let mut x1797: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1796, &mut x1797, x1795, x1769, x1787);
  let mut x1798: u64 = 0;
  let mut x1799: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1798, &mut x1799, x1797, x1771, x1789);
  let mut x1800: u64 = 0;
  let mut x1801: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1800, &mut x1801, x1799, x1773, x1791);
  let x1802: u64 = ((x1801 as u64) + (x1774 as u64));
  let mut x1803: u64 = 0;
  let mut x1804: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1803, &mut x1804, x1200, (arg3[3]));
  let mut x1805: u64 = 0;
  let mut x1806: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1805, &mut x1806, x1200, (arg3[2]));
  let mut x1807: u64 = 0;
  let mut x1808: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1807, &mut x1808, x1200, (arg3[1]));
  let mut x1809: u64 = 0;
  let mut x1810: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1809, &mut x1810, x1200, (arg3[0]));
  let mut x1811: u64 = 0;
  let mut x1812: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1811, &mut x1812, 0x0, x1810, x1807);
  let mut x1813: u64 = 0;
  let mut x1814: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1813, &mut x1814, x1812, x1808, x1805);
  let mut x1815: u64 = 0;
  let mut x1816: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1815, &mut x1816, x1814, x1806, x1803);
  let x1817: u64 = ((x1816 as u64) + x1804);
  let mut x1818: u64 = 0;
  let mut x1819: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1818, &mut x1819, 0x0, x1794, x1809);
  let mut x1820: u64 = 0;
  let mut x1821: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1820, &mut x1821, x1819, x1796, x1811);
  let mut x1822: u64 = 0;
  let mut x1823: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1822, &mut x1823, x1821, x1798, x1813);
  let mut x1824: u64 = 0;
  let mut x1825: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1824, &mut x1825, x1823, x1800, x1815);
  let mut x1826: u64 = 0;
  let mut x1827: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1826, &mut x1827, x1825, x1802, x1817);
  let mut x1828: u64 = 0;
  let mut x1829: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1828, &mut x1829, x1818, 0xd838091dd2253531);
  let mut x1830: u64 = 0;
  let mut x1831: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1830, &mut x1831, x1828, 0xffffffffffffffff);
  let mut x1832: u64 = 0;
  let mut x1833: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1832, &mut x1833, x1828, 0xffffffffffffffff);
  let mut x1834: u64 = 0;
  let mut x1835: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1834, &mut x1835, x1828, 0xffffffffffffffff);
  let mut x1836: u64 = 0;
  let mut x1837: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1836, &mut x1837, x1828, 0xfffffffefffffc2f);
  let mut x1838: u64 = 0;
  let mut x1839: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1838, &mut x1839, 0x0, x1837, x1834);
  let mut x1840: u64 = 0;
  let mut x1841: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1840, &mut x1841, x1839, x1835, x1832);
  let mut x1842: u64 = 0;
  let mut x1843: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1842, &mut x1843, x1841, x1833, x1830);
  let x1844: u64 = ((x1843 as u64) + x1831);
  let mut x1845: u64 = 0;
  let mut x1846: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1845, &mut x1846, 0x0, x1818, x1836);
  let mut x1847: u64 = 0;
  let mut x1848: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1847, &mut x1848, x1846, x1820, x1838);
  let mut x1849: u64 = 0;
  let mut x1850: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1849, &mut x1850, x1848, x1822, x1840);
  let mut x1851: u64 = 0;
  let mut x1852: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1851, &mut x1852, x1850, x1824, x1842);
  let mut x1853: u64 = 0;
  let mut x1854: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1853, &mut x1854, x1852, x1826, x1844);
  let x1855: u64 = ((x1854 as u64) + (x1827 as u64));
  let mut x1856: u64 = 0;
  let mut x1857: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1856, &mut x1857, 0x0, x1847, 0xfffffffefffffc2f);
  let mut x1858: u64 = 0;
  let mut x1859: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1858, &mut x1859, x1857, x1849, 0xffffffffffffffff);
  let mut x1860: u64 = 0;
  let mut x1861: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1860, &mut x1861, x1859, x1851, 0xffffffffffffffff);
  let mut x1862: u64 = 0;
  let mut x1863: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1862, &mut x1863, x1861, x1853, 0xffffffffffffffff);
  let mut x1864: u64 = 0;
  let mut x1865: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x1864, &mut x1865, x1863, x1855, (0x0 as u64));
  let mut x1866: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1866, x1865, x1856, x1847);
  let mut x1867: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1867, x1865, x1858, x1849);
  let mut x1868: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1868, x1865, x1860, x1851);
  let mut x1869: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x1869, x1865, x1862, x1853);
  let mut x1870: u64 = 0;
  let mut x1871: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1870, &mut x1871, x1221, (arg4[3]));
  let mut x1872: u64 = 0;
  let mut x1873: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1872, &mut x1873, x1221, (arg4[2]));
  let mut x1874: u64 = 0;
  let mut x1875: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1874, &mut x1875, x1221, (arg4[1]));
  let mut x1876: u64 = 0;
  let mut x1877: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1876, &mut x1877, x1221, (arg4[0]));
  let mut x1878: u64 = 0;
  let mut x1879: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1878, &mut x1879, 0x0, x1877, x1874);
  let mut x1880: u64 = 0;
  let mut x1881: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1880, &mut x1881, x1879, x1875, x1872);
  let mut x1882: u64 = 0;
  let mut x1883: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1882, &mut x1883, x1881, x1873, x1870);
  let x1884: u64 = ((x1883 as u64) + x1871);
  let mut x1885: u64 = 0;
  let mut x1886: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1885, &mut x1886, x1876, 0xd838091dd2253531);
  let mut x1887: u64 = 0;
  let mut x1888: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1887, &mut x1888, x1885, 0xffffffffffffffff);
  let mut x1889: u64 = 0;
  let mut x1890: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1889, &mut x1890, x1885, 0xffffffffffffffff);
  let mut x1891: u64 = 0;
  let mut x1892: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1891, &mut x1892, x1885, 0xffffffffffffffff);
  let mut x1893: u64 = 0;
  let mut x1894: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1893, &mut x1894, x1885, 0xfffffffefffffc2f);
  let mut x1895: u64 = 0;
  let mut x1896: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1895, &mut x1896, 0x0, x1894, x1891);
  let mut x1897: u64 = 0;
  let mut x1898: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1897, &mut x1898, x1896, x1892, x1889);
  let mut x1899: u64 = 0;
  let mut x1900: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1899, &mut x1900, x1898, x1890, x1887);
  let x1901: u64 = ((x1900 as u64) + x1888);
  let mut x1902: u64 = 0;
  let mut x1903: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1902, &mut x1903, 0x0, x1876, x1893);
  let mut x1904: u64 = 0;
  let mut x1905: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1904, &mut x1905, x1903, x1878, x1895);
  let mut x1906: u64 = 0;
  let mut x1907: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1906, &mut x1907, x1905, x1880, x1897);
  let mut x1908: u64 = 0;
  let mut x1909: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1908, &mut x1909, x1907, x1882, x1899);
  let mut x1910: u64 = 0;
  let mut x1911: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1910, &mut x1911, x1909, x1884, x1901);
  let mut x1912: u64 = 0;
  let mut x1913: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1912, &mut x1913, x1222, (arg4[3]));
  let mut x1914: u64 = 0;
  let mut x1915: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1914, &mut x1915, x1222, (arg4[2]));
  let mut x1916: u64 = 0;
  let mut x1917: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1916, &mut x1917, x1222, (arg4[1]));
  let mut x1918: u64 = 0;
  let mut x1919: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1918, &mut x1919, x1222, (arg4[0]));
  let mut x1920: u64 = 0;
  let mut x1921: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1920, &mut x1921, 0x0, x1919, x1916);
  let mut x1922: u64 = 0;
  let mut x1923: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1922, &mut x1923, x1921, x1917, x1914);
  let mut x1924: u64 = 0;
  let mut x1925: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1924, &mut x1925, x1923, x1915, x1912);
  let x1926: u64 = ((x1925 as u64) + x1913);
  let mut x1927: u64 = 0;
  let mut x1928: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1927, &mut x1928, 0x0, x1904, x1918);
  let mut x1929: u64 = 0;
  let mut x1930: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1929, &mut x1930, x1928, x1906, x1920);
  let mut x1931: u64 = 0;
  let mut x1932: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1931, &mut x1932, x1930, x1908, x1922);
  let mut x1933: u64 = 0;
  let mut x1934: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1933, &mut x1934, x1932, x1910, x1924);
  let mut x1935: u64 = 0;
  let mut x1936: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1935, &mut x1936, x1934, (x1911 as u64), x1926);
  let mut x1937: u64 = 0;
  let mut x1938: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1937, &mut x1938, x1927, 0xd838091dd2253531);
  let mut x1939: u64 = 0;
  let mut x1940: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1939, &mut x1940, x1937, 0xffffffffffffffff);
  let mut x1941: u64 = 0;
  let mut x1942: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1941, &mut x1942, x1937, 0xffffffffffffffff);
  let mut x1943: u64 = 0;
  let mut x1944: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1943, &mut x1944, x1937, 0xffffffffffffffff);
  let mut x1945: u64 = 0;
  let mut x1946: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1945, &mut x1946, x1937, 0xfffffffefffffc2f);
  let mut x1947: u64 = 0;
  let mut x1948: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1947, &mut x1948, 0x0, x1946, x1943);
  let mut x1949: u64 = 0;
  let mut x1950: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1949, &mut x1950, x1948, x1944, x1941);
  let mut x1951: u64 = 0;
  let mut x1952: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1951, &mut x1952, x1950, x1942, x1939);
  let x1953: u64 = ((x1952 as u64) + x1940);
  let mut x1954: u64 = 0;
  let mut x1955: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1954, &mut x1955, 0x0, x1927, x1945);
  let mut x1956: u64 = 0;
  let mut x1957: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1956, &mut x1957, x1955, x1929, x1947);
  let mut x1958: u64 = 0;
  let mut x1959: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1958, &mut x1959, x1957, x1931, x1949);
  let mut x1960: u64 = 0;
  let mut x1961: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1960, &mut x1961, x1959, x1933, x1951);
  let mut x1962: u64 = 0;
  let mut x1963: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1962, &mut x1963, x1961, x1935, x1953);
  let x1964: u64 = ((x1963 as u64) + (x1936 as u64));
  let mut x1965: u64 = 0;
  let mut x1966: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1965, &mut x1966, x1223, (arg4[3]));
  let mut x1967: u64 = 0;
  let mut x1968: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1967, &mut x1968, x1223, (arg4[2]));
  let mut x1969: u64 = 0;
  let mut x1970: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1969, &mut x1970, x1223, (arg4[1]));
  let mut x1971: u64 = 0;
  let mut x1972: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1971, &mut x1972, x1223, (arg4[0]));
  let mut x1973: u64 = 0;
  let mut x1974: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1973, &mut x1974, 0x0, x1972, x1969);
  let mut x1975: u64 = 0;
  let mut x1976: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1975, &mut x1976, x1974, x1970, x1967);
  let mut x1977: u64 = 0;
  let mut x1978: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1977, &mut x1978, x1976, x1968, x1965);
  let x1979: u64 = ((x1978 as u64) + x1966);
  let mut x1980: u64 = 0;
  let mut x1981: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1980, &mut x1981, 0x0, x1956, x1971);
  let mut x1982: u64 = 0;
  let mut x1983: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1982, &mut x1983, x1981, x1958, x1973);
  let mut x1984: u64 = 0;
  let mut x1985: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1984, &mut x1985, x1983, x1960, x1975);
  let mut x1986: u64 = 0;
  let mut x1987: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1986, &mut x1987, x1985, x1962, x1977);
  let mut x1988: u64 = 0;
  let mut x1989: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x1988, &mut x1989, x1987, x1964, x1979);
  let mut x1990: u64 = 0;
  let mut x1991: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1990, &mut x1991, x1980, 0xd838091dd2253531);
  let mut x1992: u64 = 0;
  let mut x1993: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1992, &mut x1993, x1990, 0xffffffffffffffff);
  let mut x1994: u64 = 0;
  let mut x1995: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1994, &mut x1995, x1990, 0xffffffffffffffff);
  let mut x1996: u64 = 0;
  let mut x1997: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1996, &mut x1997, x1990, 0xffffffffffffffff);
  let mut x1998: u64 = 0;
  let mut x1999: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x1998, &mut x1999, x1990, 0xfffffffefffffc2f);
  let mut x2000: u64 = 0;
  let mut x2001: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2000, &mut x2001, 0x0, x1999, x1996);
  let mut x2002: u64 = 0;
  let mut x2003: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2002, &mut x2003, x2001, x1997, x1994);
  let mut x2004: u64 = 0;
  let mut x2005: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2004, &mut x2005, x2003, x1995, x1992);
  let x2006: u64 = ((x2005 as u64) + x1993);
  let mut x2007: u64 = 0;
  let mut x2008: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2007, &mut x2008, 0x0, x1980, x1998);
  let mut x2009: u64 = 0;
  let mut x2010: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2009, &mut x2010, x2008, x1982, x2000);
  let mut x2011: u64 = 0;
  let mut x2012: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2011, &mut x2012, x2010, x1984, x2002);
  let mut x2013: u64 = 0;
  let mut x2014: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2013, &mut x2014, x2012, x1986, x2004);
  let mut x2015: u64 = 0;
  let mut x2016: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2015, &mut x2016, x2014, x1988, x2006);
  let x2017: u64 = ((x2016 as u64) + (x1989 as u64));
  let mut x2018: u64 = 0;
  let mut x2019: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x2018, &mut x2019, x1224, (arg4[3]));
  let mut x2020: u64 = 0;
  let mut x2021: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x2020, &mut x2021, x1224, (arg4[2]));
  let mut x2022: u64 = 0;
  let mut x2023: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x2022, &mut x2023, x1224, (arg4[1]));
  let mut x2024: u64 = 0;
  let mut x2025: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x2024, &mut x2025, x1224, (arg4[0]));
  let mut x2026: u64 = 0;
  let mut x2027: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2026, &mut x2027, 0x0, x2025, x2022);
  let mut x2028: u64 = 0;
  let mut x2029: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2028, &mut x2029, x2027, x2023, x2020);
  let mut x2030: u64 = 0;
  let mut x2031: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2030, &mut x2031, x2029, x2021, x2018);
  let x2032: u64 = ((x2031 as u64) + x2019);
  let mut x2033: u64 = 0;
  let mut x2034: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2033, &mut x2034, 0x0, x2009, x2024);
  let mut x2035: u64 = 0;
  let mut x2036: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2035, &mut x2036, x2034, x2011, x2026);
  let mut x2037: u64 = 0;
  let mut x2038: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2037, &mut x2038, x2036, x2013, x2028);
  let mut x2039: u64 = 0;
  let mut x2040: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2039, &mut x2040, x2038, x2015, x2030);
  let mut x2041: u64 = 0;
  let mut x2042: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2041, &mut x2042, x2040, x2017, x2032);
  let mut x2043: u64 = 0;
  let mut x2044: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x2043, &mut x2044, x2033, 0xd838091dd2253531);
  let mut x2045: u64 = 0;
  let mut x2046: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x2045, &mut x2046, x2043, 0xffffffffffffffff);
  let mut x2047: u64 = 0;
  let mut x2048: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x2047, &mut x2048, x2043, 0xffffffffffffffff);
  let mut x2049: u64 = 0;
  let mut x2050: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x2049, &mut x2050, x2043, 0xffffffffffffffff);
  let mut x2051: u64 = 0;
  let mut x2052: u64 = 0;
  fiat_secp256k1_mulx_u64(&mut x2051, &mut x2052, x2043, 0xfffffffefffffc2f);
  let mut x2053: u64 = 0;
  let mut x2054: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2053, &mut x2054, 0x0, x2052, x2049);
  let mut x2055: u64 = 0;
  let mut x2056: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2055, &mut x2056, x2054, x2050, x2047);
  let mut x2057: u64 = 0;
  let mut x2058: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2057, &mut x2058, x2056, x2048, x2045);
  let x2059: u64 = ((x2058 as u64) + x2046);
  let mut x2060: u64 = 0;
  let mut x2061: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2060, &mut x2061, 0x0, x2033, x2051);
  let mut x2062: u64 = 0;
  let mut x2063: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2062, &mut x2063, x2061, x2035, x2053);
  let mut x2064: u64 = 0;
  let mut x2065: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2064, &mut x2065, x2063, x2037, x2055);
  let mut x2066: u64 = 0;
  let mut x2067: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2066, &mut x2067, x2065, x2039, x2057);
  let mut x2068: u64 = 0;
  let mut x2069: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2068, &mut x2069, x2067, x2041, x2059);
  let x2070: u64 = ((x2069 as u64) + (x2042 as u64));
  let mut x2071: u64 = 0;
  let mut x2072: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x2071, &mut x2072, 0x0, x2062, 0xfffffffefffffc2f);
  let mut x2073: u64 = 0;
  let mut x2074: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x2073, &mut x2074, x2072, x2064, 0xffffffffffffffff);
  let mut x2075: u64 = 0;
  let mut x2076: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x2075, &mut x2076, x2074, x2066, 0xffffffffffffffff);
  let mut x2077: u64 = 0;
  let mut x2078: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x2077, &mut x2078, x2076, x2068, 0xffffffffffffffff);
  let mut x2079: u64 = 0;
  let mut x2080: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x2079, &mut x2080, x2078, x2070, (0x0 as u64));
  let mut x2081: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x2081, x2080, x2071, x2062);
  let mut x2082: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x2082, x2080, x2073, x2064);
  let mut x2083: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x2083, x2080, x2075, x2066);
  let mut x2084: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x2084, x2080, x2077, x2068);
  let mut x2085: u64 = 0;
  let mut x2086: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2085, &mut x2086, 0x0, x1436, x1651);
  let mut x2087: u64 = 0;
  let mut x2088: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2087, &mut x2088, x2086, x1437, x1652);
  let mut x2089: u64 = 0;
  let mut x2090: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2089, &mut x2090, x2088, x1438, x1653);
  let mut x2091: u64 = 0;
  let mut x2092: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2091, &mut x2092, x2090, x1439, x1654);
  let mut x2093: u64 = 0;
  let mut x2094: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x2093, &mut x2094, 0x0, x2085, 0xfffffffefffffc2f);
  let mut x2095: u64 = 0;
  let mut x2096: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x2095, &mut x2096, x2094, x2087, 0xffffffffffffffff);
  let mut x2097: u64 = 0;
  let mut x2098: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x2097, &mut x2098, x2096, x2089, 0xffffffffffffffff);
  let mut x2099: u64 = 0;
  let mut x2100: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x2099, &mut x2100, x2098, x2091, 0xffffffffffffffff);
  let mut x2101: u64 = 0;
  let mut x2102: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x2101, &mut x2102, x2100, (x2092 as u64), (0x0 as u64));
  let mut x2103: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x2103, x2102, x2093, x2085);
  let mut x2104: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x2104, x2102, x2095, x2087);
  let mut x2105: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x2105, x2102, x2097, x2089);
  let mut x2106: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x2106, x2102, x2099, x2091);
  let mut x2107: u64 = 0;
  let mut x2108: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2107, &mut x2108, 0x0, x1866, x2081);
  let mut x2109: u64 = 0;
  let mut x2110: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2109, &mut x2110, x2108, x1867, x2082);
  let mut x2111: u64 = 0;
  let mut x2112: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2111, &mut x2112, x2110, x1868, x2083);
  let mut x2113: u64 = 0;
  let mut x2114: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_addcarryx_u64(&mut x2113, &mut x2114, x2112, x1869, x2084);
  let mut x2115: u64 = 0;
  let mut x2116: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x2115, &mut x2116, 0x0, x2107, 0xfffffffefffffc2f);
  let mut x2117: u64 = 0;
  let mut x2118: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x2117, &mut x2118, x2116, x2109, 0xffffffffffffffff);
  let mut x2119: u64 = 0;
  let mut x2120: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x2119, &mut x2120, x2118, x2111, 0xffffffffffffffff);
  let mut x2121: u64 = 0;
  let mut x2122: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x2121, &mut x2122, x2120, x2113, 0xffffffffffffffff);
  let mut x2123: u64 = 0;
  let mut x2124: fiat_secp256k1_u1 = 0;
  fiat_secp256k1_subborrowx_u64(&mut x2123, &mut x2124, x2122, (x2114 as u64), (0x0 as u64));
  let mut x2125: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x2125, x2124, x2115, x2107);
  let mut x2126: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x2126, x2124, x2117, x2109);
  let mut x2127: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x2127, x2124, x2119, x2111);
  let mut x2128: u64 = 0;
  fiat_secp256k1_cmovznz_u64(&mut x2128, x2124, x2121, x2113);
  out1[0] = x1119;
  out1[1] = x1120;
  out1[2] = x1121;
  out1[3] = x1122;
  out1[4] = x1123;
  out2[0] = x1124;
  out2[1] = x1125;
  out2[2] = x1126;
  out2[3] = x1127;
  out2[4] = x1128;
  out3[0] = x2103;
  out3[1] = x2104;
  out3[2] = x2105;
  out3[3] = x2106;
  out4[0] = x2125;
  out4[1] = x2126;
  out4[2] = x2127;
  out4[3] = x2128;
}

