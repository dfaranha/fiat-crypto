//! Autogenerated: src/ExtractionOCaml/unsaturated_solinas --lang Rust 25519 32 '(auto)' '2^255 - 19' carry_mul carry_square carry add sub opp selectznz to_bytes from_bytes one word_to_solina msat sat_from_bytes divstep divstep_precomp twos_complement_word_full_divstep asr_mw_sub2 sat_add word_sat_mul jumpdivstep_precomp outer_loop_body carry_scmul121666
//! curve description: 25519
//! machine_wordsize = 32 (from "32")
//! requested operations: carry_mul, carry_square, carry, add, sub, opp, selectznz, to_bytes, from_bytes, one, word_to_solina, msat, sat_from_bytes, divstep, divstep_precomp, twos_complement_word_full_divstep, asr_mw_sub2, sat_add, word_sat_mul, jumpdivstep_precomp, outer_loop_body, carry_scmul121666
//! n = 10 (from "(auto)")
//! s-c = 2^255 - [(1, 19)] (from "2^255 - 19")
//! tight_bounds_multiplier = 1 (from "")
//!
//! Computed values:
//! carry_chain = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1]
//! eval z = z[0] + (z[1] << 26) + (z[2] << 51) + (z[3] << 77) + (z[4] << 102) + (z[5] << 128) + (z[6] << 153) + (z[7] << 179) + (z[8] << 204) + (z[9] << 230)
//! bytes_eval z = z[0] + (z[1] << 8) + (z[2] << 16) + (z[3] << 24) + (z[4] << 32) + (z[5] << 40) + (z[6] << 48) + (z[7] << 56) + (z[8] << 64) + (z[9] << 72) + (z[10] << 80) + (z[11] << 88) + (z[12] << 96) + (z[13] << 104) + (z[14] << 112) + (z[15] << 120) + (z[16] << 128) + (z[17] << 136) + (z[18] << 144) + (z[19] << 152) + (z[20] << 160) + (z[21] << 168) + (z[22] << 176) + (z[23] << 184) + (z[24] << 192) + (z[25] << 200) + (z[26] << 208) + (z[27] << 216) + (z[28] << 224) + (z[29] << 232) + (z[30] << 240) + (z[31] << 248)
//! balance = [0x7ffffda, 0x3fffffe, 0x7fffffe, 0x3fffffe, 0x7fffffe, 0x3fffffe, 0x7fffffe, 0x3fffffe, 0x7fffffe, 0x3fffffe]

#![allow(unused_parens)]
#[allow(non_camel_case_types)]

pub type fiat_25519_u1 = u8;
pub type fiat_25519_i1 = i8;
pub type fiat_25519_u2 = u8;
pub type fiat_25519_i2 = i8;


/// The function fiat_25519_addcarryx_u32 is an addition with carry.
/// Postconditions:
///   out1 = (arg1 + arg2 + arg3) mod 2^32
///   out2 = ⌊(arg1 + arg2 + arg3) / 2^32⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffff]
///   arg3: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [0x0 ~> 0x1]
#[inline]
pub fn fiat_25519_addcarryx_u32(out1: &mut u32, out2: &mut fiat_25519_u1, arg1: fiat_25519_u1, arg2: u32, arg3: u32) -> () {
  let x1: u64 = (((arg1 as u64) + (arg2 as u64)) + (arg3 as u64));
  let x2: u32 = ((x1 & (0xffffffff as u64)) as u32);
  let x3: fiat_25519_u1 = ((x1 >> 32) as fiat_25519_u1);
  *out1 = x2;
  *out2 = x3;
}

/// The function fiat_25519_subborrowx_u32 is a subtraction with borrow.
/// Postconditions:
///   out1 = (-arg1 + arg2 + -arg3) mod 2^32
///   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^32⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffff]
///   arg3: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [0x0 ~> 0x1]
#[inline]
pub fn fiat_25519_subborrowx_u32(out1: &mut u32, out2: &mut fiat_25519_u1, arg1: fiat_25519_u1, arg2: u32, arg3: u32) -> () {
  let x1: i64 = (((arg2 as i64) - (arg1 as i64)) - (arg3 as i64));
  let x2: fiat_25519_i1 = ((x1 >> 32) as fiat_25519_i1);
  let x3: u32 = ((x1 & (0xffffffff as i64)) as u32);
  *out1 = x3;
  *out2 = (((0x0 as fiat_25519_i2) - (x2 as fiat_25519_i2)) as fiat_25519_u1);
}

/// The function fiat_25519_addcarryx_u26 is an addition with carry.
/// Postconditions:
///   out1 = (arg1 + arg2 + arg3) mod 2^26
///   out2 = ⌊(arg1 + arg2 + arg3) / 2^26⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0x3ffffff]
///   arg3: [0x0 ~> 0x3ffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0x3ffffff]
///   out2: [0x0 ~> 0x1]
#[inline]
pub fn fiat_25519_addcarryx_u26(out1: &mut u32, out2: &mut fiat_25519_u1, arg1: fiat_25519_u1, arg2: u32, arg3: u32) -> () {
  let x1: u32 = (((arg1 as u32) + arg2) + arg3);
  let x2: u32 = (x1 & 0x3ffffff);
  let x3: fiat_25519_u1 = ((x1 >> 26) as fiat_25519_u1);
  *out1 = x2;
  *out2 = x3;
}

/// The function fiat_25519_subborrowx_u26 is a subtraction with borrow.
/// Postconditions:
///   out1 = (-arg1 + arg2 + -arg3) mod 2^26
///   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^26⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0x3ffffff]
///   arg3: [0x0 ~> 0x3ffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0x3ffffff]
///   out2: [0x0 ~> 0x1]
#[inline]
pub fn fiat_25519_subborrowx_u26(out1: &mut u32, out2: &mut fiat_25519_u1, arg1: fiat_25519_u1, arg2: u32, arg3: u32) -> () {
  let x1: i32 = ((((((arg2 as i64) - (arg1 as i64)) as i32) as i64) - (arg3 as i64)) as i32);
  let x2: fiat_25519_i1 = ((x1 >> 26) as fiat_25519_i1);
  let x3: u32 = (((x1 as i64) & (0x3ffffff as i64)) as u32);
  *out1 = x3;
  *out2 = (((0x0 as fiat_25519_i2) - (x2 as fiat_25519_i2)) as fiat_25519_u1);
}

/// The function fiat_25519_addcarryx_u25 is an addition with carry.
/// Postconditions:
///   out1 = (arg1 + arg2 + arg3) mod 2^25
///   out2 = ⌊(arg1 + arg2 + arg3) / 2^25⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0x1ffffff]
///   arg3: [0x0 ~> 0x1ffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0x1ffffff]
///   out2: [0x0 ~> 0x1]
#[inline]
pub fn fiat_25519_addcarryx_u25(out1: &mut u32, out2: &mut fiat_25519_u1, arg1: fiat_25519_u1, arg2: u32, arg3: u32) -> () {
  let x1: u32 = (((arg1 as u32) + arg2) + arg3);
  let x2: u32 = (x1 & 0x1ffffff);
  let x3: fiat_25519_u1 = ((x1 >> 25) as fiat_25519_u1);
  *out1 = x2;
  *out2 = x3;
}

/// The function fiat_25519_subborrowx_u25 is a subtraction with borrow.
/// Postconditions:
///   out1 = (-arg1 + arg2 + -arg3) mod 2^25
///   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^25⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0x1ffffff]
///   arg3: [0x0 ~> 0x1ffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0x1ffffff]
///   out2: [0x0 ~> 0x1]
#[inline]
pub fn fiat_25519_subborrowx_u25(out1: &mut u32, out2: &mut fiat_25519_u1, arg1: fiat_25519_u1, arg2: u32, arg3: u32) -> () {
  let x1: i32 = ((((((arg2 as i64) - (arg1 as i64)) as i32) as i64) - (arg3 as i64)) as i32);
  let x2: fiat_25519_i1 = ((x1 >> 25) as fiat_25519_i1);
  let x3: u32 = (((x1 as i64) & (0x1ffffff as i64)) as u32);
  *out1 = x3;
  *out2 = (((0x0 as fiat_25519_i2) - (x2 as fiat_25519_i2)) as fiat_25519_u1);
}

/// The function fiat_25519_mulx_u32 is a multiplication, returning the full double-width result.
/// Postconditions:
///   out1 = (arg1 * arg2) mod 2^32
///   out2 = ⌊arg1 * arg2 / 2^32⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffff]
///   arg2: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [0x0 ~> 0xffffffff]
#[inline]
pub fn fiat_25519_mulx_u32(out1: &mut u32, out2: &mut u32, arg1: u32, arg2: u32) -> () {
  let x1: u64 = ((arg1 as u64) * (arg2 as u64));
  let x2: u32 = ((x1 & (0xffffffff as u64)) as u32);
  let x3: u32 = ((x1 >> 32) as u32);
  *out1 = x2;
  *out2 = x3;
}

/// The function fiat_25519_cmovznz_u32 is a single-word conditional move.
/// Postconditions:
///   out1 = (if arg1 = 0 then arg2 else arg3)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffff]
///   arg3: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
#[inline]
pub fn fiat_25519_cmovznz_u32(out1: &mut u32, arg1: fiat_25519_u1, arg2: u32, arg3: u32) -> () {
  let x1: fiat_25519_u1 = (!(!arg1));
  let x2: u32 = ((((((0x0 as fiat_25519_i2) - (x1 as fiat_25519_i2)) as fiat_25519_i1) as i64) & (0xffffffff as i64)) as u32);
  let x3: u32 = ((x2 & arg3) | ((!x2) & arg2));
  *out1 = x3;
}

/// The function fiat_25519_cmovznz_u1 is a single-word conditional move.
/// Postconditions:
///   out1 = (if arg1 = 0 then arg2 else arg3)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0x1]
///   arg3: [0x0 ~> 0x1]
/// Output Bounds:
///   out1: [0x0 ~> 0x1]
#[inline]
pub fn fiat_25519_cmovznz_u1(out1: &mut fiat_25519_u1, arg1: fiat_25519_u1, arg2: fiat_25519_u1, arg3: fiat_25519_u1) -> () {
  let x1: fiat_25519_u1 = (!(!arg1));
  let x2: fiat_25519_u1 = ((((((0x0 as fiat_25519_i2) - (x1 as fiat_25519_i2)) as fiat_25519_i1) as fiat_25519_i2) & (0x1 as fiat_25519_i2)) as fiat_25519_u1);
  let x3: fiat_25519_u1 = ((x2 & arg3) | ((!x2) & arg2));
  *out1 = x3;
}

/// The function fiat_25519_carry_mul multiplies two field elements and reduces the result.
/// Postconditions:
///   eval out1 mod m = (eval arg1 * eval arg2) mod m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000]]
///   arg2: [[0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000]]
/// Output Bounds:
///   out1: [[0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000]]
#[inline]
pub fn fiat_25519_carry_mul(out1: &mut [u32; 10], arg1: &[u32; 10], arg2: &[u32; 10]) -> () {
  let x1: u64 = (((arg1[9]) as u64) * (((arg2[9]) * 0x26) as u64));
  let x2: u64 = (((arg1[9]) as u64) * (((arg2[8]) * 0x13) as u64));
  let x3: u64 = (((arg1[9]) as u64) * (((arg2[7]) * 0x26) as u64));
  let x4: u64 = (((arg1[9]) as u64) * (((arg2[6]) * 0x13) as u64));
  let x5: u64 = (((arg1[9]) as u64) * (((arg2[5]) * 0x26) as u64));
  let x6: u64 = (((arg1[9]) as u64) * (((arg2[4]) * 0x13) as u64));
  let x7: u64 = (((arg1[9]) as u64) * (((arg2[3]) * 0x26) as u64));
  let x8: u64 = (((arg1[9]) as u64) * (((arg2[2]) * 0x13) as u64));
  let x9: u64 = (((arg1[9]) as u64) * (((arg2[1]) * 0x26) as u64));
  let x10: u64 = (((arg1[8]) as u64) * (((arg2[9]) * 0x13) as u64));
  let x11: u64 = (((arg1[8]) as u64) * (((arg2[8]) * 0x13) as u64));
  let x12: u64 = (((arg1[8]) as u64) * (((arg2[7]) * 0x13) as u64));
  let x13: u64 = (((arg1[8]) as u64) * (((arg2[6]) * 0x13) as u64));
  let x14: u64 = (((arg1[8]) as u64) * (((arg2[5]) * 0x13) as u64));
  let x15: u64 = (((arg1[8]) as u64) * (((arg2[4]) * 0x13) as u64));
  let x16: u64 = (((arg1[8]) as u64) * (((arg2[3]) * 0x13) as u64));
  let x17: u64 = (((arg1[8]) as u64) * (((arg2[2]) * 0x13) as u64));
  let x18: u64 = (((arg1[7]) as u64) * (((arg2[9]) * 0x26) as u64));
  let x19: u64 = (((arg1[7]) as u64) * (((arg2[8]) * 0x13) as u64));
  let x20: u64 = (((arg1[7]) as u64) * (((arg2[7]) * 0x26) as u64));
  let x21: u64 = (((arg1[7]) as u64) * (((arg2[6]) * 0x13) as u64));
  let x22: u64 = (((arg1[7]) as u64) * (((arg2[5]) * 0x26) as u64));
  let x23: u64 = (((arg1[7]) as u64) * (((arg2[4]) * 0x13) as u64));
  let x24: u64 = (((arg1[7]) as u64) * (((arg2[3]) * 0x26) as u64));
  let x25: u64 = (((arg1[6]) as u64) * (((arg2[9]) * 0x13) as u64));
  let x26: u64 = (((arg1[6]) as u64) * (((arg2[8]) * 0x13) as u64));
  let x27: u64 = (((arg1[6]) as u64) * (((arg2[7]) * 0x13) as u64));
  let x28: u64 = (((arg1[6]) as u64) * (((arg2[6]) * 0x13) as u64));
  let x29: u64 = (((arg1[6]) as u64) * (((arg2[5]) * 0x13) as u64));
  let x30: u64 = (((arg1[6]) as u64) * (((arg2[4]) * 0x13) as u64));
  let x31: u64 = (((arg1[5]) as u64) * (((arg2[9]) * 0x26) as u64));
  let x32: u64 = (((arg1[5]) as u64) * (((arg2[8]) * 0x13) as u64));
  let x33: u64 = (((arg1[5]) as u64) * (((arg2[7]) * 0x26) as u64));
  let x34: u64 = (((arg1[5]) as u64) * (((arg2[6]) * 0x13) as u64));
  let x35: u64 = (((arg1[5]) as u64) * (((arg2[5]) * 0x26) as u64));
  let x36: u64 = (((arg1[4]) as u64) * (((arg2[9]) * 0x13) as u64));
  let x37: u64 = (((arg1[4]) as u64) * (((arg2[8]) * 0x13) as u64));
  let x38: u64 = (((arg1[4]) as u64) * (((arg2[7]) * 0x13) as u64));
  let x39: u64 = (((arg1[4]) as u64) * (((arg2[6]) * 0x13) as u64));
  let x40: u64 = (((arg1[3]) as u64) * (((arg2[9]) * 0x26) as u64));
  let x41: u64 = (((arg1[3]) as u64) * (((arg2[8]) * 0x13) as u64));
  let x42: u64 = (((arg1[3]) as u64) * (((arg2[7]) * 0x26) as u64));
  let x43: u64 = (((arg1[2]) as u64) * (((arg2[9]) * 0x13) as u64));
  let x44: u64 = (((arg1[2]) as u64) * (((arg2[8]) * 0x13) as u64));
  let x45: u64 = (((arg1[1]) as u64) * (((arg2[9]) * 0x26) as u64));
  let x46: u64 = (((arg1[9]) as u64) * ((arg2[0]) as u64));
  let x47: u64 = (((arg1[8]) as u64) * ((arg2[1]) as u64));
  let x48: u64 = (((arg1[8]) as u64) * ((arg2[0]) as u64));
  let x49: u64 = (((arg1[7]) as u64) * ((arg2[2]) as u64));
  let x50: u64 = (((arg1[7]) as u64) * (((arg2[1]) * 0x2) as u64));
  let x51: u64 = (((arg1[7]) as u64) * ((arg2[0]) as u64));
  let x52: u64 = (((arg1[6]) as u64) * ((arg2[3]) as u64));
  let x53: u64 = (((arg1[6]) as u64) * ((arg2[2]) as u64));
  let x54: u64 = (((arg1[6]) as u64) * ((arg2[1]) as u64));
  let x55: u64 = (((arg1[6]) as u64) * ((arg2[0]) as u64));
  let x56: u64 = (((arg1[5]) as u64) * ((arg2[4]) as u64));
  let x57: u64 = (((arg1[5]) as u64) * (((arg2[3]) * 0x2) as u64));
  let x58: u64 = (((arg1[5]) as u64) * ((arg2[2]) as u64));
  let x59: u64 = (((arg1[5]) as u64) * (((arg2[1]) * 0x2) as u64));
  let x60: u64 = (((arg1[5]) as u64) * ((arg2[0]) as u64));
  let x61: u64 = (((arg1[4]) as u64) * ((arg2[5]) as u64));
  let x62: u64 = (((arg1[4]) as u64) * ((arg2[4]) as u64));
  let x63: u64 = (((arg1[4]) as u64) * ((arg2[3]) as u64));
  let x64: u64 = (((arg1[4]) as u64) * ((arg2[2]) as u64));
  let x65: u64 = (((arg1[4]) as u64) * ((arg2[1]) as u64));
  let x66: u64 = (((arg1[4]) as u64) * ((arg2[0]) as u64));
  let x67: u64 = (((arg1[3]) as u64) * ((arg2[6]) as u64));
  let x68: u64 = (((arg1[3]) as u64) * (((arg2[5]) * 0x2) as u64));
  let x69: u64 = (((arg1[3]) as u64) * ((arg2[4]) as u64));
  let x70: u64 = (((arg1[3]) as u64) * (((arg2[3]) * 0x2) as u64));
  let x71: u64 = (((arg1[3]) as u64) * ((arg2[2]) as u64));
  let x72: u64 = (((arg1[3]) as u64) * (((arg2[1]) * 0x2) as u64));
  let x73: u64 = (((arg1[3]) as u64) * ((arg2[0]) as u64));
  let x74: u64 = (((arg1[2]) as u64) * ((arg2[7]) as u64));
  let x75: u64 = (((arg1[2]) as u64) * ((arg2[6]) as u64));
  let x76: u64 = (((arg1[2]) as u64) * ((arg2[5]) as u64));
  let x77: u64 = (((arg1[2]) as u64) * ((arg2[4]) as u64));
  let x78: u64 = (((arg1[2]) as u64) * ((arg2[3]) as u64));
  let x79: u64 = (((arg1[2]) as u64) * ((arg2[2]) as u64));
  let x80: u64 = (((arg1[2]) as u64) * ((arg2[1]) as u64));
  let x81: u64 = (((arg1[2]) as u64) * ((arg2[0]) as u64));
  let x82: u64 = (((arg1[1]) as u64) * ((arg2[8]) as u64));
  let x83: u64 = (((arg1[1]) as u64) * (((arg2[7]) * 0x2) as u64));
  let x84: u64 = (((arg1[1]) as u64) * ((arg2[6]) as u64));
  let x85: u64 = (((arg1[1]) as u64) * (((arg2[5]) * 0x2) as u64));
  let x86: u64 = (((arg1[1]) as u64) * ((arg2[4]) as u64));
  let x87: u64 = (((arg1[1]) as u64) * (((arg2[3]) * 0x2) as u64));
  let x88: u64 = (((arg1[1]) as u64) * ((arg2[2]) as u64));
  let x89: u64 = (((arg1[1]) as u64) * (((arg2[1]) * 0x2) as u64));
  let x90: u64 = (((arg1[1]) as u64) * ((arg2[0]) as u64));
  let x91: u64 = (((arg1[0]) as u64) * ((arg2[9]) as u64));
  let x92: u64 = (((arg1[0]) as u64) * ((arg2[8]) as u64));
  let x93: u64 = (((arg1[0]) as u64) * ((arg2[7]) as u64));
  let x94: u64 = (((arg1[0]) as u64) * ((arg2[6]) as u64));
  let x95: u64 = (((arg1[0]) as u64) * ((arg2[5]) as u64));
  let x96: u64 = (((arg1[0]) as u64) * ((arg2[4]) as u64));
  let x97: u64 = (((arg1[0]) as u64) * ((arg2[3]) as u64));
  let x98: u64 = (((arg1[0]) as u64) * ((arg2[2]) as u64));
  let x99: u64 = (((arg1[0]) as u64) * ((arg2[1]) as u64));
  let x100: u64 = (((arg1[0]) as u64) * ((arg2[0]) as u64));
  let x101: u64 = (x100 + (x45 + (x44 + (x42 + (x39 + (x35 + (x30 + (x24 + (x17 + x9)))))))));
  let x102: u64 = (x101 >> 26);
  let x103: u32 = ((x101 & (0x3ffffff as u64)) as u32);
  let x104: u64 = (x91 + (x82 + (x74 + (x67 + (x61 + (x56 + (x52 + (x49 + (x47 + x46)))))))));
  let x105: u64 = (x92 + (x83 + (x75 + (x68 + (x62 + (x57 + (x53 + (x50 + (x48 + x1)))))))));
  let x106: u64 = (x93 + (x84 + (x76 + (x69 + (x63 + (x58 + (x54 + (x51 + (x10 + x2)))))))));
  let x107: u64 = (x94 + (x85 + (x77 + (x70 + (x64 + (x59 + (x55 + (x18 + (x11 + x3)))))))));
  let x108: u64 = (x95 + (x86 + (x78 + (x71 + (x65 + (x60 + (x25 + (x19 + (x12 + x4)))))))));
  let x109: u64 = (x96 + (x87 + (x79 + (x72 + (x66 + (x31 + (x26 + (x20 + (x13 + x5)))))))));
  let x110: u64 = (x97 + (x88 + (x80 + (x73 + (x36 + (x32 + (x27 + (x21 + (x14 + x6)))))))));
  let x111: u64 = (x98 + (x89 + (x81 + (x40 + (x37 + (x33 + (x28 + (x22 + (x15 + x7)))))))));
  let x112: u64 = (x99 + (x90 + (x43 + (x41 + (x38 + (x34 + (x29 + (x23 + (x16 + x8)))))))));
  let x113: u64 = (x102 + x112);
  let x114: u64 = (x113 >> 25);
  let x115: u32 = ((x113 & (0x1ffffff as u64)) as u32);
  let x116: u64 = (x114 + x111);
  let x117: u64 = (x116 >> 26);
  let x118: u32 = ((x116 & (0x3ffffff as u64)) as u32);
  let x119: u64 = (x117 + x110);
  let x120: u64 = (x119 >> 25);
  let x121: u32 = ((x119 & (0x1ffffff as u64)) as u32);
  let x122: u64 = (x120 + x109);
  let x123: u64 = (x122 >> 26);
  let x124: u32 = ((x122 & (0x3ffffff as u64)) as u32);
  let x125: u64 = (x123 + x108);
  let x126: u64 = (x125 >> 25);
  let x127: u32 = ((x125 & (0x1ffffff as u64)) as u32);
  let x128: u64 = (x126 + x107);
  let x129: u64 = (x128 >> 26);
  let x130: u32 = ((x128 & (0x3ffffff as u64)) as u32);
  let x131: u64 = (x129 + x106);
  let x132: u64 = (x131 >> 25);
  let x133: u32 = ((x131 & (0x1ffffff as u64)) as u32);
  let x134: u64 = (x132 + x105);
  let x135: u64 = (x134 >> 26);
  let x136: u32 = ((x134 & (0x3ffffff as u64)) as u32);
  let x137: u64 = (x135 + x104);
  let x138: u64 = (x137 >> 25);
  let x139: u32 = ((x137 & (0x1ffffff as u64)) as u32);
  let x140: u64 = (x138 * (0x13 as u64));
  let x141: u64 = ((x103 as u64) + x140);
  let x142: u32 = ((x141 >> 26) as u32);
  let x143: u32 = ((x141 & (0x3ffffff as u64)) as u32);
  let x144: u32 = (x142 + x115);
  let x145: fiat_25519_u1 = ((x144 >> 25) as fiat_25519_u1);
  let x146: u32 = (x144 & 0x1ffffff);
  let x147: u32 = ((x145 as u32) + x118);
  out1[0] = x143;
  out1[1] = x146;
  out1[2] = x147;
  out1[3] = x121;
  out1[4] = x124;
  out1[5] = x127;
  out1[6] = x130;
  out1[7] = x133;
  out1[8] = x136;
  out1[9] = x139;
}

/// The function fiat_25519_carry_square squares a field element and reduces the result.
/// Postconditions:
///   eval out1 mod m = (eval arg1 * eval arg1) mod m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000]]
/// Output Bounds:
///   out1: [[0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000]]
#[inline]
pub fn fiat_25519_carry_square(out1: &mut [u32; 10], arg1: &[u32; 10]) -> () {
  let x1: u32 = ((arg1[9]) * 0x13);
  let x2: u32 = (x1 * 0x2);
  let x3: u32 = ((arg1[9]) * 0x2);
  let x4: u32 = ((arg1[8]) * 0x13);
  let x5: u64 = ((x4 as u64) * (0x2 as u64));
  let x6: u32 = ((arg1[8]) * 0x2);
  let x7: u32 = ((arg1[7]) * 0x13);
  let x8: u32 = (x7 * 0x2);
  let x9: u32 = ((arg1[7]) * 0x2);
  let x10: u32 = ((arg1[6]) * 0x13);
  let x11: u64 = ((x10 as u64) * (0x2 as u64));
  let x12: u32 = ((arg1[6]) * 0x2);
  let x13: u32 = ((arg1[5]) * 0x13);
  let x14: u32 = ((arg1[5]) * 0x2);
  let x15: u32 = ((arg1[4]) * 0x2);
  let x16: u32 = ((arg1[3]) * 0x2);
  let x17: u32 = ((arg1[2]) * 0x2);
  let x18: u32 = ((arg1[1]) * 0x2);
  let x19: u64 = (((arg1[9]) as u64) * ((x1 * 0x2) as u64));
  let x20: u64 = (((arg1[8]) as u64) * (x2 as u64));
  let x21: u64 = (((arg1[8]) as u64) * (x4 as u64));
  let x22: u64 = (((arg1[7]) as u64) * ((x2 as u64) * (0x2 as u64)));
  let x23: u64 = (((arg1[7]) as u64) * x5);
  let x24: u64 = (((arg1[7]) as u64) * ((x7 * 0x2) as u64));
  let x25: u64 = (((arg1[6]) as u64) * (x2 as u64));
  let x26: u64 = (((arg1[6]) as u64) * x5);
  let x27: u64 = (((arg1[6]) as u64) * (x8 as u64));
  let x28: u64 = (((arg1[6]) as u64) * (x10 as u64));
  let x29: u64 = (((arg1[5]) as u64) * ((x2 as u64) * (0x2 as u64)));
  let x30: u64 = (((arg1[5]) as u64) * x5);
  let x31: u64 = (((arg1[5]) as u64) * ((x8 as u64) * (0x2 as u64)));
  let x32: u64 = (((arg1[5]) as u64) * x11);
  let x33: u64 = (((arg1[5]) as u64) * ((x13 * 0x2) as u64));
  let x34: u64 = (((arg1[4]) as u64) * (x2 as u64));
  let x35: u64 = (((arg1[4]) as u64) * x5);
  let x36: u64 = (((arg1[4]) as u64) * (x8 as u64));
  let x37: u64 = (((arg1[4]) as u64) * x11);
  let x38: u64 = (((arg1[4]) as u64) * (x14 as u64));
  let x39: u64 = (((arg1[4]) as u64) * ((arg1[4]) as u64));
  let x40: u64 = (((arg1[3]) as u64) * ((x2 as u64) * (0x2 as u64)));
  let x41: u64 = (((arg1[3]) as u64) * x5);
  let x42: u64 = (((arg1[3]) as u64) * ((x8 as u64) * (0x2 as u64)));
  let x43: u64 = (((arg1[3]) as u64) * (x12 as u64));
  let x44: u64 = (((arg1[3]) as u64) * ((x14 * 0x2) as u64));
  let x45: u64 = (((arg1[3]) as u64) * (x15 as u64));
  let x46: u64 = (((arg1[3]) as u64) * (((arg1[3]) * 0x2) as u64));
  let x47: u64 = (((arg1[2]) as u64) * (x2 as u64));
  let x48: u64 = (((arg1[2]) as u64) * x5);
  let x49: u64 = (((arg1[2]) as u64) * (x9 as u64));
  let x50: u64 = (((arg1[2]) as u64) * (x12 as u64));
  let x51: u64 = (((arg1[2]) as u64) * (x14 as u64));
  let x52: u64 = (((arg1[2]) as u64) * (x15 as u64));
  let x53: u64 = (((arg1[2]) as u64) * (x16 as u64));
  let x54: u64 = (((arg1[2]) as u64) * ((arg1[2]) as u64));
  let x55: u64 = (((arg1[1]) as u64) * ((x2 as u64) * (0x2 as u64)));
  let x56: u64 = (((arg1[1]) as u64) * (x6 as u64));
  let x57: u64 = (((arg1[1]) as u64) * ((x9 * 0x2) as u64));
  let x58: u64 = (((arg1[1]) as u64) * (x12 as u64));
  let x59: u64 = (((arg1[1]) as u64) * ((x14 * 0x2) as u64));
  let x60: u64 = (((arg1[1]) as u64) * (x15 as u64));
  let x61: u64 = (((arg1[1]) as u64) * ((x16 * 0x2) as u64));
  let x62: u64 = (((arg1[1]) as u64) * (x17 as u64));
  let x63: u64 = (((arg1[1]) as u64) * (((arg1[1]) * 0x2) as u64));
  let x64: u64 = (((arg1[0]) as u64) * (x3 as u64));
  let x65: u64 = (((arg1[0]) as u64) * (x6 as u64));
  let x66: u64 = (((arg1[0]) as u64) * (x9 as u64));
  let x67: u64 = (((arg1[0]) as u64) * (x12 as u64));
  let x68: u64 = (((arg1[0]) as u64) * (x14 as u64));
  let x69: u64 = (((arg1[0]) as u64) * (x15 as u64));
  let x70: u64 = (((arg1[0]) as u64) * (x16 as u64));
  let x71: u64 = (((arg1[0]) as u64) * (x17 as u64));
  let x72: u64 = (((arg1[0]) as u64) * (x18 as u64));
  let x73: u64 = (((arg1[0]) as u64) * ((arg1[0]) as u64));
  let x74: u64 = (x73 + (x55 + (x48 + (x42 + (x37 + x33)))));
  let x75: u64 = (x74 >> 26);
  let x76: u32 = ((x74 & (0x3ffffff as u64)) as u32);
  let x77: u64 = (x64 + (x56 + (x49 + (x43 + x38))));
  let x78: u64 = (x65 + (x57 + (x50 + (x44 + (x39 + x19)))));
  let x79: u64 = (x66 + (x58 + (x51 + (x45 + x20))));
  let x80: u64 = (x67 + (x59 + (x52 + (x46 + (x22 + x21)))));
  let x81: u64 = (x68 + (x60 + (x53 + (x25 + x23))));
  let x82: u64 = (x69 + (x61 + (x54 + (x29 + (x26 + x24)))));
  let x83: u64 = (x70 + (x62 + (x34 + (x30 + x27))));
  let x84: u64 = (x71 + (x63 + (x40 + (x35 + (x31 + x28)))));
  let x85: u64 = (x72 + (x47 + (x41 + (x36 + x32))));
  let x86: u64 = (x75 + x85);
  let x87: u64 = (x86 >> 25);
  let x88: u32 = ((x86 & (0x1ffffff as u64)) as u32);
  let x89: u64 = (x87 + x84);
  let x90: u64 = (x89 >> 26);
  let x91: u32 = ((x89 & (0x3ffffff as u64)) as u32);
  let x92: u64 = (x90 + x83);
  let x93: u64 = (x92 >> 25);
  let x94: u32 = ((x92 & (0x1ffffff as u64)) as u32);
  let x95: u64 = (x93 + x82);
  let x96: u64 = (x95 >> 26);
  let x97: u32 = ((x95 & (0x3ffffff as u64)) as u32);
  let x98: u64 = (x96 + x81);
  let x99: u64 = (x98 >> 25);
  let x100: u32 = ((x98 & (0x1ffffff as u64)) as u32);
  let x101: u64 = (x99 + x80);
  let x102: u64 = (x101 >> 26);
  let x103: u32 = ((x101 & (0x3ffffff as u64)) as u32);
  let x104: u64 = (x102 + x79);
  let x105: u64 = (x104 >> 25);
  let x106: u32 = ((x104 & (0x1ffffff as u64)) as u32);
  let x107: u64 = (x105 + x78);
  let x108: u64 = (x107 >> 26);
  let x109: u32 = ((x107 & (0x3ffffff as u64)) as u32);
  let x110: u64 = (x108 + x77);
  let x111: u64 = (x110 >> 25);
  let x112: u32 = ((x110 & (0x1ffffff as u64)) as u32);
  let x113: u64 = (x111 * (0x13 as u64));
  let x114: u64 = ((x76 as u64) + x113);
  let x115: u32 = ((x114 >> 26) as u32);
  let x116: u32 = ((x114 & (0x3ffffff as u64)) as u32);
  let x117: u32 = (x115 + x88);
  let x118: fiat_25519_u1 = ((x117 >> 25) as fiat_25519_u1);
  let x119: u32 = (x117 & 0x1ffffff);
  let x120: u32 = ((x118 as u32) + x91);
  out1[0] = x116;
  out1[1] = x119;
  out1[2] = x120;
  out1[3] = x94;
  out1[4] = x97;
  out1[5] = x100;
  out1[6] = x103;
  out1[7] = x106;
  out1[8] = x109;
  out1[9] = x112;
}

/// The function fiat_25519_carry reduces a field element.
/// Postconditions:
///   eval out1 mod m = eval arg1 mod m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000]]
/// Output Bounds:
///   out1: [[0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000]]
#[inline]
pub fn fiat_25519_carry(out1: &mut [u32; 10], arg1: &[u32; 10]) -> () {
  let x1: u32 = (arg1[0]);
  let x2: u32 = ((x1 >> 26) + (arg1[1]));
  let x3: u32 = ((x2 >> 25) + (arg1[2]));
  let x4: u32 = ((x3 >> 26) + (arg1[3]));
  let x5: u32 = ((x4 >> 25) + (arg1[4]));
  let x6: u32 = ((x5 >> 26) + (arg1[5]));
  let x7: u32 = ((x6 >> 25) + (arg1[6]));
  let x8: u32 = ((x7 >> 26) + (arg1[7]));
  let x9: u32 = ((x8 >> 25) + (arg1[8]));
  let x10: u32 = ((x9 >> 26) + (arg1[9]));
  let x11: u32 = ((x1 & 0x3ffffff) + ((x10 >> 25) * 0x13));
  let x12: u32 = ((((x11 >> 26) as fiat_25519_u1) as u32) + (x2 & 0x1ffffff));
  let x13: u32 = (x11 & 0x3ffffff);
  let x14: u32 = (x12 & 0x1ffffff);
  let x15: u32 = ((((x12 >> 25) as fiat_25519_u1) as u32) + (x3 & 0x3ffffff));
  let x16: u32 = (x4 & 0x1ffffff);
  let x17: u32 = (x5 & 0x3ffffff);
  let x18: u32 = (x6 & 0x1ffffff);
  let x19: u32 = (x7 & 0x3ffffff);
  let x20: u32 = (x8 & 0x1ffffff);
  let x21: u32 = (x9 & 0x3ffffff);
  let x22: u32 = (x10 & 0x1ffffff);
  out1[0] = x13;
  out1[1] = x14;
  out1[2] = x15;
  out1[3] = x16;
  out1[4] = x17;
  out1[5] = x18;
  out1[6] = x19;
  out1[7] = x20;
  out1[8] = x21;
  out1[9] = x22;
}

/// The function fiat_25519_add adds two field elements.
/// Postconditions:
///   eval out1 mod m = (eval arg1 + eval arg2) mod m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000]]
///   arg2: [[0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000]]
#[inline]
pub fn fiat_25519_add(out1: &mut [u32; 10], arg1: &[u32; 10], arg2: &[u32; 10]) -> () {
  let x1: u32 = ((arg1[0]) + (arg2[0]));
  let x2: u32 = ((arg1[1]) + (arg2[1]));
  let x3: u32 = ((arg1[2]) + (arg2[2]));
  let x4: u32 = ((arg1[3]) + (arg2[3]));
  let x5: u32 = ((arg1[4]) + (arg2[4]));
  let x6: u32 = ((arg1[5]) + (arg2[5]));
  let x7: u32 = ((arg1[6]) + (arg2[6]));
  let x8: u32 = ((arg1[7]) + (arg2[7]));
  let x9: u32 = ((arg1[8]) + (arg2[8]));
  let x10: u32 = ((arg1[9]) + (arg2[9]));
  out1[0] = x1;
  out1[1] = x2;
  out1[2] = x3;
  out1[3] = x4;
  out1[4] = x5;
  out1[5] = x6;
  out1[6] = x7;
  out1[7] = x8;
  out1[8] = x9;
  out1[9] = x10;
}

/// The function fiat_25519_sub subtracts two field elements.
/// Postconditions:
///   eval out1 mod m = (eval arg1 - eval arg2) mod m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000]]
///   arg2: [[0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000]]
#[inline]
pub fn fiat_25519_sub(out1: &mut [u32; 10], arg1: &[u32; 10], arg2: &[u32; 10]) -> () {
  let x1: u32 = ((0x7ffffda + (arg1[0])) - (arg2[0]));
  let x2: u32 = ((0x3fffffe + (arg1[1])) - (arg2[1]));
  let x3: u32 = ((0x7fffffe + (arg1[2])) - (arg2[2]));
  let x4: u32 = ((0x3fffffe + (arg1[3])) - (arg2[3]));
  let x5: u32 = ((0x7fffffe + (arg1[4])) - (arg2[4]));
  let x6: u32 = ((0x3fffffe + (arg1[5])) - (arg2[5]));
  let x7: u32 = ((0x7fffffe + (arg1[6])) - (arg2[6]));
  let x8: u32 = ((0x3fffffe + (arg1[7])) - (arg2[7]));
  let x9: u32 = ((0x7fffffe + (arg1[8])) - (arg2[8]));
  let x10: u32 = ((0x3fffffe + (arg1[9])) - (arg2[9]));
  out1[0] = x1;
  out1[1] = x2;
  out1[2] = x3;
  out1[3] = x4;
  out1[4] = x5;
  out1[5] = x6;
  out1[6] = x7;
  out1[7] = x8;
  out1[8] = x9;
  out1[9] = x10;
}

/// The function fiat_25519_opp negates a field element.
/// Postconditions:
///   eval out1 mod m = -eval arg1 mod m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000]]
#[inline]
pub fn fiat_25519_opp(out1: &mut [u32; 10], arg1: &[u32; 10]) -> () {
  let x1: u32 = (0x7ffffda - (arg1[0]));
  let x2: u32 = (0x3fffffe - (arg1[1]));
  let x3: u32 = (0x7fffffe - (arg1[2]));
  let x4: u32 = (0x3fffffe - (arg1[3]));
  let x5: u32 = (0x7fffffe - (arg1[4]));
  let x6: u32 = (0x3fffffe - (arg1[5]));
  let x7: u32 = (0x7fffffe - (arg1[6]));
  let x8: u32 = (0x3fffffe - (arg1[7]));
  let x9: u32 = (0x7fffffe - (arg1[8]));
  let x10: u32 = (0x3fffffe - (arg1[9]));
  out1[0] = x1;
  out1[1] = x2;
  out1[2] = x3;
  out1[3] = x4;
  out1[4] = x5;
  out1[5] = x6;
  out1[6] = x7;
  out1[7] = x8;
  out1[8] = x9;
  out1[9] = x10;
}

/// The function fiat_25519_selectznz is a multi-limb conditional select.
/// Postconditions:
///   eval out1 = (if arg1 = 0 then eval arg2 else eval arg3)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_25519_selectznz(out1: &mut [u32; 10], arg1: fiat_25519_u1, arg2: &[u32; 10], arg3: &[u32; 10]) -> () {
  let mut x1: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1, arg1, (arg2[0]), (arg3[0]));
  let mut x2: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x2, arg1, (arg2[1]), (arg3[1]));
  let mut x3: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x3, arg1, (arg2[2]), (arg3[2]));
  let mut x4: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x4, arg1, (arg2[3]), (arg3[3]));
  let mut x5: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x5, arg1, (arg2[4]), (arg3[4]));
  let mut x6: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x6, arg1, (arg2[5]), (arg3[5]));
  let mut x7: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x7, arg1, (arg2[6]), (arg3[6]));
  let mut x8: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x8, arg1, (arg2[7]), (arg3[7]));
  let mut x9: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x9, arg1, (arg2[8]), (arg3[8]));
  let mut x10: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x10, arg1, (arg2[9]), (arg3[9]));
  out1[0] = x1;
  out1[1] = x2;
  out1[2] = x3;
  out1[3] = x4;
  out1[4] = x5;
  out1[5] = x6;
  out1[6] = x7;
  out1[7] = x8;
  out1[8] = x9;
  out1[9] = x10;
}

/// The function fiat_25519_to_bytes serializes a field element to bytes in little-endian order.
/// Postconditions:
///   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..31]
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0x7f]]
#[inline]
pub fn fiat_25519_to_bytes(out1: &mut [u8; 32], arg1: &[u32; 10]) -> () {
  let mut x1: u32 = 0;
  let mut x2: fiat_25519_u1 = 0;
  fiat_25519_subborrowx_u26(&mut x1, &mut x2, 0x0, (arg1[0]), 0x3ffffed);
  let mut x3: u32 = 0;
  let mut x4: fiat_25519_u1 = 0;
  fiat_25519_subborrowx_u25(&mut x3, &mut x4, x2, (arg1[1]), 0x1ffffff);
  let mut x5: u32 = 0;
  let mut x6: fiat_25519_u1 = 0;
  fiat_25519_subborrowx_u26(&mut x5, &mut x6, x4, (arg1[2]), 0x3ffffff);
  let mut x7: u32 = 0;
  let mut x8: fiat_25519_u1 = 0;
  fiat_25519_subborrowx_u25(&mut x7, &mut x8, x6, (arg1[3]), 0x1ffffff);
  let mut x9: u32 = 0;
  let mut x10: fiat_25519_u1 = 0;
  fiat_25519_subborrowx_u26(&mut x9, &mut x10, x8, (arg1[4]), 0x3ffffff);
  let mut x11: u32 = 0;
  let mut x12: fiat_25519_u1 = 0;
  fiat_25519_subborrowx_u25(&mut x11, &mut x12, x10, (arg1[5]), 0x1ffffff);
  let mut x13: u32 = 0;
  let mut x14: fiat_25519_u1 = 0;
  fiat_25519_subborrowx_u26(&mut x13, &mut x14, x12, (arg1[6]), 0x3ffffff);
  let mut x15: u32 = 0;
  let mut x16: fiat_25519_u1 = 0;
  fiat_25519_subborrowx_u25(&mut x15, &mut x16, x14, (arg1[7]), 0x1ffffff);
  let mut x17: u32 = 0;
  let mut x18: fiat_25519_u1 = 0;
  fiat_25519_subborrowx_u26(&mut x17, &mut x18, x16, (arg1[8]), 0x3ffffff);
  let mut x19: u32 = 0;
  let mut x20: fiat_25519_u1 = 0;
  fiat_25519_subborrowx_u25(&mut x19, &mut x20, x18, (arg1[9]), 0x1ffffff);
  let mut x21: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x21, x20, (0x0 as u32), 0xffffffff);
  let mut x22: u32 = 0;
  let mut x23: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u26(&mut x22, &mut x23, 0x0, x1, (x21 & 0x3ffffed));
  let mut x24: u32 = 0;
  let mut x25: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u25(&mut x24, &mut x25, x23, x3, (x21 & 0x1ffffff));
  let mut x26: u32 = 0;
  let mut x27: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u26(&mut x26, &mut x27, x25, x5, (x21 & 0x3ffffff));
  let mut x28: u32 = 0;
  let mut x29: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u25(&mut x28, &mut x29, x27, x7, (x21 & 0x1ffffff));
  let mut x30: u32 = 0;
  let mut x31: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u26(&mut x30, &mut x31, x29, x9, (x21 & 0x3ffffff));
  let mut x32: u32 = 0;
  let mut x33: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u25(&mut x32, &mut x33, x31, x11, (x21 & 0x1ffffff));
  let mut x34: u32 = 0;
  let mut x35: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u26(&mut x34, &mut x35, x33, x13, (x21 & 0x3ffffff));
  let mut x36: u32 = 0;
  let mut x37: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u25(&mut x36, &mut x37, x35, x15, (x21 & 0x1ffffff));
  let mut x38: u32 = 0;
  let mut x39: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u26(&mut x38, &mut x39, x37, x17, (x21 & 0x3ffffff));
  let mut x40: u32 = 0;
  let mut x41: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u25(&mut x40, &mut x41, x39, x19, (x21 & 0x1ffffff));
  let x42: u32 = (x40 << 6);
  let x43: u32 = (x38 << 4);
  let x44: u32 = (x36 << 3);
  let x45: u32 = (x34 * (0x2 as u32));
  let x46: u32 = (x30 << 6);
  let x47: u32 = (x28 << 5);
  let x48: u32 = (x26 << 3);
  let x49: u32 = (x24 << 2);
  let x50: u8 = ((x22 & (0xff as u32)) as u8);
  let x51: u32 = (x22 >> 8);
  let x52: u8 = ((x51 & (0xff as u32)) as u8);
  let x53: u32 = (x51 >> 8);
  let x54: u8 = ((x53 & (0xff as u32)) as u8);
  let x55: u8 = ((x53 >> 8) as u8);
  let x56: u32 = (x49 + (x55 as u32));
  let x57: u8 = ((x56 & (0xff as u32)) as u8);
  let x58: u32 = (x56 >> 8);
  let x59: u8 = ((x58 & (0xff as u32)) as u8);
  let x60: u32 = (x58 >> 8);
  let x61: u8 = ((x60 & (0xff as u32)) as u8);
  let x62: u8 = ((x60 >> 8) as u8);
  let x63: u32 = (x48 + (x62 as u32));
  let x64: u8 = ((x63 & (0xff as u32)) as u8);
  let x65: u32 = (x63 >> 8);
  let x66: u8 = ((x65 & (0xff as u32)) as u8);
  let x67: u32 = (x65 >> 8);
  let x68: u8 = ((x67 & (0xff as u32)) as u8);
  let x69: u8 = ((x67 >> 8) as u8);
  let x70: u32 = (x47 + (x69 as u32));
  let x71: u8 = ((x70 & (0xff as u32)) as u8);
  let x72: u32 = (x70 >> 8);
  let x73: u8 = ((x72 & (0xff as u32)) as u8);
  let x74: u32 = (x72 >> 8);
  let x75: u8 = ((x74 & (0xff as u32)) as u8);
  let x76: u8 = ((x74 >> 8) as u8);
  let x77: u32 = (x46 + (x76 as u32));
  let x78: u8 = ((x77 & (0xff as u32)) as u8);
  let x79: u32 = (x77 >> 8);
  let x80: u8 = ((x79 & (0xff as u32)) as u8);
  let x81: u32 = (x79 >> 8);
  let x82: u8 = ((x81 & (0xff as u32)) as u8);
  let x83: u8 = ((x81 >> 8) as u8);
  let x84: u8 = ((x32 & (0xff as u32)) as u8);
  let x85: u32 = (x32 >> 8);
  let x86: u8 = ((x85 & (0xff as u32)) as u8);
  let x87: u32 = (x85 >> 8);
  let x88: u8 = ((x87 & (0xff as u32)) as u8);
  let x89: fiat_25519_u1 = ((x87 >> 8) as fiat_25519_u1);
  let x90: u32 = (x45 + (x89 as u32));
  let x91: u8 = ((x90 & (0xff as u32)) as u8);
  let x92: u32 = (x90 >> 8);
  let x93: u8 = ((x92 & (0xff as u32)) as u8);
  let x94: u32 = (x92 >> 8);
  let x95: u8 = ((x94 & (0xff as u32)) as u8);
  let x96: u8 = ((x94 >> 8) as u8);
  let x97: u32 = (x44 + (x96 as u32));
  let x98: u8 = ((x97 & (0xff as u32)) as u8);
  let x99: u32 = (x97 >> 8);
  let x100: u8 = ((x99 & (0xff as u32)) as u8);
  let x101: u32 = (x99 >> 8);
  let x102: u8 = ((x101 & (0xff as u32)) as u8);
  let x103: u8 = ((x101 >> 8) as u8);
  let x104: u32 = (x43 + (x103 as u32));
  let x105: u8 = ((x104 & (0xff as u32)) as u8);
  let x106: u32 = (x104 >> 8);
  let x107: u8 = ((x106 & (0xff as u32)) as u8);
  let x108: u32 = (x106 >> 8);
  let x109: u8 = ((x108 & (0xff as u32)) as u8);
  let x110: u8 = ((x108 >> 8) as u8);
  let x111: u32 = (x42 + (x110 as u32));
  let x112: u8 = ((x111 & (0xff as u32)) as u8);
  let x113: u32 = (x111 >> 8);
  let x114: u8 = ((x113 & (0xff as u32)) as u8);
  let x115: u32 = (x113 >> 8);
  let x116: u8 = ((x115 & (0xff as u32)) as u8);
  let x117: u8 = ((x115 >> 8) as u8);
  out1[0] = x50;
  out1[1] = x52;
  out1[2] = x54;
  out1[3] = x57;
  out1[4] = x59;
  out1[5] = x61;
  out1[6] = x64;
  out1[7] = x66;
  out1[8] = x68;
  out1[9] = x71;
  out1[10] = x73;
  out1[11] = x75;
  out1[12] = x78;
  out1[13] = x80;
  out1[14] = x82;
  out1[15] = x83;
  out1[16] = x84;
  out1[17] = x86;
  out1[18] = x88;
  out1[19] = x91;
  out1[20] = x93;
  out1[21] = x95;
  out1[22] = x98;
  out1[23] = x100;
  out1[24] = x102;
  out1[25] = x105;
  out1[26] = x107;
  out1[27] = x109;
  out1[28] = x112;
  out1[29] = x114;
  out1[30] = x116;
  out1[31] = x117;
}

/// The function fiat_25519_from_bytes deserializes a field element from bytes in little-endian order.
/// Postconditions:
///   eval out1 mod m = bytes_eval arg1 mod m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0x7f]]
/// Output Bounds:
///   out1: [[0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000]]
#[inline]
pub fn fiat_25519_from_bytes(out1: &mut [u32; 10], arg1: &[u8; 32]) -> () {
  let x1: u32 = (((arg1[31]) as u32) << 18);
  let x2: u32 = (((arg1[30]) as u32) << 10);
  let x3: u32 = (((arg1[29]) as u32) << 2);
  let x4: u32 = (((arg1[28]) as u32) << 20);
  let x5: u32 = (((arg1[27]) as u32) << 12);
  let x6: u32 = (((arg1[26]) as u32) << 4);
  let x7: u32 = (((arg1[25]) as u32) << 21);
  let x8: u32 = (((arg1[24]) as u32) << 13);
  let x9: u32 = (((arg1[23]) as u32) << 5);
  let x10: u32 = (((arg1[22]) as u32) << 23);
  let x11: u32 = (((arg1[21]) as u32) << 15);
  let x12: u32 = (((arg1[20]) as u32) << 7);
  let x13: u32 = (((arg1[19]) as u32) << 24);
  let x14: u32 = (((arg1[18]) as u32) << 16);
  let x15: u32 = (((arg1[17]) as u32) << 8);
  let x16: u8 = (arg1[16]);
  let x17: u32 = (((arg1[15]) as u32) << 18);
  let x18: u32 = (((arg1[14]) as u32) << 10);
  let x19: u32 = (((arg1[13]) as u32) << 2);
  let x20: u32 = (((arg1[12]) as u32) << 19);
  let x21: u32 = (((arg1[11]) as u32) << 11);
  let x22: u32 = (((arg1[10]) as u32) << 3);
  let x23: u32 = (((arg1[9]) as u32) << 21);
  let x24: u32 = (((arg1[8]) as u32) << 13);
  let x25: u32 = (((arg1[7]) as u32) << 5);
  let x26: u32 = (((arg1[6]) as u32) << 22);
  let x27: u32 = (((arg1[5]) as u32) << 14);
  let x28: u32 = (((arg1[4]) as u32) << 6);
  let x29: u32 = (((arg1[3]) as u32) << 24);
  let x30: u32 = (((arg1[2]) as u32) << 16);
  let x31: u32 = (((arg1[1]) as u32) << 8);
  let x32: u8 = (arg1[0]);
  let x33: u32 = (x31 + (x32 as u32));
  let x34: u32 = (x30 + x33);
  let x35: u32 = (x29 + x34);
  let x36: u32 = (x35 & 0x3ffffff);
  let x37: u8 = ((x35 >> 26) as u8);
  let x38: u32 = (x28 + (x37 as u32));
  let x39: u32 = (x27 + x38);
  let x40: u32 = (x26 + x39);
  let x41: u32 = (x40 & 0x1ffffff);
  let x42: u8 = ((x40 >> 25) as u8);
  let x43: u32 = (x25 + (x42 as u32));
  let x44: u32 = (x24 + x43);
  let x45: u32 = (x23 + x44);
  let x46: u32 = (x45 & 0x3ffffff);
  let x47: u8 = ((x45 >> 26) as u8);
  let x48: u32 = (x22 + (x47 as u32));
  let x49: u32 = (x21 + x48);
  let x50: u32 = (x20 + x49);
  let x51: u32 = (x50 & 0x1ffffff);
  let x52: u8 = ((x50 >> 25) as u8);
  let x53: u32 = (x19 + (x52 as u32));
  let x54: u32 = (x18 + x53);
  let x55: u32 = (x17 + x54);
  let x56: u32 = (x15 + (x16 as u32));
  let x57: u32 = (x14 + x56);
  let x58: u32 = (x13 + x57);
  let x59: u32 = (x58 & 0x1ffffff);
  let x60: u8 = ((x58 >> 25) as u8);
  let x61: u32 = (x12 + (x60 as u32));
  let x62: u32 = (x11 + x61);
  let x63: u32 = (x10 + x62);
  let x64: u32 = (x63 & 0x3ffffff);
  let x65: u8 = ((x63 >> 26) as u8);
  let x66: u32 = (x9 + (x65 as u32));
  let x67: u32 = (x8 + x66);
  let x68: u32 = (x7 + x67);
  let x69: u32 = (x68 & 0x1ffffff);
  let x70: u8 = ((x68 >> 25) as u8);
  let x71: u32 = (x6 + (x70 as u32));
  let x72: u32 = (x5 + x71);
  let x73: u32 = (x4 + x72);
  let x74: u32 = (x73 & 0x3ffffff);
  let x75: u8 = ((x73 >> 26) as u8);
  let x76: u32 = (x3 + (x75 as u32));
  let x77: u32 = (x2 + x76);
  let x78: u32 = (x1 + x77);
  out1[0] = x36;
  out1[1] = x41;
  out1[2] = x46;
  out1[3] = x51;
  out1[4] = x55;
  out1[5] = x59;
  out1[6] = x64;
  out1[7] = x69;
  out1[8] = x74;
  out1[9] = x78;
}

/// The function fiat_25519_one returns the field element one.
/// Postconditions:
///   eval out1 mod m = 1 mod m
///
/// Input Bounds:
/// Output Bounds:
///   out1: [[0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000]]
#[inline]
pub fn fiat_25519_one(out1: &mut [fiat_25519_u1; 10]) -> () {
  out1[0] = 0x1;
  out1[1] = 0x0;
  out1[2] = 0x0;
  out1[3] = 0x0;
  out1[4] = 0x0;
  out1[5] = 0x0;
  out1[6] = 0x0;
  out1[7] = 0x0;
  out1[8] = 0x0;
  out1[9] = 0x0;
}

/// The function fiat_25519_word_to_solina computes a divstep on wordsized integers.
/// Postconditions:
///   eval out1 = arg1
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_25519_word_to_solina(out1: &mut [u32; 10], arg1: u32) -> () {
  let x1: fiat_25519_u1 = ((arg1 >> 31) as fiat_25519_u1);
  let x2: u32 = (((((!arg1) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let x3: u32 = (arg1 >> 26);
  let x4: u32 = (arg1 & 0x3ffffff);
  let x5: u32 = (x2 >> 26);
  let x6: u32 = (x2 & 0x3ffffff);
  let x7: u32 = (0x7ffffda - x6);
  let x8: u32 = (0x3fffffe - x5);
  let x9: fiat_25519_u1 = ((x7 >> 26) as fiat_25519_u1);
  let x10: u32 = (x7 & 0x3ffffff);
  let x11: u32 = ((x9 as u32) + x8);
  let x12: u32 = (x11 & 0x1ffffff);
  let x13: u32 = (x10 + 0x13);
  let x14: fiat_25519_u1 = ((x13 >> 26) as fiat_25519_u1);
  let x15: u32 = (x13 & 0x3ffffff);
  let x16: u32 = ((x14 as u32) + x12);
  let x17: fiat_25519_u1 = ((x16 >> 25) as fiat_25519_u1);
  let x18: u32 = (x16 & 0x1ffffff);
  let x19: u32 = ((x17 as u32) + 0x3ffffff);
  let mut x20: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x20, x1, x4, x15);
  let mut x21: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x21, x1, x3, x18);
  let mut x22: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x22, x1, (0x0 as u32), x19);
  let mut x23: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x23, x1, (0x0 as u32), 0x1ffffff);
  let mut x24: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x24, x1, (0x0 as u32), 0x3ffffff);
  let mut x25: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x25, x1, (0x0 as u32), 0x1ffffff);
  let mut x26: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x26, x1, (0x0 as u32), 0x3ffffff);
  let mut x27: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x27, x1, (0x0 as u32), 0x1ffffff);
  let mut x28: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x28, x1, (0x0 as u32), 0x3ffffff);
  let mut x29: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x29, x1, (0x0 as u32), 0x1ffffff);
  out1[0] = x20;
  out1[1] = x21;
  out1[2] = x22;
  out1[3] = x23;
  out1[4] = x24;
  out1[5] = x25;
  out1[6] = x26;
  out1[7] = x27;
  out1[8] = x28;
  out1[9] = x29;
}

/// The function fiat_25519_msat returns the saturated (signed) representation of the prime modulus.
/// Postconditions:
///   twos_complement_eval out1 = m
///
/// Input Bounds:
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_25519_msat(out1: &mut [u32; 9]) -> () {
  out1[0] = 0xffffffed;
  out1[1] = 0xffffffff;
  out1[2] = 0xffffffff;
  out1[3] = 0xffffffff;
  out1[4] = 0xffffffff;
  out1[5] = 0xffffffff;
  out1[6] = 0xffffffff;
  out1[7] = 0x7fffffff;
  out1[8] = (0x0 as u32);
}

/// The function fiat_25519_sat_from_bytes deserializes a field element NOT in the Montgomery domain from bytes in little-endian order.
/// Postconditions:
///   eval out1 mod m = bytes_eval arg1 mod m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_25519_sat_from_bytes(out1: &mut [u32; 9], arg1: &[u8; 32]) -> () {
  let x1: u32 = (((arg1[31]) as u32) << 24);
  let x2: u32 = (((arg1[30]) as u32) << 16);
  let x3: u32 = (((arg1[29]) as u32) << 8);
  let x4: u8 = (arg1[28]);
  let x5: u32 = (((arg1[27]) as u32) << 24);
  let x6: u32 = (((arg1[26]) as u32) << 16);
  let x7: u32 = (((arg1[25]) as u32) << 8);
  let x8: u8 = (arg1[24]);
  let x9: u32 = (((arg1[23]) as u32) << 24);
  let x10: u32 = (((arg1[22]) as u32) << 16);
  let x11: u32 = (((arg1[21]) as u32) << 8);
  let x12: u8 = (arg1[20]);
  let x13: u32 = (((arg1[19]) as u32) << 24);
  let x14: u32 = (((arg1[18]) as u32) << 16);
  let x15: u32 = (((arg1[17]) as u32) << 8);
  let x16: u8 = (arg1[16]);
  let x17: u32 = (((arg1[15]) as u32) << 24);
  let x18: u32 = (((arg1[14]) as u32) << 16);
  let x19: u32 = (((arg1[13]) as u32) << 8);
  let x20: u8 = (arg1[12]);
  let x21: u32 = (((arg1[11]) as u32) << 24);
  let x22: u32 = (((arg1[10]) as u32) << 16);
  let x23: u32 = (((arg1[9]) as u32) << 8);
  let x24: u8 = (arg1[8]);
  let x25: u32 = (((arg1[7]) as u32) << 24);
  let x26: u32 = (((arg1[6]) as u32) << 16);
  let x27: u32 = (((arg1[5]) as u32) << 8);
  let x28: u8 = (arg1[4]);
  let x29: u32 = (((arg1[3]) as u32) << 24);
  let x30: u32 = (((arg1[2]) as u32) << 16);
  let x31: u32 = (((arg1[1]) as u32) << 8);
  let x32: u8 = (arg1[0]);
  let x33: u32 = (x31 + (x32 as u32));
  let x34: u32 = (x30 + x33);
  let x35: u32 = (x29 + x34);
  let x36: u32 = (x27 + (x28 as u32));
  let x37: u32 = (x26 + x36);
  let x38: u32 = (x25 + x37);
  let x39: u32 = (x23 + (x24 as u32));
  let x40: u32 = (x22 + x39);
  let x41: u32 = (x21 + x40);
  let x42: u32 = (x19 + (x20 as u32));
  let x43: u32 = (x18 + x42);
  let x44: u32 = (x17 + x43);
  let x45: u32 = (x15 + (x16 as u32));
  let x46: u32 = (x14 + x45);
  let x47: u32 = (x13 + x46);
  let x48: u32 = (x11 + (x12 as u32));
  let x49: u32 = (x10 + x48);
  let x50: u32 = (x9 + x49);
  let x51: u32 = (x7 + (x8 as u32));
  let x52: u32 = (x6 + x51);
  let x53: u32 = (x5 + x52);
  let x54: u32 = (x3 + (x4 as u32));
  let x55: u32 = (x2 + x54);
  let x56: u32 = (x1 + x55);
  out1[0] = x35;
  out1[1] = x38;
  out1[2] = x41;
  out1[3] = x44;
  out1[4] = x47;
  out1[5] = x50;
  out1[6] = x53;
  out1[7] = x56;
  out1[8] = (0x0 as u32);
}

/// The function fiat_25519_divstep computes a divstep.
/// Postconditions:
///   out1 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then 1 - arg1 else 1 + arg1)
///   twos_complement_eval out2 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then twos_complement_eval arg3 else twos_complement_eval arg2)
///   twos_complement_eval out3 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then ⌊(twos_complement_eval arg3 - twos_complement_eval arg2) / 2⌋ else ⌊(twos_complement_eval arg3 + (twos_complement_eval arg3 mod 2) * twos_complement_eval arg2) / 2⌋)
///   eval out4 mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (2 * eval arg5) mod m else (2 * eval arg4) mod m)
///   eval out5 mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (eval arg4 - eval arg4) mod m else (eval arg5 + (twos_complement_eval arg3 mod 2) * eval arg4) mod m)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffff]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg4: [[0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000]]
///   arg5: [[0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000]]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out4: [[0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000]]
///   out5: [[0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000]]
#[inline]
pub fn fiat_25519_divstep(out1: &mut u32, out2: &mut [u32; 9], out3: &mut [u32; 9], out4: &mut [u32; 10], out5: &mut [u32; 10], arg1: u32, arg2: &[u32; 9], arg3: &[u32; 9], arg4: &[u32; 10], arg5: &[u32; 10]) -> () {
  let mut x1: u32 = 0;
  let mut x2: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1, &mut x2, 0x0, (!arg1), (0x1 as u32));
  let x3: fiat_25519_u1 = (((x1 >> 31) as fiat_25519_u1) & (((arg3[0]) & (0x1 as u32)) as fiat_25519_u1));
  let mut x4: u32 = 0;
  let mut x5: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x4, &mut x5, 0x0, (!arg1), (0x1 as u32));
  let mut x6: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x6, x3, arg1, x4);
  let mut x7: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x7, x3, (arg2[0]), (arg3[0]));
  let mut x8: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x8, x3, (arg2[1]), (arg3[1]));
  let mut x9: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x9, x3, (arg2[2]), (arg3[2]));
  let mut x10: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x10, x3, (arg2[3]), (arg3[3]));
  let mut x11: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x11, x3, (arg2[4]), (arg3[4]));
  let mut x12: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x12, x3, (arg2[5]), (arg3[5]));
  let mut x13: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x13, x3, (arg2[6]), (arg3[6]));
  let mut x14: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x14, x3, (arg2[7]), (arg3[7]));
  let mut x15: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x15, x3, (arg2[8]), (arg3[8]));
  let mut x16: u32 = 0;
  let mut x17: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x16, &mut x17, 0x0, (0x1 as u32), (!(arg2[0])));
  let mut x18: u32 = 0;
  let mut x19: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x18, &mut x19, x17, (0x0 as u32), (!(arg2[1])));
  let mut x20: u32 = 0;
  let mut x21: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x20, &mut x21, x19, (0x0 as u32), (!(arg2[2])));
  let mut x22: u32 = 0;
  let mut x23: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x22, &mut x23, x21, (0x0 as u32), (!(arg2[3])));
  let mut x24: u32 = 0;
  let mut x25: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x24, &mut x25, x23, (0x0 as u32), (!(arg2[4])));
  let mut x26: u32 = 0;
  let mut x27: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x26, &mut x27, x25, (0x0 as u32), (!(arg2[5])));
  let mut x28: u32 = 0;
  let mut x29: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x28, &mut x29, x27, (0x0 as u32), (!(arg2[6])));
  let mut x30: u32 = 0;
  let mut x31: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x30, &mut x31, x29, (0x0 as u32), (!(arg2[7])));
  let mut x32: u32 = 0;
  let mut x33: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x32, &mut x33, x31, (0x0 as u32), (!(arg2[8])));
  let mut x34: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x34, x3, (arg3[0]), x16);
  let mut x35: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x35, x3, (arg3[1]), x18);
  let mut x36: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x36, x3, (arg3[2]), x20);
  let mut x37: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x37, x3, (arg3[3]), x22);
  let mut x38: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x38, x3, (arg3[4]), x24);
  let mut x39: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x39, x3, (arg3[5]), x26);
  let mut x40: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x40, x3, (arg3[6]), x28);
  let mut x41: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x41, x3, (arg3[7]), x30);
  let mut x42: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x42, x3, (arg3[8]), x32);
  let mut x43: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x43, x3, (arg4[0]), (arg5[0]));
  let mut x44: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x44, x3, (arg4[1]), (arg5[1]));
  let mut x45: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x45, x3, (arg4[2]), (arg5[2]));
  let mut x46: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x46, x3, (arg4[3]), (arg5[3]));
  let mut x47: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x47, x3, (arg4[4]), (arg5[4]));
  let mut x48: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x48, x3, (arg4[5]), (arg5[5]));
  let mut x49: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x49, x3, (arg4[6]), (arg5[6]));
  let mut x50: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x50, x3, (arg4[7]), (arg5[7]));
  let mut x51: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x51, x3, (arg4[8]), (arg5[8]));
  let mut x52: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x52, x3, (arg4[9]), (arg5[9]));
  let x53: u32 = (x43 + x43);
  let x54: u32 = (x53 >> 26);
  let x55: u32 = (x53 & 0x3ffffff);
  let x56: u32 = (x52 + x52);
  let x57: u32 = (x51 + x51);
  let x58: u32 = (x50 + x50);
  let x59: u32 = (x49 + x49);
  let x60: u32 = (x48 + x48);
  let x61: u32 = (x47 + x47);
  let x62: u32 = (x46 + x46);
  let x63: u32 = (x45 + x45);
  let x64: u32 = (x44 + x44);
  let x65: u32 = (x54 + x64);
  let x66: u32 = (x65 >> 25);
  let x67: u32 = (x65 & 0x1ffffff);
  let x68: u32 = (x66 + x63);
  let x69: u32 = (x68 >> 26);
  let x70: u32 = (x68 & 0x3ffffff);
  let x71: u32 = (x69 + x62);
  let x72: u32 = (x71 >> 25);
  let x73: u32 = (x71 & 0x1ffffff);
  let x74: u32 = (x72 + x61);
  let x75: u32 = (x74 >> 26);
  let x76: u32 = (x74 & 0x3ffffff);
  let x77: u32 = (x75 + x60);
  let x78: u32 = (x77 >> 25);
  let x79: u32 = (x77 & 0x1ffffff);
  let x80: u32 = (x78 + x59);
  let x81: u32 = (x80 >> 26);
  let x82: u32 = (x80 & 0x3ffffff);
  let x83: u32 = (x81 + x58);
  let x84: u32 = (x83 >> 25);
  let x85: u32 = (x83 & 0x1ffffff);
  let x86: u32 = (x84 + x57);
  let x87: u32 = (x86 >> 26);
  let x88: u32 = (x86 & 0x3ffffff);
  let x89: u32 = (x87 + x56);
  let x90: u32 = (x89 >> 25);
  let x91: u32 = (x89 & 0x1ffffff);
  let x92: u32 = (x90 * 0x13);
  let x93: u32 = (x55 + x92);
  let x94: fiat_25519_u1 = ((x93 >> 26) as fiat_25519_u1);
  let x95: u32 = (x93 & 0x3ffffff);
  let x96: u32 = ((x94 as u32) + x67);
  let x97: fiat_25519_u1 = ((x96 >> 25) as fiat_25519_u1);
  let x98: u32 = (x96 & 0x1ffffff);
  let x99: u32 = ((x97 as u32) + x70);
  let x100: u32 = (arg4[9]);
  let x101: u32 = (arg4[8]);
  let x102: u32 = (arg4[7]);
  let x103: u32 = (arg4[6]);
  let x104: u32 = (arg4[5]);
  let x105: u32 = (arg4[4]);
  let x106: u32 = (arg4[3]);
  let x107: u32 = (arg4[2]);
  let x108: u32 = (arg4[1]);
  let x109: u32 = (arg4[0]);
  let x110: u32 = (0x7ffffda - x109);
  let x111: u32 = (0x3fffffe - x108);
  let x112: u32 = (0x7fffffe - x107);
  let x113: u32 = (0x3fffffe - x106);
  let x114: u32 = (0x7fffffe - x105);
  let x115: u32 = (0x3fffffe - x104);
  let x116: u32 = (0x7fffffe - x103);
  let x117: u32 = (0x3fffffe - x102);
  let x118: u32 = (0x7fffffe - x101);
  let x119: u32 = (0x3fffffe - x100);
  let x120: fiat_25519_u1 = ((x110 >> 26) as fiat_25519_u1);
  let x121: u32 = (x110 & 0x3ffffff);
  let x122: u32 = ((x120 as u32) + x111);
  let x123: fiat_25519_u1 = ((x122 >> 25) as fiat_25519_u1);
  let x124: u32 = (x122 & 0x1ffffff);
  let x125: u32 = ((x123 as u32) + x112);
  let x126: fiat_25519_u1 = ((x125 >> 26) as fiat_25519_u1);
  let x127: u32 = (x125 & 0x3ffffff);
  let x128: u32 = ((x126 as u32) + x113);
  let x129: fiat_25519_u1 = ((x128 >> 25) as fiat_25519_u1);
  let x130: u32 = (x128 & 0x1ffffff);
  let x131: u32 = ((x129 as u32) + x114);
  let x132: fiat_25519_u1 = ((x131 >> 26) as fiat_25519_u1);
  let x133: u32 = (x131 & 0x3ffffff);
  let x134: u32 = ((x132 as u32) + x115);
  let x135: fiat_25519_u1 = ((x134 >> 25) as fiat_25519_u1);
  let x136: u32 = (x134 & 0x1ffffff);
  let x137: u32 = ((x135 as u32) + x116);
  let x138: fiat_25519_u1 = ((x137 >> 26) as fiat_25519_u1);
  let x139: u32 = (x137 & 0x3ffffff);
  let x140: u32 = ((x138 as u32) + x117);
  let x141: fiat_25519_u1 = ((x140 >> 25) as fiat_25519_u1);
  let x142: u32 = (x140 & 0x1ffffff);
  let x143: u32 = ((x141 as u32) + x118);
  let x144: fiat_25519_u1 = ((x143 >> 26) as fiat_25519_u1);
  let x145: u32 = (x143 & 0x3ffffff);
  let x146: u32 = ((x144 as u32) + x119);
  let x147: fiat_25519_u1 = ((x146 >> 25) as fiat_25519_u1);
  let x148: u32 = (x146 & 0x1ffffff);
  let x149: u32 = ((x147 as u32) * 0x13);
  let x150: u32 = (x121 + x149);
  let x151: fiat_25519_u1 = ((x150 >> 26) as fiat_25519_u1);
  let x152: u32 = (x150 & 0x3ffffff);
  let x153: u32 = ((x151 as u32) + x124);
  let x154: fiat_25519_u1 = ((x153 >> 25) as fiat_25519_u1);
  let x155: u32 = (x153 & 0x1ffffff);
  let x156: u32 = ((x154 as u32) + x127);
  let mut x157: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x157, x3, (arg5[0]), x152);
  let mut x158: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x158, x3, (arg5[1]), x155);
  let mut x159: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x159, x3, (arg5[2]), x156);
  let mut x160: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x160, x3, (arg5[3]), x130);
  let mut x161: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x161, x3, (arg5[4]), x133);
  let mut x162: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x162, x3, (arg5[5]), x136);
  let mut x163: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x163, x3, (arg5[6]), x139);
  let mut x164: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x164, x3, (arg5[7]), x142);
  let mut x165: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x165, x3, (arg5[8]), x145);
  let mut x166: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x166, x3, (arg5[9]), x148);
  let x167: fiat_25519_u1 = ((x34 & (0x1 as u32)) as fiat_25519_u1);
  let mut x168: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x168, x167, (0x0 as u32), x7);
  let mut x169: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x169, x167, (0x0 as u32), x8);
  let mut x170: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x170, x167, (0x0 as u32), x9);
  let mut x171: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x171, x167, (0x0 as u32), x10);
  let mut x172: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x172, x167, (0x0 as u32), x11);
  let mut x173: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x173, x167, (0x0 as u32), x12);
  let mut x174: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x174, x167, (0x0 as u32), x13);
  let mut x175: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x175, x167, (0x0 as u32), x14);
  let mut x176: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x176, x167, (0x0 as u32), x15);
  let mut x177: u32 = 0;
  let mut x178: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x177, &mut x178, 0x0, x34, x168);
  let mut x179: u32 = 0;
  let mut x180: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x179, &mut x180, x178, x35, x169);
  let mut x181: u32 = 0;
  let mut x182: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x181, &mut x182, x180, x36, x170);
  let mut x183: u32 = 0;
  let mut x184: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x183, &mut x184, x182, x37, x171);
  let mut x185: u32 = 0;
  let mut x186: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x185, &mut x186, x184, x38, x172);
  let mut x187: u32 = 0;
  let mut x188: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x187, &mut x188, x186, x39, x173);
  let mut x189: u32 = 0;
  let mut x190: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x189, &mut x190, x188, x40, x174);
  let mut x191: u32 = 0;
  let mut x192: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x191, &mut x192, x190, x41, x175);
  let mut x193: u32 = 0;
  let mut x194: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x193, &mut x194, x192, x42, x176);
  let mut x195: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x195, x167, (0x0 as u32), x43);
  let mut x196: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x196, x167, (0x0 as u32), x44);
  let mut x197: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x197, x167, (0x0 as u32), x45);
  let mut x198: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x198, x167, (0x0 as u32), x46);
  let mut x199: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x199, x167, (0x0 as u32), x47);
  let mut x200: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x200, x167, (0x0 as u32), x48);
  let mut x201: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x201, x167, (0x0 as u32), x49);
  let mut x202: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x202, x167, (0x0 as u32), x50);
  let mut x203: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x203, x167, (0x0 as u32), x51);
  let mut x204: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x204, x167, (0x0 as u32), x52);
  let x205: u32 = (x157 + x195);
  let x206: u32 = (x205 >> 26);
  let x207: u32 = (x205 & 0x3ffffff);
  let x208: u32 = (x166 + x204);
  let x209: u32 = (x165 + x203);
  let x210: u32 = (x164 + x202);
  let x211: u32 = (x163 + x201);
  let x212: u32 = (x162 + x200);
  let x213: u32 = (x161 + x199);
  let x214: u32 = (x160 + x198);
  let x215: u32 = (x159 + x197);
  let x216: u32 = (x158 + x196);
  let x217: u32 = (x206 + x216);
  let x218: u32 = (x217 >> 25);
  let x219: u32 = (x217 & 0x1ffffff);
  let x220: u32 = (x218 + x215);
  let x221: u32 = (x220 >> 26);
  let x222: u32 = (x220 & 0x3ffffff);
  let x223: u32 = (x221 + x214);
  let x224: u32 = (x223 >> 25);
  let x225: u32 = (x223 & 0x1ffffff);
  let x226: u32 = (x224 + x213);
  let x227: u32 = (x226 >> 26);
  let x228: u32 = (x226 & 0x3ffffff);
  let x229: u32 = (x227 + x212);
  let x230: u32 = (x229 >> 25);
  let x231: u32 = (x229 & 0x1ffffff);
  let x232: u32 = (x230 + x211);
  let x233: u32 = (x232 >> 26);
  let x234: u32 = (x232 & 0x3ffffff);
  let x235: u32 = (x233 + x210);
  let x236: u32 = (x235 >> 25);
  let x237: u32 = (x235 & 0x1ffffff);
  let x238: u32 = (x236 + x209);
  let x239: u32 = (x238 >> 26);
  let x240: u32 = (x238 & 0x3ffffff);
  let x241: u32 = (x239 + x208);
  let x242: u32 = (x241 >> 25);
  let x243: u32 = (x241 & 0x1ffffff);
  let x244: u32 = (x242 * 0x13);
  let x245: u32 = (x207 + x244);
  let x246: fiat_25519_u1 = ((x245 >> 26) as fiat_25519_u1);
  let x247: u32 = (x245 & 0x3ffffff);
  let x248: u32 = ((x246 as u32) + x219);
  let x249: fiat_25519_u1 = ((x248 >> 25) as fiat_25519_u1);
  let x250: u32 = (x248 & 0x1ffffff);
  let x251: u32 = ((x249 as u32) + x222);
  let mut x252: u32 = 0;
  let mut x253: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x252, &mut x253, 0x0, x6, (0x1 as u32));
  let x254: u32 = ((x177 >> 1) | ((x179 << 31) & 0xffffffff));
  let x255: u32 = ((x179 >> 1) | ((x181 << 31) & 0xffffffff));
  let x256: u32 = ((x181 >> 1) | ((x183 << 31) & 0xffffffff));
  let x257: u32 = ((x183 >> 1) | ((x185 << 31) & 0xffffffff));
  let x258: u32 = ((x185 >> 1) | ((x187 << 31) & 0xffffffff));
  let x259: u32 = ((x187 >> 1) | ((x189 << 31) & 0xffffffff));
  let x260: u32 = ((x189 >> 1) | ((x191 << 31) & 0xffffffff));
  let x261: u32 = ((x191 >> 1) | ((x193 << 31) & 0xffffffff));
  let x262: u32 = ((x193 & 0x80000000) | (x193 >> 1));
  *out1 = x252;
  out2[0] = x7;
  out2[1] = x8;
  out2[2] = x9;
  out2[3] = x10;
  out2[4] = x11;
  out2[5] = x12;
  out2[6] = x13;
  out2[7] = x14;
  out2[8] = x15;
  out3[0] = x254;
  out3[1] = x255;
  out3[2] = x256;
  out3[3] = x257;
  out3[4] = x258;
  out3[5] = x259;
  out3[6] = x260;
  out3[7] = x261;
  out3[8] = x262;
  out4[0] = x95;
  out4[1] = x98;
  out4[2] = x99;
  out4[3] = x73;
  out4[4] = x76;
  out4[5] = x79;
  out4[6] = x82;
  out4[7] = x85;
  out4[8] = x88;
  out4[9] = x91;
  out5[0] = x247;
  out5[1] = x250;
  out5[2] = x251;
  out5[3] = x225;
  out5[4] = x228;
  out5[5] = x231;
  out5[6] = x234;
  out5[7] = x237;
  out5[8] = x240;
  out5[9] = x243;
}

/// The function fiat_25519_divstep_precomp returns the precomputed value for Bernstein-Yang-inversion (in montgomery form).
/// Postconditions:
///   eval out1 = ⌊(m - 1) / 2⌋^(if (log2 m) + 1 < 46 then ⌊(49 * ((log2 m) + 1) + 80) / 17⌋ else ⌊(49 * ((log2 m) + 1) + 57) / 17⌋)
///
/// Input Bounds:
/// Output Bounds:
///   out1: [[0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000]]
#[inline]
pub fn fiat_25519_divstep_precomp(out1: &mut [u32; 10]) -> () {
  out1[0] = 0x938054;
  out1[1] = 0x55b1b2;
  out1[2] = 0x82ee0c;
  out1[3] = 0x1b28459;
  out1[4] = 0xa54469;
  out1[5] = 0x1351c67;
  out1[6] = 0x3b3b619;
  out1[7] = 0x7acb1c;
  out1[8] = 0x2c1db59;
  out1[9] = 0xb66f98;
}

/// The function fiat_25519_twos_complement_word_full_divstep computes a divstep on wordsized integers.
/// Postconditions:
///   out1 = (if 0 < arg1 ∧ arg3 is odd then 1 - arg1 else 1 + arg1)
///   out2 = (if 0 < arg1 ∧ arg3 is odd then arg3 else arg2)
///   out3 = (if 0 < arg1 ∧ arg3 is odd then ⌊(arg3 - arg2) / 2⌋ else ⌊(arg3 + (arg3 mod 2) * arg2) / 2⌋)
///   out4 = (if 0 < arg1 ∧ arg3 is odd then 2 * arg6 else 2 * arg4)
///   out5 = (if 0 < arg1 ∧ arg3 is odd then 2 * arg7 else 2 * arg5)
///   out6 = (if 0 < arg1 ∧ arg3 is odd then arg6 - arg4 else arg6 + (arg3 mod 2) * arg4)
///   out7 = (if 0 < arg1 ∧ arg3 is odd then arg5 - arg7 else arg7 + (arg3 mod 2) * arg5)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffff]
///   arg2: [0x0 ~> 0xffffffff]
///   arg3: [0x0 ~> 0xffffffff]
///   arg4: [0x0 ~> 0xffffffff]
///   arg5: [0x0 ~> 0xffffffff]
///   arg6: [0x0 ~> 0xffffffff]
///   arg7: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [0x0 ~> 0xffffffff]
///   out3: [0x0 ~> 0xffffffff]
///   out4: [0x0 ~> 0xffffffff]
///   out5: [0x0 ~> 0xffffffff]
///   out6: [0x0 ~> 0xffffffff]
///   out7: [0x0 ~> 0xffffffff]
#[inline]
pub fn fiat_25519_twos_complement_word_full_divstep(out1: &mut u32, out2: &mut u32, out3: &mut u32, out4: &mut u32, out5: &mut u32, out6: &mut u32, out7: &mut u32, arg1: u32, arg2: u32, arg3: u32, arg4: u32, arg5: u32, arg6: u32, arg7: u32) -> () {
  let x1: u32 = (((((!arg1) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x2: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x2, (((x1 >> 31) as fiat_25519_u1) & ((arg3 & (0x1 as u32)) as fiat_25519_u1)), arg1, (((((!arg1) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x3: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x3, (((x1 >> 31) as fiat_25519_u1) & ((arg3 & (0x1 as u32)) as fiat_25519_u1)), arg2, arg3);
  let mut x4: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x4, (((x1 >> 31) as fiat_25519_u1) & ((arg3 & (0x1 as u32)) as fiat_25519_u1)), arg3, (((((!arg2) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x5: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x5, (((x1 >> 31) as fiat_25519_u1) & ((arg3 & (0x1 as u32)) as fiat_25519_u1)), arg4, arg6);
  let mut x6: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x6, (((x1 >> 31) as fiat_25519_u1) & ((arg3 & (0x1 as u32)) as fiat_25519_u1)), arg5, arg7);
  let mut x7: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x7, (((x1 >> 31) as fiat_25519_u1) & ((arg3 & (0x1 as u32)) as fiat_25519_u1)), arg6, (((((!arg4) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x8: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x8, (((x1 >> 31) as fiat_25519_u1) & ((arg3 & (0x1 as u32)) as fiat_25519_u1)), arg7, (((((!arg5) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x9: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x9, ((x4 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x3);
  let mut x10: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x10, ((x4 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x5);
  let mut x11: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x11, ((x4 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x6);
  let x12: u32 = ((((0x1 as u64) + (x2 as u64)) & (0xffffffff as u64)) as u32);
  let x13: u32 = ((((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) >> 1));
  let x14: u32 = ((((x5 as u64) + (x5 as u64)) & (0xffffffff as u64)) as u32);
  let x15: u32 = ((((x6 as u64) + (x6 as u64)) & (0xffffffff as u64)) as u32);
  let x16: u32 = ((((x7 as u64) + (x10 as u64)) & (0xffffffff as u64)) as u32);
  let x17: u32 = ((((x8 as u64) + (x11 as u64)) & (0xffffffff as u64)) as u32);
  *out1 = x12;
  *out2 = x3;
  *out3 = x13;
  *out4 = x14;
  *out5 = x15;
  *out6 = x16;
  *out7 = x17;
}

/// The function fiat_25519_asr_mw_sub2 computes a divstep on wordsized integers.
/// Postconditions:
///   eval out1 = ⌊eval arg1 / 2^(32 - 2)⌋
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_25519_asr_mw_sub2(out1: &mut [u32; 10], arg1: &[u32; 10]) -> () {
  let mut x1: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1, (((arg1[9]) >> 31) as fiat_25519_u1), (0x0 as u32), 0xfffffffc);
  let x2: u32 = (((arg1[0]) >> 30) | (((arg1[1]) << 2) & 0xffffffff));
  let x3: u32 = (((arg1[1]) >> 30) | (((arg1[2]) << 2) & 0xffffffff));
  let x4: u32 = (((arg1[2]) >> 30) | (((arg1[3]) << 2) & 0xffffffff));
  let x5: u32 = (((arg1[3]) >> 30) | (((arg1[4]) << 2) & 0xffffffff));
  let x6: u32 = (((arg1[4]) >> 30) | (((arg1[5]) << 2) & 0xffffffff));
  let x7: u32 = (((arg1[5]) >> 30) | (((arg1[6]) << 2) & 0xffffffff));
  let x8: u32 = (((arg1[6]) >> 30) | (((arg1[7]) << 2) & 0xffffffff));
  let x9: u32 = (((arg1[7]) >> 30) | (((arg1[8]) << 2) & 0xffffffff));
  let x10: u32 = (((arg1[8]) >> 30) | (((arg1[9]) << 2) & 0xffffffff));
  let x11: u32 = (x1 | ((arg1[9]) >> 30));
  out1[0] = x2;
  out1[1] = x3;
  out1[2] = x4;
  out1[3] = x5;
  out1[4] = x6;
  out1[5] = x7;
  out1[6] = x8;
  out1[7] = x9;
  out1[8] = x10;
  out1[9] = x11;
}

/// The function fiat_25519_sat_add computes a divstep on wordsized integers.
/// Postconditions:
///   eval out1 = eval arg1 + eval arg2
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_25519_sat_add(out1: &mut [u32; 10], arg1: &[u32; 10], arg2: &[u32; 10]) -> () {
  let mut x1: u32 = 0;
  let mut x2: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1, &mut x2, 0x0, (arg1[0]), (arg2[0]));
  let mut x3: u32 = 0;
  let mut x4: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x3, &mut x4, x2, (arg1[1]), (arg2[1]));
  let mut x5: u32 = 0;
  let mut x6: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x5, &mut x6, x4, (arg1[2]), (arg2[2]));
  let mut x7: u32 = 0;
  let mut x8: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x7, &mut x8, x6, (arg1[3]), (arg2[3]));
  let mut x9: u32 = 0;
  let mut x10: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x9, &mut x10, x8, (arg1[4]), (arg2[4]));
  let mut x11: u32 = 0;
  let mut x12: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x11, &mut x12, x10, (arg1[5]), (arg2[5]));
  let mut x13: u32 = 0;
  let mut x14: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x13, &mut x14, x12, (arg1[6]), (arg2[6]));
  let mut x15: u32 = 0;
  let mut x16: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x15, &mut x16, x14, (arg1[7]), (arg2[7]));
  let mut x17: u32 = 0;
  let mut x18: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x17, &mut x18, x16, (arg1[8]), (arg2[8]));
  let mut x19: u32 = 0;
  let mut x20: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x19, &mut x20, x18, (arg1[9]), (arg2[9]));
  out1[0] = x1;
  out1[1] = x3;
  out1[2] = x5;
  out1[3] = x7;
  out1[4] = x9;
  out1[5] = x11;
  out1[6] = x13;
  out1[7] = x15;
  out1[8] = x17;
  out1[9] = x19;
}

/// The function fiat_25519_word_sat_mul computes a divstep on wordsized integers.
/// Postconditions:
///   eval out1 = arg1 * eval arg2
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffff]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_25519_word_sat_mul(out1: &mut [u32; 10], arg1: u32, arg2: &[u32; 9]) -> () {
  let mut x1: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1, (((arg2[8]) >> 31) as fiat_25519_u1), (0x0 as u32), 0xffffffff);
  let mut x2: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x2, ((arg1 >> 31) as fiat_25519_u1), (0x0 as u32), 0xffffffff);
  let mut x3: u32 = 0;
  let mut x4: u32 = 0;
  fiat_25519_mulx_u32(&mut x3, &mut x4, x2, (arg2[0]));
  let mut x5: u32 = 0;
  let mut x6: u32 = 0;
  fiat_25519_mulx_u32(&mut x5, &mut x6, x2, (arg2[1]));
  let mut x7: u32 = 0;
  let mut x8: u32 = 0;
  fiat_25519_mulx_u32(&mut x7, &mut x8, x2, (arg2[0]));
  let mut x9: u32 = 0;
  let mut x10: u32 = 0;
  fiat_25519_mulx_u32(&mut x9, &mut x10, x2, (arg2[2]));
  let mut x11: u32 = 0;
  let mut x12: u32 = 0;
  fiat_25519_mulx_u32(&mut x11, &mut x12, x2, (arg2[1]));
  let mut x13: u32 = 0;
  let mut x14: u32 = 0;
  fiat_25519_mulx_u32(&mut x13, &mut x14, x2, (arg2[0]));
  let mut x15: u32 = 0;
  let mut x16: u32 = 0;
  fiat_25519_mulx_u32(&mut x15, &mut x16, x2, (arg2[3]));
  let mut x17: u32 = 0;
  let mut x18: u32 = 0;
  fiat_25519_mulx_u32(&mut x17, &mut x18, x2, (arg2[2]));
  let mut x19: u32 = 0;
  let mut x20: u32 = 0;
  fiat_25519_mulx_u32(&mut x19, &mut x20, x2, (arg2[1]));
  let mut x21: u32 = 0;
  let mut x22: u32 = 0;
  fiat_25519_mulx_u32(&mut x21, &mut x22, x2, (arg2[0]));
  let mut x23: u32 = 0;
  let mut x24: u32 = 0;
  fiat_25519_mulx_u32(&mut x23, &mut x24, x2, (arg2[4]));
  let mut x25: u32 = 0;
  let mut x26: u32 = 0;
  fiat_25519_mulx_u32(&mut x25, &mut x26, x2, (arg2[3]));
  let mut x27: u32 = 0;
  let mut x28: u32 = 0;
  fiat_25519_mulx_u32(&mut x27, &mut x28, x2, (arg2[2]));
  let mut x29: u32 = 0;
  let mut x30: u32 = 0;
  fiat_25519_mulx_u32(&mut x29, &mut x30, x2, (arg2[1]));
  let mut x31: u32 = 0;
  let mut x32: u32 = 0;
  fiat_25519_mulx_u32(&mut x31, &mut x32, x2, (arg2[0]));
  let mut x33: u32 = 0;
  let mut x34: u32 = 0;
  fiat_25519_mulx_u32(&mut x33, &mut x34, x2, (arg2[5]));
  let mut x35: u32 = 0;
  let mut x36: u32 = 0;
  fiat_25519_mulx_u32(&mut x35, &mut x36, x2, (arg2[4]));
  let mut x37: u32 = 0;
  let mut x38: u32 = 0;
  fiat_25519_mulx_u32(&mut x37, &mut x38, x2, (arg2[3]));
  let mut x39: u32 = 0;
  let mut x40: u32 = 0;
  fiat_25519_mulx_u32(&mut x39, &mut x40, x2, (arg2[2]));
  let mut x41: u32 = 0;
  let mut x42: u32 = 0;
  fiat_25519_mulx_u32(&mut x41, &mut x42, x2, (arg2[1]));
  let mut x43: u32 = 0;
  let mut x44: u32 = 0;
  fiat_25519_mulx_u32(&mut x43, &mut x44, x2, (arg2[0]));
  let mut x45: u32 = 0;
  let mut x46: u32 = 0;
  fiat_25519_mulx_u32(&mut x45, &mut x46, x2, (arg2[6]));
  let mut x47: u32 = 0;
  let mut x48: u32 = 0;
  fiat_25519_mulx_u32(&mut x47, &mut x48, x2, (arg2[5]));
  let mut x49: u32 = 0;
  let mut x50: u32 = 0;
  fiat_25519_mulx_u32(&mut x49, &mut x50, x2, (arg2[4]));
  let mut x51: u32 = 0;
  let mut x52: u32 = 0;
  fiat_25519_mulx_u32(&mut x51, &mut x52, x2, (arg2[3]));
  let mut x53: u32 = 0;
  let mut x54: u32 = 0;
  fiat_25519_mulx_u32(&mut x53, &mut x54, x2, (arg2[2]));
  let mut x55: u32 = 0;
  let mut x56: u32 = 0;
  fiat_25519_mulx_u32(&mut x55, &mut x56, x2, (arg2[1]));
  let mut x57: u32 = 0;
  let mut x58: u32 = 0;
  fiat_25519_mulx_u32(&mut x57, &mut x58, x2, (arg2[0]));
  let mut x59: u32 = 0;
  let mut x60: u32 = 0;
  fiat_25519_mulx_u32(&mut x59, &mut x60, x2, (arg2[7]));
  let mut x61: u32 = 0;
  let mut x62: u32 = 0;
  fiat_25519_mulx_u32(&mut x61, &mut x62, x2, (arg2[6]));
  let mut x63: u32 = 0;
  let mut x64: u32 = 0;
  fiat_25519_mulx_u32(&mut x63, &mut x64, x2, (arg2[5]));
  let mut x65: u32 = 0;
  let mut x66: u32 = 0;
  fiat_25519_mulx_u32(&mut x65, &mut x66, x2, (arg2[4]));
  let mut x67: u32 = 0;
  let mut x68: u32 = 0;
  fiat_25519_mulx_u32(&mut x67, &mut x68, x2, (arg2[3]));
  let mut x69: u32 = 0;
  let mut x70: u32 = 0;
  fiat_25519_mulx_u32(&mut x69, &mut x70, x2, (arg2[2]));
  let mut x71: u32 = 0;
  let mut x72: u32 = 0;
  fiat_25519_mulx_u32(&mut x71, &mut x72, x2, (arg2[1]));
  let mut x73: u32 = 0;
  let mut x74: u32 = 0;
  fiat_25519_mulx_u32(&mut x73, &mut x74, x2, (arg2[0]));
  let mut x75: u32 = 0;
  let mut x76: u32 = 0;
  fiat_25519_mulx_u32(&mut x75, &mut x76, x2, (arg2[8]));
  let mut x77: u32 = 0;
  let mut x78: u32 = 0;
  fiat_25519_mulx_u32(&mut x77, &mut x78, x2, (arg2[7]));
  let mut x79: u32 = 0;
  let mut x80: u32 = 0;
  fiat_25519_mulx_u32(&mut x79, &mut x80, x2, (arg2[6]));
  let mut x81: u32 = 0;
  let mut x82: u32 = 0;
  fiat_25519_mulx_u32(&mut x81, &mut x82, x2, (arg2[5]));
  let mut x83: u32 = 0;
  let mut x84: u32 = 0;
  fiat_25519_mulx_u32(&mut x83, &mut x84, x2, (arg2[4]));
  let mut x85: u32 = 0;
  let mut x86: u32 = 0;
  fiat_25519_mulx_u32(&mut x85, &mut x86, x2, (arg2[3]));
  let mut x87: u32 = 0;
  let mut x88: u32 = 0;
  fiat_25519_mulx_u32(&mut x87, &mut x88, x2, (arg2[2]));
  let mut x89: u32 = 0;
  let mut x90: u32 = 0;
  fiat_25519_mulx_u32(&mut x89, &mut x90, x2, (arg2[1]));
  let mut x91: u32 = 0;
  let mut x92: u32 = 0;
  fiat_25519_mulx_u32(&mut x91, &mut x92, x2, (arg2[0]));
  let mut x93: u32 = 0;
  let mut x94: u32 = 0;
  fiat_25519_mulx_u32(&mut x93, &mut x94, arg1, x1);
  let mut x95: u32 = 0;
  let mut x96: u32 = 0;
  fiat_25519_mulx_u32(&mut x95, &mut x96, arg1, (arg2[8]));
  let mut x97: u32 = 0;
  let mut x98: u32 = 0;
  fiat_25519_mulx_u32(&mut x97, &mut x98, arg1, (arg2[7]));
  let mut x99: u32 = 0;
  let mut x100: u32 = 0;
  fiat_25519_mulx_u32(&mut x99, &mut x100, arg1, (arg2[6]));
  let mut x101: u32 = 0;
  let mut x102: u32 = 0;
  fiat_25519_mulx_u32(&mut x101, &mut x102, arg1, (arg2[5]));
  let mut x103: u32 = 0;
  let mut x104: u32 = 0;
  fiat_25519_mulx_u32(&mut x103, &mut x104, arg1, (arg2[4]));
  let mut x105: u32 = 0;
  let mut x106: u32 = 0;
  fiat_25519_mulx_u32(&mut x105, &mut x106, arg1, (arg2[3]));
  let mut x107: u32 = 0;
  let mut x108: u32 = 0;
  fiat_25519_mulx_u32(&mut x107, &mut x108, arg1, (arg2[2]));
  let mut x109: u32 = 0;
  let mut x110: u32 = 0;
  fiat_25519_mulx_u32(&mut x109, &mut x110, arg1, (arg2[1]));
  let mut x111: u32 = 0;
  let mut x112: u32 = 0;
  fiat_25519_mulx_u32(&mut x111, &mut x112, arg1, (arg2[0]));
  let mut x113: u32 = 0;
  let mut x114: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x113, &mut x114, 0x0, x96, x3);
  let mut x115: u32 = 0;
  let mut x116: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x115, &mut x116, 0x0, x113, x5);
  let mut x117: u32 = 0;
  let mut x118: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x117, &mut x118, 0x0, x98, x7);
  let mut x119: u32 = 0;
  let mut x120: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x119, &mut x120, x118, x115, x8);
  let mut x121: u32 = 0;
  let mut x122: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x121, &mut x122, 0x0, x117, x11);
  let mut x123: u32 = 0;
  let mut x124: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x123, &mut x124, x122, x119, x9);
  let mut x125: u32 = 0;
  let mut x126: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x125, &mut x126, 0x0, x100, x13);
  let mut x127: u32 = 0;
  let mut x128: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x127, &mut x128, x126, x121, x14);
  let mut x129: u32 = 0;
  let mut x130: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x129, &mut x130, x128, x123, x12);
  let mut x131: u32 = 0;
  let mut x132: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x131, &mut x132, 0x0, x125, x19);
  let mut x133: u32 = 0;
  let mut x134: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x133, &mut x134, x132, x127, x17);
  let mut x135: u32 = 0;
  let mut x136: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x135, &mut x136, x134, x129, x15);
  let mut x137: u32 = 0;
  let mut x138: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x137, &mut x138, 0x0, x102, x21);
  let mut x139: u32 = 0;
  let mut x140: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x139, &mut x140, x138, x131, x22);
  let mut x141: u32 = 0;
  let mut x142: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x141, &mut x142, x140, x133, x20);
  let mut x143: u32 = 0;
  let mut x144: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x143, &mut x144, x142, x135, x18);
  let mut x145: u32 = 0;
  let mut x146: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x145, &mut x146, 0x0, x137, x29);
  let mut x147: u32 = 0;
  let mut x148: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x147, &mut x148, x146, x139, x27);
  let mut x149: u32 = 0;
  let mut x150: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x149, &mut x150, x148, x141, x25);
  let mut x151: u32 = 0;
  let mut x152: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x151, &mut x152, x150, x143, x23);
  let mut x153: u32 = 0;
  let mut x154: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x153, &mut x154, 0x0, x104, x31);
  let mut x155: u32 = 0;
  let mut x156: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x155, &mut x156, x154, x145, x32);
  let mut x157: u32 = 0;
  let mut x158: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x157, &mut x158, x156, x147, x30);
  let mut x159: u32 = 0;
  let mut x160: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x159, &mut x160, x158, x149, x28);
  let mut x161: u32 = 0;
  let mut x162: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x161, &mut x162, x160, x151, x26);
  let mut x163: u32 = 0;
  let mut x164: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x163, &mut x164, 0x0, x153, x41);
  let mut x165: u32 = 0;
  let mut x166: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x165, &mut x166, x164, x155, x39);
  let mut x167: u32 = 0;
  let mut x168: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x167, &mut x168, x166, x157, x37);
  let mut x169: u32 = 0;
  let mut x170: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x169, &mut x170, x168, x159, x35);
  let mut x171: u32 = 0;
  let mut x172: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x171, &mut x172, x170, x161, x33);
  let mut x173: u32 = 0;
  let mut x174: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x173, &mut x174, 0x0, x106, x43);
  let mut x175: u32 = 0;
  let mut x176: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x175, &mut x176, x174, x163, x44);
  let mut x177: u32 = 0;
  let mut x178: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x177, &mut x178, x176, x165, x42);
  let mut x179: u32 = 0;
  let mut x180: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x179, &mut x180, x178, x167, x40);
  let mut x181: u32 = 0;
  let mut x182: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x181, &mut x182, x180, x169, x38);
  let mut x183: u32 = 0;
  let mut x184: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x183, &mut x184, x182, x171, x36);
  let mut x185: u32 = 0;
  let mut x186: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x185, &mut x186, 0x0, x173, x55);
  let mut x187: u32 = 0;
  let mut x188: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x187, &mut x188, x186, x175, x53);
  let mut x189: u32 = 0;
  let mut x190: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x189, &mut x190, x188, x177, x51);
  let mut x191: u32 = 0;
  let mut x192: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x191, &mut x192, x190, x179, x49);
  let mut x193: u32 = 0;
  let mut x194: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x193, &mut x194, x192, x181, x47);
  let mut x195: u32 = 0;
  let mut x196: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x195, &mut x196, x194, x183, x45);
  let mut x197: u32 = 0;
  let mut x198: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x197, &mut x198, 0x0, x108, x57);
  let mut x199: u32 = 0;
  let mut x200: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x199, &mut x200, x198, x185, x58);
  let mut x201: u32 = 0;
  let mut x202: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x201, &mut x202, x200, x187, x56);
  let mut x203: u32 = 0;
  let mut x204: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x203, &mut x204, x202, x189, x54);
  let mut x205: u32 = 0;
  let mut x206: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x205, &mut x206, x204, x191, x52);
  let mut x207: u32 = 0;
  let mut x208: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x207, &mut x208, x206, x193, x50);
  let mut x209: u32 = 0;
  let mut x210: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x209, &mut x210, x208, x195, x48);
  let mut x211: u32 = 0;
  let mut x212: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x211, &mut x212, 0x0, x197, x71);
  let mut x213: u32 = 0;
  let mut x214: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x213, &mut x214, x212, x199, x69);
  let mut x215: u32 = 0;
  let mut x216: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x215, &mut x216, x214, x201, x67);
  let mut x217: u32 = 0;
  let mut x218: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x217, &mut x218, x216, x203, x65);
  let mut x219: u32 = 0;
  let mut x220: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x219, &mut x220, x218, x205, x63);
  let mut x221: u32 = 0;
  let mut x222: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x221, &mut x222, x220, x207, x61);
  let mut x223: u32 = 0;
  let mut x224: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x223, &mut x224, x222, x209, x59);
  let mut x225: u32 = 0;
  let mut x226: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x225, &mut x226, 0x0, x110, x73);
  let mut x227: u32 = 0;
  let mut x228: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x227, &mut x228, x226, x211, x74);
  let mut x229: u32 = 0;
  let mut x230: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x229, &mut x230, x228, x213, x72);
  let mut x231: u32 = 0;
  let mut x232: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x231, &mut x232, x230, x215, x70);
  let mut x233: u32 = 0;
  let mut x234: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x233, &mut x234, x232, x217, x68);
  let mut x235: u32 = 0;
  let mut x236: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x235, &mut x236, x234, x219, x66);
  let mut x237: u32 = 0;
  let mut x238: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x237, &mut x238, x236, x221, x64);
  let mut x239: u32 = 0;
  let mut x240: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x239, &mut x240, x238, x223, x62);
  let mut x241: u32 = 0;
  let mut x242: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x241, &mut x242, 0x0, x225, x89);
  let mut x243: u32 = 0;
  let mut x244: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x243, &mut x244, x242, x227, x87);
  let mut x245: u32 = 0;
  let mut x246: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x245, &mut x246, x244, x229, x85);
  let mut x247: u32 = 0;
  let mut x248: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x247, &mut x248, x246, x231, x83);
  let mut x249: u32 = 0;
  let mut x250: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x249, &mut x250, x248, x233, x81);
  let mut x251: u32 = 0;
  let mut x252: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x251, &mut x252, x250, x235, x79);
  let mut x253: u32 = 0;
  let mut x254: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x253, &mut x254, x252, x237, x77);
  let mut x255: u32 = 0;
  let mut x256: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x255, &mut x256, x254, x239, x75);
  let mut x257: u32 = 0;
  let mut x258: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x257, &mut x258, 0x0, x112, x91);
  let mut x259: u32 = 0;
  let mut x260: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x259, &mut x260, x258, x241, x92);
  let mut x261: u32 = 0;
  let mut x262: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x261, &mut x262, x260, x243, x90);
  let mut x263: u32 = 0;
  let mut x264: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x263, &mut x264, x262, x245, x88);
  let mut x265: u32 = 0;
  let mut x266: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x265, &mut x266, x264, x247, x86);
  let mut x267: u32 = 0;
  let mut x268: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x267, &mut x268, x266, x249, x84);
  let mut x269: u32 = 0;
  let mut x270: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x269, &mut x270, x268, x251, x82);
  let mut x271: u32 = 0;
  let mut x272: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x271, &mut x272, x270, x253, x80);
  let mut x273: u32 = 0;
  let mut x274: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x273, &mut x274, x272, x255, x78);
  let mut x275: u32 = 0;
  let mut x276: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x275, &mut x276, 0x0, x257, x109);
  let mut x277: u32 = 0;
  let mut x278: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x277, &mut x278, x276, x259, x107);
  let mut x279: u32 = 0;
  let mut x280: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x279, &mut x280, x278, x261, x105);
  let mut x281: u32 = 0;
  let mut x282: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x281, &mut x282, x280, x263, x103);
  let mut x283: u32 = 0;
  let mut x284: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x283, &mut x284, x282, x265, x101);
  let mut x285: u32 = 0;
  let mut x286: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x285, &mut x286, x284, x267, x99);
  let mut x287: u32 = 0;
  let mut x288: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x287, &mut x288, x286, x269, x97);
  let mut x289: u32 = 0;
  let mut x290: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x289, &mut x290, x288, x271, x95);
  let mut x291: u32 = 0;
  let mut x292: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x291, &mut x292, x290, x273, x93);
  out1[0] = x111;
  out1[1] = x275;
  out1[2] = x277;
  out1[3] = x279;
  out1[4] = x281;
  out1[5] = x283;
  out1[6] = x285;
  out1[7] = x287;
  out1[8] = x289;
  out1[9] = x291;
}

/// The function fiat_25519_jumpdivstep_precomp returns the precomputed value for the jump-version of Bernstein-Yang-inversion (in montgomery form).
/// Postconditions:
///   eval out1 = ⌊(m - 1) / 2⌋^(if (log2 m) + 1 < 46 then ⌊(49 * ((log2 m) + 1) + 80) / 17⌋ else ⌊(49 * ((log2 m) + 1) + 57) / 17⌋)
///
/// Input Bounds:
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_25519_jumpdivstep_precomp(out1: &mut [u32; 10]) -> () {
  out1[0] = 0x6c8937;
  out1[1] = 0x1c1855b;
  out1[2] = 0x116482e;
  out1[3] = 0x8d3b28;
  out1[4] = 0x319ca54;
  out1[5] = 0xc33351;
  out1[6] = 0x2c73b3b;
  out1[7] = 0x16b27ac;
  out1[8] = 0x3e62c1d;
  out1[9] = 0x1b8b66;
}

/// The function fiat_25519_outer_loop_body computes the body of the outer loop in BY-inversion (jumpdivstep version).
/// Postconditions:
///   eval arg1 = eval arg2
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg3: [[0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000]]
///   arg4: [[0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out3: [[0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000]]
///   out4: [[0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000]]
#[inline]
pub fn fiat_25519_outer_loop_body(out1: &mut [u32; 9], out2: &mut [u32; 9], out3: &mut [u32; 10], out4: &mut [u32; 10], arg1: &[u32; 9], arg2: &[u32; 9], arg3: &[u32; 10], arg4: &[u32; 10]) -> () {
  let mut x1: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1, (((arg2[0]) & (0x1 as u32)) as fiat_25519_u1), (0x1 as u32), 0xffffffff);
  let mut x2: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x2, (((arg2[0]) & (0x1 as u32)) as fiat_25519_u1), (arg1[0]), (arg2[0]));
  let mut x3: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x3, (((arg2[0]) & (0x1 as u32)) as fiat_25519_u1), (arg2[0]), (((((!(arg1[0])) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x4: fiat_25519_u1 = 0;
  fiat_25519_cmovznz_u1(&mut x4, (((arg2[0]) & (0x1 as u32)) as fiat_25519_u1), 0x1, 0x0);
  let mut x5: fiat_25519_u1 = 0;
  fiat_25519_cmovznz_u1(&mut x5, (((arg2[0]) & (0x1 as u32)) as fiat_25519_u1), 0x0, 0x1);
  let mut x6: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x6, (((arg2[0]) & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), 0xffffffff);
  let mut x7: fiat_25519_u1 = 0;
  fiat_25519_cmovznz_u1(&mut x7, (((arg2[0]) & (0x1 as u32)) as fiat_25519_u1), 0x1, 0x0);
  let mut x8: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x8, ((x3 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x2);
  let mut x9: fiat_25519_u1 = 0;
  fiat_25519_cmovznz_u1(&mut x9, ((x3 & (0x1 as u32)) as fiat_25519_u1), 0x0, x4);
  let mut x10: fiat_25519_u1 = 0;
  fiat_25519_cmovznz_u1(&mut x10, ((x3 & (0x1 as u32)) as fiat_25519_u1), 0x0, x5);
  let x11: u32 = (((((!((((0x1 as u64) + (x1 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x12: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x12, (((x11 >> 31) as fiat_25519_u1) & ((((((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((0x1 as u64) + (x1 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x1 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x13: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x13, (((x11 >> 31) as fiat_25519_u1) & ((((((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), x2, ((((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x14: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x14, (((x11 >> 31) as fiat_25519_u1) & ((((((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x2) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x15: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x15, (((x11 >> 31) as fiat_25519_u1) & ((((((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((x4 as u32) + (x4 as u32)), ((((x6 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32));
  let mut x16: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x16, (((x11 >> 31) as fiat_25519_u1) & ((((((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((x5 as u32) + (x5 as u32)), ((x7 as u32) + (x10 as u32)));
  let mut x17: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x17, (((x11 >> 31) as fiat_25519_u1) & ((((((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x6 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32), (((((!((x4 as u32) + (x4 as u32))) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x18: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x18, (((x11 >> 31) as fiat_25519_u1) & ((((((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((x7 as u32) + (x10 as u32)), (((((!((x5 as u32) + (x5 as u32))) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x19: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x19, ((x14 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x13);
  let mut x20: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x20, ((x14 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x15);
  let mut x21: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x21, ((x14 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x16);
  let x22: u32 = (((((!((((0x1 as u64) + (x12 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x23: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x23, (((x22 >> 31) as fiat_25519_u1) & ((((((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((0x1 as u64) + (x12 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x12 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x24: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x24, (((x22 >> 31) as fiat_25519_u1) & ((((((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), x13, ((((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x25: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x25, (((x22 >> 31) as fiat_25519_u1) & ((((((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x13) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x26: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x26, (((x22 >> 31) as fiat_25519_u1) & ((((((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x15 as u64) + (x15 as u64)) & (0xffffffff as u64)) as u32), ((((x17 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32));
  let mut x27: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x27, (((x22 >> 31) as fiat_25519_u1) & ((((((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), (x16 + x16), ((((x18 as u64) + (x21 as u64)) & (0xffffffff as u64)) as u32));
  let mut x28: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x28, (((x22 >> 31) as fiat_25519_u1) & ((((((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x17 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x15 as u64) + (x15 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x29: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x29, (((x22 >> 31) as fiat_25519_u1) & ((((((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x18 as u64) + (x21 as u64)) & (0xffffffff as u64)) as u32), (((((!(x16 + x16)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x30: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x30, ((x25 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x24);
  let mut x31: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x31, ((x25 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x26);
  let mut x32: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x32, ((x25 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x27);
  let x33: u32 = (((((!((((0x1 as u64) + (x23 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x34: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x34, (((x33 >> 31) as fiat_25519_u1) & ((((((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((0x1 as u64) + (x23 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x23 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x35: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x35, (((x33 >> 31) as fiat_25519_u1) & ((((((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), x24, ((((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x36: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x36, (((x33 >> 31) as fiat_25519_u1) & ((((((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x24) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x37: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x37, (((x33 >> 31) as fiat_25519_u1) & ((((((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x26 as u64) + (x26 as u64)) & (0xffffffff as u64)) as u32), ((((x28 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32));
  let mut x38: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x38, (((x33 >> 31) as fiat_25519_u1) & ((((((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x27 as u64) + (x27 as u64)) & (0xffffffff as u64)) as u32), ((((x29 as u64) + (x32 as u64)) & (0xffffffff as u64)) as u32));
  let mut x39: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x39, (((x33 >> 31) as fiat_25519_u1) & ((((((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x28 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x26 as u64) + (x26 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x40: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x40, (((x33 >> 31) as fiat_25519_u1) & ((((((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x29 as u64) + (x32 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x27 as u64) + (x27 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x41: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x41, ((x36 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x35);
  let mut x42: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x42, ((x36 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x37);
  let mut x43: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x43, ((x36 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x38);
  let x44: u32 = (((((!((((0x1 as u64) + (x34 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x45: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x45, (((x44 >> 31) as fiat_25519_u1) & ((((((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((0x1 as u64) + (x34 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x34 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x46: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x46, (((x44 >> 31) as fiat_25519_u1) & ((((((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), x35, ((((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x47: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x47, (((x44 >> 31) as fiat_25519_u1) & ((((((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x35) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x48: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x48, (((x44 >> 31) as fiat_25519_u1) & ((((((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x37 as u64) + (x37 as u64)) & (0xffffffff as u64)) as u32), ((((x39 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32));
  let mut x49: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x49, (((x44 >> 31) as fiat_25519_u1) & ((((((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x38 as u64) + (x38 as u64)) & (0xffffffff as u64)) as u32), ((((x40 as u64) + (x43 as u64)) & (0xffffffff as u64)) as u32));
  let mut x50: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x50, (((x44 >> 31) as fiat_25519_u1) & ((((((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x39 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x37 as u64) + (x37 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x51: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x51, (((x44 >> 31) as fiat_25519_u1) & ((((((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x40 as u64) + (x43 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x38 as u64) + (x38 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x52: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x52, ((x47 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x46);
  let mut x53: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x53, ((x47 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x48);
  let mut x54: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x54, ((x47 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x49);
  let x55: u32 = (((((!((((0x1 as u64) + (x45 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x56: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x56, (((x55 >> 31) as fiat_25519_u1) & ((((((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((0x1 as u64) + (x45 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x45 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x57: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x57, (((x55 >> 31) as fiat_25519_u1) & ((((((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), x46, ((((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x58: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x58, (((x55 >> 31) as fiat_25519_u1) & ((((((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x46) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x59: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x59, (((x55 >> 31) as fiat_25519_u1) & ((((((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x48 as u64) + (x48 as u64)) & (0xffffffff as u64)) as u32), ((((x50 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32));
  let mut x60: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x60, (((x55 >> 31) as fiat_25519_u1) & ((((((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x49 as u64) + (x49 as u64)) & (0xffffffff as u64)) as u32), ((((x51 as u64) + (x54 as u64)) & (0xffffffff as u64)) as u32));
  let mut x61: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x61, (((x55 >> 31) as fiat_25519_u1) & ((((((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x50 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x48 as u64) + (x48 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x62: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x62, (((x55 >> 31) as fiat_25519_u1) & ((((((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x51 as u64) + (x54 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x49 as u64) + (x49 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x63: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x63, ((x58 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x57);
  let mut x64: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x64, ((x58 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x59);
  let mut x65: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x65, ((x58 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x60);
  let x66: u32 = (((((!((((0x1 as u64) + (x56 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x67: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x67, (((x66 >> 31) as fiat_25519_u1) & ((((((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((0x1 as u64) + (x56 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x56 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x68: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x68, (((x66 >> 31) as fiat_25519_u1) & ((((((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), x57, ((((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x69: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x69, (((x66 >> 31) as fiat_25519_u1) & ((((((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x57) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x70: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x70, (((x66 >> 31) as fiat_25519_u1) & ((((((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x59 as u64) + (x59 as u64)) & (0xffffffff as u64)) as u32), ((((x61 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32));
  let mut x71: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x71, (((x66 >> 31) as fiat_25519_u1) & ((((((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x60 as u64) + (x60 as u64)) & (0xffffffff as u64)) as u32), ((((x62 as u64) + (x65 as u64)) & (0xffffffff as u64)) as u32));
  let mut x72: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x72, (((x66 >> 31) as fiat_25519_u1) & ((((((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x61 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x59 as u64) + (x59 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x73: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x73, (((x66 >> 31) as fiat_25519_u1) & ((((((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x62 as u64) + (x65 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x60 as u64) + (x60 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x74: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x74, ((x69 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x68);
  let mut x75: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x75, ((x69 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x70);
  let mut x76: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x76, ((x69 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x71);
  let x77: u32 = (((((!((((0x1 as u64) + (x67 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x78: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x78, (((x77 >> 31) as fiat_25519_u1) & ((((((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((0x1 as u64) + (x67 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x67 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x79: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x79, (((x77 >> 31) as fiat_25519_u1) & ((((((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), x68, ((((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x80: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x80, (((x77 >> 31) as fiat_25519_u1) & ((((((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x68) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x81: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x81, (((x77 >> 31) as fiat_25519_u1) & ((((((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x70 as u64) + (x70 as u64)) & (0xffffffff as u64)) as u32), ((((x72 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32));
  let mut x82: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x82, (((x77 >> 31) as fiat_25519_u1) & ((((((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x71 as u64) + (x71 as u64)) & (0xffffffff as u64)) as u32), ((((x73 as u64) + (x76 as u64)) & (0xffffffff as u64)) as u32));
  let mut x83: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x83, (((x77 >> 31) as fiat_25519_u1) & ((((((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x72 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x70 as u64) + (x70 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x84: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x84, (((x77 >> 31) as fiat_25519_u1) & ((((((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x73 as u64) + (x76 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x71 as u64) + (x71 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x85: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x85, ((x80 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x79);
  let mut x86: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x86, ((x80 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x81);
  let mut x87: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x87, ((x80 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x82);
  let x88: u32 = (((((!((((0x1 as u64) + (x78 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x89: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x89, (((x88 >> 31) as fiat_25519_u1) & ((((((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((0x1 as u64) + (x78 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x78 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x90: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x90, (((x88 >> 31) as fiat_25519_u1) & ((((((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), x79, ((((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x91: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x91, (((x88 >> 31) as fiat_25519_u1) & ((((((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x79) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x92: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x92, (((x88 >> 31) as fiat_25519_u1) & ((((((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x81 as u64) + (x81 as u64)) & (0xffffffff as u64)) as u32), ((((x83 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32));
  let mut x93: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x93, (((x88 >> 31) as fiat_25519_u1) & ((((((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x82 as u64) + (x82 as u64)) & (0xffffffff as u64)) as u32), ((((x84 as u64) + (x87 as u64)) & (0xffffffff as u64)) as u32));
  let mut x94: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x94, (((x88 >> 31) as fiat_25519_u1) & ((((((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x83 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x81 as u64) + (x81 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x95: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x95, (((x88 >> 31) as fiat_25519_u1) & ((((((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x84 as u64) + (x87 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x82 as u64) + (x82 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x96: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x96, ((x91 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x90);
  let mut x97: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x97, ((x91 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x92);
  let mut x98: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x98, ((x91 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x93);
  let x99: u32 = (((((!((((0x1 as u64) + (x89 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x100: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x100, (((x99 >> 31) as fiat_25519_u1) & ((((((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((0x1 as u64) + (x89 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x89 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x101: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x101, (((x99 >> 31) as fiat_25519_u1) & ((((((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), x90, ((((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x102: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x102, (((x99 >> 31) as fiat_25519_u1) & ((((((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x90) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x103: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x103, (((x99 >> 31) as fiat_25519_u1) & ((((((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x92 as u64) + (x92 as u64)) & (0xffffffff as u64)) as u32), ((((x94 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32));
  let mut x104: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x104, (((x99 >> 31) as fiat_25519_u1) & ((((((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x93 as u64) + (x93 as u64)) & (0xffffffff as u64)) as u32), ((((x95 as u64) + (x98 as u64)) & (0xffffffff as u64)) as u32));
  let mut x105: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x105, (((x99 >> 31) as fiat_25519_u1) & ((((((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x94 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x92 as u64) + (x92 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x106: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x106, (((x99 >> 31) as fiat_25519_u1) & ((((((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x95 as u64) + (x98 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x93 as u64) + (x93 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x107: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x107, ((x102 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x101);
  let mut x108: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x108, ((x102 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x103);
  let mut x109: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x109, ((x102 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x104);
  let x110: u32 = (((((!((((0x1 as u64) + (x100 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x111: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x111, (((x110 >> 31) as fiat_25519_u1) & ((((((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((0x1 as u64) + (x100 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x100 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x112: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x112, (((x110 >> 31) as fiat_25519_u1) & ((((((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), x101, ((((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x113: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x113, (((x110 >> 31) as fiat_25519_u1) & ((((((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x101) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x114: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x114, (((x110 >> 31) as fiat_25519_u1) & ((((((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x103 as u64) + (x103 as u64)) & (0xffffffff as u64)) as u32), ((((x105 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32));
  let mut x115: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x115, (((x110 >> 31) as fiat_25519_u1) & ((((((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x104 as u64) + (x104 as u64)) & (0xffffffff as u64)) as u32), ((((x106 as u64) + (x109 as u64)) & (0xffffffff as u64)) as u32));
  let mut x116: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x116, (((x110 >> 31) as fiat_25519_u1) & ((((((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x105 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x103 as u64) + (x103 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x117: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x117, (((x110 >> 31) as fiat_25519_u1) & ((((((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x106 as u64) + (x109 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x104 as u64) + (x104 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x118: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x118, ((x113 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x112);
  let mut x119: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x119, ((x113 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x114);
  let mut x120: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x120, ((x113 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x115);
  let x121: u32 = (((((!((((0x1 as u64) + (x111 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x122: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x122, (((x121 >> 31) as fiat_25519_u1) & ((((((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((0x1 as u64) + (x111 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x111 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x123: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x123, (((x121 >> 31) as fiat_25519_u1) & ((((((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), x112, ((((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x124: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x124, (((x121 >> 31) as fiat_25519_u1) & ((((((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x112) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x125: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x125, (((x121 >> 31) as fiat_25519_u1) & ((((((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x114 as u64) + (x114 as u64)) & (0xffffffff as u64)) as u32), ((((x116 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32));
  let mut x126: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x126, (((x121 >> 31) as fiat_25519_u1) & ((((((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x115 as u64) + (x115 as u64)) & (0xffffffff as u64)) as u32), ((((x117 as u64) + (x120 as u64)) & (0xffffffff as u64)) as u32));
  let mut x127: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x127, (((x121 >> 31) as fiat_25519_u1) & ((((((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x116 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x114 as u64) + (x114 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x128: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x128, (((x121 >> 31) as fiat_25519_u1) & ((((((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x117 as u64) + (x120 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x115 as u64) + (x115 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x129: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x129, ((x124 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x123);
  let mut x130: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x130, ((x124 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x125);
  let mut x131: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x131, ((x124 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x126);
  let x132: u32 = (((((!((((0x1 as u64) + (x122 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x133: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x133, (((x132 >> 31) as fiat_25519_u1) & ((((((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((0x1 as u64) + (x122 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x122 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x134: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x134, (((x132 >> 31) as fiat_25519_u1) & ((((((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), x123, ((((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x135: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x135, (((x132 >> 31) as fiat_25519_u1) & ((((((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x123) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x136: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x136, (((x132 >> 31) as fiat_25519_u1) & ((((((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x125 as u64) + (x125 as u64)) & (0xffffffff as u64)) as u32), ((((x127 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32));
  let mut x137: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x137, (((x132 >> 31) as fiat_25519_u1) & ((((((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x126 as u64) + (x126 as u64)) & (0xffffffff as u64)) as u32), ((((x128 as u64) + (x131 as u64)) & (0xffffffff as u64)) as u32));
  let mut x138: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x138, (((x132 >> 31) as fiat_25519_u1) & ((((((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x127 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x125 as u64) + (x125 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x139: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x139, (((x132 >> 31) as fiat_25519_u1) & ((((((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x128 as u64) + (x131 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x126 as u64) + (x126 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x140: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x140, ((x135 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x134);
  let mut x141: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x141, ((x135 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x136);
  let mut x142: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x142, ((x135 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x137);
  let x143: u32 = (((((!((((0x1 as u64) + (x133 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x144: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x144, (((x143 >> 31) as fiat_25519_u1) & ((((((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((0x1 as u64) + (x133 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x133 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x145: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x145, (((x143 >> 31) as fiat_25519_u1) & ((((((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), x134, ((((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x146: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x146, (((x143 >> 31) as fiat_25519_u1) & ((((((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x134) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x147: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x147, (((x143 >> 31) as fiat_25519_u1) & ((((((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x136 as u64) + (x136 as u64)) & (0xffffffff as u64)) as u32), ((((x138 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32));
  let mut x148: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x148, (((x143 >> 31) as fiat_25519_u1) & ((((((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x137 as u64) + (x137 as u64)) & (0xffffffff as u64)) as u32), ((((x139 as u64) + (x142 as u64)) & (0xffffffff as u64)) as u32));
  let mut x149: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x149, (((x143 >> 31) as fiat_25519_u1) & ((((((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x138 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x136 as u64) + (x136 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x150: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x150, (((x143 >> 31) as fiat_25519_u1) & ((((((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x139 as u64) + (x142 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x137 as u64) + (x137 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x151: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x151, ((x146 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x145);
  let mut x152: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x152, ((x146 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x147);
  let mut x153: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x153, ((x146 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x148);
  let x154: u32 = (((((!((((0x1 as u64) + (x144 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x155: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x155, (((x154 >> 31) as fiat_25519_u1) & ((((((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((0x1 as u64) + (x144 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x144 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x156: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x156, (((x154 >> 31) as fiat_25519_u1) & ((((((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), x145, ((((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x157: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x157, (((x154 >> 31) as fiat_25519_u1) & ((((((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x145) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x158: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x158, (((x154 >> 31) as fiat_25519_u1) & ((((((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x147 as u64) + (x147 as u64)) & (0xffffffff as u64)) as u32), ((((x149 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32));
  let mut x159: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x159, (((x154 >> 31) as fiat_25519_u1) & ((((((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x148 as u64) + (x148 as u64)) & (0xffffffff as u64)) as u32), ((((x150 as u64) + (x153 as u64)) & (0xffffffff as u64)) as u32));
  let mut x160: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x160, (((x154 >> 31) as fiat_25519_u1) & ((((((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x149 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x147 as u64) + (x147 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x161: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x161, (((x154 >> 31) as fiat_25519_u1) & ((((((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x150 as u64) + (x153 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x148 as u64) + (x148 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x162: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x162, ((x157 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x156);
  let mut x163: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x163, ((x157 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x158);
  let mut x164: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x164, ((x157 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x159);
  let x165: u32 = (((((!((((0x1 as u64) + (x155 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x166: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x166, (((x165 >> 31) as fiat_25519_u1) & ((((((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((0x1 as u64) + (x155 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x155 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x167: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x167, (((x165 >> 31) as fiat_25519_u1) & ((((((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), x156, ((((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x168: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x168, (((x165 >> 31) as fiat_25519_u1) & ((((((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x156) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x169: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x169, (((x165 >> 31) as fiat_25519_u1) & ((((((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x158 as u64) + (x158 as u64)) & (0xffffffff as u64)) as u32), ((((x160 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32));
  let mut x170: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x170, (((x165 >> 31) as fiat_25519_u1) & ((((((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x159 as u64) + (x159 as u64)) & (0xffffffff as u64)) as u32), ((((x161 as u64) + (x164 as u64)) & (0xffffffff as u64)) as u32));
  let mut x171: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x171, (((x165 >> 31) as fiat_25519_u1) & ((((((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x160 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x158 as u64) + (x158 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x172: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x172, (((x165 >> 31) as fiat_25519_u1) & ((((((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x161 as u64) + (x164 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x159 as u64) + (x159 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x173: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x173, ((x168 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x167);
  let mut x174: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x174, ((x168 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x169);
  let mut x175: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x175, ((x168 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x170);
  let x176: u32 = (((((!((((0x1 as u64) + (x166 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x177: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x177, (((x176 >> 31) as fiat_25519_u1) & ((((((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((0x1 as u64) + (x166 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x166 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x178: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x178, (((x176 >> 31) as fiat_25519_u1) & ((((((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), x167, ((((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x179: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x179, (((x176 >> 31) as fiat_25519_u1) & ((((((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x167) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x180: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x180, (((x176 >> 31) as fiat_25519_u1) & ((((((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x169 as u64) + (x169 as u64)) & (0xffffffff as u64)) as u32), ((((x171 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32));
  let mut x181: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x181, (((x176 >> 31) as fiat_25519_u1) & ((((((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x170 as u64) + (x170 as u64)) & (0xffffffff as u64)) as u32), ((((x172 as u64) + (x175 as u64)) & (0xffffffff as u64)) as u32));
  let mut x182: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x182, (((x176 >> 31) as fiat_25519_u1) & ((((((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x171 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x169 as u64) + (x169 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x183: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x183, (((x176 >> 31) as fiat_25519_u1) & ((((((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x172 as u64) + (x175 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x170 as u64) + (x170 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x184: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x184, ((x179 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x178);
  let mut x185: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x185, ((x179 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x180);
  let mut x186: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x186, ((x179 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x181);
  let x187: u32 = (((((!((((0x1 as u64) + (x177 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x188: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x188, (((x187 >> 31) as fiat_25519_u1) & ((((((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((0x1 as u64) + (x177 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x177 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x189: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x189, (((x187 >> 31) as fiat_25519_u1) & ((((((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), x178, ((((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x190: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x190, (((x187 >> 31) as fiat_25519_u1) & ((((((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x178) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x191: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x191, (((x187 >> 31) as fiat_25519_u1) & ((((((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x180 as u64) + (x180 as u64)) & (0xffffffff as u64)) as u32), ((((x182 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32));
  let mut x192: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x192, (((x187 >> 31) as fiat_25519_u1) & ((((((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x181 as u64) + (x181 as u64)) & (0xffffffff as u64)) as u32), ((((x183 as u64) + (x186 as u64)) & (0xffffffff as u64)) as u32));
  let mut x193: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x193, (((x187 >> 31) as fiat_25519_u1) & ((((((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x182 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x180 as u64) + (x180 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x194: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x194, (((x187 >> 31) as fiat_25519_u1) & ((((((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x183 as u64) + (x186 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x181 as u64) + (x181 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x195: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x195, ((x190 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x189);
  let mut x196: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x196, ((x190 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x191);
  let mut x197: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x197, ((x190 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x192);
  let x198: u32 = (((((!((((0x1 as u64) + (x188 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x199: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x199, (((x198 >> 31) as fiat_25519_u1) & ((((((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((0x1 as u64) + (x188 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x188 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x200: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x200, (((x198 >> 31) as fiat_25519_u1) & ((((((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), x189, ((((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x201: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x201, (((x198 >> 31) as fiat_25519_u1) & ((((((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x189) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x202: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x202, (((x198 >> 31) as fiat_25519_u1) & ((((((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x191 as u64) + (x191 as u64)) & (0xffffffff as u64)) as u32), ((((x193 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32));
  let mut x203: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x203, (((x198 >> 31) as fiat_25519_u1) & ((((((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x192 as u64) + (x192 as u64)) & (0xffffffff as u64)) as u32), ((((x194 as u64) + (x197 as u64)) & (0xffffffff as u64)) as u32));
  let mut x204: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x204, (((x198 >> 31) as fiat_25519_u1) & ((((((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x193 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x191 as u64) + (x191 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x205: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x205, (((x198 >> 31) as fiat_25519_u1) & ((((((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x194 as u64) + (x197 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x192 as u64) + (x192 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x206: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x206, ((x201 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x200);
  let mut x207: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x207, ((x201 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x202);
  let mut x208: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x208, ((x201 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x203);
  let x209: u32 = (((((!((((0x1 as u64) + (x199 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x210: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x210, (((x209 >> 31) as fiat_25519_u1) & ((((((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((0x1 as u64) + (x199 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x199 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x211: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x211, (((x209 >> 31) as fiat_25519_u1) & ((((((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), x200, ((((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x212: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x212, (((x209 >> 31) as fiat_25519_u1) & ((((((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x200) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x213: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x213, (((x209 >> 31) as fiat_25519_u1) & ((((((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x202 as u64) + (x202 as u64)) & (0xffffffff as u64)) as u32), ((((x204 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32));
  let mut x214: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x214, (((x209 >> 31) as fiat_25519_u1) & ((((((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x203 as u64) + (x203 as u64)) & (0xffffffff as u64)) as u32), ((((x205 as u64) + (x208 as u64)) & (0xffffffff as u64)) as u32));
  let mut x215: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x215, (((x209 >> 31) as fiat_25519_u1) & ((((((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x204 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x202 as u64) + (x202 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x216: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x216, (((x209 >> 31) as fiat_25519_u1) & ((((((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x205 as u64) + (x208 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x203 as u64) + (x203 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x217: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x217, ((x212 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x211);
  let mut x218: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x218, ((x212 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x213);
  let mut x219: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x219, ((x212 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x214);
  let x220: u32 = (((((!((((0x1 as u64) + (x210 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x221: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x221, (((x220 >> 31) as fiat_25519_u1) & ((((((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((0x1 as u64) + (x210 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x210 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x222: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x222, (((x220 >> 31) as fiat_25519_u1) & ((((((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), x211, ((((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x223: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x223, (((x220 >> 31) as fiat_25519_u1) & ((((((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x211) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x224: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x224, (((x220 >> 31) as fiat_25519_u1) & ((((((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x213 as u64) + (x213 as u64)) & (0xffffffff as u64)) as u32), ((((x215 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32));
  let mut x225: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x225, (((x220 >> 31) as fiat_25519_u1) & ((((((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x214 as u64) + (x214 as u64)) & (0xffffffff as u64)) as u32), ((((x216 as u64) + (x219 as u64)) & (0xffffffff as u64)) as u32));
  let mut x226: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x226, (((x220 >> 31) as fiat_25519_u1) & ((((((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x215 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x213 as u64) + (x213 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x227: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x227, (((x220 >> 31) as fiat_25519_u1) & ((((((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x216 as u64) + (x219 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x214 as u64) + (x214 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x228: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x228, ((x223 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x222);
  let mut x229: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x229, ((x223 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x224);
  let mut x230: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x230, ((x223 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x225);
  let x231: u32 = (((((!((((0x1 as u64) + (x221 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x232: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x232, (((x231 >> 31) as fiat_25519_u1) & ((((((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((0x1 as u64) + (x221 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x221 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x233: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x233, (((x231 >> 31) as fiat_25519_u1) & ((((((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), x222, ((((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x234: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x234, (((x231 >> 31) as fiat_25519_u1) & ((((((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x222) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x235: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x235, (((x231 >> 31) as fiat_25519_u1) & ((((((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x224 as u64) + (x224 as u64)) & (0xffffffff as u64)) as u32), ((((x226 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32));
  let mut x236: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x236, (((x231 >> 31) as fiat_25519_u1) & ((((((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x225 as u64) + (x225 as u64)) & (0xffffffff as u64)) as u32), ((((x227 as u64) + (x230 as u64)) & (0xffffffff as u64)) as u32));
  let mut x237: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x237, (((x231 >> 31) as fiat_25519_u1) & ((((((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x226 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x224 as u64) + (x224 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x238: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x238, (((x231 >> 31) as fiat_25519_u1) & ((((((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x227 as u64) + (x230 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x225 as u64) + (x225 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x239: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x239, ((x234 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x233);
  let mut x240: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x240, ((x234 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x235);
  let mut x241: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x241, ((x234 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x236);
  let x242: u32 = (((((!((((0x1 as u64) + (x232 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x243: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x243, (((x242 >> 31) as fiat_25519_u1) & ((((((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((0x1 as u64) + (x232 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x232 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x244: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x244, (((x242 >> 31) as fiat_25519_u1) & ((((((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), x233, ((((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x245: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x245, (((x242 >> 31) as fiat_25519_u1) & ((((((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x233) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x246: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x246, (((x242 >> 31) as fiat_25519_u1) & ((((((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x235 as u64) + (x235 as u64)) & (0xffffffff as u64)) as u32), ((((x237 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32));
  let mut x247: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x247, (((x242 >> 31) as fiat_25519_u1) & ((((((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x236 as u64) + (x236 as u64)) & (0xffffffff as u64)) as u32), ((((x238 as u64) + (x241 as u64)) & (0xffffffff as u64)) as u32));
  let mut x248: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x248, (((x242 >> 31) as fiat_25519_u1) & ((((((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x237 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x235 as u64) + (x235 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x249: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x249, (((x242 >> 31) as fiat_25519_u1) & ((((((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x238 as u64) + (x241 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x236 as u64) + (x236 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x250: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x250, ((x245 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x244);
  let mut x251: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x251, ((x245 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x246);
  let mut x252: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x252, ((x245 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x247);
  let x253: u32 = (((((!((((0x1 as u64) + (x243 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x254: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x254, (((x253 >> 31) as fiat_25519_u1) & ((((((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((0x1 as u64) + (x243 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x243 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x255: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x255, (((x253 >> 31) as fiat_25519_u1) & ((((((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), x244, ((((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x256: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x256, (((x253 >> 31) as fiat_25519_u1) & ((((((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x244) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x257: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x257, (((x253 >> 31) as fiat_25519_u1) & ((((((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x246 as u64) + (x246 as u64)) & (0xffffffff as u64)) as u32), ((((x248 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32));
  let mut x258: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x258, (((x253 >> 31) as fiat_25519_u1) & ((((((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x247 as u64) + (x247 as u64)) & (0xffffffff as u64)) as u32), ((((x249 as u64) + (x252 as u64)) & (0xffffffff as u64)) as u32));
  let mut x259: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x259, (((x253 >> 31) as fiat_25519_u1) & ((((((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x248 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x246 as u64) + (x246 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x260: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x260, (((x253 >> 31) as fiat_25519_u1) & ((((((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x249 as u64) + (x252 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x247 as u64) + (x247 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x261: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x261, ((x256 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x255);
  let mut x262: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x262, ((x256 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x257);
  let mut x263: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x263, ((x256 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x258);
  let x264: u32 = (((((!((((0x1 as u64) + (x254 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x265: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x265, (((x264 >> 31) as fiat_25519_u1) & ((((((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((0x1 as u64) + (x254 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x254 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x266: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x266, (((x264 >> 31) as fiat_25519_u1) & ((((((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), x255, ((((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x267: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x267, (((x264 >> 31) as fiat_25519_u1) & ((((((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x255) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x268: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x268, (((x264 >> 31) as fiat_25519_u1) & ((((((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x257 as u64) + (x257 as u64)) & (0xffffffff as u64)) as u32), ((((x259 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32));
  let mut x269: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x269, (((x264 >> 31) as fiat_25519_u1) & ((((((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x258 as u64) + (x258 as u64)) & (0xffffffff as u64)) as u32), ((((x260 as u64) + (x263 as u64)) & (0xffffffff as u64)) as u32));
  let mut x270: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x270, (((x264 >> 31) as fiat_25519_u1) & ((((((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x259 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x257 as u64) + (x257 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x271: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x271, (((x264 >> 31) as fiat_25519_u1) & ((((((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x260 as u64) + (x263 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x258 as u64) + (x258 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x272: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x272, ((x267 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x266);
  let mut x273: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x273, ((x267 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x268);
  let mut x274: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x274, ((x267 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x269);
  let x275: u32 = (((((!((((0x1 as u64) + (x265 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x276: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x276, (((x275 >> 31) as fiat_25519_u1) & ((((((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((0x1 as u64) + (x265 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x265 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x277: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x277, (((x275 >> 31) as fiat_25519_u1) & ((((((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), x266, ((((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x278: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x278, (((x275 >> 31) as fiat_25519_u1) & ((((((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x266) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x279: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x279, (((x275 >> 31) as fiat_25519_u1) & ((((((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x268 as u64) + (x268 as u64)) & (0xffffffff as u64)) as u32), ((((x270 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32));
  let mut x280: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x280, (((x275 >> 31) as fiat_25519_u1) & ((((((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x269 as u64) + (x269 as u64)) & (0xffffffff as u64)) as u32), ((((x271 as u64) + (x274 as u64)) & (0xffffffff as u64)) as u32));
  let mut x281: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x281, (((x275 >> 31) as fiat_25519_u1) & ((((((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x270 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x268 as u64) + (x268 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x282: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x282, (((x275 >> 31) as fiat_25519_u1) & ((((((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x271 as u64) + (x274 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x269 as u64) + (x269 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x283: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x283, ((x278 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x277);
  let mut x284: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x284, ((x278 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x279);
  let mut x285: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x285, ((x278 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x280);
  let x286: u32 = (((((!((((0x1 as u64) + (x276 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x287: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x287, (((x286 >> 31) as fiat_25519_u1) & ((((((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((0x1 as u64) + (x276 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x276 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x288: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x288, (((x286 >> 31) as fiat_25519_u1) & ((((((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), x277, ((((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x289: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x289, (((x286 >> 31) as fiat_25519_u1) & ((((((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x277) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x290: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x290, (((x286 >> 31) as fiat_25519_u1) & ((((((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x279 as u64) + (x279 as u64)) & (0xffffffff as u64)) as u32), ((((x281 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32));
  let mut x291: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x291, (((x286 >> 31) as fiat_25519_u1) & ((((((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x280 as u64) + (x280 as u64)) & (0xffffffff as u64)) as u32), ((((x282 as u64) + (x285 as u64)) & (0xffffffff as u64)) as u32));
  let mut x292: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x292, (((x286 >> 31) as fiat_25519_u1) & ((((((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x281 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x279 as u64) + (x279 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x293: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x293, (((x286 >> 31) as fiat_25519_u1) & ((((((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x282 as u64) + (x285 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x280 as u64) + (x280 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x294: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x294, ((x289 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x288);
  let mut x295: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x295, ((x289 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x290);
  let mut x296: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x296, ((x289 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x291);
  let x297: u32 = (((((!((((0x1 as u64) + (x287 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x298: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x298, (((x297 >> 31) as fiat_25519_u1) & ((((((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((0x1 as u64) + (x287 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x287 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x299: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x299, (((x297 >> 31) as fiat_25519_u1) & ((((((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), x288, ((((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x300: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x300, (((x297 >> 31) as fiat_25519_u1) & ((((((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x288) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x301: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x301, (((x297 >> 31) as fiat_25519_u1) & ((((((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x290 as u64) + (x290 as u64)) & (0xffffffff as u64)) as u32), ((((x292 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32));
  let mut x302: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x302, (((x297 >> 31) as fiat_25519_u1) & ((((((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x291 as u64) + (x291 as u64)) & (0xffffffff as u64)) as u32), ((((x293 as u64) + (x296 as u64)) & (0xffffffff as u64)) as u32));
  let mut x303: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x303, (((x297 >> 31) as fiat_25519_u1) & ((((((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x292 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x290 as u64) + (x290 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x304: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x304, (((x297 >> 31) as fiat_25519_u1) & ((((((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x293 as u64) + (x296 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x291 as u64) + (x291 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x305: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x305, ((x300 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x299);
  let mut x306: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x306, ((x300 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x301);
  let mut x307: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x307, ((x300 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x302);
  let x308: u32 = (((((!((((0x1 as u64) + (x298 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x309: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x309, (((x308 >> 31) as fiat_25519_u1) & ((((((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((0x1 as u64) + (x298 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x298 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x310: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x310, (((x308 >> 31) as fiat_25519_u1) & ((((((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), x299, ((((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x311: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x311, (((x308 >> 31) as fiat_25519_u1) & ((((((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x299) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x312: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x312, (((x308 >> 31) as fiat_25519_u1) & ((((((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x301 as u64) + (x301 as u64)) & (0xffffffff as u64)) as u32), ((((x303 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32));
  let mut x313: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x313, (((x308 >> 31) as fiat_25519_u1) & ((((((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x302 as u64) + (x302 as u64)) & (0xffffffff as u64)) as u32), ((((x304 as u64) + (x307 as u64)) & (0xffffffff as u64)) as u32));
  let mut x314: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x314, (((x308 >> 31) as fiat_25519_u1) & ((((((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x303 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x301 as u64) + (x301 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x315: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x315, (((x308 >> 31) as fiat_25519_u1) & ((((((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x304 as u64) + (x307 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x302 as u64) + (x302 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x316: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x316, ((x311 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x310);
  let mut x317: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x317, ((x311 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x312);
  let mut x318: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x318, ((x311 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x313);
  let x319: u32 = (((((!((((0x1 as u64) + (x309 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x320: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x320, (((x319 >> 31) as fiat_25519_u1) & ((((((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x310) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x321: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x321, (((x319 >> 31) as fiat_25519_u1) & ((((((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x312 as u64) + (x312 as u64)) & (0xffffffff as u64)) as u32), ((((x314 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32));
  let mut x322: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x322, (((x319 >> 31) as fiat_25519_u1) & ((((((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x313 as u64) + (x313 as u64)) & (0xffffffff as u64)) as u32), ((((x315 as u64) + (x318 as u64)) & (0xffffffff as u64)) as u32));
  let mut x323: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x323, (((x319 >> 31) as fiat_25519_u1) & ((((((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x314 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x312 as u64) + (x312 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x324: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x324, (((x319 >> 31) as fiat_25519_u1) & ((((((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_25519_u1)), ((((x315 as u64) + (x318 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x313 as u64) + (x313 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x325: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x325, ((x320 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x321);
  let mut x326: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x326, ((x320 & (0x1 as u32)) as fiat_25519_u1), (0x0 as u32), x322);
  let mut x327: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x327, (((arg1[8]) >> 31) as fiat_25519_u1), (0x0 as u32), 0xffffffff);
  let mut x328: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x328, ((((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32) >> 31) as fiat_25519_u1), (0x0 as u32), 0xffffffff);
  let mut x329: u32 = 0;
  let mut x330: u32 = 0;
  fiat_25519_mulx_u32(&mut x329, &mut x330, x328, (arg1[0]));
  let mut x331: u32 = 0;
  let mut x332: u32 = 0;
  fiat_25519_mulx_u32(&mut x331, &mut x332, x328, (arg1[1]));
  let mut x333: u32 = 0;
  let mut x334: u32 = 0;
  fiat_25519_mulx_u32(&mut x333, &mut x334, x328, (arg1[0]));
  let mut x335: u32 = 0;
  let mut x336: u32 = 0;
  fiat_25519_mulx_u32(&mut x335, &mut x336, x328, (arg1[2]));
  let mut x337: u32 = 0;
  let mut x338: u32 = 0;
  fiat_25519_mulx_u32(&mut x337, &mut x338, x328, (arg1[1]));
  let mut x339: u32 = 0;
  let mut x340: u32 = 0;
  fiat_25519_mulx_u32(&mut x339, &mut x340, x328, (arg1[0]));
  let mut x341: u32 = 0;
  let mut x342: u32 = 0;
  fiat_25519_mulx_u32(&mut x341, &mut x342, x328, (arg1[3]));
  let mut x343: u32 = 0;
  let mut x344: u32 = 0;
  fiat_25519_mulx_u32(&mut x343, &mut x344, x328, (arg1[2]));
  let mut x345: u32 = 0;
  let mut x346: u32 = 0;
  fiat_25519_mulx_u32(&mut x345, &mut x346, x328, (arg1[1]));
  let mut x347: u32 = 0;
  let mut x348: u32 = 0;
  fiat_25519_mulx_u32(&mut x347, &mut x348, x328, (arg1[0]));
  let mut x349: u32 = 0;
  let mut x350: u32 = 0;
  fiat_25519_mulx_u32(&mut x349, &mut x350, x328, (arg1[4]));
  let mut x351: u32 = 0;
  let mut x352: u32 = 0;
  fiat_25519_mulx_u32(&mut x351, &mut x352, x328, (arg1[3]));
  let mut x353: u32 = 0;
  let mut x354: u32 = 0;
  fiat_25519_mulx_u32(&mut x353, &mut x354, x328, (arg1[2]));
  let mut x355: u32 = 0;
  let mut x356: u32 = 0;
  fiat_25519_mulx_u32(&mut x355, &mut x356, x328, (arg1[1]));
  let mut x357: u32 = 0;
  let mut x358: u32 = 0;
  fiat_25519_mulx_u32(&mut x357, &mut x358, x328, (arg1[0]));
  let mut x359: u32 = 0;
  let mut x360: u32 = 0;
  fiat_25519_mulx_u32(&mut x359, &mut x360, x328, (arg1[5]));
  let mut x361: u32 = 0;
  let mut x362: u32 = 0;
  fiat_25519_mulx_u32(&mut x361, &mut x362, x328, (arg1[4]));
  let mut x363: u32 = 0;
  let mut x364: u32 = 0;
  fiat_25519_mulx_u32(&mut x363, &mut x364, x328, (arg1[3]));
  let mut x365: u32 = 0;
  let mut x366: u32 = 0;
  fiat_25519_mulx_u32(&mut x365, &mut x366, x328, (arg1[2]));
  let mut x367: u32 = 0;
  let mut x368: u32 = 0;
  fiat_25519_mulx_u32(&mut x367, &mut x368, x328, (arg1[1]));
  let mut x369: u32 = 0;
  let mut x370: u32 = 0;
  fiat_25519_mulx_u32(&mut x369, &mut x370, x328, (arg1[0]));
  let mut x371: u32 = 0;
  let mut x372: u32 = 0;
  fiat_25519_mulx_u32(&mut x371, &mut x372, x328, (arg1[6]));
  let mut x373: u32 = 0;
  let mut x374: u32 = 0;
  fiat_25519_mulx_u32(&mut x373, &mut x374, x328, (arg1[5]));
  let mut x375: u32 = 0;
  let mut x376: u32 = 0;
  fiat_25519_mulx_u32(&mut x375, &mut x376, x328, (arg1[4]));
  let mut x377: u32 = 0;
  let mut x378: u32 = 0;
  fiat_25519_mulx_u32(&mut x377, &mut x378, x328, (arg1[3]));
  let mut x379: u32 = 0;
  let mut x380: u32 = 0;
  fiat_25519_mulx_u32(&mut x379, &mut x380, x328, (arg1[2]));
  let mut x381: u32 = 0;
  let mut x382: u32 = 0;
  fiat_25519_mulx_u32(&mut x381, &mut x382, x328, (arg1[1]));
  let mut x383: u32 = 0;
  let mut x384: u32 = 0;
  fiat_25519_mulx_u32(&mut x383, &mut x384, x328, (arg1[0]));
  let mut x385: u32 = 0;
  let mut x386: u32 = 0;
  fiat_25519_mulx_u32(&mut x385, &mut x386, x328, (arg1[7]));
  let mut x387: u32 = 0;
  let mut x388: u32 = 0;
  fiat_25519_mulx_u32(&mut x387, &mut x388, x328, (arg1[6]));
  let mut x389: u32 = 0;
  let mut x390: u32 = 0;
  fiat_25519_mulx_u32(&mut x389, &mut x390, x328, (arg1[5]));
  let mut x391: u32 = 0;
  let mut x392: u32 = 0;
  fiat_25519_mulx_u32(&mut x391, &mut x392, x328, (arg1[4]));
  let mut x393: u32 = 0;
  let mut x394: u32 = 0;
  fiat_25519_mulx_u32(&mut x393, &mut x394, x328, (arg1[3]));
  let mut x395: u32 = 0;
  let mut x396: u32 = 0;
  fiat_25519_mulx_u32(&mut x395, &mut x396, x328, (arg1[2]));
  let mut x397: u32 = 0;
  let mut x398: u32 = 0;
  fiat_25519_mulx_u32(&mut x397, &mut x398, x328, (arg1[1]));
  let mut x399: u32 = 0;
  let mut x400: u32 = 0;
  fiat_25519_mulx_u32(&mut x399, &mut x400, x328, (arg1[0]));
  let mut x401: u32 = 0;
  let mut x402: u32 = 0;
  fiat_25519_mulx_u32(&mut x401, &mut x402, x328, (arg1[8]));
  let mut x403: u32 = 0;
  let mut x404: u32 = 0;
  fiat_25519_mulx_u32(&mut x403, &mut x404, x328, (arg1[7]));
  let mut x405: u32 = 0;
  let mut x406: u32 = 0;
  fiat_25519_mulx_u32(&mut x405, &mut x406, x328, (arg1[6]));
  let mut x407: u32 = 0;
  let mut x408: u32 = 0;
  fiat_25519_mulx_u32(&mut x407, &mut x408, x328, (arg1[5]));
  let mut x409: u32 = 0;
  let mut x410: u32 = 0;
  fiat_25519_mulx_u32(&mut x409, &mut x410, x328, (arg1[4]));
  let mut x411: u32 = 0;
  let mut x412: u32 = 0;
  fiat_25519_mulx_u32(&mut x411, &mut x412, x328, (arg1[3]));
  let mut x413: u32 = 0;
  let mut x414: u32 = 0;
  fiat_25519_mulx_u32(&mut x413, &mut x414, x328, (arg1[2]));
  let mut x415: u32 = 0;
  let mut x416: u32 = 0;
  fiat_25519_mulx_u32(&mut x415, &mut x416, x328, (arg1[1]));
  let mut x417: u32 = 0;
  let mut x418: u32 = 0;
  fiat_25519_mulx_u32(&mut x417, &mut x418, x328, (arg1[0]));
  let mut x419: u32 = 0;
  let mut x420: u32 = 0;
  fiat_25519_mulx_u32(&mut x419, &mut x420, ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32), x327);
  let mut x421: u32 = 0;
  let mut x422: u32 = 0;
  fiat_25519_mulx_u32(&mut x421, &mut x422, ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32), (arg1[8]));
  let mut x423: u32 = 0;
  let mut x424: u32 = 0;
  fiat_25519_mulx_u32(&mut x423, &mut x424, ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32), (arg1[7]));
  let mut x425: u32 = 0;
  let mut x426: u32 = 0;
  fiat_25519_mulx_u32(&mut x425, &mut x426, ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32), (arg1[6]));
  let mut x427: u32 = 0;
  let mut x428: u32 = 0;
  fiat_25519_mulx_u32(&mut x427, &mut x428, ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32), (arg1[5]));
  let mut x429: u32 = 0;
  let mut x430: u32 = 0;
  fiat_25519_mulx_u32(&mut x429, &mut x430, ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32), (arg1[4]));
  let mut x431: u32 = 0;
  let mut x432: u32 = 0;
  fiat_25519_mulx_u32(&mut x431, &mut x432, ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32), (arg1[3]));
  let mut x433: u32 = 0;
  let mut x434: u32 = 0;
  fiat_25519_mulx_u32(&mut x433, &mut x434, ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32), (arg1[2]));
  let mut x435: u32 = 0;
  let mut x436: u32 = 0;
  fiat_25519_mulx_u32(&mut x435, &mut x436, ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32), (arg1[1]));
  let mut x437: u32 = 0;
  let mut x438: u32 = 0;
  fiat_25519_mulx_u32(&mut x437, &mut x438, ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32), (arg1[0]));
  let mut x439: u32 = 0;
  let mut x440: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x439, &mut x440, 0x0, x422, x329);
  let mut x441: u32 = 0;
  let mut x442: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x441, &mut x442, 0x0, x439, x331);
  let mut x443: u32 = 0;
  let mut x444: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x443, &mut x444, 0x0, x424, x333);
  let mut x445: u32 = 0;
  let mut x446: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x445, &mut x446, x444, x441, x334);
  let mut x447: u32 = 0;
  let mut x448: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x447, &mut x448, 0x0, x443, x337);
  let mut x449: u32 = 0;
  let mut x450: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x449, &mut x450, x448, x445, x335);
  let mut x451: u32 = 0;
  let mut x452: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x451, &mut x452, 0x0, x426, x339);
  let mut x453: u32 = 0;
  let mut x454: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x453, &mut x454, x452, x447, x340);
  let mut x455: u32 = 0;
  let mut x456: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x455, &mut x456, x454, x449, x338);
  let mut x457: u32 = 0;
  let mut x458: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x457, &mut x458, 0x0, x451, x345);
  let mut x459: u32 = 0;
  let mut x460: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x459, &mut x460, x458, x453, x343);
  let mut x461: u32 = 0;
  let mut x462: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x461, &mut x462, x460, x455, x341);
  let mut x463: u32 = 0;
  let mut x464: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x463, &mut x464, 0x0, x428, x347);
  let mut x465: u32 = 0;
  let mut x466: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x465, &mut x466, x464, x457, x348);
  let mut x467: u32 = 0;
  let mut x468: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x467, &mut x468, x466, x459, x346);
  let mut x469: u32 = 0;
  let mut x470: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x469, &mut x470, x468, x461, x344);
  let mut x471: u32 = 0;
  let mut x472: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x471, &mut x472, 0x0, x463, x355);
  let mut x473: u32 = 0;
  let mut x474: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x473, &mut x474, x472, x465, x353);
  let mut x475: u32 = 0;
  let mut x476: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x475, &mut x476, x474, x467, x351);
  let mut x477: u32 = 0;
  let mut x478: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x477, &mut x478, x476, x469, x349);
  let mut x479: u32 = 0;
  let mut x480: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x479, &mut x480, 0x0, x430, x357);
  let mut x481: u32 = 0;
  let mut x482: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x481, &mut x482, x480, x471, x358);
  let mut x483: u32 = 0;
  let mut x484: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x483, &mut x484, x482, x473, x356);
  let mut x485: u32 = 0;
  let mut x486: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x485, &mut x486, x484, x475, x354);
  let mut x487: u32 = 0;
  let mut x488: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x487, &mut x488, x486, x477, x352);
  let mut x489: u32 = 0;
  let mut x490: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x489, &mut x490, 0x0, x479, x367);
  let mut x491: u32 = 0;
  let mut x492: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x491, &mut x492, x490, x481, x365);
  let mut x493: u32 = 0;
  let mut x494: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x493, &mut x494, x492, x483, x363);
  let mut x495: u32 = 0;
  let mut x496: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x495, &mut x496, x494, x485, x361);
  let mut x497: u32 = 0;
  let mut x498: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x497, &mut x498, x496, x487, x359);
  let mut x499: u32 = 0;
  let mut x500: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x499, &mut x500, 0x0, x432, x369);
  let mut x501: u32 = 0;
  let mut x502: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x501, &mut x502, x500, x489, x370);
  let mut x503: u32 = 0;
  let mut x504: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x503, &mut x504, x502, x491, x368);
  let mut x505: u32 = 0;
  let mut x506: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x505, &mut x506, x504, x493, x366);
  let mut x507: u32 = 0;
  let mut x508: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x507, &mut x508, x506, x495, x364);
  let mut x509: u32 = 0;
  let mut x510: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x509, &mut x510, x508, x497, x362);
  let mut x511: u32 = 0;
  let mut x512: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x511, &mut x512, 0x0, x499, x381);
  let mut x513: u32 = 0;
  let mut x514: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x513, &mut x514, x512, x501, x379);
  let mut x515: u32 = 0;
  let mut x516: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x515, &mut x516, x514, x503, x377);
  let mut x517: u32 = 0;
  let mut x518: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x517, &mut x518, x516, x505, x375);
  let mut x519: u32 = 0;
  let mut x520: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x519, &mut x520, x518, x507, x373);
  let mut x521: u32 = 0;
  let mut x522: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x521, &mut x522, x520, x509, x371);
  let mut x523: u32 = 0;
  let mut x524: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x523, &mut x524, 0x0, x434, x383);
  let mut x525: u32 = 0;
  let mut x526: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x525, &mut x526, x524, x511, x384);
  let mut x527: u32 = 0;
  let mut x528: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x527, &mut x528, x526, x513, x382);
  let mut x529: u32 = 0;
  let mut x530: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x529, &mut x530, x528, x515, x380);
  let mut x531: u32 = 0;
  let mut x532: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x531, &mut x532, x530, x517, x378);
  let mut x533: u32 = 0;
  let mut x534: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x533, &mut x534, x532, x519, x376);
  let mut x535: u32 = 0;
  let mut x536: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x535, &mut x536, x534, x521, x374);
  let mut x537: u32 = 0;
  let mut x538: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x537, &mut x538, 0x0, x523, x397);
  let mut x539: u32 = 0;
  let mut x540: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x539, &mut x540, x538, x525, x395);
  let mut x541: u32 = 0;
  let mut x542: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x541, &mut x542, x540, x527, x393);
  let mut x543: u32 = 0;
  let mut x544: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x543, &mut x544, x542, x529, x391);
  let mut x545: u32 = 0;
  let mut x546: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x545, &mut x546, x544, x531, x389);
  let mut x547: u32 = 0;
  let mut x548: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x547, &mut x548, x546, x533, x387);
  let mut x549: u32 = 0;
  let mut x550: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x549, &mut x550, x548, x535, x385);
  let mut x551: u32 = 0;
  let mut x552: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x551, &mut x552, 0x0, x436, x399);
  let mut x553: u32 = 0;
  let mut x554: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x553, &mut x554, x552, x537, x400);
  let mut x555: u32 = 0;
  let mut x556: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x555, &mut x556, x554, x539, x398);
  let mut x557: u32 = 0;
  let mut x558: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x557, &mut x558, x556, x541, x396);
  let mut x559: u32 = 0;
  let mut x560: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x559, &mut x560, x558, x543, x394);
  let mut x561: u32 = 0;
  let mut x562: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x561, &mut x562, x560, x545, x392);
  let mut x563: u32 = 0;
  let mut x564: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x563, &mut x564, x562, x547, x390);
  let mut x565: u32 = 0;
  let mut x566: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x565, &mut x566, x564, x549, x388);
  let mut x567: u32 = 0;
  let mut x568: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x567, &mut x568, 0x0, x551, x415);
  let mut x569: u32 = 0;
  let mut x570: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x569, &mut x570, x568, x553, x413);
  let mut x571: u32 = 0;
  let mut x572: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x571, &mut x572, x570, x555, x411);
  let mut x573: u32 = 0;
  let mut x574: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x573, &mut x574, x572, x557, x409);
  let mut x575: u32 = 0;
  let mut x576: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x575, &mut x576, x574, x559, x407);
  let mut x577: u32 = 0;
  let mut x578: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x577, &mut x578, x576, x561, x405);
  let mut x579: u32 = 0;
  let mut x580: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x579, &mut x580, x578, x563, x403);
  let mut x581: u32 = 0;
  let mut x582: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x581, &mut x582, x580, x565, x401);
  let mut x583: u32 = 0;
  let mut x584: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x583, &mut x584, 0x0, x438, x417);
  let mut x585: u32 = 0;
  let mut x586: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x585, &mut x586, x584, x567, x418);
  let mut x587: u32 = 0;
  let mut x588: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x587, &mut x588, x586, x569, x416);
  let mut x589: u32 = 0;
  let mut x590: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x589, &mut x590, x588, x571, x414);
  let mut x591: u32 = 0;
  let mut x592: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x591, &mut x592, x590, x573, x412);
  let mut x593: u32 = 0;
  let mut x594: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x593, &mut x594, x592, x575, x410);
  let mut x595: u32 = 0;
  let mut x596: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x595, &mut x596, x594, x577, x408);
  let mut x597: u32 = 0;
  let mut x598: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x597, &mut x598, x596, x579, x406);
  let mut x599: u32 = 0;
  let mut x600: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x599, &mut x600, x598, x581, x404);
  let mut x601: u32 = 0;
  let mut x602: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x601, &mut x602, 0x0, x583, x435);
  let mut x603: u32 = 0;
  let mut x604: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x603, &mut x604, x602, x585, x433);
  let mut x605: u32 = 0;
  let mut x606: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x605, &mut x606, x604, x587, x431);
  let mut x607: u32 = 0;
  let mut x608: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x607, &mut x608, x606, x589, x429);
  let mut x609: u32 = 0;
  let mut x610: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x609, &mut x610, x608, x591, x427);
  let mut x611: u32 = 0;
  let mut x612: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x611, &mut x612, x610, x593, x425);
  let mut x613: u32 = 0;
  let mut x614: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x613, &mut x614, x612, x595, x423);
  let mut x615: u32 = 0;
  let mut x616: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x615, &mut x616, x614, x597, x421);
  let mut x617: u32 = 0;
  let mut x618: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x617, &mut x618, x616, x599, x419);
  let mut x619: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x619, (((arg2[8]) >> 31) as fiat_25519_u1), (0x0 as u32), 0xffffffff);
  let mut x620: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x620, ((((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32) >> 31) as fiat_25519_u1), (0x0 as u32), 0xffffffff);
  let mut x621: u32 = 0;
  let mut x622: u32 = 0;
  fiat_25519_mulx_u32(&mut x621, &mut x622, x620, (arg2[0]));
  let mut x623: u32 = 0;
  let mut x624: u32 = 0;
  fiat_25519_mulx_u32(&mut x623, &mut x624, x620, (arg2[1]));
  let mut x625: u32 = 0;
  let mut x626: u32 = 0;
  fiat_25519_mulx_u32(&mut x625, &mut x626, x620, (arg2[0]));
  let mut x627: u32 = 0;
  let mut x628: u32 = 0;
  fiat_25519_mulx_u32(&mut x627, &mut x628, x620, (arg2[2]));
  let mut x629: u32 = 0;
  let mut x630: u32 = 0;
  fiat_25519_mulx_u32(&mut x629, &mut x630, x620, (arg2[1]));
  let mut x631: u32 = 0;
  let mut x632: u32 = 0;
  fiat_25519_mulx_u32(&mut x631, &mut x632, x620, (arg2[0]));
  let mut x633: u32 = 0;
  let mut x634: u32 = 0;
  fiat_25519_mulx_u32(&mut x633, &mut x634, x620, (arg2[3]));
  let mut x635: u32 = 0;
  let mut x636: u32 = 0;
  fiat_25519_mulx_u32(&mut x635, &mut x636, x620, (arg2[2]));
  let mut x637: u32 = 0;
  let mut x638: u32 = 0;
  fiat_25519_mulx_u32(&mut x637, &mut x638, x620, (arg2[1]));
  let mut x639: u32 = 0;
  let mut x640: u32 = 0;
  fiat_25519_mulx_u32(&mut x639, &mut x640, x620, (arg2[0]));
  let mut x641: u32 = 0;
  let mut x642: u32 = 0;
  fiat_25519_mulx_u32(&mut x641, &mut x642, x620, (arg2[4]));
  let mut x643: u32 = 0;
  let mut x644: u32 = 0;
  fiat_25519_mulx_u32(&mut x643, &mut x644, x620, (arg2[3]));
  let mut x645: u32 = 0;
  let mut x646: u32 = 0;
  fiat_25519_mulx_u32(&mut x645, &mut x646, x620, (arg2[2]));
  let mut x647: u32 = 0;
  let mut x648: u32 = 0;
  fiat_25519_mulx_u32(&mut x647, &mut x648, x620, (arg2[1]));
  let mut x649: u32 = 0;
  let mut x650: u32 = 0;
  fiat_25519_mulx_u32(&mut x649, &mut x650, x620, (arg2[0]));
  let mut x651: u32 = 0;
  let mut x652: u32 = 0;
  fiat_25519_mulx_u32(&mut x651, &mut x652, x620, (arg2[5]));
  let mut x653: u32 = 0;
  let mut x654: u32 = 0;
  fiat_25519_mulx_u32(&mut x653, &mut x654, x620, (arg2[4]));
  let mut x655: u32 = 0;
  let mut x656: u32 = 0;
  fiat_25519_mulx_u32(&mut x655, &mut x656, x620, (arg2[3]));
  let mut x657: u32 = 0;
  let mut x658: u32 = 0;
  fiat_25519_mulx_u32(&mut x657, &mut x658, x620, (arg2[2]));
  let mut x659: u32 = 0;
  let mut x660: u32 = 0;
  fiat_25519_mulx_u32(&mut x659, &mut x660, x620, (arg2[1]));
  let mut x661: u32 = 0;
  let mut x662: u32 = 0;
  fiat_25519_mulx_u32(&mut x661, &mut x662, x620, (arg2[0]));
  let mut x663: u32 = 0;
  let mut x664: u32 = 0;
  fiat_25519_mulx_u32(&mut x663, &mut x664, x620, (arg2[6]));
  let mut x665: u32 = 0;
  let mut x666: u32 = 0;
  fiat_25519_mulx_u32(&mut x665, &mut x666, x620, (arg2[5]));
  let mut x667: u32 = 0;
  let mut x668: u32 = 0;
  fiat_25519_mulx_u32(&mut x667, &mut x668, x620, (arg2[4]));
  let mut x669: u32 = 0;
  let mut x670: u32 = 0;
  fiat_25519_mulx_u32(&mut x669, &mut x670, x620, (arg2[3]));
  let mut x671: u32 = 0;
  let mut x672: u32 = 0;
  fiat_25519_mulx_u32(&mut x671, &mut x672, x620, (arg2[2]));
  let mut x673: u32 = 0;
  let mut x674: u32 = 0;
  fiat_25519_mulx_u32(&mut x673, &mut x674, x620, (arg2[1]));
  let mut x675: u32 = 0;
  let mut x676: u32 = 0;
  fiat_25519_mulx_u32(&mut x675, &mut x676, x620, (arg2[0]));
  let mut x677: u32 = 0;
  let mut x678: u32 = 0;
  fiat_25519_mulx_u32(&mut x677, &mut x678, x620, (arg2[7]));
  let mut x679: u32 = 0;
  let mut x680: u32 = 0;
  fiat_25519_mulx_u32(&mut x679, &mut x680, x620, (arg2[6]));
  let mut x681: u32 = 0;
  let mut x682: u32 = 0;
  fiat_25519_mulx_u32(&mut x681, &mut x682, x620, (arg2[5]));
  let mut x683: u32 = 0;
  let mut x684: u32 = 0;
  fiat_25519_mulx_u32(&mut x683, &mut x684, x620, (arg2[4]));
  let mut x685: u32 = 0;
  let mut x686: u32 = 0;
  fiat_25519_mulx_u32(&mut x685, &mut x686, x620, (arg2[3]));
  let mut x687: u32 = 0;
  let mut x688: u32 = 0;
  fiat_25519_mulx_u32(&mut x687, &mut x688, x620, (arg2[2]));
  let mut x689: u32 = 0;
  let mut x690: u32 = 0;
  fiat_25519_mulx_u32(&mut x689, &mut x690, x620, (arg2[1]));
  let mut x691: u32 = 0;
  let mut x692: u32 = 0;
  fiat_25519_mulx_u32(&mut x691, &mut x692, x620, (arg2[0]));
  let mut x693: u32 = 0;
  let mut x694: u32 = 0;
  fiat_25519_mulx_u32(&mut x693, &mut x694, x620, (arg2[8]));
  let mut x695: u32 = 0;
  let mut x696: u32 = 0;
  fiat_25519_mulx_u32(&mut x695, &mut x696, x620, (arg2[7]));
  let mut x697: u32 = 0;
  let mut x698: u32 = 0;
  fiat_25519_mulx_u32(&mut x697, &mut x698, x620, (arg2[6]));
  let mut x699: u32 = 0;
  let mut x700: u32 = 0;
  fiat_25519_mulx_u32(&mut x699, &mut x700, x620, (arg2[5]));
  let mut x701: u32 = 0;
  let mut x702: u32 = 0;
  fiat_25519_mulx_u32(&mut x701, &mut x702, x620, (arg2[4]));
  let mut x703: u32 = 0;
  let mut x704: u32 = 0;
  fiat_25519_mulx_u32(&mut x703, &mut x704, x620, (arg2[3]));
  let mut x705: u32 = 0;
  let mut x706: u32 = 0;
  fiat_25519_mulx_u32(&mut x705, &mut x706, x620, (arg2[2]));
  let mut x707: u32 = 0;
  let mut x708: u32 = 0;
  fiat_25519_mulx_u32(&mut x707, &mut x708, x620, (arg2[1]));
  let mut x709: u32 = 0;
  let mut x710: u32 = 0;
  fiat_25519_mulx_u32(&mut x709, &mut x710, x620, (arg2[0]));
  let mut x711: u32 = 0;
  let mut x712: u32 = 0;
  fiat_25519_mulx_u32(&mut x711, &mut x712, ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32), x619);
  let mut x713: u32 = 0;
  let mut x714: u32 = 0;
  fiat_25519_mulx_u32(&mut x713, &mut x714, ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32), (arg2[8]));
  let mut x715: u32 = 0;
  let mut x716: u32 = 0;
  fiat_25519_mulx_u32(&mut x715, &mut x716, ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32), (arg2[7]));
  let mut x717: u32 = 0;
  let mut x718: u32 = 0;
  fiat_25519_mulx_u32(&mut x717, &mut x718, ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32), (arg2[6]));
  let mut x719: u32 = 0;
  let mut x720: u32 = 0;
  fiat_25519_mulx_u32(&mut x719, &mut x720, ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32), (arg2[5]));
  let mut x721: u32 = 0;
  let mut x722: u32 = 0;
  fiat_25519_mulx_u32(&mut x721, &mut x722, ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32), (arg2[4]));
  let mut x723: u32 = 0;
  let mut x724: u32 = 0;
  fiat_25519_mulx_u32(&mut x723, &mut x724, ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32), (arg2[3]));
  let mut x725: u32 = 0;
  let mut x726: u32 = 0;
  fiat_25519_mulx_u32(&mut x725, &mut x726, ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32), (arg2[2]));
  let mut x727: u32 = 0;
  let mut x728: u32 = 0;
  fiat_25519_mulx_u32(&mut x727, &mut x728, ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32), (arg2[1]));
  let mut x729: u32 = 0;
  let mut x730: u32 = 0;
  fiat_25519_mulx_u32(&mut x729, &mut x730, ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32), (arg2[0]));
  let mut x731: u32 = 0;
  let mut x732: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x731, &mut x732, 0x0, x714, x621);
  let mut x733: u32 = 0;
  let mut x734: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x733, &mut x734, 0x0, x731, x623);
  let mut x735: u32 = 0;
  let mut x736: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x735, &mut x736, 0x0, x716, x625);
  let mut x737: u32 = 0;
  let mut x738: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x737, &mut x738, x736, x733, x626);
  let mut x739: u32 = 0;
  let mut x740: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x739, &mut x740, 0x0, x735, x629);
  let mut x741: u32 = 0;
  let mut x742: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x741, &mut x742, x740, x737, x627);
  let mut x743: u32 = 0;
  let mut x744: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x743, &mut x744, 0x0, x718, x631);
  let mut x745: u32 = 0;
  let mut x746: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x745, &mut x746, x744, x739, x632);
  let mut x747: u32 = 0;
  let mut x748: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x747, &mut x748, x746, x741, x630);
  let mut x749: u32 = 0;
  let mut x750: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x749, &mut x750, 0x0, x743, x637);
  let mut x751: u32 = 0;
  let mut x752: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x751, &mut x752, x750, x745, x635);
  let mut x753: u32 = 0;
  let mut x754: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x753, &mut x754, x752, x747, x633);
  let mut x755: u32 = 0;
  let mut x756: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x755, &mut x756, 0x0, x720, x639);
  let mut x757: u32 = 0;
  let mut x758: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x757, &mut x758, x756, x749, x640);
  let mut x759: u32 = 0;
  let mut x760: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x759, &mut x760, x758, x751, x638);
  let mut x761: u32 = 0;
  let mut x762: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x761, &mut x762, x760, x753, x636);
  let mut x763: u32 = 0;
  let mut x764: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x763, &mut x764, 0x0, x755, x647);
  let mut x765: u32 = 0;
  let mut x766: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x765, &mut x766, x764, x757, x645);
  let mut x767: u32 = 0;
  let mut x768: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x767, &mut x768, x766, x759, x643);
  let mut x769: u32 = 0;
  let mut x770: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x769, &mut x770, x768, x761, x641);
  let mut x771: u32 = 0;
  let mut x772: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x771, &mut x772, 0x0, x722, x649);
  let mut x773: u32 = 0;
  let mut x774: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x773, &mut x774, x772, x763, x650);
  let mut x775: u32 = 0;
  let mut x776: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x775, &mut x776, x774, x765, x648);
  let mut x777: u32 = 0;
  let mut x778: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x777, &mut x778, x776, x767, x646);
  let mut x779: u32 = 0;
  let mut x780: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x779, &mut x780, x778, x769, x644);
  let mut x781: u32 = 0;
  let mut x782: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x781, &mut x782, 0x0, x771, x659);
  let mut x783: u32 = 0;
  let mut x784: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x783, &mut x784, x782, x773, x657);
  let mut x785: u32 = 0;
  let mut x786: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x785, &mut x786, x784, x775, x655);
  let mut x787: u32 = 0;
  let mut x788: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x787, &mut x788, x786, x777, x653);
  let mut x789: u32 = 0;
  let mut x790: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x789, &mut x790, x788, x779, x651);
  let mut x791: u32 = 0;
  let mut x792: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x791, &mut x792, 0x0, x724, x661);
  let mut x793: u32 = 0;
  let mut x794: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x793, &mut x794, x792, x781, x662);
  let mut x795: u32 = 0;
  let mut x796: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x795, &mut x796, x794, x783, x660);
  let mut x797: u32 = 0;
  let mut x798: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x797, &mut x798, x796, x785, x658);
  let mut x799: u32 = 0;
  let mut x800: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x799, &mut x800, x798, x787, x656);
  let mut x801: u32 = 0;
  let mut x802: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x801, &mut x802, x800, x789, x654);
  let mut x803: u32 = 0;
  let mut x804: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x803, &mut x804, 0x0, x791, x673);
  let mut x805: u32 = 0;
  let mut x806: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x805, &mut x806, x804, x793, x671);
  let mut x807: u32 = 0;
  let mut x808: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x807, &mut x808, x806, x795, x669);
  let mut x809: u32 = 0;
  let mut x810: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x809, &mut x810, x808, x797, x667);
  let mut x811: u32 = 0;
  let mut x812: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x811, &mut x812, x810, x799, x665);
  let mut x813: u32 = 0;
  let mut x814: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x813, &mut x814, x812, x801, x663);
  let mut x815: u32 = 0;
  let mut x816: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x815, &mut x816, 0x0, x726, x675);
  let mut x817: u32 = 0;
  let mut x818: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x817, &mut x818, x816, x803, x676);
  let mut x819: u32 = 0;
  let mut x820: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x819, &mut x820, x818, x805, x674);
  let mut x821: u32 = 0;
  let mut x822: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x821, &mut x822, x820, x807, x672);
  let mut x823: u32 = 0;
  let mut x824: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x823, &mut x824, x822, x809, x670);
  let mut x825: u32 = 0;
  let mut x826: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x825, &mut x826, x824, x811, x668);
  let mut x827: u32 = 0;
  let mut x828: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x827, &mut x828, x826, x813, x666);
  let mut x829: u32 = 0;
  let mut x830: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x829, &mut x830, 0x0, x815, x689);
  let mut x831: u32 = 0;
  let mut x832: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x831, &mut x832, x830, x817, x687);
  let mut x833: u32 = 0;
  let mut x834: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x833, &mut x834, x832, x819, x685);
  let mut x835: u32 = 0;
  let mut x836: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x835, &mut x836, x834, x821, x683);
  let mut x837: u32 = 0;
  let mut x838: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x837, &mut x838, x836, x823, x681);
  let mut x839: u32 = 0;
  let mut x840: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x839, &mut x840, x838, x825, x679);
  let mut x841: u32 = 0;
  let mut x842: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x841, &mut x842, x840, x827, x677);
  let mut x843: u32 = 0;
  let mut x844: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x843, &mut x844, 0x0, x728, x691);
  let mut x845: u32 = 0;
  let mut x846: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x845, &mut x846, x844, x829, x692);
  let mut x847: u32 = 0;
  let mut x848: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x847, &mut x848, x846, x831, x690);
  let mut x849: u32 = 0;
  let mut x850: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x849, &mut x850, x848, x833, x688);
  let mut x851: u32 = 0;
  let mut x852: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x851, &mut x852, x850, x835, x686);
  let mut x853: u32 = 0;
  let mut x854: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x853, &mut x854, x852, x837, x684);
  let mut x855: u32 = 0;
  let mut x856: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x855, &mut x856, x854, x839, x682);
  let mut x857: u32 = 0;
  let mut x858: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x857, &mut x858, x856, x841, x680);
  let mut x859: u32 = 0;
  let mut x860: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x859, &mut x860, 0x0, x843, x707);
  let mut x861: u32 = 0;
  let mut x862: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x861, &mut x862, x860, x845, x705);
  let mut x863: u32 = 0;
  let mut x864: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x863, &mut x864, x862, x847, x703);
  let mut x865: u32 = 0;
  let mut x866: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x865, &mut x866, x864, x849, x701);
  let mut x867: u32 = 0;
  let mut x868: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x867, &mut x868, x866, x851, x699);
  let mut x869: u32 = 0;
  let mut x870: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x869, &mut x870, x868, x853, x697);
  let mut x871: u32 = 0;
  let mut x872: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x871, &mut x872, x870, x855, x695);
  let mut x873: u32 = 0;
  let mut x874: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x873, &mut x874, x872, x857, x693);
  let mut x875: u32 = 0;
  let mut x876: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x875, &mut x876, 0x0, x730, x709);
  let mut x877: u32 = 0;
  let mut x878: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x877, &mut x878, x876, x859, x710);
  let mut x879: u32 = 0;
  let mut x880: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x879, &mut x880, x878, x861, x708);
  let mut x881: u32 = 0;
  let mut x882: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x881, &mut x882, x880, x863, x706);
  let mut x883: u32 = 0;
  let mut x884: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x883, &mut x884, x882, x865, x704);
  let mut x885: u32 = 0;
  let mut x886: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x885, &mut x886, x884, x867, x702);
  let mut x887: u32 = 0;
  let mut x888: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x887, &mut x888, x886, x869, x700);
  let mut x889: u32 = 0;
  let mut x890: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x889, &mut x890, x888, x871, x698);
  let mut x891: u32 = 0;
  let mut x892: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x891, &mut x892, x890, x873, x696);
  let mut x893: u32 = 0;
  let mut x894: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x893, &mut x894, 0x0, x875, x727);
  let mut x895: u32 = 0;
  let mut x896: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x895, &mut x896, x894, x877, x725);
  let mut x897: u32 = 0;
  let mut x898: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x897, &mut x898, x896, x879, x723);
  let mut x899: u32 = 0;
  let mut x900: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x899, &mut x900, x898, x881, x721);
  let mut x901: u32 = 0;
  let mut x902: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x901, &mut x902, x900, x883, x719);
  let mut x903: u32 = 0;
  let mut x904: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x903, &mut x904, x902, x885, x717);
  let mut x905: u32 = 0;
  let mut x906: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x905, &mut x906, x904, x887, x715);
  let mut x907: u32 = 0;
  let mut x908: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x907, &mut x908, x906, x889, x713);
  let mut x909: u32 = 0;
  let mut x910: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x909, &mut x910, x908, x891, x711);
  let mut x911: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x911, (((arg1[8]) >> 31) as fiat_25519_u1), (0x0 as u32), 0xffffffff);
  let mut x912: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x912, ((((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32) >> 31) as fiat_25519_u1), (0x0 as u32), 0xffffffff);
  let mut x913: u32 = 0;
  let mut x914: u32 = 0;
  fiat_25519_mulx_u32(&mut x913, &mut x914, x912, (arg1[0]));
  let mut x915: u32 = 0;
  let mut x916: u32 = 0;
  fiat_25519_mulx_u32(&mut x915, &mut x916, x912, (arg1[1]));
  let mut x917: u32 = 0;
  let mut x918: u32 = 0;
  fiat_25519_mulx_u32(&mut x917, &mut x918, x912, (arg1[0]));
  let mut x919: u32 = 0;
  let mut x920: u32 = 0;
  fiat_25519_mulx_u32(&mut x919, &mut x920, x912, (arg1[2]));
  let mut x921: u32 = 0;
  let mut x922: u32 = 0;
  fiat_25519_mulx_u32(&mut x921, &mut x922, x912, (arg1[1]));
  let mut x923: u32 = 0;
  let mut x924: u32 = 0;
  fiat_25519_mulx_u32(&mut x923, &mut x924, x912, (arg1[0]));
  let mut x925: u32 = 0;
  let mut x926: u32 = 0;
  fiat_25519_mulx_u32(&mut x925, &mut x926, x912, (arg1[3]));
  let mut x927: u32 = 0;
  let mut x928: u32 = 0;
  fiat_25519_mulx_u32(&mut x927, &mut x928, x912, (arg1[2]));
  let mut x929: u32 = 0;
  let mut x930: u32 = 0;
  fiat_25519_mulx_u32(&mut x929, &mut x930, x912, (arg1[1]));
  let mut x931: u32 = 0;
  let mut x932: u32 = 0;
  fiat_25519_mulx_u32(&mut x931, &mut x932, x912, (arg1[0]));
  let mut x933: u32 = 0;
  let mut x934: u32 = 0;
  fiat_25519_mulx_u32(&mut x933, &mut x934, x912, (arg1[4]));
  let mut x935: u32 = 0;
  let mut x936: u32 = 0;
  fiat_25519_mulx_u32(&mut x935, &mut x936, x912, (arg1[3]));
  let mut x937: u32 = 0;
  let mut x938: u32 = 0;
  fiat_25519_mulx_u32(&mut x937, &mut x938, x912, (arg1[2]));
  let mut x939: u32 = 0;
  let mut x940: u32 = 0;
  fiat_25519_mulx_u32(&mut x939, &mut x940, x912, (arg1[1]));
  let mut x941: u32 = 0;
  let mut x942: u32 = 0;
  fiat_25519_mulx_u32(&mut x941, &mut x942, x912, (arg1[0]));
  let mut x943: u32 = 0;
  let mut x944: u32 = 0;
  fiat_25519_mulx_u32(&mut x943, &mut x944, x912, (arg1[5]));
  let mut x945: u32 = 0;
  let mut x946: u32 = 0;
  fiat_25519_mulx_u32(&mut x945, &mut x946, x912, (arg1[4]));
  let mut x947: u32 = 0;
  let mut x948: u32 = 0;
  fiat_25519_mulx_u32(&mut x947, &mut x948, x912, (arg1[3]));
  let mut x949: u32 = 0;
  let mut x950: u32 = 0;
  fiat_25519_mulx_u32(&mut x949, &mut x950, x912, (arg1[2]));
  let mut x951: u32 = 0;
  let mut x952: u32 = 0;
  fiat_25519_mulx_u32(&mut x951, &mut x952, x912, (arg1[1]));
  let mut x953: u32 = 0;
  let mut x954: u32 = 0;
  fiat_25519_mulx_u32(&mut x953, &mut x954, x912, (arg1[0]));
  let mut x955: u32 = 0;
  let mut x956: u32 = 0;
  fiat_25519_mulx_u32(&mut x955, &mut x956, x912, (arg1[6]));
  let mut x957: u32 = 0;
  let mut x958: u32 = 0;
  fiat_25519_mulx_u32(&mut x957, &mut x958, x912, (arg1[5]));
  let mut x959: u32 = 0;
  let mut x960: u32 = 0;
  fiat_25519_mulx_u32(&mut x959, &mut x960, x912, (arg1[4]));
  let mut x961: u32 = 0;
  let mut x962: u32 = 0;
  fiat_25519_mulx_u32(&mut x961, &mut x962, x912, (arg1[3]));
  let mut x963: u32 = 0;
  let mut x964: u32 = 0;
  fiat_25519_mulx_u32(&mut x963, &mut x964, x912, (arg1[2]));
  let mut x965: u32 = 0;
  let mut x966: u32 = 0;
  fiat_25519_mulx_u32(&mut x965, &mut x966, x912, (arg1[1]));
  let mut x967: u32 = 0;
  let mut x968: u32 = 0;
  fiat_25519_mulx_u32(&mut x967, &mut x968, x912, (arg1[0]));
  let mut x969: u32 = 0;
  let mut x970: u32 = 0;
  fiat_25519_mulx_u32(&mut x969, &mut x970, x912, (arg1[7]));
  let mut x971: u32 = 0;
  let mut x972: u32 = 0;
  fiat_25519_mulx_u32(&mut x971, &mut x972, x912, (arg1[6]));
  let mut x973: u32 = 0;
  let mut x974: u32 = 0;
  fiat_25519_mulx_u32(&mut x973, &mut x974, x912, (arg1[5]));
  let mut x975: u32 = 0;
  let mut x976: u32 = 0;
  fiat_25519_mulx_u32(&mut x975, &mut x976, x912, (arg1[4]));
  let mut x977: u32 = 0;
  let mut x978: u32 = 0;
  fiat_25519_mulx_u32(&mut x977, &mut x978, x912, (arg1[3]));
  let mut x979: u32 = 0;
  let mut x980: u32 = 0;
  fiat_25519_mulx_u32(&mut x979, &mut x980, x912, (arg1[2]));
  let mut x981: u32 = 0;
  let mut x982: u32 = 0;
  fiat_25519_mulx_u32(&mut x981, &mut x982, x912, (arg1[1]));
  let mut x983: u32 = 0;
  let mut x984: u32 = 0;
  fiat_25519_mulx_u32(&mut x983, &mut x984, x912, (arg1[0]));
  let mut x985: u32 = 0;
  let mut x986: u32 = 0;
  fiat_25519_mulx_u32(&mut x985, &mut x986, x912, (arg1[8]));
  let mut x987: u32 = 0;
  let mut x988: u32 = 0;
  fiat_25519_mulx_u32(&mut x987, &mut x988, x912, (arg1[7]));
  let mut x989: u32 = 0;
  let mut x990: u32 = 0;
  fiat_25519_mulx_u32(&mut x989, &mut x990, x912, (arg1[6]));
  let mut x991: u32 = 0;
  let mut x992: u32 = 0;
  fiat_25519_mulx_u32(&mut x991, &mut x992, x912, (arg1[5]));
  let mut x993: u32 = 0;
  let mut x994: u32 = 0;
  fiat_25519_mulx_u32(&mut x993, &mut x994, x912, (arg1[4]));
  let mut x995: u32 = 0;
  let mut x996: u32 = 0;
  fiat_25519_mulx_u32(&mut x995, &mut x996, x912, (arg1[3]));
  let mut x997: u32 = 0;
  let mut x998: u32 = 0;
  fiat_25519_mulx_u32(&mut x997, &mut x998, x912, (arg1[2]));
  let mut x999: u32 = 0;
  let mut x1000: u32 = 0;
  fiat_25519_mulx_u32(&mut x999, &mut x1000, x912, (arg1[1]));
  let mut x1001: u32 = 0;
  let mut x1002: u32 = 0;
  fiat_25519_mulx_u32(&mut x1001, &mut x1002, x912, (arg1[0]));
  let mut x1003: u32 = 0;
  let mut x1004: u32 = 0;
  fiat_25519_mulx_u32(&mut x1003, &mut x1004, ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32), x911);
  let mut x1005: u32 = 0;
  let mut x1006: u32 = 0;
  fiat_25519_mulx_u32(&mut x1005, &mut x1006, ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32), (arg1[8]));
  let mut x1007: u32 = 0;
  let mut x1008: u32 = 0;
  fiat_25519_mulx_u32(&mut x1007, &mut x1008, ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32), (arg1[7]));
  let mut x1009: u32 = 0;
  let mut x1010: u32 = 0;
  fiat_25519_mulx_u32(&mut x1009, &mut x1010, ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32), (arg1[6]));
  let mut x1011: u32 = 0;
  let mut x1012: u32 = 0;
  fiat_25519_mulx_u32(&mut x1011, &mut x1012, ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32), (arg1[5]));
  let mut x1013: u32 = 0;
  let mut x1014: u32 = 0;
  fiat_25519_mulx_u32(&mut x1013, &mut x1014, ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32), (arg1[4]));
  let mut x1015: u32 = 0;
  let mut x1016: u32 = 0;
  fiat_25519_mulx_u32(&mut x1015, &mut x1016, ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32), (arg1[3]));
  let mut x1017: u32 = 0;
  let mut x1018: u32 = 0;
  fiat_25519_mulx_u32(&mut x1017, &mut x1018, ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32), (arg1[2]));
  let mut x1019: u32 = 0;
  let mut x1020: u32 = 0;
  fiat_25519_mulx_u32(&mut x1019, &mut x1020, ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32), (arg1[1]));
  let mut x1021: u32 = 0;
  let mut x1022: u32 = 0;
  fiat_25519_mulx_u32(&mut x1021, &mut x1022, ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32), (arg1[0]));
  let mut x1023: u32 = 0;
  let mut x1024: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1023, &mut x1024, 0x0, x1006, x913);
  let mut x1025: u32 = 0;
  let mut x1026: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1025, &mut x1026, 0x0, x1023, x915);
  let mut x1027: u32 = 0;
  let mut x1028: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1027, &mut x1028, 0x0, x1008, x917);
  let mut x1029: u32 = 0;
  let mut x1030: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1029, &mut x1030, x1028, x1025, x918);
  let mut x1031: u32 = 0;
  let mut x1032: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1031, &mut x1032, 0x0, x1027, x921);
  let mut x1033: u32 = 0;
  let mut x1034: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1033, &mut x1034, x1032, x1029, x919);
  let mut x1035: u32 = 0;
  let mut x1036: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1035, &mut x1036, 0x0, x1010, x923);
  let mut x1037: u32 = 0;
  let mut x1038: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1037, &mut x1038, x1036, x1031, x924);
  let mut x1039: u32 = 0;
  let mut x1040: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1039, &mut x1040, x1038, x1033, x922);
  let mut x1041: u32 = 0;
  let mut x1042: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1041, &mut x1042, 0x0, x1035, x929);
  let mut x1043: u32 = 0;
  let mut x1044: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1043, &mut x1044, x1042, x1037, x927);
  let mut x1045: u32 = 0;
  let mut x1046: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1045, &mut x1046, x1044, x1039, x925);
  let mut x1047: u32 = 0;
  let mut x1048: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1047, &mut x1048, 0x0, x1012, x931);
  let mut x1049: u32 = 0;
  let mut x1050: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1049, &mut x1050, x1048, x1041, x932);
  let mut x1051: u32 = 0;
  let mut x1052: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1051, &mut x1052, x1050, x1043, x930);
  let mut x1053: u32 = 0;
  let mut x1054: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1053, &mut x1054, x1052, x1045, x928);
  let mut x1055: u32 = 0;
  let mut x1056: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1055, &mut x1056, 0x0, x1047, x939);
  let mut x1057: u32 = 0;
  let mut x1058: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1057, &mut x1058, x1056, x1049, x937);
  let mut x1059: u32 = 0;
  let mut x1060: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1059, &mut x1060, x1058, x1051, x935);
  let mut x1061: u32 = 0;
  let mut x1062: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1061, &mut x1062, x1060, x1053, x933);
  let mut x1063: u32 = 0;
  let mut x1064: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1063, &mut x1064, 0x0, x1014, x941);
  let mut x1065: u32 = 0;
  let mut x1066: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1065, &mut x1066, x1064, x1055, x942);
  let mut x1067: u32 = 0;
  let mut x1068: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1067, &mut x1068, x1066, x1057, x940);
  let mut x1069: u32 = 0;
  let mut x1070: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1069, &mut x1070, x1068, x1059, x938);
  let mut x1071: u32 = 0;
  let mut x1072: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1071, &mut x1072, x1070, x1061, x936);
  let mut x1073: u32 = 0;
  let mut x1074: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1073, &mut x1074, 0x0, x1063, x951);
  let mut x1075: u32 = 0;
  let mut x1076: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1075, &mut x1076, x1074, x1065, x949);
  let mut x1077: u32 = 0;
  let mut x1078: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1077, &mut x1078, x1076, x1067, x947);
  let mut x1079: u32 = 0;
  let mut x1080: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1079, &mut x1080, x1078, x1069, x945);
  let mut x1081: u32 = 0;
  let mut x1082: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1081, &mut x1082, x1080, x1071, x943);
  let mut x1083: u32 = 0;
  let mut x1084: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1083, &mut x1084, 0x0, x1016, x953);
  let mut x1085: u32 = 0;
  let mut x1086: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1085, &mut x1086, x1084, x1073, x954);
  let mut x1087: u32 = 0;
  let mut x1088: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1087, &mut x1088, x1086, x1075, x952);
  let mut x1089: u32 = 0;
  let mut x1090: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1089, &mut x1090, x1088, x1077, x950);
  let mut x1091: u32 = 0;
  let mut x1092: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1091, &mut x1092, x1090, x1079, x948);
  let mut x1093: u32 = 0;
  let mut x1094: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1093, &mut x1094, x1092, x1081, x946);
  let mut x1095: u32 = 0;
  let mut x1096: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1095, &mut x1096, 0x0, x1083, x965);
  let mut x1097: u32 = 0;
  let mut x1098: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1097, &mut x1098, x1096, x1085, x963);
  let mut x1099: u32 = 0;
  let mut x1100: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1099, &mut x1100, x1098, x1087, x961);
  let mut x1101: u32 = 0;
  let mut x1102: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1101, &mut x1102, x1100, x1089, x959);
  let mut x1103: u32 = 0;
  let mut x1104: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1103, &mut x1104, x1102, x1091, x957);
  let mut x1105: u32 = 0;
  let mut x1106: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1105, &mut x1106, x1104, x1093, x955);
  let mut x1107: u32 = 0;
  let mut x1108: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1107, &mut x1108, 0x0, x1018, x967);
  let mut x1109: u32 = 0;
  let mut x1110: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1109, &mut x1110, x1108, x1095, x968);
  let mut x1111: u32 = 0;
  let mut x1112: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1111, &mut x1112, x1110, x1097, x966);
  let mut x1113: u32 = 0;
  let mut x1114: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1113, &mut x1114, x1112, x1099, x964);
  let mut x1115: u32 = 0;
  let mut x1116: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1115, &mut x1116, x1114, x1101, x962);
  let mut x1117: u32 = 0;
  let mut x1118: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1117, &mut x1118, x1116, x1103, x960);
  let mut x1119: u32 = 0;
  let mut x1120: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1119, &mut x1120, x1118, x1105, x958);
  let mut x1121: u32 = 0;
  let mut x1122: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1121, &mut x1122, 0x0, x1107, x981);
  let mut x1123: u32 = 0;
  let mut x1124: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1123, &mut x1124, x1122, x1109, x979);
  let mut x1125: u32 = 0;
  let mut x1126: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1125, &mut x1126, x1124, x1111, x977);
  let mut x1127: u32 = 0;
  let mut x1128: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1127, &mut x1128, x1126, x1113, x975);
  let mut x1129: u32 = 0;
  let mut x1130: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1129, &mut x1130, x1128, x1115, x973);
  let mut x1131: u32 = 0;
  let mut x1132: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1131, &mut x1132, x1130, x1117, x971);
  let mut x1133: u32 = 0;
  let mut x1134: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1133, &mut x1134, x1132, x1119, x969);
  let mut x1135: u32 = 0;
  let mut x1136: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1135, &mut x1136, 0x0, x1020, x983);
  let mut x1137: u32 = 0;
  let mut x1138: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1137, &mut x1138, x1136, x1121, x984);
  let mut x1139: u32 = 0;
  let mut x1140: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1139, &mut x1140, x1138, x1123, x982);
  let mut x1141: u32 = 0;
  let mut x1142: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1141, &mut x1142, x1140, x1125, x980);
  let mut x1143: u32 = 0;
  let mut x1144: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1143, &mut x1144, x1142, x1127, x978);
  let mut x1145: u32 = 0;
  let mut x1146: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1145, &mut x1146, x1144, x1129, x976);
  let mut x1147: u32 = 0;
  let mut x1148: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1147, &mut x1148, x1146, x1131, x974);
  let mut x1149: u32 = 0;
  let mut x1150: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1149, &mut x1150, x1148, x1133, x972);
  let mut x1151: u32 = 0;
  let mut x1152: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1151, &mut x1152, 0x0, x1135, x999);
  let mut x1153: u32 = 0;
  let mut x1154: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1153, &mut x1154, x1152, x1137, x997);
  let mut x1155: u32 = 0;
  let mut x1156: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1155, &mut x1156, x1154, x1139, x995);
  let mut x1157: u32 = 0;
  let mut x1158: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1157, &mut x1158, x1156, x1141, x993);
  let mut x1159: u32 = 0;
  let mut x1160: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1159, &mut x1160, x1158, x1143, x991);
  let mut x1161: u32 = 0;
  let mut x1162: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1161, &mut x1162, x1160, x1145, x989);
  let mut x1163: u32 = 0;
  let mut x1164: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1163, &mut x1164, x1162, x1147, x987);
  let mut x1165: u32 = 0;
  let mut x1166: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1165, &mut x1166, x1164, x1149, x985);
  let mut x1167: u32 = 0;
  let mut x1168: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1167, &mut x1168, 0x0, x1022, x1001);
  let mut x1169: u32 = 0;
  let mut x1170: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1169, &mut x1170, x1168, x1151, x1002);
  let mut x1171: u32 = 0;
  let mut x1172: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1171, &mut x1172, x1170, x1153, x1000);
  let mut x1173: u32 = 0;
  let mut x1174: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1173, &mut x1174, x1172, x1155, x998);
  let mut x1175: u32 = 0;
  let mut x1176: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1175, &mut x1176, x1174, x1157, x996);
  let mut x1177: u32 = 0;
  let mut x1178: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1177, &mut x1178, x1176, x1159, x994);
  let mut x1179: u32 = 0;
  let mut x1180: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1179, &mut x1180, x1178, x1161, x992);
  let mut x1181: u32 = 0;
  let mut x1182: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1181, &mut x1182, x1180, x1163, x990);
  let mut x1183: u32 = 0;
  let mut x1184: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1183, &mut x1184, x1182, x1165, x988);
  let mut x1185: u32 = 0;
  let mut x1186: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1185, &mut x1186, 0x0, x1167, x1019);
  let mut x1187: u32 = 0;
  let mut x1188: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1187, &mut x1188, x1186, x1169, x1017);
  let mut x1189: u32 = 0;
  let mut x1190: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1189, &mut x1190, x1188, x1171, x1015);
  let mut x1191: u32 = 0;
  let mut x1192: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1191, &mut x1192, x1190, x1173, x1013);
  let mut x1193: u32 = 0;
  let mut x1194: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1193, &mut x1194, x1192, x1175, x1011);
  let mut x1195: u32 = 0;
  let mut x1196: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1195, &mut x1196, x1194, x1177, x1009);
  let mut x1197: u32 = 0;
  let mut x1198: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1197, &mut x1198, x1196, x1179, x1007);
  let mut x1199: u32 = 0;
  let mut x1200: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1199, &mut x1200, x1198, x1181, x1005);
  let mut x1201: u32 = 0;
  let mut x1202: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1201, &mut x1202, x1200, x1183, x1003);
  let mut x1203: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1203, (((arg2[8]) >> 31) as fiat_25519_u1), (0x0 as u32), 0xffffffff);
  let mut x1204: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1204, ((((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32) >> 31) as fiat_25519_u1), (0x0 as u32), 0xffffffff);
  let mut x1205: u32 = 0;
  let mut x1206: u32 = 0;
  fiat_25519_mulx_u32(&mut x1205, &mut x1206, x1204, (arg2[0]));
  let mut x1207: u32 = 0;
  let mut x1208: u32 = 0;
  fiat_25519_mulx_u32(&mut x1207, &mut x1208, x1204, (arg2[1]));
  let mut x1209: u32 = 0;
  let mut x1210: u32 = 0;
  fiat_25519_mulx_u32(&mut x1209, &mut x1210, x1204, (arg2[0]));
  let mut x1211: u32 = 0;
  let mut x1212: u32 = 0;
  fiat_25519_mulx_u32(&mut x1211, &mut x1212, x1204, (arg2[2]));
  let mut x1213: u32 = 0;
  let mut x1214: u32 = 0;
  fiat_25519_mulx_u32(&mut x1213, &mut x1214, x1204, (arg2[1]));
  let mut x1215: u32 = 0;
  let mut x1216: u32 = 0;
  fiat_25519_mulx_u32(&mut x1215, &mut x1216, x1204, (arg2[0]));
  let mut x1217: u32 = 0;
  let mut x1218: u32 = 0;
  fiat_25519_mulx_u32(&mut x1217, &mut x1218, x1204, (arg2[3]));
  let mut x1219: u32 = 0;
  let mut x1220: u32 = 0;
  fiat_25519_mulx_u32(&mut x1219, &mut x1220, x1204, (arg2[2]));
  let mut x1221: u32 = 0;
  let mut x1222: u32 = 0;
  fiat_25519_mulx_u32(&mut x1221, &mut x1222, x1204, (arg2[1]));
  let mut x1223: u32 = 0;
  let mut x1224: u32 = 0;
  fiat_25519_mulx_u32(&mut x1223, &mut x1224, x1204, (arg2[0]));
  let mut x1225: u32 = 0;
  let mut x1226: u32 = 0;
  fiat_25519_mulx_u32(&mut x1225, &mut x1226, x1204, (arg2[4]));
  let mut x1227: u32 = 0;
  let mut x1228: u32 = 0;
  fiat_25519_mulx_u32(&mut x1227, &mut x1228, x1204, (arg2[3]));
  let mut x1229: u32 = 0;
  let mut x1230: u32 = 0;
  fiat_25519_mulx_u32(&mut x1229, &mut x1230, x1204, (arg2[2]));
  let mut x1231: u32 = 0;
  let mut x1232: u32 = 0;
  fiat_25519_mulx_u32(&mut x1231, &mut x1232, x1204, (arg2[1]));
  let mut x1233: u32 = 0;
  let mut x1234: u32 = 0;
  fiat_25519_mulx_u32(&mut x1233, &mut x1234, x1204, (arg2[0]));
  let mut x1235: u32 = 0;
  let mut x1236: u32 = 0;
  fiat_25519_mulx_u32(&mut x1235, &mut x1236, x1204, (arg2[5]));
  let mut x1237: u32 = 0;
  let mut x1238: u32 = 0;
  fiat_25519_mulx_u32(&mut x1237, &mut x1238, x1204, (arg2[4]));
  let mut x1239: u32 = 0;
  let mut x1240: u32 = 0;
  fiat_25519_mulx_u32(&mut x1239, &mut x1240, x1204, (arg2[3]));
  let mut x1241: u32 = 0;
  let mut x1242: u32 = 0;
  fiat_25519_mulx_u32(&mut x1241, &mut x1242, x1204, (arg2[2]));
  let mut x1243: u32 = 0;
  let mut x1244: u32 = 0;
  fiat_25519_mulx_u32(&mut x1243, &mut x1244, x1204, (arg2[1]));
  let mut x1245: u32 = 0;
  let mut x1246: u32 = 0;
  fiat_25519_mulx_u32(&mut x1245, &mut x1246, x1204, (arg2[0]));
  let mut x1247: u32 = 0;
  let mut x1248: u32 = 0;
  fiat_25519_mulx_u32(&mut x1247, &mut x1248, x1204, (arg2[6]));
  let mut x1249: u32 = 0;
  let mut x1250: u32 = 0;
  fiat_25519_mulx_u32(&mut x1249, &mut x1250, x1204, (arg2[5]));
  let mut x1251: u32 = 0;
  let mut x1252: u32 = 0;
  fiat_25519_mulx_u32(&mut x1251, &mut x1252, x1204, (arg2[4]));
  let mut x1253: u32 = 0;
  let mut x1254: u32 = 0;
  fiat_25519_mulx_u32(&mut x1253, &mut x1254, x1204, (arg2[3]));
  let mut x1255: u32 = 0;
  let mut x1256: u32 = 0;
  fiat_25519_mulx_u32(&mut x1255, &mut x1256, x1204, (arg2[2]));
  let mut x1257: u32 = 0;
  let mut x1258: u32 = 0;
  fiat_25519_mulx_u32(&mut x1257, &mut x1258, x1204, (arg2[1]));
  let mut x1259: u32 = 0;
  let mut x1260: u32 = 0;
  fiat_25519_mulx_u32(&mut x1259, &mut x1260, x1204, (arg2[0]));
  let mut x1261: u32 = 0;
  let mut x1262: u32 = 0;
  fiat_25519_mulx_u32(&mut x1261, &mut x1262, x1204, (arg2[7]));
  let mut x1263: u32 = 0;
  let mut x1264: u32 = 0;
  fiat_25519_mulx_u32(&mut x1263, &mut x1264, x1204, (arg2[6]));
  let mut x1265: u32 = 0;
  let mut x1266: u32 = 0;
  fiat_25519_mulx_u32(&mut x1265, &mut x1266, x1204, (arg2[5]));
  let mut x1267: u32 = 0;
  let mut x1268: u32 = 0;
  fiat_25519_mulx_u32(&mut x1267, &mut x1268, x1204, (arg2[4]));
  let mut x1269: u32 = 0;
  let mut x1270: u32 = 0;
  fiat_25519_mulx_u32(&mut x1269, &mut x1270, x1204, (arg2[3]));
  let mut x1271: u32 = 0;
  let mut x1272: u32 = 0;
  fiat_25519_mulx_u32(&mut x1271, &mut x1272, x1204, (arg2[2]));
  let mut x1273: u32 = 0;
  let mut x1274: u32 = 0;
  fiat_25519_mulx_u32(&mut x1273, &mut x1274, x1204, (arg2[1]));
  let mut x1275: u32 = 0;
  let mut x1276: u32 = 0;
  fiat_25519_mulx_u32(&mut x1275, &mut x1276, x1204, (arg2[0]));
  let mut x1277: u32 = 0;
  let mut x1278: u32 = 0;
  fiat_25519_mulx_u32(&mut x1277, &mut x1278, x1204, (arg2[8]));
  let mut x1279: u32 = 0;
  let mut x1280: u32 = 0;
  fiat_25519_mulx_u32(&mut x1279, &mut x1280, x1204, (arg2[7]));
  let mut x1281: u32 = 0;
  let mut x1282: u32 = 0;
  fiat_25519_mulx_u32(&mut x1281, &mut x1282, x1204, (arg2[6]));
  let mut x1283: u32 = 0;
  let mut x1284: u32 = 0;
  fiat_25519_mulx_u32(&mut x1283, &mut x1284, x1204, (arg2[5]));
  let mut x1285: u32 = 0;
  let mut x1286: u32 = 0;
  fiat_25519_mulx_u32(&mut x1285, &mut x1286, x1204, (arg2[4]));
  let mut x1287: u32 = 0;
  let mut x1288: u32 = 0;
  fiat_25519_mulx_u32(&mut x1287, &mut x1288, x1204, (arg2[3]));
  let mut x1289: u32 = 0;
  let mut x1290: u32 = 0;
  fiat_25519_mulx_u32(&mut x1289, &mut x1290, x1204, (arg2[2]));
  let mut x1291: u32 = 0;
  let mut x1292: u32 = 0;
  fiat_25519_mulx_u32(&mut x1291, &mut x1292, x1204, (arg2[1]));
  let mut x1293: u32 = 0;
  let mut x1294: u32 = 0;
  fiat_25519_mulx_u32(&mut x1293, &mut x1294, x1204, (arg2[0]));
  let mut x1295: u32 = 0;
  let mut x1296: u32 = 0;
  fiat_25519_mulx_u32(&mut x1295, &mut x1296, ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32), x1203);
  let mut x1297: u32 = 0;
  let mut x1298: u32 = 0;
  fiat_25519_mulx_u32(&mut x1297, &mut x1298, ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32), (arg2[8]));
  let mut x1299: u32 = 0;
  let mut x1300: u32 = 0;
  fiat_25519_mulx_u32(&mut x1299, &mut x1300, ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32), (arg2[7]));
  let mut x1301: u32 = 0;
  let mut x1302: u32 = 0;
  fiat_25519_mulx_u32(&mut x1301, &mut x1302, ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32), (arg2[6]));
  let mut x1303: u32 = 0;
  let mut x1304: u32 = 0;
  fiat_25519_mulx_u32(&mut x1303, &mut x1304, ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32), (arg2[5]));
  let mut x1305: u32 = 0;
  let mut x1306: u32 = 0;
  fiat_25519_mulx_u32(&mut x1305, &mut x1306, ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32), (arg2[4]));
  let mut x1307: u32 = 0;
  let mut x1308: u32 = 0;
  fiat_25519_mulx_u32(&mut x1307, &mut x1308, ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32), (arg2[3]));
  let mut x1309: u32 = 0;
  let mut x1310: u32 = 0;
  fiat_25519_mulx_u32(&mut x1309, &mut x1310, ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32), (arg2[2]));
  let mut x1311: u32 = 0;
  let mut x1312: u32 = 0;
  fiat_25519_mulx_u32(&mut x1311, &mut x1312, ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32), (arg2[1]));
  let mut x1313: u32 = 0;
  let mut x1314: u32 = 0;
  fiat_25519_mulx_u32(&mut x1313, &mut x1314, ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32), (arg2[0]));
  let mut x1315: u32 = 0;
  let mut x1316: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1315, &mut x1316, 0x0, x1298, x1205);
  let mut x1317: u32 = 0;
  let mut x1318: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1317, &mut x1318, 0x0, x1315, x1207);
  let mut x1319: u32 = 0;
  let mut x1320: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1319, &mut x1320, 0x0, x1300, x1209);
  let mut x1321: u32 = 0;
  let mut x1322: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1321, &mut x1322, x1320, x1317, x1210);
  let mut x1323: u32 = 0;
  let mut x1324: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1323, &mut x1324, 0x0, x1319, x1213);
  let mut x1325: u32 = 0;
  let mut x1326: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1325, &mut x1326, x1324, x1321, x1211);
  let mut x1327: u32 = 0;
  let mut x1328: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1327, &mut x1328, 0x0, x1302, x1215);
  let mut x1329: u32 = 0;
  let mut x1330: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1329, &mut x1330, x1328, x1323, x1216);
  let mut x1331: u32 = 0;
  let mut x1332: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1331, &mut x1332, x1330, x1325, x1214);
  let mut x1333: u32 = 0;
  let mut x1334: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1333, &mut x1334, 0x0, x1327, x1221);
  let mut x1335: u32 = 0;
  let mut x1336: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1335, &mut x1336, x1334, x1329, x1219);
  let mut x1337: u32 = 0;
  let mut x1338: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1337, &mut x1338, x1336, x1331, x1217);
  let mut x1339: u32 = 0;
  let mut x1340: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1339, &mut x1340, 0x0, x1304, x1223);
  let mut x1341: u32 = 0;
  let mut x1342: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1341, &mut x1342, x1340, x1333, x1224);
  let mut x1343: u32 = 0;
  let mut x1344: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1343, &mut x1344, x1342, x1335, x1222);
  let mut x1345: u32 = 0;
  let mut x1346: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1345, &mut x1346, x1344, x1337, x1220);
  let mut x1347: u32 = 0;
  let mut x1348: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1347, &mut x1348, 0x0, x1339, x1231);
  let mut x1349: u32 = 0;
  let mut x1350: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1349, &mut x1350, x1348, x1341, x1229);
  let mut x1351: u32 = 0;
  let mut x1352: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1351, &mut x1352, x1350, x1343, x1227);
  let mut x1353: u32 = 0;
  let mut x1354: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1353, &mut x1354, x1352, x1345, x1225);
  let mut x1355: u32 = 0;
  let mut x1356: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1355, &mut x1356, 0x0, x1306, x1233);
  let mut x1357: u32 = 0;
  let mut x1358: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1357, &mut x1358, x1356, x1347, x1234);
  let mut x1359: u32 = 0;
  let mut x1360: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1359, &mut x1360, x1358, x1349, x1232);
  let mut x1361: u32 = 0;
  let mut x1362: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1361, &mut x1362, x1360, x1351, x1230);
  let mut x1363: u32 = 0;
  let mut x1364: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1363, &mut x1364, x1362, x1353, x1228);
  let mut x1365: u32 = 0;
  let mut x1366: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1365, &mut x1366, 0x0, x1355, x1243);
  let mut x1367: u32 = 0;
  let mut x1368: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1367, &mut x1368, x1366, x1357, x1241);
  let mut x1369: u32 = 0;
  let mut x1370: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1369, &mut x1370, x1368, x1359, x1239);
  let mut x1371: u32 = 0;
  let mut x1372: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1371, &mut x1372, x1370, x1361, x1237);
  let mut x1373: u32 = 0;
  let mut x1374: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1373, &mut x1374, x1372, x1363, x1235);
  let mut x1375: u32 = 0;
  let mut x1376: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1375, &mut x1376, 0x0, x1308, x1245);
  let mut x1377: u32 = 0;
  let mut x1378: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1377, &mut x1378, x1376, x1365, x1246);
  let mut x1379: u32 = 0;
  let mut x1380: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1379, &mut x1380, x1378, x1367, x1244);
  let mut x1381: u32 = 0;
  let mut x1382: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1381, &mut x1382, x1380, x1369, x1242);
  let mut x1383: u32 = 0;
  let mut x1384: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1383, &mut x1384, x1382, x1371, x1240);
  let mut x1385: u32 = 0;
  let mut x1386: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1385, &mut x1386, x1384, x1373, x1238);
  let mut x1387: u32 = 0;
  let mut x1388: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1387, &mut x1388, 0x0, x1375, x1257);
  let mut x1389: u32 = 0;
  let mut x1390: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1389, &mut x1390, x1388, x1377, x1255);
  let mut x1391: u32 = 0;
  let mut x1392: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1391, &mut x1392, x1390, x1379, x1253);
  let mut x1393: u32 = 0;
  let mut x1394: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1393, &mut x1394, x1392, x1381, x1251);
  let mut x1395: u32 = 0;
  let mut x1396: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1395, &mut x1396, x1394, x1383, x1249);
  let mut x1397: u32 = 0;
  let mut x1398: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1397, &mut x1398, x1396, x1385, x1247);
  let mut x1399: u32 = 0;
  let mut x1400: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1399, &mut x1400, 0x0, x1310, x1259);
  let mut x1401: u32 = 0;
  let mut x1402: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1401, &mut x1402, x1400, x1387, x1260);
  let mut x1403: u32 = 0;
  let mut x1404: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1403, &mut x1404, x1402, x1389, x1258);
  let mut x1405: u32 = 0;
  let mut x1406: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1405, &mut x1406, x1404, x1391, x1256);
  let mut x1407: u32 = 0;
  let mut x1408: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1407, &mut x1408, x1406, x1393, x1254);
  let mut x1409: u32 = 0;
  let mut x1410: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1409, &mut x1410, x1408, x1395, x1252);
  let mut x1411: u32 = 0;
  let mut x1412: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1411, &mut x1412, x1410, x1397, x1250);
  let mut x1413: u32 = 0;
  let mut x1414: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1413, &mut x1414, 0x0, x1399, x1273);
  let mut x1415: u32 = 0;
  let mut x1416: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1415, &mut x1416, x1414, x1401, x1271);
  let mut x1417: u32 = 0;
  let mut x1418: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1417, &mut x1418, x1416, x1403, x1269);
  let mut x1419: u32 = 0;
  let mut x1420: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1419, &mut x1420, x1418, x1405, x1267);
  let mut x1421: u32 = 0;
  let mut x1422: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1421, &mut x1422, x1420, x1407, x1265);
  let mut x1423: u32 = 0;
  let mut x1424: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1423, &mut x1424, x1422, x1409, x1263);
  let mut x1425: u32 = 0;
  let mut x1426: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1425, &mut x1426, x1424, x1411, x1261);
  let mut x1427: u32 = 0;
  let mut x1428: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1427, &mut x1428, 0x0, x1312, x1275);
  let mut x1429: u32 = 0;
  let mut x1430: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1429, &mut x1430, x1428, x1413, x1276);
  let mut x1431: u32 = 0;
  let mut x1432: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1431, &mut x1432, x1430, x1415, x1274);
  let mut x1433: u32 = 0;
  let mut x1434: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1433, &mut x1434, x1432, x1417, x1272);
  let mut x1435: u32 = 0;
  let mut x1436: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1435, &mut x1436, x1434, x1419, x1270);
  let mut x1437: u32 = 0;
  let mut x1438: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1437, &mut x1438, x1436, x1421, x1268);
  let mut x1439: u32 = 0;
  let mut x1440: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1439, &mut x1440, x1438, x1423, x1266);
  let mut x1441: u32 = 0;
  let mut x1442: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1441, &mut x1442, x1440, x1425, x1264);
  let mut x1443: u32 = 0;
  let mut x1444: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1443, &mut x1444, 0x0, x1427, x1291);
  let mut x1445: u32 = 0;
  let mut x1446: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1445, &mut x1446, x1444, x1429, x1289);
  let mut x1447: u32 = 0;
  let mut x1448: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1447, &mut x1448, x1446, x1431, x1287);
  let mut x1449: u32 = 0;
  let mut x1450: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1449, &mut x1450, x1448, x1433, x1285);
  let mut x1451: u32 = 0;
  let mut x1452: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1451, &mut x1452, x1450, x1435, x1283);
  let mut x1453: u32 = 0;
  let mut x1454: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1453, &mut x1454, x1452, x1437, x1281);
  let mut x1455: u32 = 0;
  let mut x1456: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1455, &mut x1456, x1454, x1439, x1279);
  let mut x1457: u32 = 0;
  let mut x1458: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1457, &mut x1458, x1456, x1441, x1277);
  let mut x1459: u32 = 0;
  let mut x1460: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1459, &mut x1460, 0x0, x1314, x1293);
  let mut x1461: u32 = 0;
  let mut x1462: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1461, &mut x1462, x1460, x1443, x1294);
  let mut x1463: u32 = 0;
  let mut x1464: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1463, &mut x1464, x1462, x1445, x1292);
  let mut x1465: u32 = 0;
  let mut x1466: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1465, &mut x1466, x1464, x1447, x1290);
  let mut x1467: u32 = 0;
  let mut x1468: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1467, &mut x1468, x1466, x1449, x1288);
  let mut x1469: u32 = 0;
  let mut x1470: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1469, &mut x1470, x1468, x1451, x1286);
  let mut x1471: u32 = 0;
  let mut x1472: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1471, &mut x1472, x1470, x1453, x1284);
  let mut x1473: u32 = 0;
  let mut x1474: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1473, &mut x1474, x1472, x1455, x1282);
  let mut x1475: u32 = 0;
  let mut x1476: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1475, &mut x1476, x1474, x1457, x1280);
  let mut x1477: u32 = 0;
  let mut x1478: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1477, &mut x1478, 0x0, x1459, x1311);
  let mut x1479: u32 = 0;
  let mut x1480: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1479, &mut x1480, x1478, x1461, x1309);
  let mut x1481: u32 = 0;
  let mut x1482: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1481, &mut x1482, x1480, x1463, x1307);
  let mut x1483: u32 = 0;
  let mut x1484: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1483, &mut x1484, x1482, x1465, x1305);
  let mut x1485: u32 = 0;
  let mut x1486: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1485, &mut x1486, x1484, x1467, x1303);
  let mut x1487: u32 = 0;
  let mut x1488: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1487, &mut x1488, x1486, x1469, x1301);
  let mut x1489: u32 = 0;
  let mut x1490: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1489, &mut x1490, x1488, x1471, x1299);
  let mut x1491: u32 = 0;
  let mut x1492: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1491, &mut x1492, x1490, x1473, x1297);
  let mut x1493: u32 = 0;
  let mut x1494: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1493, &mut x1494, x1492, x1475, x1295);
  let mut x1495: u32 = 0;
  let mut x1496: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1495, &mut x1496, 0x0, x437, x729);
  let mut x1497: u32 = 0;
  let mut x1498: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1497, &mut x1498, x1496, x601, x893);
  let mut x1499: u32 = 0;
  let mut x1500: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1499, &mut x1500, x1498, x603, x895);
  let mut x1501: u32 = 0;
  let mut x1502: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1501, &mut x1502, x1500, x605, x897);
  let mut x1503: u32 = 0;
  let mut x1504: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1503, &mut x1504, x1502, x607, x899);
  let mut x1505: u32 = 0;
  let mut x1506: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1505, &mut x1506, x1504, x609, x901);
  let mut x1507: u32 = 0;
  let mut x1508: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1507, &mut x1508, x1506, x611, x903);
  let mut x1509: u32 = 0;
  let mut x1510: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1509, &mut x1510, x1508, x613, x905);
  let mut x1511: u32 = 0;
  let mut x1512: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1511, &mut x1512, x1510, x615, x907);
  let mut x1513: u32 = 0;
  let mut x1514: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1513, &mut x1514, x1512, x617, x909);
  let mut x1515: u32 = 0;
  let mut x1516: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1515, &mut x1516, 0x0, x1021, x1313);
  let mut x1517: u32 = 0;
  let mut x1518: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1517, &mut x1518, x1516, x1185, x1477);
  let mut x1519: u32 = 0;
  let mut x1520: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1519, &mut x1520, x1518, x1187, x1479);
  let mut x1521: u32 = 0;
  let mut x1522: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1521, &mut x1522, x1520, x1189, x1481);
  let mut x1523: u32 = 0;
  let mut x1524: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1523, &mut x1524, x1522, x1191, x1483);
  let mut x1525: u32 = 0;
  let mut x1526: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1525, &mut x1526, x1524, x1193, x1485);
  let mut x1527: u32 = 0;
  let mut x1528: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1527, &mut x1528, x1526, x1195, x1487);
  let mut x1529: u32 = 0;
  let mut x1530: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1529, &mut x1530, x1528, x1197, x1489);
  let mut x1531: u32 = 0;
  let mut x1532: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1531, &mut x1532, x1530, x1199, x1491);
  let mut x1533: u32 = 0;
  let mut x1534: fiat_25519_u1 = 0;
  fiat_25519_addcarryx_u32(&mut x1533, &mut x1534, x1532, x1201, x1493);
  let x1535: u32 = ((x1495 >> 30) | ((x1497 << 2) & 0xffffffff));
  let x1536: u32 = ((x1497 >> 30) | ((x1499 << 2) & 0xffffffff));
  let x1537: u32 = ((x1499 >> 30) | ((x1501 << 2) & 0xffffffff));
  let x1538: u32 = ((x1501 >> 30) | ((x1503 << 2) & 0xffffffff));
  let x1539: u32 = ((x1503 >> 30) | ((x1505 << 2) & 0xffffffff));
  let x1540: u32 = ((x1505 >> 30) | ((x1507 << 2) & 0xffffffff));
  let x1541: u32 = ((x1507 >> 30) | ((x1509 << 2) & 0xffffffff));
  let x1542: u32 = ((x1509 >> 30) | ((x1511 << 2) & 0xffffffff));
  let x1543: u32 = ((x1511 >> 30) | ((x1513 << 2) & 0xffffffff));
  let x1544: u32 = ((x1515 >> 30) | ((x1517 << 2) & 0xffffffff));
  let x1545: u32 = ((x1517 >> 30) | ((x1519 << 2) & 0xffffffff));
  let x1546: u32 = ((x1519 >> 30) | ((x1521 << 2) & 0xffffffff));
  let x1547: u32 = ((x1521 >> 30) | ((x1523 << 2) & 0xffffffff));
  let x1548: u32 = ((x1523 >> 30) | ((x1525 << 2) & 0xffffffff));
  let x1549: u32 = ((x1525 >> 30) | ((x1527 << 2) & 0xffffffff));
  let x1550: u32 = ((x1527 >> 30) | ((x1529 << 2) & 0xffffffff));
  let x1551: u32 = ((x1529 >> 30) | ((x1531 << 2) & 0xffffffff));
  let x1552: u32 = ((x1531 >> 30) | ((x1533 << 2) & 0xffffffff));
  let x1553: fiat_25519_u1 = ((((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32) >> 31) as fiat_25519_u1);
  let x1554: u32 = (((((!((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let x1555: u32 = ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32);
  let x1556: u32 = (x1555 >> 26);
  let x1557: u32 = (x1555 & 0x3ffffff);
  let x1558: u32 = (x1554 >> 26);
  let x1559: u32 = (x1554 & 0x3ffffff);
  let x1560: u32 = (0x7ffffda - x1559);
  let x1561: u32 = (0x3fffffe - x1558);
  let x1562: fiat_25519_u1 = ((x1560 >> 26) as fiat_25519_u1);
  let x1563: u32 = (x1560 & 0x3ffffff);
  let x1564: u32 = ((x1562 as u32) + x1561);
  let x1565: u32 = (x1564 & 0x1ffffff);
  let x1566: u32 = (x1563 + 0x13);
  let x1567: fiat_25519_u1 = ((x1566 >> 26) as fiat_25519_u1);
  let x1568: u32 = (x1566 & 0x3ffffff);
  let x1569: u32 = ((x1567 as u32) + x1565);
  let x1570: fiat_25519_u1 = ((x1569 >> 25) as fiat_25519_u1);
  let x1571: u32 = (x1569 & 0x1ffffff);
  let x1572: u32 = ((x1570 as u32) + 0x3ffffff);
  let mut x1573: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1573, x1553, x1557, x1568);
  let mut x1574: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1574, x1553, x1556, x1571);
  let mut x1575: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1575, x1553, (0x0 as u32), x1572);
  let mut x1576: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1576, x1553, (0x0 as u32), 0x1ffffff);
  let mut x1577: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1577, x1553, (0x0 as u32), 0x3ffffff);
  let mut x1578: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1578, x1553, (0x0 as u32), 0x1ffffff);
  let mut x1579: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1579, x1553, (0x0 as u32), 0x3ffffff);
  let mut x1580: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1580, x1553, (0x0 as u32), 0x1ffffff);
  let mut x1581: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1581, x1553, (0x0 as u32), 0x3ffffff);
  let mut x1582: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1582, x1553, (0x0 as u32), 0x1ffffff);
  let x1583: fiat_25519_u1 = ((((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32) >> 31) as fiat_25519_u1);
  let x1584: u32 = (((((!((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let x1585: u32 = ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32);
  let x1586: u32 = (x1585 >> 26);
  let x1587: u32 = (x1585 & 0x3ffffff);
  let x1588: u32 = (x1584 >> 26);
  let x1589: u32 = (x1584 & 0x3ffffff);
  let x1590: u32 = (0x7ffffda - x1589);
  let x1591: u32 = (0x3fffffe - x1588);
  let x1592: fiat_25519_u1 = ((x1590 >> 26) as fiat_25519_u1);
  let x1593: u32 = (x1590 & 0x3ffffff);
  let x1594: u32 = ((x1592 as u32) + x1591);
  let x1595: u32 = (x1594 & 0x1ffffff);
  let x1596: u32 = (x1593 + 0x13);
  let x1597: fiat_25519_u1 = ((x1596 >> 26) as fiat_25519_u1);
  let x1598: u32 = (x1596 & 0x3ffffff);
  let x1599: u32 = ((x1597 as u32) + x1595);
  let x1600: fiat_25519_u1 = ((x1599 >> 25) as fiat_25519_u1);
  let x1601: u32 = (x1599 & 0x1ffffff);
  let x1602: u32 = ((x1600 as u32) + 0x3ffffff);
  let mut x1603: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1603, x1583, x1587, x1598);
  let mut x1604: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1604, x1583, x1586, x1601);
  let mut x1605: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1605, x1583, (0x0 as u32), x1602);
  let mut x1606: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1606, x1583, (0x0 as u32), 0x1ffffff);
  let mut x1607: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1607, x1583, (0x0 as u32), 0x3ffffff);
  let mut x1608: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1608, x1583, (0x0 as u32), 0x1ffffff);
  let mut x1609: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1609, x1583, (0x0 as u32), 0x3ffffff);
  let mut x1610: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1610, x1583, (0x0 as u32), 0x1ffffff);
  let mut x1611: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1611, x1583, (0x0 as u32), 0x3ffffff);
  let mut x1612: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1612, x1583, (0x0 as u32), 0x1ffffff);
  let x1613: fiat_25519_u1 = ((((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32) >> 31) as fiat_25519_u1);
  let x1614: u32 = (((((!((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let x1615: u32 = ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32);
  let x1616: u32 = (x1615 >> 26);
  let x1617: u32 = (x1615 & 0x3ffffff);
  let x1618: u32 = (x1614 >> 26);
  let x1619: u32 = (x1614 & 0x3ffffff);
  let x1620: u32 = (0x7ffffda - x1619);
  let x1621: u32 = (0x3fffffe - x1618);
  let x1622: fiat_25519_u1 = ((x1620 >> 26) as fiat_25519_u1);
  let x1623: u32 = (x1620 & 0x3ffffff);
  let x1624: u32 = ((x1622 as u32) + x1621);
  let x1625: u32 = (x1624 & 0x1ffffff);
  let x1626: u32 = (x1623 + 0x13);
  let x1627: fiat_25519_u1 = ((x1626 >> 26) as fiat_25519_u1);
  let x1628: u32 = (x1626 & 0x3ffffff);
  let x1629: u32 = ((x1627 as u32) + x1625);
  let x1630: fiat_25519_u1 = ((x1629 >> 25) as fiat_25519_u1);
  let x1631: u32 = (x1629 & 0x1ffffff);
  let x1632: u32 = ((x1630 as u32) + 0x3ffffff);
  let mut x1633: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1633, x1613, x1617, x1628);
  let mut x1634: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1634, x1613, x1616, x1631);
  let mut x1635: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1635, x1613, (0x0 as u32), x1632);
  let mut x1636: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1636, x1613, (0x0 as u32), 0x1ffffff);
  let mut x1637: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1637, x1613, (0x0 as u32), 0x3ffffff);
  let mut x1638: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1638, x1613, (0x0 as u32), 0x1ffffff);
  let mut x1639: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1639, x1613, (0x0 as u32), 0x3ffffff);
  let mut x1640: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1640, x1613, (0x0 as u32), 0x1ffffff);
  let mut x1641: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1641, x1613, (0x0 as u32), 0x3ffffff);
  let mut x1642: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1642, x1613, (0x0 as u32), 0x1ffffff);
  let x1643: fiat_25519_u1 = ((((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32) >> 31) as fiat_25519_u1);
  let x1644: u32 = (((((!((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let x1645: u32 = ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32);
  let x1646: u32 = (x1645 >> 26);
  let x1647: u32 = (x1645 & 0x3ffffff);
  let x1648: u32 = (x1644 >> 26);
  let x1649: u32 = (x1644 & 0x3ffffff);
  let x1650: u32 = (0x7ffffda - x1649);
  let x1651: u32 = (0x3fffffe - x1648);
  let x1652: fiat_25519_u1 = ((x1650 >> 26) as fiat_25519_u1);
  let x1653: u32 = (x1650 & 0x3ffffff);
  let x1654: u32 = ((x1652 as u32) + x1651);
  let x1655: u32 = (x1654 & 0x1ffffff);
  let x1656: u32 = (x1653 + 0x13);
  let x1657: fiat_25519_u1 = ((x1656 >> 26) as fiat_25519_u1);
  let x1658: u32 = (x1656 & 0x3ffffff);
  let x1659: u32 = ((x1657 as u32) + x1655);
  let x1660: fiat_25519_u1 = ((x1659 >> 25) as fiat_25519_u1);
  let x1661: u32 = (x1659 & 0x1ffffff);
  let x1662: u32 = ((x1660 as u32) + 0x3ffffff);
  let mut x1663: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1663, x1643, x1647, x1658);
  let mut x1664: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1664, x1643, x1646, x1661);
  let mut x1665: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1665, x1643, (0x0 as u32), x1662);
  let mut x1666: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1666, x1643, (0x0 as u32), 0x1ffffff);
  let mut x1667: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1667, x1643, (0x0 as u32), 0x3ffffff);
  let mut x1668: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1668, x1643, (0x0 as u32), 0x1ffffff);
  let mut x1669: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1669, x1643, (0x0 as u32), 0x3ffffff);
  let mut x1670: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1670, x1643, (0x0 as u32), 0x1ffffff);
  let mut x1671: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1671, x1643, (0x0 as u32), 0x3ffffff);
  let mut x1672: u32 = 0;
  fiat_25519_cmovznz_u32(&mut x1672, x1643, (0x0 as u32), 0x1ffffff);
  let x1673: u64 = ((x1582 as u64) * (((arg3[9]) * 0x26) as u64));
  let x1674: u64 = ((x1582 as u64) * (((arg3[8]) * 0x13) as u64));
  let x1675: u64 = ((x1582 as u64) * (((arg3[7]) * 0x26) as u64));
  let x1676: u64 = ((x1582 as u64) * (((arg3[6]) * 0x13) as u64));
  let x1677: u64 = ((x1582 as u64) * (((arg3[5]) * 0x26) as u64));
  let x1678: u64 = ((x1582 as u64) * (((arg3[4]) * 0x13) as u64));
  let x1679: u64 = ((x1582 as u64) * (((arg3[3]) * 0x26) as u64));
  let x1680: u64 = ((x1582 as u64) * (((arg3[2]) * 0x13) as u64));
  let x1681: u64 = ((x1582 as u64) * (((arg3[1]) * 0x26) as u64));
  let x1682: u64 = ((x1581 as u64) * (((arg3[9]) * 0x13) as u64));
  let x1683: u64 = ((x1581 as u64) * (((arg3[8]) * 0x13) as u64));
  let x1684: u64 = ((x1581 as u64) * (((arg3[7]) * 0x13) as u64));
  let x1685: u64 = ((x1581 as u64) * (((arg3[6]) * 0x13) as u64));
  let x1686: u64 = ((x1581 as u64) * (((arg3[5]) * 0x13) as u64));
  let x1687: u64 = ((x1581 as u64) * (((arg3[4]) * 0x13) as u64));
  let x1688: u64 = ((x1581 as u64) * (((arg3[3]) * 0x13) as u64));
  let x1689: u64 = ((x1581 as u64) * (((arg3[2]) * 0x13) as u64));
  let x1690: u64 = ((x1580 as u64) * (((arg3[9]) * 0x26) as u64));
  let x1691: u64 = ((x1580 as u64) * (((arg3[8]) * 0x13) as u64));
  let x1692: u64 = ((x1580 as u64) * (((arg3[7]) * 0x26) as u64));
  let x1693: u64 = ((x1580 as u64) * (((arg3[6]) * 0x13) as u64));
  let x1694: u64 = ((x1580 as u64) * (((arg3[5]) * 0x26) as u64));
  let x1695: u64 = ((x1580 as u64) * (((arg3[4]) * 0x13) as u64));
  let x1696: u64 = ((x1580 as u64) * (((arg3[3]) * 0x26) as u64));
  let x1697: u64 = ((x1579 as u64) * (((arg3[9]) * 0x13) as u64));
  let x1698: u64 = ((x1579 as u64) * (((arg3[8]) * 0x13) as u64));
  let x1699: u64 = ((x1579 as u64) * (((arg3[7]) * 0x13) as u64));
  let x1700: u64 = ((x1579 as u64) * (((arg3[6]) * 0x13) as u64));
  let x1701: u64 = ((x1579 as u64) * (((arg3[5]) * 0x13) as u64));
  let x1702: u64 = ((x1579 as u64) * (((arg3[4]) * 0x13) as u64));
  let x1703: u64 = ((x1578 as u64) * (((arg3[9]) * 0x26) as u64));
  let x1704: u64 = ((x1578 as u64) * (((arg3[8]) * 0x13) as u64));
  let x1705: u64 = ((x1578 as u64) * (((arg3[7]) * 0x26) as u64));
  let x1706: u64 = ((x1578 as u64) * (((arg3[6]) * 0x13) as u64));
  let x1707: u64 = ((x1578 as u64) * (((arg3[5]) * 0x26) as u64));
  let x1708: u64 = ((x1577 as u64) * (((arg3[9]) * 0x13) as u64));
  let x1709: u64 = ((x1577 as u64) * (((arg3[8]) * 0x13) as u64));
  let x1710: u64 = ((x1577 as u64) * (((arg3[7]) * 0x13) as u64));
  let x1711: u64 = ((x1577 as u64) * (((arg3[6]) * 0x13) as u64));
  let x1712: u64 = ((x1576 as u64) * (((arg3[9]) * 0x26) as u64));
  let x1713: u64 = ((x1576 as u64) * (((arg3[8]) * 0x13) as u64));
  let x1714: u64 = ((x1576 as u64) * (((arg3[7]) * 0x26) as u64));
  let x1715: u64 = ((x1575 as u64) * (((arg3[9]) * 0x13) as u64));
  let x1716: u64 = ((x1575 as u64) * (((arg3[8]) * 0x13) as u64));
  let x1717: u64 = ((x1574 as u64) * (((arg3[9]) * 0x26) as u64));
  let x1718: u64 = ((x1582 as u64) * ((arg3[0]) as u64));
  let x1719: u64 = ((x1581 as u64) * ((arg3[1]) as u64));
  let x1720: u64 = ((x1581 as u64) * ((arg3[0]) as u64));
  let x1721: u64 = ((x1580 as u64) * ((arg3[2]) as u64));
  let x1722: u64 = ((x1580 as u64) * (((arg3[1]) * 0x2) as u64));
  let x1723: u64 = ((x1580 as u64) * ((arg3[0]) as u64));
  let x1724: u64 = ((x1579 as u64) * ((arg3[3]) as u64));
  let x1725: u64 = ((x1579 as u64) * ((arg3[2]) as u64));
  let x1726: u64 = ((x1579 as u64) * ((arg3[1]) as u64));
  let x1727: u64 = ((x1579 as u64) * ((arg3[0]) as u64));
  let x1728: u64 = ((x1578 as u64) * ((arg3[4]) as u64));
  let x1729: u64 = ((x1578 as u64) * (((arg3[3]) * 0x2) as u64));
  let x1730: u64 = ((x1578 as u64) * ((arg3[2]) as u64));
  let x1731: u64 = ((x1578 as u64) * (((arg3[1]) * 0x2) as u64));
  let x1732: u64 = ((x1578 as u64) * ((arg3[0]) as u64));
  let x1733: u64 = ((x1577 as u64) * ((arg3[5]) as u64));
  let x1734: u64 = ((x1577 as u64) * ((arg3[4]) as u64));
  let x1735: u64 = ((x1577 as u64) * ((arg3[3]) as u64));
  let x1736: u64 = ((x1577 as u64) * ((arg3[2]) as u64));
  let x1737: u64 = ((x1577 as u64) * ((arg3[1]) as u64));
  let x1738: u64 = ((x1577 as u64) * ((arg3[0]) as u64));
  let x1739: u64 = ((x1576 as u64) * ((arg3[6]) as u64));
  let x1740: u64 = ((x1576 as u64) * (((arg3[5]) * 0x2) as u64));
  let x1741: u64 = ((x1576 as u64) * ((arg3[4]) as u64));
  let x1742: u64 = ((x1576 as u64) * (((arg3[3]) * 0x2) as u64));
  let x1743: u64 = ((x1576 as u64) * ((arg3[2]) as u64));
  let x1744: u64 = ((x1576 as u64) * (((arg3[1]) * 0x2) as u64));
  let x1745: u64 = ((x1576 as u64) * ((arg3[0]) as u64));
  let x1746: u64 = ((x1575 as u64) * ((arg3[7]) as u64));
  let x1747: u64 = ((x1575 as u64) * ((arg3[6]) as u64));
  let x1748: u64 = ((x1575 as u64) * ((arg3[5]) as u64));
  let x1749: u64 = ((x1575 as u64) * ((arg3[4]) as u64));
  let x1750: u64 = ((x1575 as u64) * ((arg3[3]) as u64));
  let x1751: u64 = ((x1575 as u64) * ((arg3[2]) as u64));
  let x1752: u64 = ((x1575 as u64) * ((arg3[1]) as u64));
  let x1753: u64 = ((x1575 as u64) * ((arg3[0]) as u64));
  let x1754: u64 = ((x1574 as u64) * ((arg3[8]) as u64));
  let x1755: u64 = ((x1574 as u64) * (((arg3[7]) * 0x2) as u64));
  let x1756: u64 = ((x1574 as u64) * ((arg3[6]) as u64));
  let x1757: u64 = ((x1574 as u64) * (((arg3[5]) * 0x2) as u64));
  let x1758: u64 = ((x1574 as u64) * ((arg3[4]) as u64));
  let x1759: u64 = ((x1574 as u64) * (((arg3[3]) * 0x2) as u64));
  let x1760: u64 = ((x1574 as u64) * ((arg3[2]) as u64));
  let x1761: u64 = ((x1574 as u64) * (((arg3[1]) * 0x2) as u64));
  let x1762: u64 = ((x1574 as u64) * ((arg3[0]) as u64));
  let x1763: u64 = ((x1573 as u64) * ((arg3[9]) as u64));
  let x1764: u64 = ((x1573 as u64) * ((arg3[8]) as u64));
  let x1765: u64 = ((x1573 as u64) * ((arg3[7]) as u64));
  let x1766: u64 = ((x1573 as u64) * ((arg3[6]) as u64));
  let x1767: u64 = ((x1573 as u64) * ((arg3[5]) as u64));
  let x1768: u64 = ((x1573 as u64) * ((arg3[4]) as u64));
  let x1769: u64 = ((x1573 as u64) * ((arg3[3]) as u64));
  let x1770: u64 = ((x1573 as u64) * ((arg3[2]) as u64));
  let x1771: u64 = ((x1573 as u64) * ((arg3[1]) as u64));
  let x1772: u64 = ((x1573 as u64) * ((arg3[0]) as u64));
  let x1773: u64 = (x1772 + (x1717 + (x1716 + (x1714 + (x1711 + (x1707 + (x1702 + (x1696 + (x1689 + x1681)))))))));
  let x1774: u64 = (x1773 >> 26);
  let x1775: u32 = ((x1773 & (0x3ffffff as u64)) as u32);
  let x1776: u64 = (x1763 + (x1754 + (x1746 + (x1739 + (x1733 + (x1728 + (x1724 + (x1721 + (x1719 + x1718)))))))));
  let x1777: u64 = (x1764 + (x1755 + (x1747 + (x1740 + (x1734 + (x1729 + (x1725 + (x1722 + (x1720 + x1673)))))))));
  let x1778: u64 = (x1765 + (x1756 + (x1748 + (x1741 + (x1735 + (x1730 + (x1726 + (x1723 + (x1682 + x1674)))))))));
  let x1779: u64 = (x1766 + (x1757 + (x1749 + (x1742 + (x1736 + (x1731 + (x1727 + (x1690 + (x1683 + x1675)))))))));
  let x1780: u64 = (x1767 + (x1758 + (x1750 + (x1743 + (x1737 + (x1732 + (x1697 + (x1691 + (x1684 + x1676)))))))));
  let x1781: u64 = (x1768 + (x1759 + (x1751 + (x1744 + (x1738 + (x1703 + (x1698 + (x1692 + (x1685 + x1677)))))))));
  let x1782: u64 = (x1769 + (x1760 + (x1752 + (x1745 + (x1708 + (x1704 + (x1699 + (x1693 + (x1686 + x1678)))))))));
  let x1783: u64 = (x1770 + (x1761 + (x1753 + (x1712 + (x1709 + (x1705 + (x1700 + (x1694 + (x1687 + x1679)))))))));
  let x1784: u64 = (x1771 + (x1762 + (x1715 + (x1713 + (x1710 + (x1706 + (x1701 + (x1695 + (x1688 + x1680)))))))));
  let x1785: u64 = (x1774 + x1784);
  let x1786: u64 = (x1785 >> 25);
  let x1787: u32 = ((x1785 & (0x1ffffff as u64)) as u32);
  let x1788: u64 = (x1786 + x1783);
  let x1789: u64 = (x1788 >> 26);
  let x1790: u32 = ((x1788 & (0x3ffffff as u64)) as u32);
  let x1791: u64 = (x1789 + x1782);
  let x1792: u64 = (x1791 >> 25);
  let x1793: u32 = ((x1791 & (0x1ffffff as u64)) as u32);
  let x1794: u64 = (x1792 + x1781);
  let x1795: u64 = (x1794 >> 26);
  let x1796: u32 = ((x1794 & (0x3ffffff as u64)) as u32);
  let x1797: u64 = (x1795 + x1780);
  let x1798: u64 = (x1797 >> 25);
  let x1799: u32 = ((x1797 & (0x1ffffff as u64)) as u32);
  let x1800: u64 = (x1798 + x1779);
  let x1801: u32 = ((x1800 >> 26) as u32);
  let x1802: u32 = ((x1800 & (0x3ffffff as u64)) as u32);
  let x1803: u64 = ((x1801 as u64) + x1778);
  let x1804: u32 = ((x1803 >> 25) as u32);
  let x1805: u32 = ((x1803 & (0x1ffffff as u64)) as u32);
  let x1806: u64 = ((x1804 as u64) + x1777);
  let x1807: u32 = ((x1806 >> 26) as u32);
  let x1808: u32 = ((x1806 & (0x3ffffff as u64)) as u32);
  let x1809: u64 = ((x1807 as u64) + x1776);
  let x1810: u32 = ((x1809 >> 25) as u32);
  let x1811: u32 = ((x1809 & (0x1ffffff as u64)) as u32);
  let x1812: u64 = ((x1810 as u64) * (0x13 as u64));
  let x1813: u64 = ((x1775 as u64) + x1812);
  let x1814: u32 = ((x1813 >> 26) as u32);
  let x1815: u32 = ((x1813 & (0x3ffffff as u64)) as u32);
  let x1816: u32 = (x1814 + x1787);
  let x1817: fiat_25519_u1 = ((x1816 >> 25) as fiat_25519_u1);
  let x1818: u32 = (x1816 & 0x1ffffff);
  let x1819: u32 = ((x1817 as u32) + x1790);
  let x1820: u64 = ((x1612 as u64) * (((arg4[9]) * 0x26) as u64));
  let x1821: u64 = ((x1612 as u64) * (((arg4[8]) * 0x13) as u64));
  let x1822: u64 = ((x1612 as u64) * (((arg4[7]) * 0x26) as u64));
  let x1823: u64 = ((x1612 as u64) * (((arg4[6]) * 0x13) as u64));
  let x1824: u64 = ((x1612 as u64) * (((arg4[5]) * 0x26) as u64));
  let x1825: u64 = ((x1612 as u64) * (((arg4[4]) * 0x13) as u64));
  let x1826: u64 = ((x1612 as u64) * (((arg4[3]) * 0x26) as u64));
  let x1827: u64 = ((x1612 as u64) * (((arg4[2]) * 0x13) as u64));
  let x1828: u64 = ((x1612 as u64) * (((arg4[1]) * 0x26) as u64));
  let x1829: u64 = ((x1611 as u64) * (((arg4[9]) * 0x13) as u64));
  let x1830: u64 = ((x1611 as u64) * (((arg4[8]) * 0x13) as u64));
  let x1831: u64 = ((x1611 as u64) * (((arg4[7]) * 0x13) as u64));
  let x1832: u64 = ((x1611 as u64) * (((arg4[6]) * 0x13) as u64));
  let x1833: u64 = ((x1611 as u64) * (((arg4[5]) * 0x13) as u64));
  let x1834: u64 = ((x1611 as u64) * (((arg4[4]) * 0x13) as u64));
  let x1835: u64 = ((x1611 as u64) * (((arg4[3]) * 0x13) as u64));
  let x1836: u64 = ((x1611 as u64) * (((arg4[2]) * 0x13) as u64));
  let x1837: u64 = ((x1610 as u64) * (((arg4[9]) * 0x26) as u64));
  let x1838: u64 = ((x1610 as u64) * (((arg4[8]) * 0x13) as u64));
  let x1839: u64 = ((x1610 as u64) * (((arg4[7]) * 0x26) as u64));
  let x1840: u64 = ((x1610 as u64) * (((arg4[6]) * 0x13) as u64));
  let x1841: u64 = ((x1610 as u64) * (((arg4[5]) * 0x26) as u64));
  let x1842: u64 = ((x1610 as u64) * (((arg4[4]) * 0x13) as u64));
  let x1843: u64 = ((x1610 as u64) * (((arg4[3]) * 0x26) as u64));
  let x1844: u64 = ((x1609 as u64) * (((arg4[9]) * 0x13) as u64));
  let x1845: u64 = ((x1609 as u64) * (((arg4[8]) * 0x13) as u64));
  let x1846: u64 = ((x1609 as u64) * (((arg4[7]) * 0x13) as u64));
  let x1847: u64 = ((x1609 as u64) * (((arg4[6]) * 0x13) as u64));
  let x1848: u64 = ((x1609 as u64) * (((arg4[5]) * 0x13) as u64));
  let x1849: u64 = ((x1609 as u64) * (((arg4[4]) * 0x13) as u64));
  let x1850: u64 = ((x1608 as u64) * (((arg4[9]) * 0x26) as u64));
  let x1851: u64 = ((x1608 as u64) * (((arg4[8]) * 0x13) as u64));
  let x1852: u64 = ((x1608 as u64) * (((arg4[7]) * 0x26) as u64));
  let x1853: u64 = ((x1608 as u64) * (((arg4[6]) * 0x13) as u64));
  let x1854: u64 = ((x1608 as u64) * (((arg4[5]) * 0x26) as u64));
  let x1855: u64 = ((x1607 as u64) * (((arg4[9]) * 0x13) as u64));
  let x1856: u64 = ((x1607 as u64) * (((arg4[8]) * 0x13) as u64));
  let x1857: u64 = ((x1607 as u64) * (((arg4[7]) * 0x13) as u64));
  let x1858: u64 = ((x1607 as u64) * (((arg4[6]) * 0x13) as u64));
  let x1859: u64 = ((x1606 as u64) * (((arg4[9]) * 0x26) as u64));
  let x1860: u64 = ((x1606 as u64) * (((arg4[8]) * 0x13) as u64));
  let x1861: u64 = ((x1606 as u64) * (((arg4[7]) * 0x26) as u64));
  let x1862: u64 = ((x1605 as u64) * (((arg4[9]) * 0x13) as u64));
  let x1863: u64 = ((x1605 as u64) * (((arg4[8]) * 0x13) as u64));
  let x1864: u64 = ((x1604 as u64) * (((arg4[9]) * 0x26) as u64));
  let x1865: u64 = ((x1612 as u64) * ((arg4[0]) as u64));
  let x1866: u64 = ((x1611 as u64) * ((arg4[1]) as u64));
  let x1867: u64 = ((x1611 as u64) * ((arg4[0]) as u64));
  let x1868: u64 = ((x1610 as u64) * ((arg4[2]) as u64));
  let x1869: u64 = ((x1610 as u64) * (((arg4[1]) * 0x2) as u64));
  let x1870: u64 = ((x1610 as u64) * ((arg4[0]) as u64));
  let x1871: u64 = ((x1609 as u64) * ((arg4[3]) as u64));
  let x1872: u64 = ((x1609 as u64) * ((arg4[2]) as u64));
  let x1873: u64 = ((x1609 as u64) * ((arg4[1]) as u64));
  let x1874: u64 = ((x1609 as u64) * ((arg4[0]) as u64));
  let x1875: u64 = ((x1608 as u64) * ((arg4[4]) as u64));
  let x1876: u64 = ((x1608 as u64) * (((arg4[3]) * 0x2) as u64));
  let x1877: u64 = ((x1608 as u64) * ((arg4[2]) as u64));
  let x1878: u64 = ((x1608 as u64) * (((arg4[1]) * 0x2) as u64));
  let x1879: u64 = ((x1608 as u64) * ((arg4[0]) as u64));
  let x1880: u64 = ((x1607 as u64) * ((arg4[5]) as u64));
  let x1881: u64 = ((x1607 as u64) * ((arg4[4]) as u64));
  let x1882: u64 = ((x1607 as u64) * ((arg4[3]) as u64));
  let x1883: u64 = ((x1607 as u64) * ((arg4[2]) as u64));
  let x1884: u64 = ((x1607 as u64) * ((arg4[1]) as u64));
  let x1885: u64 = ((x1607 as u64) * ((arg4[0]) as u64));
  let x1886: u64 = ((x1606 as u64) * ((arg4[6]) as u64));
  let x1887: u64 = ((x1606 as u64) * (((arg4[5]) * 0x2) as u64));
  let x1888: u64 = ((x1606 as u64) * ((arg4[4]) as u64));
  let x1889: u64 = ((x1606 as u64) * (((arg4[3]) * 0x2) as u64));
  let x1890: u64 = ((x1606 as u64) * ((arg4[2]) as u64));
  let x1891: u64 = ((x1606 as u64) * (((arg4[1]) * 0x2) as u64));
  let x1892: u64 = ((x1606 as u64) * ((arg4[0]) as u64));
  let x1893: u64 = ((x1605 as u64) * ((arg4[7]) as u64));
  let x1894: u64 = ((x1605 as u64) * ((arg4[6]) as u64));
  let x1895: u64 = ((x1605 as u64) * ((arg4[5]) as u64));
  let x1896: u64 = ((x1605 as u64) * ((arg4[4]) as u64));
  let x1897: u64 = ((x1605 as u64) * ((arg4[3]) as u64));
  let x1898: u64 = ((x1605 as u64) * ((arg4[2]) as u64));
  let x1899: u64 = ((x1605 as u64) * ((arg4[1]) as u64));
  let x1900: u64 = ((x1605 as u64) * ((arg4[0]) as u64));
  let x1901: u64 = ((x1604 as u64) * ((arg4[8]) as u64));
  let x1902: u64 = ((x1604 as u64) * (((arg4[7]) * 0x2) as u64));
  let x1903: u64 = ((x1604 as u64) * ((arg4[6]) as u64));
  let x1904: u64 = ((x1604 as u64) * (((arg4[5]) * 0x2) as u64));
  let x1905: u64 = ((x1604 as u64) * ((arg4[4]) as u64));
  let x1906: u64 = ((x1604 as u64) * (((arg4[3]) * 0x2) as u64));
  let x1907: u64 = ((x1604 as u64) * ((arg4[2]) as u64));
  let x1908: u64 = ((x1604 as u64) * (((arg4[1]) * 0x2) as u64));
  let x1909: u64 = ((x1604 as u64) * ((arg4[0]) as u64));
  let x1910: u64 = ((x1603 as u64) * ((arg4[9]) as u64));
  let x1911: u64 = ((x1603 as u64) * ((arg4[8]) as u64));
  let x1912: u64 = ((x1603 as u64) * ((arg4[7]) as u64));
  let x1913: u64 = ((x1603 as u64) * ((arg4[6]) as u64));
  let x1914: u64 = ((x1603 as u64) * ((arg4[5]) as u64));
  let x1915: u64 = ((x1603 as u64) * ((arg4[4]) as u64));
  let x1916: u64 = ((x1603 as u64) * ((arg4[3]) as u64));
  let x1917: u64 = ((x1603 as u64) * ((arg4[2]) as u64));
  let x1918: u64 = ((x1603 as u64) * ((arg4[1]) as u64));
  let x1919: u64 = ((x1603 as u64) * ((arg4[0]) as u64));
  let x1920: u64 = (x1919 + (x1864 + (x1863 + (x1861 + (x1858 + (x1854 + (x1849 + (x1843 + (x1836 + x1828)))))))));
  let x1921: u64 = (x1920 >> 26);
  let x1922: u32 = ((x1920 & (0x3ffffff as u64)) as u32);
  let x1923: u64 = (x1910 + (x1901 + (x1893 + (x1886 + (x1880 + (x1875 + (x1871 + (x1868 + (x1866 + x1865)))))))));
  let x1924: u64 = (x1911 + (x1902 + (x1894 + (x1887 + (x1881 + (x1876 + (x1872 + (x1869 + (x1867 + x1820)))))))));
  let x1925: u64 = (x1912 + (x1903 + (x1895 + (x1888 + (x1882 + (x1877 + (x1873 + (x1870 + (x1829 + x1821)))))))));
  let x1926: u64 = (x1913 + (x1904 + (x1896 + (x1889 + (x1883 + (x1878 + (x1874 + (x1837 + (x1830 + x1822)))))))));
  let x1927: u64 = (x1914 + (x1905 + (x1897 + (x1890 + (x1884 + (x1879 + (x1844 + (x1838 + (x1831 + x1823)))))))));
  let x1928: u64 = (x1915 + (x1906 + (x1898 + (x1891 + (x1885 + (x1850 + (x1845 + (x1839 + (x1832 + x1824)))))))));
  let x1929: u64 = (x1916 + (x1907 + (x1899 + (x1892 + (x1855 + (x1851 + (x1846 + (x1840 + (x1833 + x1825)))))))));
  let x1930: u64 = (x1917 + (x1908 + (x1900 + (x1859 + (x1856 + (x1852 + (x1847 + (x1841 + (x1834 + x1826)))))))));
  let x1931: u64 = (x1918 + (x1909 + (x1862 + (x1860 + (x1857 + (x1853 + (x1848 + (x1842 + (x1835 + x1827)))))))));
  let x1932: u64 = (x1921 + x1931);
  let x1933: u64 = (x1932 >> 25);
  let x1934: u32 = ((x1932 & (0x1ffffff as u64)) as u32);
  let x1935: u64 = (x1933 + x1930);
  let x1936: u64 = (x1935 >> 26);
  let x1937: u32 = ((x1935 & (0x3ffffff as u64)) as u32);
  let x1938: u64 = (x1936 + x1929);
  let x1939: u64 = (x1938 >> 25);
  let x1940: u32 = ((x1938 & (0x1ffffff as u64)) as u32);
  let x1941: u64 = (x1939 + x1928);
  let x1942: u64 = (x1941 >> 26);
  let x1943: u32 = ((x1941 & (0x3ffffff as u64)) as u32);
  let x1944: u64 = (x1942 + x1927);
  let x1945: u64 = (x1944 >> 25);
  let x1946: u32 = ((x1944 & (0x1ffffff as u64)) as u32);
  let x1947: u64 = (x1945 + x1926);
  let x1948: u32 = ((x1947 >> 26) as u32);
  let x1949: u32 = ((x1947 & (0x3ffffff as u64)) as u32);
  let x1950: u64 = ((x1948 as u64) + x1925);
  let x1951: u32 = ((x1950 >> 25) as u32);
  let x1952: u32 = ((x1950 & (0x1ffffff as u64)) as u32);
  let x1953: u64 = ((x1951 as u64) + x1924);
  let x1954: u32 = ((x1953 >> 26) as u32);
  let x1955: u32 = ((x1953 & (0x3ffffff as u64)) as u32);
  let x1956: u64 = ((x1954 as u64) + x1923);
  let x1957: u32 = ((x1956 >> 25) as u32);
  let x1958: u32 = ((x1956 & (0x1ffffff as u64)) as u32);
  let x1959: u64 = ((x1957 as u64) * (0x13 as u64));
  let x1960: u64 = ((x1922 as u64) + x1959);
  let x1961: u32 = ((x1960 >> 26) as u32);
  let x1962: u32 = ((x1960 & (0x3ffffff as u64)) as u32);
  let x1963: u32 = (x1961 + x1934);
  let x1964: fiat_25519_u1 = ((x1963 >> 25) as fiat_25519_u1);
  let x1965: u32 = (x1963 & 0x1ffffff);
  let x1966: u32 = ((x1964 as u32) + x1937);
  let x1967: u64 = ((x1642 as u64) * (((arg3[9]) * 0x26) as u64));
  let x1968: u64 = ((x1642 as u64) * (((arg3[8]) * 0x13) as u64));
  let x1969: u64 = ((x1642 as u64) * (((arg3[7]) * 0x26) as u64));
  let x1970: u64 = ((x1642 as u64) * (((arg3[6]) * 0x13) as u64));
  let x1971: u64 = ((x1642 as u64) * (((arg3[5]) * 0x26) as u64));
  let x1972: u64 = ((x1642 as u64) * (((arg3[4]) * 0x13) as u64));
  let x1973: u64 = ((x1642 as u64) * (((arg3[3]) * 0x26) as u64));
  let x1974: u64 = ((x1642 as u64) * (((arg3[2]) * 0x13) as u64));
  let x1975: u64 = ((x1642 as u64) * (((arg3[1]) * 0x26) as u64));
  let x1976: u64 = ((x1641 as u64) * (((arg3[9]) * 0x13) as u64));
  let x1977: u64 = ((x1641 as u64) * (((arg3[8]) * 0x13) as u64));
  let x1978: u64 = ((x1641 as u64) * (((arg3[7]) * 0x13) as u64));
  let x1979: u64 = ((x1641 as u64) * (((arg3[6]) * 0x13) as u64));
  let x1980: u64 = ((x1641 as u64) * (((arg3[5]) * 0x13) as u64));
  let x1981: u64 = ((x1641 as u64) * (((arg3[4]) * 0x13) as u64));
  let x1982: u64 = ((x1641 as u64) * (((arg3[3]) * 0x13) as u64));
  let x1983: u64 = ((x1641 as u64) * (((arg3[2]) * 0x13) as u64));
  let x1984: u64 = ((x1640 as u64) * (((arg3[9]) * 0x26) as u64));
  let x1985: u64 = ((x1640 as u64) * (((arg3[8]) * 0x13) as u64));
  let x1986: u64 = ((x1640 as u64) * (((arg3[7]) * 0x26) as u64));
  let x1987: u64 = ((x1640 as u64) * (((arg3[6]) * 0x13) as u64));
  let x1988: u64 = ((x1640 as u64) * (((arg3[5]) * 0x26) as u64));
  let x1989: u64 = ((x1640 as u64) * (((arg3[4]) * 0x13) as u64));
  let x1990: u64 = ((x1640 as u64) * (((arg3[3]) * 0x26) as u64));
  let x1991: u64 = ((x1639 as u64) * (((arg3[9]) * 0x13) as u64));
  let x1992: u64 = ((x1639 as u64) * (((arg3[8]) * 0x13) as u64));
  let x1993: u64 = ((x1639 as u64) * (((arg3[7]) * 0x13) as u64));
  let x1994: u64 = ((x1639 as u64) * (((arg3[6]) * 0x13) as u64));
  let x1995: u64 = ((x1639 as u64) * (((arg3[5]) * 0x13) as u64));
  let x1996: u64 = ((x1639 as u64) * (((arg3[4]) * 0x13) as u64));
  let x1997: u64 = ((x1638 as u64) * (((arg3[9]) * 0x26) as u64));
  let x1998: u64 = ((x1638 as u64) * (((arg3[8]) * 0x13) as u64));
  let x1999: u64 = ((x1638 as u64) * (((arg3[7]) * 0x26) as u64));
  let x2000: u64 = ((x1638 as u64) * (((arg3[6]) * 0x13) as u64));
  let x2001: u64 = ((x1638 as u64) * (((arg3[5]) * 0x26) as u64));
  let x2002: u64 = ((x1637 as u64) * (((arg3[9]) * 0x13) as u64));
  let x2003: u64 = ((x1637 as u64) * (((arg3[8]) * 0x13) as u64));
  let x2004: u64 = ((x1637 as u64) * (((arg3[7]) * 0x13) as u64));
  let x2005: u64 = ((x1637 as u64) * (((arg3[6]) * 0x13) as u64));
  let x2006: u64 = ((x1636 as u64) * (((arg3[9]) * 0x26) as u64));
  let x2007: u64 = ((x1636 as u64) * (((arg3[8]) * 0x13) as u64));
  let x2008: u64 = ((x1636 as u64) * (((arg3[7]) * 0x26) as u64));
  let x2009: u64 = ((x1635 as u64) * (((arg3[9]) * 0x13) as u64));
  let x2010: u64 = ((x1635 as u64) * (((arg3[8]) * 0x13) as u64));
  let x2011: u64 = ((x1634 as u64) * (((arg3[9]) * 0x26) as u64));
  let x2012: u64 = ((x1642 as u64) * ((arg3[0]) as u64));
  let x2013: u64 = ((x1641 as u64) * ((arg3[1]) as u64));
  let x2014: u64 = ((x1641 as u64) * ((arg3[0]) as u64));
  let x2015: u64 = ((x1640 as u64) * ((arg3[2]) as u64));
  let x2016: u64 = ((x1640 as u64) * (((arg3[1]) * 0x2) as u64));
  let x2017: u64 = ((x1640 as u64) * ((arg3[0]) as u64));
  let x2018: u64 = ((x1639 as u64) * ((arg3[3]) as u64));
  let x2019: u64 = ((x1639 as u64) * ((arg3[2]) as u64));
  let x2020: u64 = ((x1639 as u64) * ((arg3[1]) as u64));
  let x2021: u64 = ((x1639 as u64) * ((arg3[0]) as u64));
  let x2022: u64 = ((x1638 as u64) * ((arg3[4]) as u64));
  let x2023: u64 = ((x1638 as u64) * (((arg3[3]) * 0x2) as u64));
  let x2024: u64 = ((x1638 as u64) * ((arg3[2]) as u64));
  let x2025: u64 = ((x1638 as u64) * (((arg3[1]) * 0x2) as u64));
  let x2026: u64 = ((x1638 as u64) * ((arg3[0]) as u64));
  let x2027: u64 = ((x1637 as u64) * ((arg3[5]) as u64));
  let x2028: u64 = ((x1637 as u64) * ((arg3[4]) as u64));
  let x2029: u64 = ((x1637 as u64) * ((arg3[3]) as u64));
  let x2030: u64 = ((x1637 as u64) * ((arg3[2]) as u64));
  let x2031: u64 = ((x1637 as u64) * ((arg3[1]) as u64));
  let x2032: u64 = ((x1637 as u64) * ((arg3[0]) as u64));
  let x2033: u64 = ((x1636 as u64) * ((arg3[6]) as u64));
  let x2034: u64 = ((x1636 as u64) * (((arg3[5]) * 0x2) as u64));
  let x2035: u64 = ((x1636 as u64) * ((arg3[4]) as u64));
  let x2036: u64 = ((x1636 as u64) * (((arg3[3]) * 0x2) as u64));
  let x2037: u64 = ((x1636 as u64) * ((arg3[2]) as u64));
  let x2038: u64 = ((x1636 as u64) * (((arg3[1]) * 0x2) as u64));
  let x2039: u64 = ((x1636 as u64) * ((arg3[0]) as u64));
  let x2040: u64 = ((x1635 as u64) * ((arg3[7]) as u64));
  let x2041: u64 = ((x1635 as u64) * ((arg3[6]) as u64));
  let x2042: u64 = ((x1635 as u64) * ((arg3[5]) as u64));
  let x2043: u64 = ((x1635 as u64) * ((arg3[4]) as u64));
  let x2044: u64 = ((x1635 as u64) * ((arg3[3]) as u64));
  let x2045: u64 = ((x1635 as u64) * ((arg3[2]) as u64));
  let x2046: u64 = ((x1635 as u64) * ((arg3[1]) as u64));
  let x2047: u64 = ((x1635 as u64) * ((arg3[0]) as u64));
  let x2048: u64 = ((x1634 as u64) * ((arg3[8]) as u64));
  let x2049: u64 = ((x1634 as u64) * (((arg3[7]) * 0x2) as u64));
  let x2050: u64 = ((x1634 as u64) * ((arg3[6]) as u64));
  let x2051: u64 = ((x1634 as u64) * (((arg3[5]) * 0x2) as u64));
  let x2052: u64 = ((x1634 as u64) * ((arg3[4]) as u64));
  let x2053: u64 = ((x1634 as u64) * (((arg3[3]) * 0x2) as u64));
  let x2054: u64 = ((x1634 as u64) * ((arg3[2]) as u64));
  let x2055: u64 = ((x1634 as u64) * (((arg3[1]) * 0x2) as u64));
  let x2056: u64 = ((x1634 as u64) * ((arg3[0]) as u64));
  let x2057: u64 = ((x1633 as u64) * ((arg3[9]) as u64));
  let x2058: u64 = ((x1633 as u64) * ((arg3[8]) as u64));
  let x2059: u64 = ((x1633 as u64) * ((arg3[7]) as u64));
  let x2060: u64 = ((x1633 as u64) * ((arg3[6]) as u64));
  let x2061: u64 = ((x1633 as u64) * ((arg3[5]) as u64));
  let x2062: u64 = ((x1633 as u64) * ((arg3[4]) as u64));
  let x2063: u64 = ((x1633 as u64) * ((arg3[3]) as u64));
  let x2064: u64 = ((x1633 as u64) * ((arg3[2]) as u64));
  let x2065: u64 = ((x1633 as u64) * ((arg3[1]) as u64));
  let x2066: u64 = ((x1633 as u64) * ((arg3[0]) as u64));
  let x2067: u64 = (x2066 + (x2011 + (x2010 + (x2008 + (x2005 + (x2001 + (x1996 + (x1990 + (x1983 + x1975)))))))));
  let x2068: u64 = (x2067 >> 26);
  let x2069: u32 = ((x2067 & (0x3ffffff as u64)) as u32);
  let x2070: u64 = (x2057 + (x2048 + (x2040 + (x2033 + (x2027 + (x2022 + (x2018 + (x2015 + (x2013 + x2012)))))))));
  let x2071: u64 = (x2058 + (x2049 + (x2041 + (x2034 + (x2028 + (x2023 + (x2019 + (x2016 + (x2014 + x1967)))))))));
  let x2072: u64 = (x2059 + (x2050 + (x2042 + (x2035 + (x2029 + (x2024 + (x2020 + (x2017 + (x1976 + x1968)))))))));
  let x2073: u64 = (x2060 + (x2051 + (x2043 + (x2036 + (x2030 + (x2025 + (x2021 + (x1984 + (x1977 + x1969)))))))));
  let x2074: u64 = (x2061 + (x2052 + (x2044 + (x2037 + (x2031 + (x2026 + (x1991 + (x1985 + (x1978 + x1970)))))))));
  let x2075: u64 = (x2062 + (x2053 + (x2045 + (x2038 + (x2032 + (x1997 + (x1992 + (x1986 + (x1979 + x1971)))))))));
  let x2076: u64 = (x2063 + (x2054 + (x2046 + (x2039 + (x2002 + (x1998 + (x1993 + (x1987 + (x1980 + x1972)))))))));
  let x2077: u64 = (x2064 + (x2055 + (x2047 + (x2006 + (x2003 + (x1999 + (x1994 + (x1988 + (x1981 + x1973)))))))));
  let x2078: u64 = (x2065 + (x2056 + (x2009 + (x2007 + (x2004 + (x2000 + (x1995 + (x1989 + (x1982 + x1974)))))))));
  let x2079: u64 = (x2068 + x2078);
  let x2080: u64 = (x2079 >> 25);
  let x2081: u32 = ((x2079 & (0x1ffffff as u64)) as u32);
  let x2082: u64 = (x2080 + x2077);
  let x2083: u64 = (x2082 >> 26);
  let x2084: u32 = ((x2082 & (0x3ffffff as u64)) as u32);
  let x2085: u64 = (x2083 + x2076);
  let x2086: u64 = (x2085 >> 25);
  let x2087: u32 = ((x2085 & (0x1ffffff as u64)) as u32);
  let x2088: u64 = (x2086 + x2075);
  let x2089: u64 = (x2088 >> 26);
  let x2090: u32 = ((x2088 & (0x3ffffff as u64)) as u32);
  let x2091: u64 = (x2089 + x2074);
  let x2092: u64 = (x2091 >> 25);
  let x2093: u32 = ((x2091 & (0x1ffffff as u64)) as u32);
  let x2094: u64 = (x2092 + x2073);
  let x2095: u32 = ((x2094 >> 26) as u32);
  let x2096: u32 = ((x2094 & (0x3ffffff as u64)) as u32);
  let x2097: u64 = ((x2095 as u64) + x2072);
  let x2098: u32 = ((x2097 >> 25) as u32);
  let x2099: u32 = ((x2097 & (0x1ffffff as u64)) as u32);
  let x2100: u64 = ((x2098 as u64) + x2071);
  let x2101: u32 = ((x2100 >> 26) as u32);
  let x2102: u32 = ((x2100 & (0x3ffffff as u64)) as u32);
  let x2103: u64 = ((x2101 as u64) + x2070);
  let x2104: u32 = ((x2103 >> 25) as u32);
  let x2105: u32 = ((x2103 & (0x1ffffff as u64)) as u32);
  let x2106: u64 = ((x2104 as u64) * (0x13 as u64));
  let x2107: u64 = ((x2069 as u64) + x2106);
  let x2108: u32 = ((x2107 >> 26) as u32);
  let x2109: u32 = ((x2107 & (0x3ffffff as u64)) as u32);
  let x2110: u32 = (x2108 + x2081);
  let x2111: fiat_25519_u1 = ((x2110 >> 25) as fiat_25519_u1);
  let x2112: u32 = (x2110 & 0x1ffffff);
  let x2113: u32 = ((x2111 as u32) + x2084);
  let x2114: u64 = ((x1672 as u64) * (((arg4[9]) * 0x26) as u64));
  let x2115: u64 = ((x1672 as u64) * (((arg4[8]) * 0x13) as u64));
  let x2116: u64 = ((x1672 as u64) * (((arg4[7]) * 0x26) as u64));
  let x2117: u64 = ((x1672 as u64) * (((arg4[6]) * 0x13) as u64));
  let x2118: u64 = ((x1672 as u64) * (((arg4[5]) * 0x26) as u64));
  let x2119: u64 = ((x1672 as u64) * (((arg4[4]) * 0x13) as u64));
  let x2120: u64 = ((x1672 as u64) * (((arg4[3]) * 0x26) as u64));
  let x2121: u64 = ((x1672 as u64) * (((arg4[2]) * 0x13) as u64));
  let x2122: u64 = ((x1672 as u64) * (((arg4[1]) * 0x26) as u64));
  let x2123: u64 = ((x1671 as u64) * (((arg4[9]) * 0x13) as u64));
  let x2124: u64 = ((x1671 as u64) * (((arg4[8]) * 0x13) as u64));
  let x2125: u64 = ((x1671 as u64) * (((arg4[7]) * 0x13) as u64));
  let x2126: u64 = ((x1671 as u64) * (((arg4[6]) * 0x13) as u64));
  let x2127: u64 = ((x1671 as u64) * (((arg4[5]) * 0x13) as u64));
  let x2128: u64 = ((x1671 as u64) * (((arg4[4]) * 0x13) as u64));
  let x2129: u64 = ((x1671 as u64) * (((arg4[3]) * 0x13) as u64));
  let x2130: u64 = ((x1671 as u64) * (((arg4[2]) * 0x13) as u64));
  let x2131: u64 = ((x1670 as u64) * (((arg4[9]) * 0x26) as u64));
  let x2132: u64 = ((x1670 as u64) * (((arg4[8]) * 0x13) as u64));
  let x2133: u64 = ((x1670 as u64) * (((arg4[7]) * 0x26) as u64));
  let x2134: u64 = ((x1670 as u64) * (((arg4[6]) * 0x13) as u64));
  let x2135: u64 = ((x1670 as u64) * (((arg4[5]) * 0x26) as u64));
  let x2136: u64 = ((x1670 as u64) * (((arg4[4]) * 0x13) as u64));
  let x2137: u64 = ((x1670 as u64) * (((arg4[3]) * 0x26) as u64));
  let x2138: u64 = ((x1669 as u64) * (((arg4[9]) * 0x13) as u64));
  let x2139: u64 = ((x1669 as u64) * (((arg4[8]) * 0x13) as u64));
  let x2140: u64 = ((x1669 as u64) * (((arg4[7]) * 0x13) as u64));
  let x2141: u64 = ((x1669 as u64) * (((arg4[6]) * 0x13) as u64));
  let x2142: u64 = ((x1669 as u64) * (((arg4[5]) * 0x13) as u64));
  let x2143: u64 = ((x1669 as u64) * (((arg4[4]) * 0x13) as u64));
  let x2144: u64 = ((x1668 as u64) * (((arg4[9]) * 0x26) as u64));
  let x2145: u64 = ((x1668 as u64) * (((arg4[8]) * 0x13) as u64));
  let x2146: u64 = ((x1668 as u64) * (((arg4[7]) * 0x26) as u64));
  let x2147: u64 = ((x1668 as u64) * (((arg4[6]) * 0x13) as u64));
  let x2148: u64 = ((x1668 as u64) * (((arg4[5]) * 0x26) as u64));
  let x2149: u64 = ((x1667 as u64) * (((arg4[9]) * 0x13) as u64));
  let x2150: u64 = ((x1667 as u64) * (((arg4[8]) * 0x13) as u64));
  let x2151: u64 = ((x1667 as u64) * (((arg4[7]) * 0x13) as u64));
  let x2152: u64 = ((x1667 as u64) * (((arg4[6]) * 0x13) as u64));
  let x2153: u64 = ((x1666 as u64) * (((arg4[9]) * 0x26) as u64));
  let x2154: u64 = ((x1666 as u64) * (((arg4[8]) * 0x13) as u64));
  let x2155: u64 = ((x1666 as u64) * (((arg4[7]) * 0x26) as u64));
  let x2156: u64 = ((x1665 as u64) * (((arg4[9]) * 0x13) as u64));
  let x2157: u64 = ((x1665 as u64) * (((arg4[8]) * 0x13) as u64));
  let x2158: u64 = ((x1664 as u64) * (((arg4[9]) * 0x26) as u64));
  let x2159: u64 = ((x1672 as u64) * ((arg4[0]) as u64));
  let x2160: u64 = ((x1671 as u64) * ((arg4[1]) as u64));
  let x2161: u64 = ((x1671 as u64) * ((arg4[0]) as u64));
  let x2162: u64 = ((x1670 as u64) * ((arg4[2]) as u64));
  let x2163: u64 = ((x1670 as u64) * (((arg4[1]) * 0x2) as u64));
  let x2164: u64 = ((x1670 as u64) * ((arg4[0]) as u64));
  let x2165: u64 = ((x1669 as u64) * ((arg4[3]) as u64));
  let x2166: u64 = ((x1669 as u64) * ((arg4[2]) as u64));
  let x2167: u64 = ((x1669 as u64) * ((arg4[1]) as u64));
  let x2168: u64 = ((x1669 as u64) * ((arg4[0]) as u64));
  let x2169: u64 = ((x1668 as u64) * ((arg4[4]) as u64));
  let x2170: u64 = ((x1668 as u64) * (((arg4[3]) * 0x2) as u64));
  let x2171: u64 = ((x1668 as u64) * ((arg4[2]) as u64));
  let x2172: u64 = ((x1668 as u64) * (((arg4[1]) * 0x2) as u64));
  let x2173: u64 = ((x1668 as u64) * ((arg4[0]) as u64));
  let x2174: u64 = ((x1667 as u64) * ((arg4[5]) as u64));
  let x2175: u64 = ((x1667 as u64) * ((arg4[4]) as u64));
  let x2176: u64 = ((x1667 as u64) * ((arg4[3]) as u64));
  let x2177: u64 = ((x1667 as u64) * ((arg4[2]) as u64));
  let x2178: u64 = ((x1667 as u64) * ((arg4[1]) as u64));
  let x2179: u64 = ((x1667 as u64) * ((arg4[0]) as u64));
  let x2180: u64 = ((x1666 as u64) * ((arg4[6]) as u64));
  let x2181: u64 = ((x1666 as u64) * (((arg4[5]) * 0x2) as u64));
  let x2182: u64 = ((x1666 as u64) * ((arg4[4]) as u64));
  let x2183: u64 = ((x1666 as u64) * (((arg4[3]) * 0x2) as u64));
  let x2184: u64 = ((x1666 as u64) * ((arg4[2]) as u64));
  let x2185: u64 = ((x1666 as u64) * (((arg4[1]) * 0x2) as u64));
  let x2186: u64 = ((x1666 as u64) * ((arg4[0]) as u64));
  let x2187: u64 = ((x1665 as u64) * ((arg4[7]) as u64));
  let x2188: u64 = ((x1665 as u64) * ((arg4[6]) as u64));
  let x2189: u64 = ((x1665 as u64) * ((arg4[5]) as u64));
  let x2190: u64 = ((x1665 as u64) * ((arg4[4]) as u64));
  let x2191: u64 = ((x1665 as u64) * ((arg4[3]) as u64));
  let x2192: u64 = ((x1665 as u64) * ((arg4[2]) as u64));
  let x2193: u64 = ((x1665 as u64) * ((arg4[1]) as u64));
  let x2194: u64 = ((x1665 as u64) * ((arg4[0]) as u64));
  let x2195: u64 = ((x1664 as u64) * ((arg4[8]) as u64));
  let x2196: u64 = ((x1664 as u64) * (((arg4[7]) * 0x2) as u64));
  let x2197: u64 = ((x1664 as u64) * ((arg4[6]) as u64));
  let x2198: u64 = ((x1664 as u64) * (((arg4[5]) * 0x2) as u64));
  let x2199: u64 = ((x1664 as u64) * ((arg4[4]) as u64));
  let x2200: u64 = ((x1664 as u64) * (((arg4[3]) * 0x2) as u64));
  let x2201: u64 = ((x1664 as u64) * ((arg4[2]) as u64));
  let x2202: u64 = ((x1664 as u64) * (((arg4[1]) * 0x2) as u64));
  let x2203: u64 = ((x1664 as u64) * ((arg4[0]) as u64));
  let x2204: u64 = ((x1663 as u64) * ((arg4[9]) as u64));
  let x2205: u64 = ((x1663 as u64) * ((arg4[8]) as u64));
  let x2206: u64 = ((x1663 as u64) * ((arg4[7]) as u64));
  let x2207: u64 = ((x1663 as u64) * ((arg4[6]) as u64));
  let x2208: u64 = ((x1663 as u64) * ((arg4[5]) as u64));
  let x2209: u64 = ((x1663 as u64) * ((arg4[4]) as u64));
  let x2210: u64 = ((x1663 as u64) * ((arg4[3]) as u64));
  let x2211: u64 = ((x1663 as u64) * ((arg4[2]) as u64));
  let x2212: u64 = ((x1663 as u64) * ((arg4[1]) as u64));
  let x2213: u64 = ((x1663 as u64) * ((arg4[0]) as u64));
  let x2214: u64 = (x2213 + (x2158 + (x2157 + (x2155 + (x2152 + (x2148 + (x2143 + (x2137 + (x2130 + x2122)))))))));
  let x2215: u64 = (x2214 >> 26);
  let x2216: u32 = ((x2214 & (0x3ffffff as u64)) as u32);
  let x2217: u64 = (x2204 + (x2195 + (x2187 + (x2180 + (x2174 + (x2169 + (x2165 + (x2162 + (x2160 + x2159)))))))));
  let x2218: u64 = (x2205 + (x2196 + (x2188 + (x2181 + (x2175 + (x2170 + (x2166 + (x2163 + (x2161 + x2114)))))))));
  let x2219: u64 = (x2206 + (x2197 + (x2189 + (x2182 + (x2176 + (x2171 + (x2167 + (x2164 + (x2123 + x2115)))))))));
  let x2220: u64 = (x2207 + (x2198 + (x2190 + (x2183 + (x2177 + (x2172 + (x2168 + (x2131 + (x2124 + x2116)))))))));
  let x2221: u64 = (x2208 + (x2199 + (x2191 + (x2184 + (x2178 + (x2173 + (x2138 + (x2132 + (x2125 + x2117)))))))));
  let x2222: u64 = (x2209 + (x2200 + (x2192 + (x2185 + (x2179 + (x2144 + (x2139 + (x2133 + (x2126 + x2118)))))))));
  let x2223: u64 = (x2210 + (x2201 + (x2193 + (x2186 + (x2149 + (x2145 + (x2140 + (x2134 + (x2127 + x2119)))))))));
  let x2224: u64 = (x2211 + (x2202 + (x2194 + (x2153 + (x2150 + (x2146 + (x2141 + (x2135 + (x2128 + x2120)))))))));
  let x2225: u64 = (x2212 + (x2203 + (x2156 + (x2154 + (x2151 + (x2147 + (x2142 + (x2136 + (x2129 + x2121)))))))));
  let x2226: u64 = (x2215 + x2225);
  let x2227: u64 = (x2226 >> 25);
  let x2228: u32 = ((x2226 & (0x1ffffff as u64)) as u32);
  let x2229: u64 = (x2227 + x2224);
  let x2230: u64 = (x2229 >> 26);
  let x2231: u32 = ((x2229 & (0x3ffffff as u64)) as u32);
  let x2232: u64 = (x2230 + x2223);
  let x2233: u64 = (x2232 >> 25);
  let x2234: u32 = ((x2232 & (0x1ffffff as u64)) as u32);
  let x2235: u64 = (x2233 + x2222);
  let x2236: u64 = (x2235 >> 26);
  let x2237: u32 = ((x2235 & (0x3ffffff as u64)) as u32);
  let x2238: u64 = (x2236 + x2221);
  let x2239: u64 = (x2238 >> 25);
  let x2240: u32 = ((x2238 & (0x1ffffff as u64)) as u32);
  let x2241: u64 = (x2239 + x2220);
  let x2242: u32 = ((x2241 >> 26) as u32);
  let x2243: u32 = ((x2241 & (0x3ffffff as u64)) as u32);
  let x2244: u64 = ((x2242 as u64) + x2219);
  let x2245: u32 = ((x2244 >> 25) as u32);
  let x2246: u32 = ((x2244 & (0x1ffffff as u64)) as u32);
  let x2247: u64 = ((x2245 as u64) + x2218);
  let x2248: u32 = ((x2247 >> 26) as u32);
  let x2249: u32 = ((x2247 & (0x3ffffff as u64)) as u32);
  let x2250: u64 = ((x2248 as u64) + x2217);
  let x2251: u32 = ((x2250 >> 25) as u32);
  let x2252: u32 = ((x2250 & (0x1ffffff as u64)) as u32);
  let x2253: u64 = ((x2251 as u64) * (0x13 as u64));
  let x2254: u64 = ((x2216 as u64) + x2253);
  let x2255: u32 = ((x2254 >> 26) as u32);
  let x2256: u32 = ((x2254 & (0x3ffffff as u64)) as u32);
  let x2257: u32 = (x2255 + x2228);
  let x2258: fiat_25519_u1 = ((x2257 >> 25) as fiat_25519_u1);
  let x2259: u32 = (x2257 & 0x1ffffff);
  let x2260: u32 = ((x2258 as u32) + x2231);
  let x2261: u32 = (x1815 + x1962);
  let x2262: u32 = (x1818 + x1965);
  let x2263: u32 = (x1819 + x1966);
  let x2264: u32 = (x1793 + x1940);
  let x2265: u32 = (x1796 + x1943);
  let x2266: u32 = (x1799 + x1946);
  let x2267: u32 = (x1802 + x1949);
  let x2268: u32 = (x1805 + x1952);
  let x2269: u32 = (x1808 + x1955);
  let x2270: u32 = (x1811 + x1958);
  let x2271: fiat_25519_u1 = ((x2261 >> 26) as fiat_25519_u1);
  let x2272: u32 = (x2261 & 0x3ffffff);
  let x2273: u32 = ((x2271 as u32) + x2262);
  let x2274: fiat_25519_u1 = ((x2273 >> 25) as fiat_25519_u1);
  let x2275: u32 = (x2273 & 0x1ffffff);
  let x2276: u32 = ((x2274 as u32) + x2263);
  let x2277: u32 = (x2276 >> 26);
  let x2278: u32 = (x2276 & 0x3ffffff);
  let x2279: u32 = (x2277 + x2264);
  let x2280: u32 = (x2279 >> 25);
  let x2281: u32 = (x2279 & 0x1ffffff);
  let x2282: u32 = (x2280 + x2265);
  let x2283: u32 = (x2282 >> 26);
  let x2284: u32 = (x2282 & 0x3ffffff);
  let x2285: u32 = (x2283 + x2266);
  let x2286: u32 = (x2285 >> 25);
  let x2287: u32 = (x2285 & 0x1ffffff);
  let x2288: u32 = (x2286 + x2267);
  let x2289: u32 = (x2288 >> 26);
  let x2290: u32 = (x2288 & 0x3ffffff);
  let x2291: u32 = (x2289 + x2268);
  let x2292: u32 = (x2291 >> 25);
  let x2293: u32 = (x2291 & 0x1ffffff);
  let x2294: u32 = (x2292 + x2269);
  let x2295: u32 = (x2294 >> 26);
  let x2296: u32 = (x2294 & 0x3ffffff);
  let x2297: u32 = (x2295 + x2270);
  let x2298: u32 = (x2297 >> 25);
  let x2299: u32 = (x2297 & 0x1ffffff);
  let x2300: u32 = (x2298 * 0x13);
  let x2301: u32 = (x2272 + x2300);
  let x2302: fiat_25519_u1 = ((x2301 >> 26) as fiat_25519_u1);
  let x2303: u32 = (x2301 & 0x3ffffff);
  let x2304: u32 = ((x2302 as u32) + x2275);
  let x2305: fiat_25519_u1 = ((x2304 >> 25) as fiat_25519_u1);
  let x2306: u32 = (x2304 & 0x1ffffff);
  let x2307: u32 = ((x2305 as u32) + x2278);
  let x2308: u32 = (x2109 + x2256);
  let x2309: u32 = (x2112 + x2259);
  let x2310: u32 = (x2113 + x2260);
  let x2311: u32 = (x2087 + x2234);
  let x2312: u32 = (x2090 + x2237);
  let x2313: u32 = (x2093 + x2240);
  let x2314: u32 = (x2096 + x2243);
  let x2315: u32 = (x2099 + x2246);
  let x2316: u32 = (x2102 + x2249);
  let x2317: u32 = (x2105 + x2252);
  let x2318: fiat_25519_u1 = ((x2308 >> 26) as fiat_25519_u1);
  let x2319: u32 = (x2308 & 0x3ffffff);
  let x2320: u32 = ((x2318 as u32) + x2309);
  let x2321: fiat_25519_u1 = ((x2320 >> 25) as fiat_25519_u1);
  let x2322: u32 = (x2320 & 0x1ffffff);
  let x2323: u32 = ((x2321 as u32) + x2310);
  let x2324: u32 = (x2323 >> 26);
  let x2325: u32 = (x2323 & 0x3ffffff);
  let x2326: u32 = (x2324 + x2311);
  let x2327: u32 = (x2326 >> 25);
  let x2328: u32 = (x2326 & 0x1ffffff);
  let x2329: u32 = (x2327 + x2312);
  let x2330: u32 = (x2329 >> 26);
  let x2331: u32 = (x2329 & 0x3ffffff);
  let x2332: u32 = (x2330 + x2313);
  let x2333: u32 = (x2332 >> 25);
  let x2334: u32 = (x2332 & 0x1ffffff);
  let x2335: u32 = (x2333 + x2314);
  let x2336: u32 = (x2335 >> 26);
  let x2337: u32 = (x2335 & 0x3ffffff);
  let x2338: u32 = (x2336 + x2315);
  let x2339: u32 = (x2338 >> 25);
  let x2340: u32 = (x2338 & 0x1ffffff);
  let x2341: u32 = (x2339 + x2316);
  let x2342: u32 = (x2341 >> 26);
  let x2343: u32 = (x2341 & 0x3ffffff);
  let x2344: u32 = (x2342 + x2317);
  let x2345: u32 = (x2344 >> 25);
  let x2346: u32 = (x2344 & 0x1ffffff);
  let x2347: u32 = (x2345 * 0x13);
  let x2348: u32 = (x2319 + x2347);
  let x2349: fiat_25519_u1 = ((x2348 >> 26) as fiat_25519_u1);
  let x2350: u32 = (x2348 & 0x3ffffff);
  let x2351: u32 = ((x2349 as u32) + x2322);
  let x2352: fiat_25519_u1 = ((x2351 >> 25) as fiat_25519_u1);
  let x2353: u32 = (x2351 & 0x1ffffff);
  let x2354: u32 = ((x2352 as u32) + x2325);
  out1[0] = x1535;
  out1[1] = x1536;
  out1[2] = x1537;
  out1[3] = x1538;
  out1[4] = x1539;
  out1[5] = x1540;
  out1[6] = x1541;
  out1[7] = x1542;
  out1[8] = x1543;
  out2[0] = x1544;
  out2[1] = x1545;
  out2[2] = x1546;
  out2[3] = x1547;
  out2[4] = x1548;
  out2[5] = x1549;
  out2[6] = x1550;
  out2[7] = x1551;
  out2[8] = x1552;
  out3[0] = x2303;
  out3[1] = x2306;
  out3[2] = x2307;
  out3[3] = x2281;
  out3[4] = x2284;
  out3[5] = x2287;
  out3[6] = x2290;
  out3[7] = x2293;
  out3[8] = x2296;
  out3[9] = x2299;
  out4[0] = x2350;
  out4[1] = x2353;
  out4[2] = x2354;
  out4[3] = x2328;
  out4[4] = x2331;
  out4[5] = x2334;
  out4[6] = x2337;
  out4[7] = x2340;
  out4[8] = x2343;
  out4[9] = x2346;
}

/// The function fiat_25519_carry_scmul_121666 multiplies a field element by 121666 and reduces the result.
/// Postconditions:
///   eval out1 mod m = (121666 * eval arg1) mod m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000], [0x0 ~> 0xc000000], [0x0 ~> 0x6000000]]
/// Output Bounds:
///   out1: [[0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000], [0x0 ~> 0x4000000], [0x0 ~> 0x2000000]]
#[inline]
pub fn fiat_25519_carry_scmul_121666(out1: &mut [u32; 10], arg1: &[u32; 10]) -> () {
  let x1: u64 = ((0x1db42 as u64) * ((arg1[9]) as u64));
  let x2: u64 = ((0x1db42 as u64) * ((arg1[8]) as u64));
  let x3: u64 = ((0x1db42 as u64) * ((arg1[7]) as u64));
  let x4: u64 = ((0x1db42 as u64) * ((arg1[6]) as u64));
  let x5: u64 = ((0x1db42 as u64) * ((arg1[5]) as u64));
  let x6: u64 = ((0x1db42 as u64) * ((arg1[4]) as u64));
  let x7: u64 = ((0x1db42 as u64) * ((arg1[3]) as u64));
  let x8: u64 = ((0x1db42 as u64) * ((arg1[2]) as u64));
  let x9: u64 = ((0x1db42 as u64) * ((arg1[1]) as u64));
  let x10: u64 = ((0x1db42 as u64) * ((arg1[0]) as u64));
  let x11: u32 = ((x10 >> 26) as u32);
  let x12: u32 = ((x10 & (0x3ffffff as u64)) as u32);
  let x13: u64 = ((x11 as u64) + x9);
  let x14: u32 = ((x13 >> 25) as u32);
  let x15: u32 = ((x13 & (0x1ffffff as u64)) as u32);
  let x16: u64 = ((x14 as u64) + x8);
  let x17: u32 = ((x16 >> 26) as u32);
  let x18: u32 = ((x16 & (0x3ffffff as u64)) as u32);
  let x19: u64 = ((x17 as u64) + x7);
  let x20: u32 = ((x19 >> 25) as u32);
  let x21: u32 = ((x19 & (0x1ffffff as u64)) as u32);
  let x22: u64 = ((x20 as u64) + x6);
  let x23: u32 = ((x22 >> 26) as u32);
  let x24: u32 = ((x22 & (0x3ffffff as u64)) as u32);
  let x25: u64 = ((x23 as u64) + x5);
  let x26: u32 = ((x25 >> 25) as u32);
  let x27: u32 = ((x25 & (0x1ffffff as u64)) as u32);
  let x28: u64 = ((x26 as u64) + x4);
  let x29: u32 = ((x28 >> 26) as u32);
  let x30: u32 = ((x28 & (0x3ffffff as u64)) as u32);
  let x31: u64 = ((x29 as u64) + x3);
  let x32: u32 = ((x31 >> 25) as u32);
  let x33: u32 = ((x31 & (0x1ffffff as u64)) as u32);
  let x34: u64 = ((x32 as u64) + x2);
  let x35: u32 = ((x34 >> 26) as u32);
  let x36: u32 = ((x34 & (0x3ffffff as u64)) as u32);
  let x37: u64 = ((x35 as u64) + x1);
  let x38: u32 = ((x37 >> 25) as u32);
  let x39: u32 = ((x37 & (0x1ffffff as u64)) as u32);
  let x40: u32 = (x38 * 0x13);
  let x41: u32 = (x12 + x40);
  let x42: fiat_25519_u1 = ((x41 >> 26) as fiat_25519_u1);
  let x43: u32 = (x41 & 0x3ffffff);
  let x44: u32 = ((x42 as u32) + x15);
  let x45: fiat_25519_u1 = ((x44 >> 25) as fiat_25519_u1);
  let x46: u32 = (x44 & 0x1ffffff);
  let x47: u32 = ((x45 as u32) + x18);
  out1[0] = x43;
  out1[1] = x46;
  out1[2] = x47;
  out1[3] = x21;
  out1[4] = x24;
  out1[5] = x27;
  out1[6] = x30;
  out1[7] = x33;
  out1[8] = x36;
  out1[9] = x39;
}

