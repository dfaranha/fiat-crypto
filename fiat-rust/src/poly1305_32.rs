//! Autogenerated: src/ExtractionOCaml/unsaturated_solinas --lang Rust poly1305 32 '(auto)' '2^130 - 5' carry_mul carry_square carry add sub opp selectznz to_bytes from_bytes one word_to_solina msat sat_from_bytes divstep divstep_precomp twos_complement_word_full_divstep asr_mw_sub2 sat_add word_sat_mul jumpdivstep_precomp outer_loop_body
//! curve description: poly1305
//! machine_wordsize = 32 (from "32")
//! requested operations: carry_mul, carry_square, carry, add, sub, opp, selectznz, to_bytes, from_bytes, one, word_to_solina, msat, sat_from_bytes, divstep, divstep_precomp, twos_complement_word_full_divstep, asr_mw_sub2, sat_add, word_sat_mul, jumpdivstep_precomp, outer_loop_body
//! n = 5 (from "(auto)")
//! s-c = 2^130 - [(1, 5)] (from "2^130 - 5")
//! tight_bounds_multiplier = 1 (from "")
//!
//! Computed values:
//! carry_chain = [0, 1, 2, 3, 4, 0, 1]
//! eval z = z[0] + (z[1] << 26) + (z[2] << 52) + (z[3] << 78) + (z[4] << 104)
//! bytes_eval z = z[0] + (z[1] << 8) + (z[2] << 16) + (z[3] << 24) + (z[4] << 32) + (z[5] << 40) + (z[6] << 48) + (z[7] << 56) + (z[8] << 64) + (z[9] << 72) + (z[10] << 80) + (z[11] << 88) + (z[12] << 96) + (z[13] << 104) + (z[14] << 112) + (z[15] << 120) + (z[16] << 128)
//! balance = [0x7fffff6, 0x7fffffe, 0x7fffffe, 0x7fffffe, 0x7fffffe]

#![allow(unused_parens)]
#[allow(non_camel_case_types)]

pub type fiat_poly1305_u1 = u8;
pub type fiat_poly1305_i1 = i8;
pub type fiat_poly1305_u2 = u8;
pub type fiat_poly1305_i2 = i8;


/// The function fiat_poly1305_addcarryx_u32 is an addition with carry.
/// Postconditions:
///   out1 = (arg1 + arg2 + arg3) mod 2^32
///   out2 = ⌊(arg1 + arg2 + arg3) / 2^32⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffff]
///   arg3: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [0x0 ~> 0x1]
#[inline]
pub fn fiat_poly1305_addcarryx_u32(out1: &mut u32, out2: &mut fiat_poly1305_u1, arg1: fiat_poly1305_u1, arg2: u32, arg3: u32) -> () {
  let x1: u64 = (((arg1 as u64) + (arg2 as u64)) + (arg3 as u64));
  let x2: u32 = ((x1 & (0xffffffff as u64)) as u32);
  let x3: fiat_poly1305_u1 = ((x1 >> 32) as fiat_poly1305_u1);
  *out1 = x2;
  *out2 = x3;
}

/// The function fiat_poly1305_subborrowx_u32 is a subtraction with borrow.
/// Postconditions:
///   out1 = (-arg1 + arg2 + -arg3) mod 2^32
///   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^32⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffff]
///   arg3: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [0x0 ~> 0x1]
#[inline]
pub fn fiat_poly1305_subborrowx_u32(out1: &mut u32, out2: &mut fiat_poly1305_u1, arg1: fiat_poly1305_u1, arg2: u32, arg3: u32) -> () {
  let x1: i64 = (((arg2 as i64) - (arg1 as i64)) - (arg3 as i64));
  let x2: fiat_poly1305_i1 = ((x1 >> 32) as fiat_poly1305_i1);
  let x3: u32 = ((x1 & (0xffffffff as i64)) as u32);
  *out1 = x3;
  *out2 = (((0x0 as fiat_poly1305_i2) - (x2 as fiat_poly1305_i2)) as fiat_poly1305_u1);
}

/// The function fiat_poly1305_addcarryx_u26 is an addition with carry.
/// Postconditions:
///   out1 = (arg1 + arg2 + arg3) mod 2^26
///   out2 = ⌊(arg1 + arg2 + arg3) / 2^26⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0x3ffffff]
///   arg3: [0x0 ~> 0x3ffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0x3ffffff]
///   out2: [0x0 ~> 0x1]
#[inline]
pub fn fiat_poly1305_addcarryx_u26(out1: &mut u32, out2: &mut fiat_poly1305_u1, arg1: fiat_poly1305_u1, arg2: u32, arg3: u32) -> () {
  let x1: u32 = (((arg1 as u32) + arg2) + arg3);
  let x2: u32 = (x1 & 0x3ffffff);
  let x3: fiat_poly1305_u1 = ((x1 >> 26) as fiat_poly1305_u1);
  *out1 = x2;
  *out2 = x3;
}

/// The function fiat_poly1305_subborrowx_u26 is a subtraction with borrow.
/// Postconditions:
///   out1 = (-arg1 + arg2 + -arg3) mod 2^26
///   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^26⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0x3ffffff]
///   arg3: [0x0 ~> 0x3ffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0x3ffffff]
///   out2: [0x0 ~> 0x1]
#[inline]
pub fn fiat_poly1305_subborrowx_u26(out1: &mut u32, out2: &mut fiat_poly1305_u1, arg1: fiat_poly1305_u1, arg2: u32, arg3: u32) -> () {
  let x1: i32 = ((((((arg2 as i64) - (arg1 as i64)) as i32) as i64) - (arg3 as i64)) as i32);
  let x2: fiat_poly1305_i1 = ((x1 >> 26) as fiat_poly1305_i1);
  let x3: u32 = (((x1 as i64) & (0x3ffffff as i64)) as u32);
  *out1 = x3;
  *out2 = (((0x0 as fiat_poly1305_i2) - (x2 as fiat_poly1305_i2)) as fiat_poly1305_u1);
}

/// The function fiat_poly1305_mulx_u32 is a multiplication, returning the full double-width result.
/// Postconditions:
///   out1 = (arg1 * arg2) mod 2^32
///   out2 = ⌊arg1 * arg2 / 2^32⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffff]
///   arg2: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [0x0 ~> 0xffffffff]
#[inline]
pub fn fiat_poly1305_mulx_u32(out1: &mut u32, out2: &mut u32, arg1: u32, arg2: u32) -> () {
  let x1: u64 = ((arg1 as u64) * (arg2 as u64));
  let x2: u32 = ((x1 & (0xffffffff as u64)) as u32);
  let x3: u32 = ((x1 >> 32) as u32);
  *out1 = x2;
  *out2 = x3;
}

/// The function fiat_poly1305_cmovznz_u32 is a single-word conditional move.
/// Postconditions:
///   out1 = (if arg1 = 0 then arg2 else arg3)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffff]
///   arg3: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
#[inline]
pub fn fiat_poly1305_cmovznz_u32(out1: &mut u32, arg1: fiat_poly1305_u1, arg2: u32, arg3: u32) -> () {
  let x1: fiat_poly1305_u1 = (!(!arg1));
  let x2: u32 = ((((((0x0 as fiat_poly1305_i2) - (x1 as fiat_poly1305_i2)) as fiat_poly1305_i1) as i64) & (0xffffffff as i64)) as u32);
  let x3: u32 = ((x2 & arg3) | ((!x2) & arg2));
  *out1 = x3;
}

/// The function fiat_poly1305_cmovznz_u1 is a single-word conditional move.
/// Postconditions:
///   out1 = (if arg1 = 0 then arg2 else arg3)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0x1]
///   arg3: [0x0 ~> 0x1]
/// Output Bounds:
///   out1: [0x0 ~> 0x1]
#[inline]
pub fn fiat_poly1305_cmovznz_u1(out1: &mut fiat_poly1305_u1, arg1: fiat_poly1305_u1, arg2: fiat_poly1305_u1, arg3: fiat_poly1305_u1) -> () {
  let x1: fiat_poly1305_u1 = (!(!arg1));
  let x2: fiat_poly1305_u1 = ((((((0x0 as fiat_poly1305_i2) - (x1 as fiat_poly1305_i2)) as fiat_poly1305_i1) as fiat_poly1305_i2) & (0x1 as fiat_poly1305_i2)) as fiat_poly1305_u1);
  let x3: fiat_poly1305_u1 = ((x2 & arg3) | ((!x2) & arg2));
  *out1 = x3;
}

/// The function fiat_poly1305_carry_mul multiplies two field elements and reduces the result.
/// Postconditions:
///   eval out1 mod m = (eval arg1 * eval arg2) mod m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xc000000], [0x0 ~> 0xc000000], [0x0 ~> 0xc000000], [0x0 ~> 0xc000000], [0x0 ~> 0xc000000]]
///   arg2: [[0x0 ~> 0xc000000], [0x0 ~> 0xc000000], [0x0 ~> 0xc000000], [0x0 ~> 0xc000000], [0x0 ~> 0xc000000]]
/// Output Bounds:
///   out1: [[0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000]]
#[inline]
pub fn fiat_poly1305_carry_mul(out1: &mut [u32; 5], arg1: &[u32; 5], arg2: &[u32; 5]) -> () {
  let x1: u64 = (((arg1[4]) as u64) * (((arg2[4]) * 0x5) as u64));
  let x2: u64 = (((arg1[4]) as u64) * (((arg2[3]) * 0x5) as u64));
  let x3: u64 = (((arg1[4]) as u64) * (((arg2[2]) * 0x5) as u64));
  let x4: u64 = (((arg1[4]) as u64) * (((arg2[1]) * 0x5) as u64));
  let x5: u64 = (((arg1[3]) as u64) * (((arg2[4]) * 0x5) as u64));
  let x6: u64 = (((arg1[3]) as u64) * (((arg2[3]) * 0x5) as u64));
  let x7: u64 = (((arg1[3]) as u64) * (((arg2[2]) * 0x5) as u64));
  let x8: u64 = (((arg1[2]) as u64) * (((arg2[4]) * 0x5) as u64));
  let x9: u64 = (((arg1[2]) as u64) * (((arg2[3]) * 0x5) as u64));
  let x10: u64 = (((arg1[1]) as u64) * (((arg2[4]) * 0x5) as u64));
  let x11: u64 = (((arg1[4]) as u64) * ((arg2[0]) as u64));
  let x12: u64 = (((arg1[3]) as u64) * ((arg2[1]) as u64));
  let x13: u64 = (((arg1[3]) as u64) * ((arg2[0]) as u64));
  let x14: u64 = (((arg1[2]) as u64) * ((arg2[2]) as u64));
  let x15: u64 = (((arg1[2]) as u64) * ((arg2[1]) as u64));
  let x16: u64 = (((arg1[2]) as u64) * ((arg2[0]) as u64));
  let x17: u64 = (((arg1[1]) as u64) * ((arg2[3]) as u64));
  let x18: u64 = (((arg1[1]) as u64) * ((arg2[2]) as u64));
  let x19: u64 = (((arg1[1]) as u64) * ((arg2[1]) as u64));
  let x20: u64 = (((arg1[1]) as u64) * ((arg2[0]) as u64));
  let x21: u64 = (((arg1[0]) as u64) * ((arg2[4]) as u64));
  let x22: u64 = (((arg1[0]) as u64) * ((arg2[3]) as u64));
  let x23: u64 = (((arg1[0]) as u64) * ((arg2[2]) as u64));
  let x24: u64 = (((arg1[0]) as u64) * ((arg2[1]) as u64));
  let x25: u64 = (((arg1[0]) as u64) * ((arg2[0]) as u64));
  let x26: u64 = (x25 + (x10 + (x9 + (x7 + x4))));
  let x27: u64 = (x26 >> 26);
  let x28: u32 = ((x26 & (0x3ffffff as u64)) as u32);
  let x29: u64 = (x21 + (x17 + (x14 + (x12 + x11))));
  let x30: u64 = (x22 + (x18 + (x15 + (x13 + x1))));
  let x31: u64 = (x23 + (x19 + (x16 + (x5 + x2))));
  let x32: u64 = (x24 + (x20 + (x8 + (x6 + x3))));
  let x33: u64 = (x27 + x32);
  let x34: u64 = (x33 >> 26);
  let x35: u32 = ((x33 & (0x3ffffff as u64)) as u32);
  let x36: u64 = (x34 + x31);
  let x37: u64 = (x36 >> 26);
  let x38: u32 = ((x36 & (0x3ffffff as u64)) as u32);
  let x39: u64 = (x37 + x30);
  let x40: u64 = (x39 >> 26);
  let x41: u32 = ((x39 & (0x3ffffff as u64)) as u32);
  let x42: u64 = (x40 + x29);
  let x43: u32 = ((x42 >> 26) as u32);
  let x44: u32 = ((x42 & (0x3ffffff as u64)) as u32);
  let x45: u64 = ((x43 as u64) * (0x5 as u64));
  let x46: u64 = ((x28 as u64) + x45);
  let x47: u32 = ((x46 >> 26) as u32);
  let x48: u32 = ((x46 & (0x3ffffff as u64)) as u32);
  let x49: u32 = (x47 + x35);
  let x50: fiat_poly1305_u1 = ((x49 >> 26) as fiat_poly1305_u1);
  let x51: u32 = (x49 & 0x3ffffff);
  let x52: u32 = ((x50 as u32) + x38);
  out1[0] = x48;
  out1[1] = x51;
  out1[2] = x52;
  out1[3] = x41;
  out1[4] = x44;
}

/// The function fiat_poly1305_carry_square squares a field element and reduces the result.
/// Postconditions:
///   eval out1 mod m = (eval arg1 * eval arg1) mod m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xc000000], [0x0 ~> 0xc000000], [0x0 ~> 0xc000000], [0x0 ~> 0xc000000], [0x0 ~> 0xc000000]]
/// Output Bounds:
///   out1: [[0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000]]
#[inline]
pub fn fiat_poly1305_carry_square(out1: &mut [u32; 5], arg1: &[u32; 5]) -> () {
  let x1: u32 = ((arg1[4]) * 0x5);
  let x2: u32 = (x1 * 0x2);
  let x3: u32 = ((arg1[4]) * 0x2);
  let x4: u32 = ((arg1[3]) * 0x5);
  let x5: u32 = (x4 * 0x2);
  let x6: u32 = ((arg1[3]) * 0x2);
  let x7: u32 = ((arg1[2]) * 0x2);
  let x8: u32 = ((arg1[1]) * 0x2);
  let x9: u64 = (((arg1[4]) as u64) * (x1 as u64));
  let x10: u64 = (((arg1[3]) as u64) * (x2 as u64));
  let x11: u64 = (((arg1[3]) as u64) * (x4 as u64));
  let x12: u64 = (((arg1[2]) as u64) * (x2 as u64));
  let x13: u64 = (((arg1[2]) as u64) * (x5 as u64));
  let x14: u64 = (((arg1[2]) as u64) * ((arg1[2]) as u64));
  let x15: u64 = (((arg1[1]) as u64) * (x2 as u64));
  let x16: u64 = (((arg1[1]) as u64) * (x6 as u64));
  let x17: u64 = (((arg1[1]) as u64) * (x7 as u64));
  let x18: u64 = (((arg1[1]) as u64) * ((arg1[1]) as u64));
  let x19: u64 = (((arg1[0]) as u64) * (x3 as u64));
  let x20: u64 = (((arg1[0]) as u64) * (x6 as u64));
  let x21: u64 = (((arg1[0]) as u64) * (x7 as u64));
  let x22: u64 = (((arg1[0]) as u64) * (x8 as u64));
  let x23: u64 = (((arg1[0]) as u64) * ((arg1[0]) as u64));
  let x24: u64 = (x23 + (x15 + x13));
  let x25: u64 = (x24 >> 26);
  let x26: u32 = ((x24 & (0x3ffffff as u64)) as u32);
  let x27: u64 = (x19 + (x16 + x14));
  let x28: u64 = (x20 + (x17 + x9));
  let x29: u64 = (x21 + (x18 + x10));
  let x30: u64 = (x22 + (x12 + x11));
  let x31: u64 = (x25 + x30);
  let x32: u64 = (x31 >> 26);
  let x33: u32 = ((x31 & (0x3ffffff as u64)) as u32);
  let x34: u64 = (x32 + x29);
  let x35: u64 = (x34 >> 26);
  let x36: u32 = ((x34 & (0x3ffffff as u64)) as u32);
  let x37: u64 = (x35 + x28);
  let x38: u64 = (x37 >> 26);
  let x39: u32 = ((x37 & (0x3ffffff as u64)) as u32);
  let x40: u64 = (x38 + x27);
  let x41: u32 = ((x40 >> 26) as u32);
  let x42: u32 = ((x40 & (0x3ffffff as u64)) as u32);
  let x43: u64 = ((x41 as u64) * (0x5 as u64));
  let x44: u64 = ((x26 as u64) + x43);
  let x45: u32 = ((x44 >> 26) as u32);
  let x46: u32 = ((x44 & (0x3ffffff as u64)) as u32);
  let x47: u32 = (x45 + x33);
  let x48: fiat_poly1305_u1 = ((x47 >> 26) as fiat_poly1305_u1);
  let x49: u32 = (x47 & 0x3ffffff);
  let x50: u32 = ((x48 as u32) + x36);
  out1[0] = x46;
  out1[1] = x49;
  out1[2] = x50;
  out1[3] = x39;
  out1[4] = x42;
}

/// The function fiat_poly1305_carry reduces a field element.
/// Postconditions:
///   eval out1 mod m = eval arg1 mod m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xc000000], [0x0 ~> 0xc000000], [0x0 ~> 0xc000000], [0x0 ~> 0xc000000], [0x0 ~> 0xc000000]]
/// Output Bounds:
///   out1: [[0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000]]
#[inline]
pub fn fiat_poly1305_carry(out1: &mut [u32; 5], arg1: &[u32; 5]) -> () {
  let x1: u32 = (arg1[0]);
  let x2: u32 = ((x1 >> 26) + (arg1[1]));
  let x3: u32 = ((x2 >> 26) + (arg1[2]));
  let x4: u32 = ((x3 >> 26) + (arg1[3]));
  let x5: u32 = ((x4 >> 26) + (arg1[4]));
  let x6: u32 = ((x1 & 0x3ffffff) + ((x5 >> 26) * 0x5));
  let x7: u32 = ((((x6 >> 26) as fiat_poly1305_u1) as u32) + (x2 & 0x3ffffff));
  let x8: u32 = (x6 & 0x3ffffff);
  let x9: u32 = (x7 & 0x3ffffff);
  let x10: u32 = ((((x7 >> 26) as fiat_poly1305_u1) as u32) + (x3 & 0x3ffffff));
  let x11: u32 = (x4 & 0x3ffffff);
  let x12: u32 = (x5 & 0x3ffffff);
  out1[0] = x8;
  out1[1] = x9;
  out1[2] = x10;
  out1[3] = x11;
  out1[4] = x12;
}

/// The function fiat_poly1305_add adds two field elements.
/// Postconditions:
///   eval out1 mod m = (eval arg1 + eval arg2) mod m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000]]
///   arg2: [[0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xc000000], [0x0 ~> 0xc000000], [0x0 ~> 0xc000000], [0x0 ~> 0xc000000], [0x0 ~> 0xc000000]]
#[inline]
pub fn fiat_poly1305_add(out1: &mut [u32; 5], arg1: &[u32; 5], arg2: &[u32; 5]) -> () {
  let x1: u32 = ((arg1[0]) + (arg2[0]));
  let x2: u32 = ((arg1[1]) + (arg2[1]));
  let x3: u32 = ((arg1[2]) + (arg2[2]));
  let x4: u32 = ((arg1[3]) + (arg2[3]));
  let x5: u32 = ((arg1[4]) + (arg2[4]));
  out1[0] = x1;
  out1[1] = x2;
  out1[2] = x3;
  out1[3] = x4;
  out1[4] = x5;
}

/// The function fiat_poly1305_sub subtracts two field elements.
/// Postconditions:
///   eval out1 mod m = (eval arg1 - eval arg2) mod m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000]]
///   arg2: [[0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xc000000], [0x0 ~> 0xc000000], [0x0 ~> 0xc000000], [0x0 ~> 0xc000000], [0x0 ~> 0xc000000]]
#[inline]
pub fn fiat_poly1305_sub(out1: &mut [u32; 5], arg1: &[u32; 5], arg2: &[u32; 5]) -> () {
  let x1: u32 = ((0x7fffff6 + (arg1[0])) - (arg2[0]));
  let x2: u32 = ((0x7fffffe + (arg1[1])) - (arg2[1]));
  let x3: u32 = ((0x7fffffe + (arg1[2])) - (arg2[2]));
  let x4: u32 = ((0x7fffffe + (arg1[3])) - (arg2[3]));
  let x5: u32 = ((0x7fffffe + (arg1[4])) - (arg2[4]));
  out1[0] = x1;
  out1[1] = x2;
  out1[2] = x3;
  out1[3] = x4;
  out1[4] = x5;
}

/// The function fiat_poly1305_opp negates a field element.
/// Postconditions:
///   eval out1 mod m = -eval arg1 mod m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xc000000], [0x0 ~> 0xc000000], [0x0 ~> 0xc000000], [0x0 ~> 0xc000000], [0x0 ~> 0xc000000]]
#[inline]
pub fn fiat_poly1305_opp(out1: &mut [u32; 5], arg1: &[u32; 5]) -> () {
  let x1: u32 = (0x7fffff6 - (arg1[0]));
  let x2: u32 = (0x7fffffe - (arg1[1]));
  let x3: u32 = (0x7fffffe - (arg1[2]));
  let x4: u32 = (0x7fffffe - (arg1[3]));
  let x5: u32 = (0x7fffffe - (arg1[4]));
  out1[0] = x1;
  out1[1] = x2;
  out1[2] = x3;
  out1[3] = x4;
  out1[4] = x5;
}

/// The function fiat_poly1305_selectznz is a multi-limb conditional select.
/// Postconditions:
///   eval out1 = (if arg1 = 0 then eval arg2 else eval arg3)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_poly1305_selectznz(out1: &mut [u32; 5], arg1: fiat_poly1305_u1, arg2: &[u32; 5], arg3: &[u32; 5]) -> () {
  let mut x1: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x1, arg1, (arg2[0]), (arg3[0]));
  let mut x2: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x2, arg1, (arg2[1]), (arg3[1]));
  let mut x3: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x3, arg1, (arg2[2]), (arg3[2]));
  let mut x4: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x4, arg1, (arg2[3]), (arg3[3]));
  let mut x5: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x5, arg1, (arg2[4]), (arg3[4]));
  out1[0] = x1;
  out1[1] = x2;
  out1[2] = x3;
  out1[3] = x4;
  out1[4] = x5;
}

/// The function fiat_poly1305_to_bytes serializes a field element to bytes in little-endian order.
/// Postconditions:
///   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..16]
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0x3]]
#[inline]
pub fn fiat_poly1305_to_bytes(out1: &mut [u8; 17], arg1: &[u32; 5]) -> () {
  let mut x1: u32 = 0;
  let mut x2: fiat_poly1305_u1 = 0;
  fiat_poly1305_subborrowx_u26(&mut x1, &mut x2, 0x0, (arg1[0]), 0x3fffffb);
  let mut x3: u32 = 0;
  let mut x4: fiat_poly1305_u1 = 0;
  fiat_poly1305_subborrowx_u26(&mut x3, &mut x4, x2, (arg1[1]), 0x3ffffff);
  let mut x5: u32 = 0;
  let mut x6: fiat_poly1305_u1 = 0;
  fiat_poly1305_subborrowx_u26(&mut x5, &mut x6, x4, (arg1[2]), 0x3ffffff);
  let mut x7: u32 = 0;
  let mut x8: fiat_poly1305_u1 = 0;
  fiat_poly1305_subborrowx_u26(&mut x7, &mut x8, x6, (arg1[3]), 0x3ffffff);
  let mut x9: u32 = 0;
  let mut x10: fiat_poly1305_u1 = 0;
  fiat_poly1305_subborrowx_u26(&mut x9, &mut x10, x8, (arg1[4]), 0x3ffffff);
  let mut x11: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x11, x10, (0x0 as u32), 0xffffffff);
  let mut x12: u32 = 0;
  let mut x13: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u26(&mut x12, &mut x13, 0x0, x1, (x11 & 0x3fffffb));
  let mut x14: u32 = 0;
  let mut x15: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u26(&mut x14, &mut x15, x13, x3, (x11 & 0x3ffffff));
  let mut x16: u32 = 0;
  let mut x17: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u26(&mut x16, &mut x17, x15, x5, (x11 & 0x3ffffff));
  let mut x18: u32 = 0;
  let mut x19: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u26(&mut x18, &mut x19, x17, x7, (x11 & 0x3ffffff));
  let mut x20: u32 = 0;
  let mut x21: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u26(&mut x20, &mut x21, x19, x9, (x11 & 0x3ffffff));
  let x22: u32 = (x18 << 6);
  let x23: u32 = (x16 << 4);
  let x24: u32 = (x14 << 2);
  let x25: u8 = ((x12 & (0xff as u32)) as u8);
  let x26: u32 = (x12 >> 8);
  let x27: u8 = ((x26 & (0xff as u32)) as u8);
  let x28: u32 = (x26 >> 8);
  let x29: u8 = ((x28 & (0xff as u32)) as u8);
  let x30: u8 = ((x28 >> 8) as u8);
  let x31: u32 = (x24 + (x30 as u32));
  let x32: u8 = ((x31 & (0xff as u32)) as u8);
  let x33: u32 = (x31 >> 8);
  let x34: u8 = ((x33 & (0xff as u32)) as u8);
  let x35: u32 = (x33 >> 8);
  let x36: u8 = ((x35 & (0xff as u32)) as u8);
  let x37: u8 = ((x35 >> 8) as u8);
  let x38: u32 = (x23 + (x37 as u32));
  let x39: u8 = ((x38 & (0xff as u32)) as u8);
  let x40: u32 = (x38 >> 8);
  let x41: u8 = ((x40 & (0xff as u32)) as u8);
  let x42: u32 = (x40 >> 8);
  let x43: u8 = ((x42 & (0xff as u32)) as u8);
  let x44: u8 = ((x42 >> 8) as u8);
  let x45: u32 = (x22 + (x44 as u32));
  let x46: u8 = ((x45 & (0xff as u32)) as u8);
  let x47: u32 = (x45 >> 8);
  let x48: u8 = ((x47 & (0xff as u32)) as u8);
  let x49: u32 = (x47 >> 8);
  let x50: u8 = ((x49 & (0xff as u32)) as u8);
  let x51: u8 = ((x49 >> 8) as u8);
  let x52: u8 = ((x20 & (0xff as u32)) as u8);
  let x53: u32 = (x20 >> 8);
  let x54: u8 = ((x53 & (0xff as u32)) as u8);
  let x55: u32 = (x53 >> 8);
  let x56: u8 = ((x55 & (0xff as u32)) as u8);
  let x57: u8 = ((x55 >> 8) as u8);
  out1[0] = x25;
  out1[1] = x27;
  out1[2] = x29;
  out1[3] = x32;
  out1[4] = x34;
  out1[5] = x36;
  out1[6] = x39;
  out1[7] = x41;
  out1[8] = x43;
  out1[9] = x46;
  out1[10] = x48;
  out1[11] = x50;
  out1[12] = x51;
  out1[13] = x52;
  out1[14] = x54;
  out1[15] = x56;
  out1[16] = x57;
}

/// The function fiat_poly1305_from_bytes deserializes a field element from bytes in little-endian order.
/// Postconditions:
///   eval out1 mod m = bytes_eval arg1 mod m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0x3]]
/// Output Bounds:
///   out1: [[0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000]]
#[inline]
pub fn fiat_poly1305_from_bytes(out1: &mut [u32; 5], arg1: &[u8; 17]) -> () {
  let x1: u32 = (((arg1[16]) as u32) << 24);
  let x2: u32 = (((arg1[15]) as u32) << 16);
  let x3: u32 = (((arg1[14]) as u32) << 8);
  let x4: u8 = (arg1[13]);
  let x5: u32 = (((arg1[12]) as u32) << 18);
  let x6: u32 = (((arg1[11]) as u32) << 10);
  let x7: u32 = (((arg1[10]) as u32) << 2);
  let x8: u32 = (((arg1[9]) as u32) << 20);
  let x9: u32 = (((arg1[8]) as u32) << 12);
  let x10: u32 = (((arg1[7]) as u32) << 4);
  let x11: u32 = (((arg1[6]) as u32) << 22);
  let x12: u32 = (((arg1[5]) as u32) << 14);
  let x13: u32 = (((arg1[4]) as u32) << 6);
  let x14: u32 = (((arg1[3]) as u32) << 24);
  let x15: u32 = (((arg1[2]) as u32) << 16);
  let x16: u32 = (((arg1[1]) as u32) << 8);
  let x17: u8 = (arg1[0]);
  let x18: u32 = (x16 + (x17 as u32));
  let x19: u32 = (x15 + x18);
  let x20: u32 = (x14 + x19);
  let x21: u32 = (x20 & 0x3ffffff);
  let x22: u8 = ((x20 >> 26) as u8);
  let x23: u32 = (x13 + (x22 as u32));
  let x24: u32 = (x12 + x23);
  let x25: u32 = (x11 + x24);
  let x26: u32 = (x25 & 0x3ffffff);
  let x27: u8 = ((x25 >> 26) as u8);
  let x28: u32 = (x10 + (x27 as u32));
  let x29: u32 = (x9 + x28);
  let x30: u32 = (x8 + x29);
  let x31: u32 = (x30 & 0x3ffffff);
  let x32: u8 = ((x30 >> 26) as u8);
  let x33: u32 = (x7 + (x32 as u32));
  let x34: u32 = (x6 + x33);
  let x35: u32 = (x5 + x34);
  let x36: u32 = (x3 + (x4 as u32));
  let x37: u32 = (x2 + x36);
  let x38: u32 = (x1 + x37);
  out1[0] = x21;
  out1[1] = x26;
  out1[2] = x31;
  out1[3] = x35;
  out1[4] = x38;
}

/// The function fiat_poly1305_one returns the field element one.
/// Postconditions:
///   eval out1 mod m = 1 mod m
///
/// Input Bounds:
/// Output Bounds:
///   out1: [[0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000]]
#[inline]
pub fn fiat_poly1305_one(out1: &mut [fiat_poly1305_u1; 5]) -> () {
  out1[0] = 0x1;
  out1[1] = 0x0;
  out1[2] = 0x0;
  out1[3] = 0x0;
  out1[4] = 0x0;
}

/// The function fiat_poly1305_word_to_solina computes a divstep on wordsized integers.
/// Postconditions:
///   eval out1 = arg1
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_poly1305_word_to_solina(out1: &mut [u32; 5], arg1: u32) -> () {
  let x1: fiat_poly1305_u1 = ((arg1 >> 31) as fiat_poly1305_u1);
  let x2: u32 = (((((!arg1) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let x3: u32 = (arg1 >> 26);
  let x4: u32 = (arg1 & 0x3ffffff);
  let x5: u32 = (x2 >> 26);
  let x6: u32 = (x2 & 0x3ffffff);
  let x7: u32 = (0x7fffff6 - x6);
  let x8: u32 = (0x7fffffe - x5);
  let x9: fiat_poly1305_u1 = ((x7 >> 26) as fiat_poly1305_u1);
  let x10: u32 = (x7 & 0x3ffffff);
  let x11: u32 = ((x9 as u32) + x8);
  let x12: u32 = (x11 & 0x3ffffff);
  let x13: u32 = (x10 + 0x5);
  let x14: fiat_poly1305_u1 = ((x13 >> 26) as fiat_poly1305_u1);
  let x15: u32 = (x13 & 0x3ffffff);
  let x16: u32 = ((x14 as u32) + x12);
  let x17: fiat_poly1305_u1 = ((x16 >> 26) as fiat_poly1305_u1);
  let x18: u32 = (x16 & 0x3ffffff);
  let x19: u32 = ((x17 as u32) + 0x3ffffff);
  let mut x20: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x20, x1, x4, x15);
  let mut x21: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x21, x1, x3, x18);
  let mut x22: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x22, x1, (0x0 as u32), x19);
  let mut x23: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x23, x1, (0x0 as u32), 0x3ffffff);
  let mut x24: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x24, x1, (0x0 as u32), 0x3ffffff);
  out1[0] = x20;
  out1[1] = x21;
  out1[2] = x22;
  out1[3] = x23;
  out1[4] = x24;
}

/// The function fiat_poly1305_msat returns the saturated (signed) representation of the prime modulus.
/// Postconditions:
///   twos_complement_eval out1 = m
///
/// Input Bounds:
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_poly1305_msat(out1: &mut [u32; 6]) -> () {
  out1[0] = 0xfffffffb;
  out1[1] = 0xffffffff;
  out1[2] = 0xffffffff;
  out1[3] = 0xffffffff;
  out1[4] = 0x3;
  out1[5] = (0x0 as u32);
}

/// The function fiat_poly1305_sat_from_bytes deserializes a field element NOT in the Montgomery domain from bytes in little-endian order.
/// Postconditions:
///   eval out1 mod m = bytes_eval arg1 mod m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_poly1305_sat_from_bytes(out1: &mut [u32; 6], arg1: &[u8; 17]) -> () {
  let x1: u8 = (arg1[16]);
  let x2: u32 = (((arg1[15]) as u32) << 24);
  let x3: u32 = (((arg1[14]) as u32) << 16);
  let x4: u32 = (((arg1[13]) as u32) << 8);
  let x5: u8 = (arg1[12]);
  let x6: u32 = (((arg1[11]) as u32) << 24);
  let x7: u32 = (((arg1[10]) as u32) << 16);
  let x8: u32 = (((arg1[9]) as u32) << 8);
  let x9: u8 = (arg1[8]);
  let x10: u32 = (((arg1[7]) as u32) << 24);
  let x11: u32 = (((arg1[6]) as u32) << 16);
  let x12: u32 = (((arg1[5]) as u32) << 8);
  let x13: u8 = (arg1[4]);
  let x14: u32 = (((arg1[3]) as u32) << 24);
  let x15: u32 = (((arg1[2]) as u32) << 16);
  let x16: u32 = (((arg1[1]) as u32) << 8);
  let x17: u8 = (arg1[0]);
  let x18: u32 = (x16 + (x17 as u32));
  let x19: u32 = (x15 + x18);
  let x20: u32 = (x14 + x19);
  let x21: u32 = (x12 + (x13 as u32));
  let x22: u32 = (x11 + x21);
  let x23: u32 = (x10 + x22);
  let x24: u32 = (x8 + (x9 as u32));
  let x25: u32 = (x7 + x24);
  let x26: u32 = (x6 + x25);
  let x27: u32 = (x4 + (x5 as u32));
  let x28: u32 = (x3 + x27);
  let x29: u32 = (x2 + x28);
  out1[0] = x20;
  out1[1] = x23;
  out1[2] = x26;
  out1[3] = x29;
  out1[4] = (x1 as u32);
  out1[5] = (0x0 as u32);
}

/// The function fiat_poly1305_divstep computes a divstep.
/// Postconditions:
///   out1 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then 1 - arg1 else 1 + arg1)
///   twos_complement_eval out2 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then twos_complement_eval arg3 else twos_complement_eval arg2)
///   twos_complement_eval out3 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then ⌊(twos_complement_eval arg3 - twos_complement_eval arg2) / 2⌋ else ⌊(twos_complement_eval arg3 + (twos_complement_eval arg3 mod 2) * twos_complement_eval arg2) / 2⌋)
///   eval out4 mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (2 * eval arg5) mod m else (2 * eval arg4) mod m)
///   eval out5 mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (eval arg4 - eval arg4) mod m else (eval arg5 + (twos_complement_eval arg3 mod 2) * eval arg4) mod m)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffff]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg4: [[0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000]]
///   arg5: [[0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000]]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out4: [[0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000]]
///   out5: [[0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000]]
#[inline]
pub fn fiat_poly1305_divstep(out1: &mut u32, out2: &mut [u32; 6], out3: &mut [u32; 6], out4: &mut [u32; 5], out5: &mut [u32; 5], arg1: u32, arg2: &[u32; 6], arg3: &[u32; 6], arg4: &[u32; 5], arg5: &[u32; 5]) -> () {
  let mut x1: u32 = 0;
  let mut x2: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x1, &mut x2, 0x0, (!arg1), (0x1 as u32));
  let x3: fiat_poly1305_u1 = (((x1 >> 31) as fiat_poly1305_u1) & (((arg3[0]) & (0x1 as u32)) as fiat_poly1305_u1));
  let mut x4: u32 = 0;
  let mut x5: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x4, &mut x5, 0x0, (!arg1), (0x1 as u32));
  let mut x6: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x6, x3, arg1, x4);
  let mut x7: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x7, x3, (arg2[0]), (arg3[0]));
  let mut x8: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x8, x3, (arg2[1]), (arg3[1]));
  let mut x9: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x9, x3, (arg2[2]), (arg3[2]));
  let mut x10: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x10, x3, (arg2[3]), (arg3[3]));
  let mut x11: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x11, x3, (arg2[4]), (arg3[4]));
  let mut x12: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x12, x3, (arg2[5]), (arg3[5]));
  let mut x13: u32 = 0;
  let mut x14: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x13, &mut x14, 0x0, (0x1 as u32), (!(arg2[0])));
  let mut x15: u32 = 0;
  let mut x16: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x15, &mut x16, x14, (0x0 as u32), (!(arg2[1])));
  let mut x17: u32 = 0;
  let mut x18: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x17, &mut x18, x16, (0x0 as u32), (!(arg2[2])));
  let mut x19: u32 = 0;
  let mut x20: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x19, &mut x20, x18, (0x0 as u32), (!(arg2[3])));
  let mut x21: u32 = 0;
  let mut x22: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x21, &mut x22, x20, (0x0 as u32), (!(arg2[4])));
  let mut x23: u32 = 0;
  let mut x24: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x23, &mut x24, x22, (0x0 as u32), (!(arg2[5])));
  let mut x25: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x25, x3, (arg3[0]), x13);
  let mut x26: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x26, x3, (arg3[1]), x15);
  let mut x27: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x27, x3, (arg3[2]), x17);
  let mut x28: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x28, x3, (arg3[3]), x19);
  let mut x29: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x29, x3, (arg3[4]), x21);
  let mut x30: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x30, x3, (arg3[5]), x23);
  let mut x31: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x31, x3, (arg4[0]), (arg5[0]));
  let mut x32: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x32, x3, (arg4[1]), (arg5[1]));
  let mut x33: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x33, x3, (arg4[2]), (arg5[2]));
  let mut x34: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x34, x3, (arg4[3]), (arg5[3]));
  let mut x35: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x35, x3, (arg4[4]), (arg5[4]));
  let x36: u32 = (x31 + x31);
  let x37: u32 = (x36 >> 26);
  let x38: u32 = (x36 & 0x3ffffff);
  let x39: u32 = (x35 + x35);
  let x40: u32 = (x34 + x34);
  let x41: u32 = (x33 + x33);
  let x42: u32 = (x32 + x32);
  let x43: u32 = (x37 + x42);
  let x44: u32 = (x43 >> 26);
  let x45: u32 = (x43 & 0x3ffffff);
  let x46: u32 = (x44 + x41);
  let x47: u32 = (x46 >> 26);
  let x48: u32 = (x46 & 0x3ffffff);
  let x49: u32 = (x47 + x40);
  let x50: u32 = (x49 >> 26);
  let x51: u32 = (x49 & 0x3ffffff);
  let x52: u32 = (x50 + x39);
  let x53: u32 = (x52 >> 26);
  let x54: u32 = (x52 & 0x3ffffff);
  let x55: u32 = (x53 * 0x5);
  let x56: u32 = (x38 + x55);
  let x57: fiat_poly1305_u1 = ((x56 >> 26) as fiat_poly1305_u1);
  let x58: u32 = (x56 & 0x3ffffff);
  let x59: u32 = ((x57 as u32) + x45);
  let x60: fiat_poly1305_u1 = ((x59 >> 26) as fiat_poly1305_u1);
  let x61: u32 = (x59 & 0x3ffffff);
  let x62: u32 = ((x60 as u32) + x48);
  let x63: u32 = (arg4[4]);
  let x64: u32 = (arg4[3]);
  let x65: u32 = (arg4[2]);
  let x66: u32 = (arg4[1]);
  let x67: u32 = (arg4[0]);
  let x68: u32 = (0x7fffff6 - x67);
  let x69: u32 = (0x7fffffe - x66);
  let x70: u32 = (0x7fffffe - x65);
  let x71: u32 = (0x7fffffe - x64);
  let x72: u32 = (0x7fffffe - x63);
  let x73: fiat_poly1305_u1 = ((x68 >> 26) as fiat_poly1305_u1);
  let x74: u32 = (x68 & 0x3ffffff);
  let x75: u32 = ((x73 as u32) + x69);
  let x76: fiat_poly1305_u1 = ((x75 >> 26) as fiat_poly1305_u1);
  let x77: u32 = (x75 & 0x3ffffff);
  let x78: u32 = ((x76 as u32) + x70);
  let x79: fiat_poly1305_u1 = ((x78 >> 26) as fiat_poly1305_u1);
  let x80: u32 = (x78 & 0x3ffffff);
  let x81: u32 = ((x79 as u32) + x71);
  let x82: fiat_poly1305_u1 = ((x81 >> 26) as fiat_poly1305_u1);
  let x83: u32 = (x81 & 0x3ffffff);
  let x84: u32 = ((x82 as u32) + x72);
  let x85: fiat_poly1305_u1 = ((x84 >> 26) as fiat_poly1305_u1);
  let x86: u32 = (x84 & 0x3ffffff);
  let x87: u32 = ((x85 as u32) * 0x5);
  let x88: u32 = (x74 + x87);
  let x89: fiat_poly1305_u1 = ((x88 >> 26) as fiat_poly1305_u1);
  let x90: u32 = (x88 & 0x3ffffff);
  let x91: u32 = ((x89 as u32) + x77);
  let x92: fiat_poly1305_u1 = ((x91 >> 26) as fiat_poly1305_u1);
  let x93: u32 = (x91 & 0x3ffffff);
  let x94: u32 = ((x92 as u32) + x80);
  let mut x95: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x95, x3, (arg5[0]), x90);
  let mut x96: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x96, x3, (arg5[1]), x93);
  let mut x97: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x97, x3, (arg5[2]), x94);
  let mut x98: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x98, x3, (arg5[3]), x83);
  let mut x99: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x99, x3, (arg5[4]), x86);
  let x100: fiat_poly1305_u1 = ((x25 & (0x1 as u32)) as fiat_poly1305_u1);
  let mut x101: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x101, x100, (0x0 as u32), x7);
  let mut x102: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x102, x100, (0x0 as u32), x8);
  let mut x103: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x103, x100, (0x0 as u32), x9);
  let mut x104: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x104, x100, (0x0 as u32), x10);
  let mut x105: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x105, x100, (0x0 as u32), x11);
  let mut x106: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x106, x100, (0x0 as u32), x12);
  let mut x107: u32 = 0;
  let mut x108: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x107, &mut x108, 0x0, x25, x101);
  let mut x109: u32 = 0;
  let mut x110: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x109, &mut x110, x108, x26, x102);
  let mut x111: u32 = 0;
  let mut x112: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x111, &mut x112, x110, x27, x103);
  let mut x113: u32 = 0;
  let mut x114: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x113, &mut x114, x112, x28, x104);
  let mut x115: u32 = 0;
  let mut x116: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x115, &mut x116, x114, x29, x105);
  let mut x117: u32 = 0;
  let mut x118: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x117, &mut x118, x116, x30, x106);
  let mut x119: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x119, x100, (0x0 as u32), x31);
  let mut x120: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x120, x100, (0x0 as u32), x32);
  let mut x121: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x121, x100, (0x0 as u32), x33);
  let mut x122: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x122, x100, (0x0 as u32), x34);
  let mut x123: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x123, x100, (0x0 as u32), x35);
  let x124: u32 = (x95 + x119);
  let x125: u32 = (x124 >> 26);
  let x126: u32 = (x124 & 0x3ffffff);
  let x127: u32 = (x99 + x123);
  let x128: u32 = (x98 + x122);
  let x129: u32 = (x97 + x121);
  let x130: u32 = (x96 + x120);
  let x131: u32 = (x125 + x130);
  let x132: u32 = (x131 >> 26);
  let x133: u32 = (x131 & 0x3ffffff);
  let x134: u32 = (x132 + x129);
  let x135: u32 = (x134 >> 26);
  let x136: u32 = (x134 & 0x3ffffff);
  let x137: u32 = (x135 + x128);
  let x138: u32 = (x137 >> 26);
  let x139: u32 = (x137 & 0x3ffffff);
  let x140: u32 = (x138 + x127);
  let x141: u32 = (x140 >> 26);
  let x142: u32 = (x140 & 0x3ffffff);
  let x143: u32 = (x141 * 0x5);
  let x144: u32 = (x126 + x143);
  let x145: fiat_poly1305_u1 = ((x144 >> 26) as fiat_poly1305_u1);
  let x146: u32 = (x144 & 0x3ffffff);
  let x147: u32 = ((x145 as u32) + x133);
  let x148: fiat_poly1305_u1 = ((x147 >> 26) as fiat_poly1305_u1);
  let x149: u32 = (x147 & 0x3ffffff);
  let x150: u32 = ((x148 as u32) + x136);
  let mut x151: u32 = 0;
  let mut x152: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x151, &mut x152, 0x0, x6, (0x1 as u32));
  let x153: u32 = ((x107 >> 1) | ((x109 << 31) & 0xffffffff));
  let x154: u32 = ((x109 >> 1) | ((x111 << 31) & 0xffffffff));
  let x155: u32 = ((x111 >> 1) | ((x113 << 31) & 0xffffffff));
  let x156: u32 = ((x113 >> 1) | ((x115 << 31) & 0xffffffff));
  let x157: u32 = ((x115 >> 1) | ((x117 << 31) & 0xffffffff));
  let x158: u32 = ((x117 & 0x80000000) | (x117 >> 1));
  *out1 = x151;
  out2[0] = x7;
  out2[1] = x8;
  out2[2] = x9;
  out2[3] = x10;
  out2[4] = x11;
  out2[5] = x12;
  out3[0] = x153;
  out3[1] = x154;
  out3[2] = x155;
  out3[3] = x156;
  out3[4] = x157;
  out3[5] = x158;
  out4[0] = x58;
  out4[1] = x61;
  out4[2] = x62;
  out4[3] = x51;
  out4[4] = x54;
  out5[0] = x146;
  out5[1] = x149;
  out5[2] = x150;
  out5[3] = x139;
  out5[4] = x142;
}

/// The function fiat_poly1305_divstep_precomp returns the precomputed value for Bernstein-Yang-inversion (in montgomery form).
/// Postconditions:
///   eval out1 = ⌊(m - 1) / 2⌋^(if (log2 m) + 1 < 46 then ⌊(49 * ((log2 m) + 1) + 80) / 17⌋ else ⌊(49 * ((log2 m) + 1) + 57) / 17⌋)
///
/// Input Bounds:
/// Output Bounds:
///   out1: [[0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000]]
#[inline]
pub fn fiat_poly1305_divstep_precomp(out1: &mut [u32; 5]) -> () {
  out1[0] = 0x2978d6d;
  out1[1] = 0x20c49b;
  out1[2] = 0x5a1cac;
  out1[3] = 0x3f7ced9;
  out1[4] = 0x2e978d4;
}

/// The function fiat_poly1305_twos_complement_word_full_divstep computes a divstep on wordsized integers.
/// Postconditions:
///   out1 = (if 0 < arg1 ∧ arg3 is odd then 1 - arg1 else 1 + arg1)
///   out2 = (if 0 < arg1 ∧ arg3 is odd then arg3 else arg2)
///   out3 = (if 0 < arg1 ∧ arg3 is odd then ⌊(arg3 - arg2) / 2⌋ else ⌊(arg3 + (arg3 mod 2) * arg2) / 2⌋)
///   out4 = (if 0 < arg1 ∧ arg3 is odd then 2 * arg6 else 2 * arg4)
///   out5 = (if 0 < arg1 ∧ arg3 is odd then 2 * arg7 else 2 * arg5)
///   out6 = (if 0 < arg1 ∧ arg3 is odd then arg6 - arg4 else arg6 + (arg3 mod 2) * arg4)
///   out7 = (if 0 < arg1 ∧ arg3 is odd then arg5 - arg7 else arg7 + (arg3 mod 2) * arg5)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffff]
///   arg2: [0x0 ~> 0xffffffff]
///   arg3: [0x0 ~> 0xffffffff]
///   arg4: [0x0 ~> 0xffffffff]
///   arg5: [0x0 ~> 0xffffffff]
///   arg6: [0x0 ~> 0xffffffff]
///   arg7: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [0x0 ~> 0xffffffff]
///   out3: [0x0 ~> 0xffffffff]
///   out4: [0x0 ~> 0xffffffff]
///   out5: [0x0 ~> 0xffffffff]
///   out6: [0x0 ~> 0xffffffff]
///   out7: [0x0 ~> 0xffffffff]
#[inline]
pub fn fiat_poly1305_twos_complement_word_full_divstep(out1: &mut u32, out2: &mut u32, out3: &mut u32, out4: &mut u32, out5: &mut u32, out6: &mut u32, out7: &mut u32, arg1: u32, arg2: u32, arg3: u32, arg4: u32, arg5: u32, arg6: u32, arg7: u32) -> () {
  let x1: u32 = (((((!arg1) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x2: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x2, (((x1 >> 31) as fiat_poly1305_u1) & ((arg3 & (0x1 as u32)) as fiat_poly1305_u1)), arg1, (((((!arg1) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x3: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x3, (((x1 >> 31) as fiat_poly1305_u1) & ((arg3 & (0x1 as u32)) as fiat_poly1305_u1)), arg2, arg3);
  let mut x4: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x4, (((x1 >> 31) as fiat_poly1305_u1) & ((arg3 & (0x1 as u32)) as fiat_poly1305_u1)), arg3, (((((!arg2) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x5: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x5, (((x1 >> 31) as fiat_poly1305_u1) & ((arg3 & (0x1 as u32)) as fiat_poly1305_u1)), arg4, arg6);
  let mut x6: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x6, (((x1 >> 31) as fiat_poly1305_u1) & ((arg3 & (0x1 as u32)) as fiat_poly1305_u1)), arg5, arg7);
  let mut x7: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x7, (((x1 >> 31) as fiat_poly1305_u1) & ((arg3 & (0x1 as u32)) as fiat_poly1305_u1)), arg6, (((((!arg4) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x8: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x8, (((x1 >> 31) as fiat_poly1305_u1) & ((arg3 & (0x1 as u32)) as fiat_poly1305_u1)), arg7, (((((!arg5) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x9: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x9, ((x4 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x3);
  let mut x10: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x10, ((x4 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x5);
  let mut x11: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x11, ((x4 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x6);
  let x12: u32 = ((((0x1 as u64) + (x2 as u64)) & (0xffffffff as u64)) as u32);
  let x13: u32 = ((((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) >> 1));
  let x14: u32 = ((((x5 as u64) + (x5 as u64)) & (0xffffffff as u64)) as u32);
  let x15: u32 = ((((x6 as u64) + (x6 as u64)) & (0xffffffff as u64)) as u32);
  let x16: u32 = ((((x7 as u64) + (x10 as u64)) & (0xffffffff as u64)) as u32);
  let x17: u32 = ((((x8 as u64) + (x11 as u64)) & (0xffffffff as u64)) as u32);
  *out1 = x12;
  *out2 = x3;
  *out3 = x13;
  *out4 = x14;
  *out5 = x15;
  *out6 = x16;
  *out7 = x17;
}

/// The function fiat_poly1305_asr_mw_sub2 computes a divstep on wordsized integers.
/// Postconditions:
///   eval out1 = ⌊eval arg1 / 2^(32 - 2)⌋
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_poly1305_asr_mw_sub2(out1: &mut [u32; 7], arg1: &[u32; 7]) -> () {
  let mut x1: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x1, (((arg1[6]) >> 31) as fiat_poly1305_u1), (0x0 as u32), 0xfffffffc);
  let x2: u32 = (((arg1[0]) >> 30) | (((arg1[1]) << 2) & 0xffffffff));
  let x3: u32 = (((arg1[1]) >> 30) | (((arg1[2]) << 2) & 0xffffffff));
  let x4: u32 = (((arg1[2]) >> 30) | (((arg1[3]) << 2) & 0xffffffff));
  let x5: u32 = (((arg1[3]) >> 30) | (((arg1[4]) << 2) & 0xffffffff));
  let x6: u32 = (((arg1[4]) >> 30) | (((arg1[5]) << 2) & 0xffffffff));
  let x7: u32 = (((arg1[5]) >> 30) | (((arg1[6]) << 2) & 0xffffffff));
  let x8: u32 = (x1 | ((arg1[6]) >> 30));
  out1[0] = x2;
  out1[1] = x3;
  out1[2] = x4;
  out1[3] = x5;
  out1[4] = x6;
  out1[5] = x7;
  out1[6] = x8;
}

/// The function fiat_poly1305_sat_add computes a divstep on wordsized integers.
/// Postconditions:
///   eval out1 = eval arg1 + eval arg2
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_poly1305_sat_add(out1: &mut [u32; 7], arg1: &[u32; 7], arg2: &[u32; 7]) -> () {
  let mut x1: u32 = 0;
  let mut x2: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x1, &mut x2, 0x0, (arg1[0]), (arg2[0]));
  let mut x3: u32 = 0;
  let mut x4: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x3, &mut x4, x2, (arg1[1]), (arg2[1]));
  let mut x5: u32 = 0;
  let mut x6: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x5, &mut x6, x4, (arg1[2]), (arg2[2]));
  let mut x7: u32 = 0;
  let mut x8: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x7, &mut x8, x6, (arg1[3]), (arg2[3]));
  let mut x9: u32 = 0;
  let mut x10: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x9, &mut x10, x8, (arg1[4]), (arg2[4]));
  let mut x11: u32 = 0;
  let mut x12: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x11, &mut x12, x10, (arg1[5]), (arg2[5]));
  let mut x13: u32 = 0;
  let mut x14: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x13, &mut x14, x12, (arg1[6]), (arg2[6]));
  out1[0] = x1;
  out1[1] = x3;
  out1[2] = x5;
  out1[3] = x7;
  out1[4] = x9;
  out1[5] = x11;
  out1[6] = x13;
}

/// The function fiat_poly1305_word_sat_mul computes a divstep on wordsized integers.
/// Postconditions:
///   eval out1 = arg1 * eval arg2
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffff]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_poly1305_word_sat_mul(out1: &mut [u32; 7], arg1: u32, arg2: &[u32; 6]) -> () {
  let mut x1: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x1, (((arg2[5]) >> 31) as fiat_poly1305_u1), (0x0 as u32), 0xffffffff);
  let mut x2: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x2, ((arg1 >> 31) as fiat_poly1305_u1), (0x0 as u32), 0xffffffff);
  let mut x3: u32 = 0;
  let mut x4: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x3, &mut x4, x2, (arg2[0]));
  let mut x5: u32 = 0;
  let mut x6: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x5, &mut x6, x2, (arg2[1]));
  let mut x7: u32 = 0;
  let mut x8: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x7, &mut x8, x2, (arg2[0]));
  let mut x9: u32 = 0;
  let mut x10: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x9, &mut x10, x2, (arg2[2]));
  let mut x11: u32 = 0;
  let mut x12: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x11, &mut x12, x2, (arg2[1]));
  let mut x13: u32 = 0;
  let mut x14: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x13, &mut x14, x2, (arg2[0]));
  let mut x15: u32 = 0;
  let mut x16: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x15, &mut x16, x2, (arg2[3]));
  let mut x17: u32 = 0;
  let mut x18: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x17, &mut x18, x2, (arg2[2]));
  let mut x19: u32 = 0;
  let mut x20: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x19, &mut x20, x2, (arg2[1]));
  let mut x21: u32 = 0;
  let mut x22: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x21, &mut x22, x2, (arg2[0]));
  let mut x23: u32 = 0;
  let mut x24: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x23, &mut x24, x2, (arg2[4]));
  let mut x25: u32 = 0;
  let mut x26: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x25, &mut x26, x2, (arg2[3]));
  let mut x27: u32 = 0;
  let mut x28: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x27, &mut x28, x2, (arg2[2]));
  let mut x29: u32 = 0;
  let mut x30: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x29, &mut x30, x2, (arg2[1]));
  let mut x31: u32 = 0;
  let mut x32: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x31, &mut x32, x2, (arg2[0]));
  let mut x33: u32 = 0;
  let mut x34: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x33, &mut x34, x2, (arg2[5]));
  let mut x35: u32 = 0;
  let mut x36: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x35, &mut x36, x2, (arg2[4]));
  let mut x37: u32 = 0;
  let mut x38: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x37, &mut x38, x2, (arg2[3]));
  let mut x39: u32 = 0;
  let mut x40: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x39, &mut x40, x2, (arg2[2]));
  let mut x41: u32 = 0;
  let mut x42: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x41, &mut x42, x2, (arg2[1]));
  let mut x43: u32 = 0;
  let mut x44: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x43, &mut x44, x2, (arg2[0]));
  let mut x45: u32 = 0;
  let mut x46: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x45, &mut x46, arg1, x1);
  let mut x47: u32 = 0;
  let mut x48: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x47, &mut x48, arg1, (arg2[5]));
  let mut x49: u32 = 0;
  let mut x50: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x49, &mut x50, arg1, (arg2[4]));
  let mut x51: u32 = 0;
  let mut x52: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x51, &mut x52, arg1, (arg2[3]));
  let mut x53: u32 = 0;
  let mut x54: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x53, &mut x54, arg1, (arg2[2]));
  let mut x55: u32 = 0;
  let mut x56: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x55, &mut x56, arg1, (arg2[1]));
  let mut x57: u32 = 0;
  let mut x58: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x57, &mut x58, arg1, (arg2[0]));
  let mut x59: u32 = 0;
  let mut x60: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x59, &mut x60, 0x0, x48, x3);
  let mut x61: u32 = 0;
  let mut x62: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x61, &mut x62, 0x0, x59, x5);
  let mut x63: u32 = 0;
  let mut x64: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x63, &mut x64, 0x0, x50, x7);
  let mut x65: u32 = 0;
  let mut x66: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x65, &mut x66, x64, x61, x8);
  let mut x67: u32 = 0;
  let mut x68: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x67, &mut x68, 0x0, x63, x11);
  let mut x69: u32 = 0;
  let mut x70: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x69, &mut x70, x68, x65, x9);
  let mut x71: u32 = 0;
  let mut x72: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x71, &mut x72, 0x0, x52, x13);
  let mut x73: u32 = 0;
  let mut x74: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x73, &mut x74, x72, x67, x14);
  let mut x75: u32 = 0;
  let mut x76: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x75, &mut x76, x74, x69, x12);
  let mut x77: u32 = 0;
  let mut x78: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x77, &mut x78, 0x0, x71, x19);
  let mut x79: u32 = 0;
  let mut x80: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x79, &mut x80, x78, x73, x17);
  let mut x81: u32 = 0;
  let mut x82: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x81, &mut x82, x80, x75, x15);
  let mut x83: u32 = 0;
  let mut x84: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x83, &mut x84, 0x0, x54, x21);
  let mut x85: u32 = 0;
  let mut x86: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x85, &mut x86, x84, x77, x22);
  let mut x87: u32 = 0;
  let mut x88: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x87, &mut x88, x86, x79, x20);
  let mut x89: u32 = 0;
  let mut x90: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x89, &mut x90, x88, x81, x18);
  let mut x91: u32 = 0;
  let mut x92: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x91, &mut x92, 0x0, x83, x29);
  let mut x93: u32 = 0;
  let mut x94: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x93, &mut x94, x92, x85, x27);
  let mut x95: u32 = 0;
  let mut x96: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x95, &mut x96, x94, x87, x25);
  let mut x97: u32 = 0;
  let mut x98: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x97, &mut x98, x96, x89, x23);
  let mut x99: u32 = 0;
  let mut x100: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x99, &mut x100, 0x0, x56, x31);
  let mut x101: u32 = 0;
  let mut x102: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x101, &mut x102, x100, x91, x32);
  let mut x103: u32 = 0;
  let mut x104: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x103, &mut x104, x102, x93, x30);
  let mut x105: u32 = 0;
  let mut x106: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x105, &mut x106, x104, x95, x28);
  let mut x107: u32 = 0;
  let mut x108: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x107, &mut x108, x106, x97, x26);
  let mut x109: u32 = 0;
  let mut x110: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x109, &mut x110, 0x0, x99, x41);
  let mut x111: u32 = 0;
  let mut x112: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x111, &mut x112, x110, x101, x39);
  let mut x113: u32 = 0;
  let mut x114: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x113, &mut x114, x112, x103, x37);
  let mut x115: u32 = 0;
  let mut x116: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x115, &mut x116, x114, x105, x35);
  let mut x117: u32 = 0;
  let mut x118: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x117, &mut x118, x116, x107, x33);
  let mut x119: u32 = 0;
  let mut x120: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x119, &mut x120, 0x0, x58, x43);
  let mut x121: u32 = 0;
  let mut x122: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x121, &mut x122, x120, x109, x44);
  let mut x123: u32 = 0;
  let mut x124: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x123, &mut x124, x122, x111, x42);
  let mut x125: u32 = 0;
  let mut x126: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x125, &mut x126, x124, x113, x40);
  let mut x127: u32 = 0;
  let mut x128: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x127, &mut x128, x126, x115, x38);
  let mut x129: u32 = 0;
  let mut x130: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x129, &mut x130, x128, x117, x36);
  let mut x131: u32 = 0;
  let mut x132: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x131, &mut x132, 0x0, x119, x55);
  let mut x133: u32 = 0;
  let mut x134: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x133, &mut x134, x132, x121, x53);
  let mut x135: u32 = 0;
  let mut x136: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x135, &mut x136, x134, x123, x51);
  let mut x137: u32 = 0;
  let mut x138: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x137, &mut x138, x136, x125, x49);
  let mut x139: u32 = 0;
  let mut x140: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x139, &mut x140, x138, x127, x47);
  let mut x141: u32 = 0;
  let mut x142: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x141, &mut x142, x140, x129, x45);
  out1[0] = x57;
  out1[1] = x131;
  out1[2] = x133;
  out1[3] = x135;
  out1[4] = x137;
  out1[5] = x139;
  out1[6] = x141;
}

/// The function fiat_poly1305_jumpdivstep_precomp returns the precomputed value for the jump-version of Bernstein-Yang-inversion (in montgomery form).
/// Postconditions:
///   eval out1 = ⌊(m - 1) / 2⌋^(if (log2 m) + 1 < 46 then ⌊(49 * ((log2 m) + 1) + 80) / 17⌋ else ⌊(49 * ((log2 m) + 1) + 57) / 17⌋)
///
/// Input Bounds:
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_poly1305_jumpdivstep_precomp(out1: &mut [u32; 5]) -> () {
  out1[0] = 0x126e975;
  out1[1] = 0x32b020c;
  out1[2] = 0x3b645a1;
  out1[3] = 0x2353f7c;
  out1[4] = 0x3126e97;
}

/// The function fiat_poly1305_outer_loop_body computes the body of the outer loop in BY-inversion (jumpdivstep version).
/// Postconditions:
///   eval arg1 = eval arg2
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg3: [[0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000]]
///   arg4: [[0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out3: [[0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000]]
///   out4: [[0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000], [0x0 ~> 0x4000000]]
#[inline]
pub fn fiat_poly1305_outer_loop_body(out1: &mut [u32; 6], out2: &mut [u32; 6], out3: &mut [u32; 5], out4: &mut [u32; 5], arg1: &[u32; 6], arg2: &[u32; 6], arg3: &[u32; 5], arg4: &[u32; 5]) -> () {
  let mut x1: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x1, (((arg2[0]) & (0x1 as u32)) as fiat_poly1305_u1), (0x1 as u32), 0xffffffff);
  let mut x2: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x2, (((arg2[0]) & (0x1 as u32)) as fiat_poly1305_u1), (arg1[0]), (arg2[0]));
  let mut x3: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x3, (((arg2[0]) & (0x1 as u32)) as fiat_poly1305_u1), (arg2[0]), (((((!(arg1[0])) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x4: fiat_poly1305_u1 = 0;
  fiat_poly1305_cmovznz_u1(&mut x4, (((arg2[0]) & (0x1 as u32)) as fiat_poly1305_u1), 0x1, 0x0);
  let mut x5: fiat_poly1305_u1 = 0;
  fiat_poly1305_cmovznz_u1(&mut x5, (((arg2[0]) & (0x1 as u32)) as fiat_poly1305_u1), 0x0, 0x1);
  let mut x6: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x6, (((arg2[0]) & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), 0xffffffff);
  let mut x7: fiat_poly1305_u1 = 0;
  fiat_poly1305_cmovznz_u1(&mut x7, (((arg2[0]) & (0x1 as u32)) as fiat_poly1305_u1), 0x1, 0x0);
  let mut x8: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x8, ((x3 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x2);
  let mut x9: fiat_poly1305_u1 = 0;
  fiat_poly1305_cmovznz_u1(&mut x9, ((x3 & (0x1 as u32)) as fiat_poly1305_u1), 0x0, x4);
  let mut x10: fiat_poly1305_u1 = 0;
  fiat_poly1305_cmovznz_u1(&mut x10, ((x3 & (0x1 as u32)) as fiat_poly1305_u1), 0x0, x5);
  let x11: u32 = (((((!((((0x1 as u64) + (x1 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x12: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x12, (((x11 >> 31) as fiat_poly1305_u1) & ((((((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((0x1 as u64) + (x1 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x1 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x13: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x13, (((x11 >> 31) as fiat_poly1305_u1) & ((((((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), x2, ((((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x14: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x14, (((x11 >> 31) as fiat_poly1305_u1) & ((((((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x2) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x15: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x15, (((x11 >> 31) as fiat_poly1305_u1) & ((((((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((x4 as u32) + (x4 as u32)), ((((x6 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32));
  let mut x16: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x16, (((x11 >> 31) as fiat_poly1305_u1) & ((((((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((x5 as u32) + (x5 as u32)), ((x7 as u32) + (x10 as u32)));
  let mut x17: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x17, (((x11 >> 31) as fiat_poly1305_u1) & ((((((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x6 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32), (((((!((x4 as u32) + (x4 as u32))) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x18: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x18, (((x11 >> 31) as fiat_poly1305_u1) & ((((((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((x7 as u32) + (x10 as u32)), (((((!((x5 as u32) + (x5 as u32))) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x19: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x19, ((x14 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x13);
  let mut x20: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x20, ((x14 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x15);
  let mut x21: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x21, ((x14 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x16);
  let x22: u32 = (((((!((((0x1 as u64) + (x12 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x23: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x23, (((x22 >> 31) as fiat_poly1305_u1) & ((((((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((0x1 as u64) + (x12 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x12 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x24: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x24, (((x22 >> 31) as fiat_poly1305_u1) & ((((((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), x13, ((((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x25: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x25, (((x22 >> 31) as fiat_poly1305_u1) & ((((((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x13) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x26: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x26, (((x22 >> 31) as fiat_poly1305_u1) & ((((((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x15 as u64) + (x15 as u64)) & (0xffffffff as u64)) as u32), ((((x17 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32));
  let mut x27: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x27, (((x22 >> 31) as fiat_poly1305_u1) & ((((((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), (x16 + x16), ((((x18 as u64) + (x21 as u64)) & (0xffffffff as u64)) as u32));
  let mut x28: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x28, (((x22 >> 31) as fiat_poly1305_u1) & ((((((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x17 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x15 as u64) + (x15 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x29: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x29, (((x22 >> 31) as fiat_poly1305_u1) & ((((((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x18 as u64) + (x21 as u64)) & (0xffffffff as u64)) as u32), (((((!(x16 + x16)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x30: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x30, ((x25 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x24);
  let mut x31: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x31, ((x25 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x26);
  let mut x32: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x32, ((x25 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x27);
  let x33: u32 = (((((!((((0x1 as u64) + (x23 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x34: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x34, (((x33 >> 31) as fiat_poly1305_u1) & ((((((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((0x1 as u64) + (x23 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x23 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x35: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x35, (((x33 >> 31) as fiat_poly1305_u1) & ((((((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), x24, ((((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x36: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x36, (((x33 >> 31) as fiat_poly1305_u1) & ((((((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x24) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x37: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x37, (((x33 >> 31) as fiat_poly1305_u1) & ((((((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x26 as u64) + (x26 as u64)) & (0xffffffff as u64)) as u32), ((((x28 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32));
  let mut x38: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x38, (((x33 >> 31) as fiat_poly1305_u1) & ((((((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x27 as u64) + (x27 as u64)) & (0xffffffff as u64)) as u32), ((((x29 as u64) + (x32 as u64)) & (0xffffffff as u64)) as u32));
  let mut x39: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x39, (((x33 >> 31) as fiat_poly1305_u1) & ((((((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x28 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x26 as u64) + (x26 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x40: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x40, (((x33 >> 31) as fiat_poly1305_u1) & ((((((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x29 as u64) + (x32 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x27 as u64) + (x27 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x41: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x41, ((x36 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x35);
  let mut x42: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x42, ((x36 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x37);
  let mut x43: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x43, ((x36 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x38);
  let x44: u32 = (((((!((((0x1 as u64) + (x34 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x45: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x45, (((x44 >> 31) as fiat_poly1305_u1) & ((((((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((0x1 as u64) + (x34 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x34 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x46: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x46, (((x44 >> 31) as fiat_poly1305_u1) & ((((((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), x35, ((((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x47: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x47, (((x44 >> 31) as fiat_poly1305_u1) & ((((((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x35) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x48: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x48, (((x44 >> 31) as fiat_poly1305_u1) & ((((((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x37 as u64) + (x37 as u64)) & (0xffffffff as u64)) as u32), ((((x39 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32));
  let mut x49: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x49, (((x44 >> 31) as fiat_poly1305_u1) & ((((((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x38 as u64) + (x38 as u64)) & (0xffffffff as u64)) as u32), ((((x40 as u64) + (x43 as u64)) & (0xffffffff as u64)) as u32));
  let mut x50: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x50, (((x44 >> 31) as fiat_poly1305_u1) & ((((((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x39 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x37 as u64) + (x37 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x51: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x51, (((x44 >> 31) as fiat_poly1305_u1) & ((((((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x40 as u64) + (x43 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x38 as u64) + (x38 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x52: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x52, ((x47 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x46);
  let mut x53: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x53, ((x47 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x48);
  let mut x54: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x54, ((x47 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x49);
  let x55: u32 = (((((!((((0x1 as u64) + (x45 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x56: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x56, (((x55 >> 31) as fiat_poly1305_u1) & ((((((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((0x1 as u64) + (x45 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x45 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x57: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x57, (((x55 >> 31) as fiat_poly1305_u1) & ((((((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), x46, ((((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x58: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x58, (((x55 >> 31) as fiat_poly1305_u1) & ((((((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x46) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x59: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x59, (((x55 >> 31) as fiat_poly1305_u1) & ((((((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x48 as u64) + (x48 as u64)) & (0xffffffff as u64)) as u32), ((((x50 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32));
  let mut x60: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x60, (((x55 >> 31) as fiat_poly1305_u1) & ((((((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x49 as u64) + (x49 as u64)) & (0xffffffff as u64)) as u32), ((((x51 as u64) + (x54 as u64)) & (0xffffffff as u64)) as u32));
  let mut x61: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x61, (((x55 >> 31) as fiat_poly1305_u1) & ((((((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x50 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x48 as u64) + (x48 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x62: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x62, (((x55 >> 31) as fiat_poly1305_u1) & ((((((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x51 as u64) + (x54 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x49 as u64) + (x49 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x63: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x63, ((x58 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x57);
  let mut x64: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x64, ((x58 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x59);
  let mut x65: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x65, ((x58 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x60);
  let x66: u32 = (((((!((((0x1 as u64) + (x56 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x67: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x67, (((x66 >> 31) as fiat_poly1305_u1) & ((((((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((0x1 as u64) + (x56 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x56 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x68: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x68, (((x66 >> 31) as fiat_poly1305_u1) & ((((((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), x57, ((((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x69: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x69, (((x66 >> 31) as fiat_poly1305_u1) & ((((((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x57) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x70: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x70, (((x66 >> 31) as fiat_poly1305_u1) & ((((((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x59 as u64) + (x59 as u64)) & (0xffffffff as u64)) as u32), ((((x61 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32));
  let mut x71: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x71, (((x66 >> 31) as fiat_poly1305_u1) & ((((((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x60 as u64) + (x60 as u64)) & (0xffffffff as u64)) as u32), ((((x62 as u64) + (x65 as u64)) & (0xffffffff as u64)) as u32));
  let mut x72: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x72, (((x66 >> 31) as fiat_poly1305_u1) & ((((((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x61 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x59 as u64) + (x59 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x73: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x73, (((x66 >> 31) as fiat_poly1305_u1) & ((((((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x62 as u64) + (x65 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x60 as u64) + (x60 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x74: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x74, ((x69 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x68);
  let mut x75: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x75, ((x69 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x70);
  let mut x76: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x76, ((x69 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x71);
  let x77: u32 = (((((!((((0x1 as u64) + (x67 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x78: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x78, (((x77 >> 31) as fiat_poly1305_u1) & ((((((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((0x1 as u64) + (x67 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x67 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x79: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x79, (((x77 >> 31) as fiat_poly1305_u1) & ((((((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), x68, ((((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x80: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x80, (((x77 >> 31) as fiat_poly1305_u1) & ((((((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x68) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x81: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x81, (((x77 >> 31) as fiat_poly1305_u1) & ((((((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x70 as u64) + (x70 as u64)) & (0xffffffff as u64)) as u32), ((((x72 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32));
  let mut x82: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x82, (((x77 >> 31) as fiat_poly1305_u1) & ((((((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x71 as u64) + (x71 as u64)) & (0xffffffff as u64)) as u32), ((((x73 as u64) + (x76 as u64)) & (0xffffffff as u64)) as u32));
  let mut x83: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x83, (((x77 >> 31) as fiat_poly1305_u1) & ((((((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x72 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x70 as u64) + (x70 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x84: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x84, (((x77 >> 31) as fiat_poly1305_u1) & ((((((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x73 as u64) + (x76 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x71 as u64) + (x71 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x85: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x85, ((x80 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x79);
  let mut x86: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x86, ((x80 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x81);
  let mut x87: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x87, ((x80 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x82);
  let x88: u32 = (((((!((((0x1 as u64) + (x78 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x89: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x89, (((x88 >> 31) as fiat_poly1305_u1) & ((((((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((0x1 as u64) + (x78 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x78 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x90: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x90, (((x88 >> 31) as fiat_poly1305_u1) & ((((((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), x79, ((((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x91: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x91, (((x88 >> 31) as fiat_poly1305_u1) & ((((((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x79) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x92: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x92, (((x88 >> 31) as fiat_poly1305_u1) & ((((((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x81 as u64) + (x81 as u64)) & (0xffffffff as u64)) as u32), ((((x83 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32));
  let mut x93: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x93, (((x88 >> 31) as fiat_poly1305_u1) & ((((((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x82 as u64) + (x82 as u64)) & (0xffffffff as u64)) as u32), ((((x84 as u64) + (x87 as u64)) & (0xffffffff as u64)) as u32));
  let mut x94: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x94, (((x88 >> 31) as fiat_poly1305_u1) & ((((((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x83 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x81 as u64) + (x81 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x95: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x95, (((x88 >> 31) as fiat_poly1305_u1) & ((((((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x84 as u64) + (x87 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x82 as u64) + (x82 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x96: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x96, ((x91 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x90);
  let mut x97: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x97, ((x91 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x92);
  let mut x98: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x98, ((x91 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x93);
  let x99: u32 = (((((!((((0x1 as u64) + (x89 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x100: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x100, (((x99 >> 31) as fiat_poly1305_u1) & ((((((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((0x1 as u64) + (x89 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x89 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x101: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x101, (((x99 >> 31) as fiat_poly1305_u1) & ((((((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), x90, ((((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x102: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x102, (((x99 >> 31) as fiat_poly1305_u1) & ((((((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x90) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x103: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x103, (((x99 >> 31) as fiat_poly1305_u1) & ((((((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x92 as u64) + (x92 as u64)) & (0xffffffff as u64)) as u32), ((((x94 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32));
  let mut x104: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x104, (((x99 >> 31) as fiat_poly1305_u1) & ((((((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x93 as u64) + (x93 as u64)) & (0xffffffff as u64)) as u32), ((((x95 as u64) + (x98 as u64)) & (0xffffffff as u64)) as u32));
  let mut x105: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x105, (((x99 >> 31) as fiat_poly1305_u1) & ((((((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x94 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x92 as u64) + (x92 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x106: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x106, (((x99 >> 31) as fiat_poly1305_u1) & ((((((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x95 as u64) + (x98 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x93 as u64) + (x93 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x107: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x107, ((x102 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x101);
  let mut x108: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x108, ((x102 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x103);
  let mut x109: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x109, ((x102 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x104);
  let x110: u32 = (((((!((((0x1 as u64) + (x100 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x111: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x111, (((x110 >> 31) as fiat_poly1305_u1) & ((((((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((0x1 as u64) + (x100 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x100 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x112: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x112, (((x110 >> 31) as fiat_poly1305_u1) & ((((((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), x101, ((((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x113: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x113, (((x110 >> 31) as fiat_poly1305_u1) & ((((((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x101) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x114: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x114, (((x110 >> 31) as fiat_poly1305_u1) & ((((((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x103 as u64) + (x103 as u64)) & (0xffffffff as u64)) as u32), ((((x105 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32));
  let mut x115: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x115, (((x110 >> 31) as fiat_poly1305_u1) & ((((((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x104 as u64) + (x104 as u64)) & (0xffffffff as u64)) as u32), ((((x106 as u64) + (x109 as u64)) & (0xffffffff as u64)) as u32));
  let mut x116: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x116, (((x110 >> 31) as fiat_poly1305_u1) & ((((((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x105 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x103 as u64) + (x103 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x117: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x117, (((x110 >> 31) as fiat_poly1305_u1) & ((((((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x106 as u64) + (x109 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x104 as u64) + (x104 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x118: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x118, ((x113 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x112);
  let mut x119: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x119, ((x113 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x114);
  let mut x120: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x120, ((x113 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x115);
  let x121: u32 = (((((!((((0x1 as u64) + (x111 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x122: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x122, (((x121 >> 31) as fiat_poly1305_u1) & ((((((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((0x1 as u64) + (x111 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x111 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x123: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x123, (((x121 >> 31) as fiat_poly1305_u1) & ((((((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), x112, ((((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x124: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x124, (((x121 >> 31) as fiat_poly1305_u1) & ((((((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x112) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x125: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x125, (((x121 >> 31) as fiat_poly1305_u1) & ((((((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x114 as u64) + (x114 as u64)) & (0xffffffff as u64)) as u32), ((((x116 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32));
  let mut x126: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x126, (((x121 >> 31) as fiat_poly1305_u1) & ((((((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x115 as u64) + (x115 as u64)) & (0xffffffff as u64)) as u32), ((((x117 as u64) + (x120 as u64)) & (0xffffffff as u64)) as u32));
  let mut x127: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x127, (((x121 >> 31) as fiat_poly1305_u1) & ((((((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x116 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x114 as u64) + (x114 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x128: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x128, (((x121 >> 31) as fiat_poly1305_u1) & ((((((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x117 as u64) + (x120 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x115 as u64) + (x115 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x129: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x129, ((x124 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x123);
  let mut x130: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x130, ((x124 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x125);
  let mut x131: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x131, ((x124 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x126);
  let x132: u32 = (((((!((((0x1 as u64) + (x122 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x133: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x133, (((x132 >> 31) as fiat_poly1305_u1) & ((((((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((0x1 as u64) + (x122 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x122 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x134: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x134, (((x132 >> 31) as fiat_poly1305_u1) & ((((((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), x123, ((((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x135: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x135, (((x132 >> 31) as fiat_poly1305_u1) & ((((((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x123) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x136: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x136, (((x132 >> 31) as fiat_poly1305_u1) & ((((((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x125 as u64) + (x125 as u64)) & (0xffffffff as u64)) as u32), ((((x127 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32));
  let mut x137: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x137, (((x132 >> 31) as fiat_poly1305_u1) & ((((((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x126 as u64) + (x126 as u64)) & (0xffffffff as u64)) as u32), ((((x128 as u64) + (x131 as u64)) & (0xffffffff as u64)) as u32));
  let mut x138: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x138, (((x132 >> 31) as fiat_poly1305_u1) & ((((((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x127 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x125 as u64) + (x125 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x139: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x139, (((x132 >> 31) as fiat_poly1305_u1) & ((((((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x128 as u64) + (x131 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x126 as u64) + (x126 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x140: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x140, ((x135 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x134);
  let mut x141: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x141, ((x135 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x136);
  let mut x142: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x142, ((x135 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x137);
  let x143: u32 = (((((!((((0x1 as u64) + (x133 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x144: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x144, (((x143 >> 31) as fiat_poly1305_u1) & ((((((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((0x1 as u64) + (x133 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x133 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x145: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x145, (((x143 >> 31) as fiat_poly1305_u1) & ((((((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), x134, ((((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x146: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x146, (((x143 >> 31) as fiat_poly1305_u1) & ((((((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x134) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x147: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x147, (((x143 >> 31) as fiat_poly1305_u1) & ((((((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x136 as u64) + (x136 as u64)) & (0xffffffff as u64)) as u32), ((((x138 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32));
  let mut x148: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x148, (((x143 >> 31) as fiat_poly1305_u1) & ((((((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x137 as u64) + (x137 as u64)) & (0xffffffff as u64)) as u32), ((((x139 as u64) + (x142 as u64)) & (0xffffffff as u64)) as u32));
  let mut x149: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x149, (((x143 >> 31) as fiat_poly1305_u1) & ((((((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x138 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x136 as u64) + (x136 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x150: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x150, (((x143 >> 31) as fiat_poly1305_u1) & ((((((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x139 as u64) + (x142 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x137 as u64) + (x137 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x151: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x151, ((x146 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x145);
  let mut x152: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x152, ((x146 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x147);
  let mut x153: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x153, ((x146 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x148);
  let x154: u32 = (((((!((((0x1 as u64) + (x144 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x155: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x155, (((x154 >> 31) as fiat_poly1305_u1) & ((((((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((0x1 as u64) + (x144 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x144 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x156: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x156, (((x154 >> 31) as fiat_poly1305_u1) & ((((((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), x145, ((((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x157: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x157, (((x154 >> 31) as fiat_poly1305_u1) & ((((((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x145) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x158: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x158, (((x154 >> 31) as fiat_poly1305_u1) & ((((((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x147 as u64) + (x147 as u64)) & (0xffffffff as u64)) as u32), ((((x149 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32));
  let mut x159: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x159, (((x154 >> 31) as fiat_poly1305_u1) & ((((((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x148 as u64) + (x148 as u64)) & (0xffffffff as u64)) as u32), ((((x150 as u64) + (x153 as u64)) & (0xffffffff as u64)) as u32));
  let mut x160: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x160, (((x154 >> 31) as fiat_poly1305_u1) & ((((((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x149 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x147 as u64) + (x147 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x161: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x161, (((x154 >> 31) as fiat_poly1305_u1) & ((((((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x150 as u64) + (x153 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x148 as u64) + (x148 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x162: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x162, ((x157 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x156);
  let mut x163: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x163, ((x157 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x158);
  let mut x164: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x164, ((x157 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x159);
  let x165: u32 = (((((!((((0x1 as u64) + (x155 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x166: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x166, (((x165 >> 31) as fiat_poly1305_u1) & ((((((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((0x1 as u64) + (x155 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x155 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x167: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x167, (((x165 >> 31) as fiat_poly1305_u1) & ((((((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), x156, ((((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x168: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x168, (((x165 >> 31) as fiat_poly1305_u1) & ((((((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x156) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x169: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x169, (((x165 >> 31) as fiat_poly1305_u1) & ((((((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x158 as u64) + (x158 as u64)) & (0xffffffff as u64)) as u32), ((((x160 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32));
  let mut x170: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x170, (((x165 >> 31) as fiat_poly1305_u1) & ((((((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x159 as u64) + (x159 as u64)) & (0xffffffff as u64)) as u32), ((((x161 as u64) + (x164 as u64)) & (0xffffffff as u64)) as u32));
  let mut x171: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x171, (((x165 >> 31) as fiat_poly1305_u1) & ((((((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x160 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x158 as u64) + (x158 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x172: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x172, (((x165 >> 31) as fiat_poly1305_u1) & ((((((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x161 as u64) + (x164 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x159 as u64) + (x159 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x173: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x173, ((x168 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x167);
  let mut x174: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x174, ((x168 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x169);
  let mut x175: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x175, ((x168 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x170);
  let x176: u32 = (((((!((((0x1 as u64) + (x166 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x177: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x177, (((x176 >> 31) as fiat_poly1305_u1) & ((((((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((0x1 as u64) + (x166 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x166 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x178: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x178, (((x176 >> 31) as fiat_poly1305_u1) & ((((((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), x167, ((((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x179: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x179, (((x176 >> 31) as fiat_poly1305_u1) & ((((((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x167) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x180: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x180, (((x176 >> 31) as fiat_poly1305_u1) & ((((((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x169 as u64) + (x169 as u64)) & (0xffffffff as u64)) as u32), ((((x171 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32));
  let mut x181: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x181, (((x176 >> 31) as fiat_poly1305_u1) & ((((((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x170 as u64) + (x170 as u64)) & (0xffffffff as u64)) as u32), ((((x172 as u64) + (x175 as u64)) & (0xffffffff as u64)) as u32));
  let mut x182: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x182, (((x176 >> 31) as fiat_poly1305_u1) & ((((((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x171 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x169 as u64) + (x169 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x183: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x183, (((x176 >> 31) as fiat_poly1305_u1) & ((((((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x172 as u64) + (x175 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x170 as u64) + (x170 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x184: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x184, ((x179 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x178);
  let mut x185: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x185, ((x179 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x180);
  let mut x186: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x186, ((x179 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x181);
  let x187: u32 = (((((!((((0x1 as u64) + (x177 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x188: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x188, (((x187 >> 31) as fiat_poly1305_u1) & ((((((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((0x1 as u64) + (x177 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x177 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x189: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x189, (((x187 >> 31) as fiat_poly1305_u1) & ((((((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), x178, ((((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x190: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x190, (((x187 >> 31) as fiat_poly1305_u1) & ((((((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x178) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x191: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x191, (((x187 >> 31) as fiat_poly1305_u1) & ((((((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x180 as u64) + (x180 as u64)) & (0xffffffff as u64)) as u32), ((((x182 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32));
  let mut x192: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x192, (((x187 >> 31) as fiat_poly1305_u1) & ((((((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x181 as u64) + (x181 as u64)) & (0xffffffff as u64)) as u32), ((((x183 as u64) + (x186 as u64)) & (0xffffffff as u64)) as u32));
  let mut x193: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x193, (((x187 >> 31) as fiat_poly1305_u1) & ((((((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x182 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x180 as u64) + (x180 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x194: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x194, (((x187 >> 31) as fiat_poly1305_u1) & ((((((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x183 as u64) + (x186 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x181 as u64) + (x181 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x195: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x195, ((x190 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x189);
  let mut x196: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x196, ((x190 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x191);
  let mut x197: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x197, ((x190 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x192);
  let x198: u32 = (((((!((((0x1 as u64) + (x188 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x199: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x199, (((x198 >> 31) as fiat_poly1305_u1) & ((((((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((0x1 as u64) + (x188 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x188 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x200: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x200, (((x198 >> 31) as fiat_poly1305_u1) & ((((((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), x189, ((((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x201: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x201, (((x198 >> 31) as fiat_poly1305_u1) & ((((((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x189) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x202: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x202, (((x198 >> 31) as fiat_poly1305_u1) & ((((((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x191 as u64) + (x191 as u64)) & (0xffffffff as u64)) as u32), ((((x193 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32));
  let mut x203: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x203, (((x198 >> 31) as fiat_poly1305_u1) & ((((((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x192 as u64) + (x192 as u64)) & (0xffffffff as u64)) as u32), ((((x194 as u64) + (x197 as u64)) & (0xffffffff as u64)) as u32));
  let mut x204: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x204, (((x198 >> 31) as fiat_poly1305_u1) & ((((((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x193 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x191 as u64) + (x191 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x205: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x205, (((x198 >> 31) as fiat_poly1305_u1) & ((((((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x194 as u64) + (x197 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x192 as u64) + (x192 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x206: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x206, ((x201 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x200);
  let mut x207: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x207, ((x201 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x202);
  let mut x208: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x208, ((x201 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x203);
  let x209: u32 = (((((!((((0x1 as u64) + (x199 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x210: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x210, (((x209 >> 31) as fiat_poly1305_u1) & ((((((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((0x1 as u64) + (x199 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x199 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x211: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x211, (((x209 >> 31) as fiat_poly1305_u1) & ((((((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), x200, ((((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x212: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x212, (((x209 >> 31) as fiat_poly1305_u1) & ((((((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x200) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x213: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x213, (((x209 >> 31) as fiat_poly1305_u1) & ((((((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x202 as u64) + (x202 as u64)) & (0xffffffff as u64)) as u32), ((((x204 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32));
  let mut x214: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x214, (((x209 >> 31) as fiat_poly1305_u1) & ((((((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x203 as u64) + (x203 as u64)) & (0xffffffff as u64)) as u32), ((((x205 as u64) + (x208 as u64)) & (0xffffffff as u64)) as u32));
  let mut x215: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x215, (((x209 >> 31) as fiat_poly1305_u1) & ((((((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x204 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x202 as u64) + (x202 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x216: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x216, (((x209 >> 31) as fiat_poly1305_u1) & ((((((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x205 as u64) + (x208 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x203 as u64) + (x203 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x217: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x217, ((x212 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x211);
  let mut x218: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x218, ((x212 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x213);
  let mut x219: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x219, ((x212 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x214);
  let x220: u32 = (((((!((((0x1 as u64) + (x210 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x221: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x221, (((x220 >> 31) as fiat_poly1305_u1) & ((((((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((0x1 as u64) + (x210 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x210 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x222: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x222, (((x220 >> 31) as fiat_poly1305_u1) & ((((((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), x211, ((((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x223: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x223, (((x220 >> 31) as fiat_poly1305_u1) & ((((((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x211) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x224: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x224, (((x220 >> 31) as fiat_poly1305_u1) & ((((((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x213 as u64) + (x213 as u64)) & (0xffffffff as u64)) as u32), ((((x215 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32));
  let mut x225: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x225, (((x220 >> 31) as fiat_poly1305_u1) & ((((((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x214 as u64) + (x214 as u64)) & (0xffffffff as u64)) as u32), ((((x216 as u64) + (x219 as u64)) & (0xffffffff as u64)) as u32));
  let mut x226: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x226, (((x220 >> 31) as fiat_poly1305_u1) & ((((((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x215 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x213 as u64) + (x213 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x227: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x227, (((x220 >> 31) as fiat_poly1305_u1) & ((((((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x216 as u64) + (x219 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x214 as u64) + (x214 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x228: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x228, ((x223 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x222);
  let mut x229: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x229, ((x223 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x224);
  let mut x230: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x230, ((x223 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x225);
  let x231: u32 = (((((!((((0x1 as u64) + (x221 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x232: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x232, (((x231 >> 31) as fiat_poly1305_u1) & ((((((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((0x1 as u64) + (x221 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x221 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x233: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x233, (((x231 >> 31) as fiat_poly1305_u1) & ((((((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), x222, ((((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x234: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x234, (((x231 >> 31) as fiat_poly1305_u1) & ((((((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x222) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x235: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x235, (((x231 >> 31) as fiat_poly1305_u1) & ((((((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x224 as u64) + (x224 as u64)) & (0xffffffff as u64)) as u32), ((((x226 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32));
  let mut x236: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x236, (((x231 >> 31) as fiat_poly1305_u1) & ((((((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x225 as u64) + (x225 as u64)) & (0xffffffff as u64)) as u32), ((((x227 as u64) + (x230 as u64)) & (0xffffffff as u64)) as u32));
  let mut x237: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x237, (((x231 >> 31) as fiat_poly1305_u1) & ((((((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x226 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x224 as u64) + (x224 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x238: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x238, (((x231 >> 31) as fiat_poly1305_u1) & ((((((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x227 as u64) + (x230 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x225 as u64) + (x225 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x239: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x239, ((x234 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x233);
  let mut x240: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x240, ((x234 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x235);
  let mut x241: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x241, ((x234 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x236);
  let x242: u32 = (((((!((((0x1 as u64) + (x232 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x243: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x243, (((x242 >> 31) as fiat_poly1305_u1) & ((((((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((0x1 as u64) + (x232 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x232 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x244: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x244, (((x242 >> 31) as fiat_poly1305_u1) & ((((((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), x233, ((((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x245: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x245, (((x242 >> 31) as fiat_poly1305_u1) & ((((((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x233) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x246: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x246, (((x242 >> 31) as fiat_poly1305_u1) & ((((((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x235 as u64) + (x235 as u64)) & (0xffffffff as u64)) as u32), ((((x237 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32));
  let mut x247: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x247, (((x242 >> 31) as fiat_poly1305_u1) & ((((((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x236 as u64) + (x236 as u64)) & (0xffffffff as u64)) as u32), ((((x238 as u64) + (x241 as u64)) & (0xffffffff as u64)) as u32));
  let mut x248: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x248, (((x242 >> 31) as fiat_poly1305_u1) & ((((((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x237 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x235 as u64) + (x235 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x249: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x249, (((x242 >> 31) as fiat_poly1305_u1) & ((((((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x238 as u64) + (x241 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x236 as u64) + (x236 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x250: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x250, ((x245 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x244);
  let mut x251: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x251, ((x245 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x246);
  let mut x252: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x252, ((x245 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x247);
  let x253: u32 = (((((!((((0x1 as u64) + (x243 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x254: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x254, (((x253 >> 31) as fiat_poly1305_u1) & ((((((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((0x1 as u64) + (x243 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x243 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x255: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x255, (((x253 >> 31) as fiat_poly1305_u1) & ((((((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), x244, ((((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x256: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x256, (((x253 >> 31) as fiat_poly1305_u1) & ((((((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x244) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x257: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x257, (((x253 >> 31) as fiat_poly1305_u1) & ((((((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x246 as u64) + (x246 as u64)) & (0xffffffff as u64)) as u32), ((((x248 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32));
  let mut x258: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x258, (((x253 >> 31) as fiat_poly1305_u1) & ((((((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x247 as u64) + (x247 as u64)) & (0xffffffff as u64)) as u32), ((((x249 as u64) + (x252 as u64)) & (0xffffffff as u64)) as u32));
  let mut x259: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x259, (((x253 >> 31) as fiat_poly1305_u1) & ((((((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x248 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x246 as u64) + (x246 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x260: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x260, (((x253 >> 31) as fiat_poly1305_u1) & ((((((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x249 as u64) + (x252 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x247 as u64) + (x247 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x261: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x261, ((x256 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x255);
  let mut x262: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x262, ((x256 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x257);
  let mut x263: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x263, ((x256 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x258);
  let x264: u32 = (((((!((((0x1 as u64) + (x254 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x265: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x265, (((x264 >> 31) as fiat_poly1305_u1) & ((((((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((0x1 as u64) + (x254 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x254 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x266: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x266, (((x264 >> 31) as fiat_poly1305_u1) & ((((((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), x255, ((((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x267: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x267, (((x264 >> 31) as fiat_poly1305_u1) & ((((((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x255) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x268: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x268, (((x264 >> 31) as fiat_poly1305_u1) & ((((((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x257 as u64) + (x257 as u64)) & (0xffffffff as u64)) as u32), ((((x259 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32));
  let mut x269: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x269, (((x264 >> 31) as fiat_poly1305_u1) & ((((((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x258 as u64) + (x258 as u64)) & (0xffffffff as u64)) as u32), ((((x260 as u64) + (x263 as u64)) & (0xffffffff as u64)) as u32));
  let mut x270: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x270, (((x264 >> 31) as fiat_poly1305_u1) & ((((((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x259 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x257 as u64) + (x257 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x271: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x271, (((x264 >> 31) as fiat_poly1305_u1) & ((((((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x260 as u64) + (x263 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x258 as u64) + (x258 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x272: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x272, ((x267 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x266);
  let mut x273: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x273, ((x267 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x268);
  let mut x274: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x274, ((x267 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x269);
  let x275: u32 = (((((!((((0x1 as u64) + (x265 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x276: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x276, (((x275 >> 31) as fiat_poly1305_u1) & ((((((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((0x1 as u64) + (x265 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x265 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x277: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x277, (((x275 >> 31) as fiat_poly1305_u1) & ((((((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), x266, ((((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x278: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x278, (((x275 >> 31) as fiat_poly1305_u1) & ((((((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x266) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x279: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x279, (((x275 >> 31) as fiat_poly1305_u1) & ((((((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x268 as u64) + (x268 as u64)) & (0xffffffff as u64)) as u32), ((((x270 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32));
  let mut x280: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x280, (((x275 >> 31) as fiat_poly1305_u1) & ((((((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x269 as u64) + (x269 as u64)) & (0xffffffff as u64)) as u32), ((((x271 as u64) + (x274 as u64)) & (0xffffffff as u64)) as u32));
  let mut x281: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x281, (((x275 >> 31) as fiat_poly1305_u1) & ((((((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x270 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x268 as u64) + (x268 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x282: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x282, (((x275 >> 31) as fiat_poly1305_u1) & ((((((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x271 as u64) + (x274 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x269 as u64) + (x269 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x283: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x283, ((x278 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x277);
  let mut x284: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x284, ((x278 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x279);
  let mut x285: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x285, ((x278 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x280);
  let x286: u32 = (((((!((((0x1 as u64) + (x276 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x287: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x287, (((x286 >> 31) as fiat_poly1305_u1) & ((((((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((0x1 as u64) + (x276 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x276 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x288: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x288, (((x286 >> 31) as fiat_poly1305_u1) & ((((((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), x277, ((((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x289: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x289, (((x286 >> 31) as fiat_poly1305_u1) & ((((((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x277) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x290: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x290, (((x286 >> 31) as fiat_poly1305_u1) & ((((((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x279 as u64) + (x279 as u64)) & (0xffffffff as u64)) as u32), ((((x281 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32));
  let mut x291: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x291, (((x286 >> 31) as fiat_poly1305_u1) & ((((((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x280 as u64) + (x280 as u64)) & (0xffffffff as u64)) as u32), ((((x282 as u64) + (x285 as u64)) & (0xffffffff as u64)) as u32));
  let mut x292: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x292, (((x286 >> 31) as fiat_poly1305_u1) & ((((((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x281 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x279 as u64) + (x279 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x293: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x293, (((x286 >> 31) as fiat_poly1305_u1) & ((((((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x282 as u64) + (x285 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x280 as u64) + (x280 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x294: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x294, ((x289 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x288);
  let mut x295: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x295, ((x289 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x290);
  let mut x296: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x296, ((x289 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x291);
  let x297: u32 = (((((!((((0x1 as u64) + (x287 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x298: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x298, (((x297 >> 31) as fiat_poly1305_u1) & ((((((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((0x1 as u64) + (x287 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x287 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x299: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x299, (((x297 >> 31) as fiat_poly1305_u1) & ((((((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), x288, ((((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x300: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x300, (((x297 >> 31) as fiat_poly1305_u1) & ((((((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x288) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x301: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x301, (((x297 >> 31) as fiat_poly1305_u1) & ((((((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x290 as u64) + (x290 as u64)) & (0xffffffff as u64)) as u32), ((((x292 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32));
  let mut x302: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x302, (((x297 >> 31) as fiat_poly1305_u1) & ((((((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x291 as u64) + (x291 as u64)) & (0xffffffff as u64)) as u32), ((((x293 as u64) + (x296 as u64)) & (0xffffffff as u64)) as u32));
  let mut x303: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x303, (((x297 >> 31) as fiat_poly1305_u1) & ((((((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x292 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x290 as u64) + (x290 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x304: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x304, (((x297 >> 31) as fiat_poly1305_u1) & ((((((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x293 as u64) + (x296 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x291 as u64) + (x291 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x305: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x305, ((x300 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x299);
  let mut x306: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x306, ((x300 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x301);
  let mut x307: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x307, ((x300 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x302);
  let x308: u32 = (((((!((((0x1 as u64) + (x298 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x309: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x309, (((x308 >> 31) as fiat_poly1305_u1) & ((((((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((0x1 as u64) + (x298 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x298 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x310: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x310, (((x308 >> 31) as fiat_poly1305_u1) & ((((((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), x299, ((((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x311: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x311, (((x308 >> 31) as fiat_poly1305_u1) & ((((((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x299) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x312: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x312, (((x308 >> 31) as fiat_poly1305_u1) & ((((((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x301 as u64) + (x301 as u64)) & (0xffffffff as u64)) as u32), ((((x303 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32));
  let mut x313: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x313, (((x308 >> 31) as fiat_poly1305_u1) & ((((((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x302 as u64) + (x302 as u64)) & (0xffffffff as u64)) as u32), ((((x304 as u64) + (x307 as u64)) & (0xffffffff as u64)) as u32));
  let mut x314: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x314, (((x308 >> 31) as fiat_poly1305_u1) & ((((((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x303 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x301 as u64) + (x301 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x315: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x315, (((x308 >> 31) as fiat_poly1305_u1) & ((((((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x304 as u64) + (x307 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x302 as u64) + (x302 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x316: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x316, ((x311 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x310);
  let mut x317: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x317, ((x311 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x312);
  let mut x318: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x318, ((x311 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x313);
  let x319: u32 = (((((!((((0x1 as u64) + (x309 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x320: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x320, (((x319 >> 31) as fiat_poly1305_u1) & ((((((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x310) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x321: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x321, (((x319 >> 31) as fiat_poly1305_u1) & ((((((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x312 as u64) + (x312 as u64)) & (0xffffffff as u64)) as u32), ((((x314 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32));
  let mut x322: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x322, (((x319 >> 31) as fiat_poly1305_u1) & ((((((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x313 as u64) + (x313 as u64)) & (0xffffffff as u64)) as u32), ((((x315 as u64) + (x318 as u64)) & (0xffffffff as u64)) as u32));
  let mut x323: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x323, (((x319 >> 31) as fiat_poly1305_u1) & ((((((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x314 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x312 as u64) + (x312 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x324: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x324, (((x319 >> 31) as fiat_poly1305_u1) & ((((((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_poly1305_u1)), ((((x315 as u64) + (x318 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x313 as u64) + (x313 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x325: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x325, ((x320 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x321);
  let mut x326: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x326, ((x320 & (0x1 as u32)) as fiat_poly1305_u1), (0x0 as u32), x322);
  let mut x327: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x327, (((arg1[5]) >> 31) as fiat_poly1305_u1), (0x0 as u32), 0xffffffff);
  let mut x328: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x328, ((((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32) >> 31) as fiat_poly1305_u1), (0x0 as u32), 0xffffffff);
  let mut x329: u32 = 0;
  let mut x330: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x329, &mut x330, x328, (arg1[0]));
  let mut x331: u32 = 0;
  let mut x332: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x331, &mut x332, x328, (arg1[1]));
  let mut x333: u32 = 0;
  let mut x334: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x333, &mut x334, x328, (arg1[0]));
  let mut x335: u32 = 0;
  let mut x336: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x335, &mut x336, x328, (arg1[2]));
  let mut x337: u32 = 0;
  let mut x338: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x337, &mut x338, x328, (arg1[1]));
  let mut x339: u32 = 0;
  let mut x340: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x339, &mut x340, x328, (arg1[0]));
  let mut x341: u32 = 0;
  let mut x342: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x341, &mut x342, x328, (arg1[3]));
  let mut x343: u32 = 0;
  let mut x344: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x343, &mut x344, x328, (arg1[2]));
  let mut x345: u32 = 0;
  let mut x346: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x345, &mut x346, x328, (arg1[1]));
  let mut x347: u32 = 0;
  let mut x348: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x347, &mut x348, x328, (arg1[0]));
  let mut x349: u32 = 0;
  let mut x350: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x349, &mut x350, x328, (arg1[4]));
  let mut x351: u32 = 0;
  let mut x352: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x351, &mut x352, x328, (arg1[3]));
  let mut x353: u32 = 0;
  let mut x354: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x353, &mut x354, x328, (arg1[2]));
  let mut x355: u32 = 0;
  let mut x356: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x355, &mut x356, x328, (arg1[1]));
  let mut x357: u32 = 0;
  let mut x358: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x357, &mut x358, x328, (arg1[0]));
  let mut x359: u32 = 0;
  let mut x360: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x359, &mut x360, x328, (arg1[5]));
  let mut x361: u32 = 0;
  let mut x362: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x361, &mut x362, x328, (arg1[4]));
  let mut x363: u32 = 0;
  let mut x364: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x363, &mut x364, x328, (arg1[3]));
  let mut x365: u32 = 0;
  let mut x366: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x365, &mut x366, x328, (arg1[2]));
  let mut x367: u32 = 0;
  let mut x368: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x367, &mut x368, x328, (arg1[1]));
  let mut x369: u32 = 0;
  let mut x370: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x369, &mut x370, x328, (arg1[0]));
  let mut x371: u32 = 0;
  let mut x372: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x371, &mut x372, ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32), x327);
  let mut x373: u32 = 0;
  let mut x374: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x373, &mut x374, ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32), (arg1[5]));
  let mut x375: u32 = 0;
  let mut x376: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x375, &mut x376, ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32), (arg1[4]));
  let mut x377: u32 = 0;
  let mut x378: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x377, &mut x378, ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32), (arg1[3]));
  let mut x379: u32 = 0;
  let mut x380: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x379, &mut x380, ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32), (arg1[2]));
  let mut x381: u32 = 0;
  let mut x382: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x381, &mut x382, ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32), (arg1[1]));
  let mut x383: u32 = 0;
  let mut x384: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x383, &mut x384, ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32), (arg1[0]));
  let mut x385: u32 = 0;
  let mut x386: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x385, &mut x386, 0x0, x374, x329);
  let mut x387: u32 = 0;
  let mut x388: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x387, &mut x388, 0x0, x385, x331);
  let mut x389: u32 = 0;
  let mut x390: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x389, &mut x390, 0x0, x376, x333);
  let mut x391: u32 = 0;
  let mut x392: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x391, &mut x392, x390, x387, x334);
  let mut x393: u32 = 0;
  let mut x394: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x393, &mut x394, 0x0, x389, x337);
  let mut x395: u32 = 0;
  let mut x396: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x395, &mut x396, x394, x391, x335);
  let mut x397: u32 = 0;
  let mut x398: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x397, &mut x398, 0x0, x378, x339);
  let mut x399: u32 = 0;
  let mut x400: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x399, &mut x400, x398, x393, x340);
  let mut x401: u32 = 0;
  let mut x402: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x401, &mut x402, x400, x395, x338);
  let mut x403: u32 = 0;
  let mut x404: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x403, &mut x404, 0x0, x397, x345);
  let mut x405: u32 = 0;
  let mut x406: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x405, &mut x406, x404, x399, x343);
  let mut x407: u32 = 0;
  let mut x408: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x407, &mut x408, x406, x401, x341);
  let mut x409: u32 = 0;
  let mut x410: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x409, &mut x410, 0x0, x380, x347);
  let mut x411: u32 = 0;
  let mut x412: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x411, &mut x412, x410, x403, x348);
  let mut x413: u32 = 0;
  let mut x414: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x413, &mut x414, x412, x405, x346);
  let mut x415: u32 = 0;
  let mut x416: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x415, &mut x416, x414, x407, x344);
  let mut x417: u32 = 0;
  let mut x418: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x417, &mut x418, 0x0, x409, x355);
  let mut x419: u32 = 0;
  let mut x420: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x419, &mut x420, x418, x411, x353);
  let mut x421: u32 = 0;
  let mut x422: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x421, &mut x422, x420, x413, x351);
  let mut x423: u32 = 0;
  let mut x424: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x423, &mut x424, x422, x415, x349);
  let mut x425: u32 = 0;
  let mut x426: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x425, &mut x426, 0x0, x382, x357);
  let mut x427: u32 = 0;
  let mut x428: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x427, &mut x428, x426, x417, x358);
  let mut x429: u32 = 0;
  let mut x430: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x429, &mut x430, x428, x419, x356);
  let mut x431: u32 = 0;
  let mut x432: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x431, &mut x432, x430, x421, x354);
  let mut x433: u32 = 0;
  let mut x434: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x433, &mut x434, x432, x423, x352);
  let mut x435: u32 = 0;
  let mut x436: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x435, &mut x436, 0x0, x425, x367);
  let mut x437: u32 = 0;
  let mut x438: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x437, &mut x438, x436, x427, x365);
  let mut x439: u32 = 0;
  let mut x440: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x439, &mut x440, x438, x429, x363);
  let mut x441: u32 = 0;
  let mut x442: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x441, &mut x442, x440, x431, x361);
  let mut x443: u32 = 0;
  let mut x444: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x443, &mut x444, x442, x433, x359);
  let mut x445: u32 = 0;
  let mut x446: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x445, &mut x446, 0x0, x384, x369);
  let mut x447: u32 = 0;
  let mut x448: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x447, &mut x448, x446, x435, x370);
  let mut x449: u32 = 0;
  let mut x450: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x449, &mut x450, x448, x437, x368);
  let mut x451: u32 = 0;
  let mut x452: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x451, &mut x452, x450, x439, x366);
  let mut x453: u32 = 0;
  let mut x454: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x453, &mut x454, x452, x441, x364);
  let mut x455: u32 = 0;
  let mut x456: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x455, &mut x456, x454, x443, x362);
  let mut x457: u32 = 0;
  let mut x458: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x457, &mut x458, 0x0, x445, x381);
  let mut x459: u32 = 0;
  let mut x460: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x459, &mut x460, x458, x447, x379);
  let mut x461: u32 = 0;
  let mut x462: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x461, &mut x462, x460, x449, x377);
  let mut x463: u32 = 0;
  let mut x464: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x463, &mut x464, x462, x451, x375);
  let mut x465: u32 = 0;
  let mut x466: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x465, &mut x466, x464, x453, x373);
  let mut x467: u32 = 0;
  let mut x468: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x467, &mut x468, x466, x455, x371);
  let mut x469: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x469, (((arg2[5]) >> 31) as fiat_poly1305_u1), (0x0 as u32), 0xffffffff);
  let mut x470: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x470, ((((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32) >> 31) as fiat_poly1305_u1), (0x0 as u32), 0xffffffff);
  let mut x471: u32 = 0;
  let mut x472: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x471, &mut x472, x470, (arg2[0]));
  let mut x473: u32 = 0;
  let mut x474: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x473, &mut x474, x470, (arg2[1]));
  let mut x475: u32 = 0;
  let mut x476: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x475, &mut x476, x470, (arg2[0]));
  let mut x477: u32 = 0;
  let mut x478: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x477, &mut x478, x470, (arg2[2]));
  let mut x479: u32 = 0;
  let mut x480: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x479, &mut x480, x470, (arg2[1]));
  let mut x481: u32 = 0;
  let mut x482: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x481, &mut x482, x470, (arg2[0]));
  let mut x483: u32 = 0;
  let mut x484: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x483, &mut x484, x470, (arg2[3]));
  let mut x485: u32 = 0;
  let mut x486: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x485, &mut x486, x470, (arg2[2]));
  let mut x487: u32 = 0;
  let mut x488: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x487, &mut x488, x470, (arg2[1]));
  let mut x489: u32 = 0;
  let mut x490: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x489, &mut x490, x470, (arg2[0]));
  let mut x491: u32 = 0;
  let mut x492: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x491, &mut x492, x470, (arg2[4]));
  let mut x493: u32 = 0;
  let mut x494: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x493, &mut x494, x470, (arg2[3]));
  let mut x495: u32 = 0;
  let mut x496: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x495, &mut x496, x470, (arg2[2]));
  let mut x497: u32 = 0;
  let mut x498: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x497, &mut x498, x470, (arg2[1]));
  let mut x499: u32 = 0;
  let mut x500: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x499, &mut x500, x470, (arg2[0]));
  let mut x501: u32 = 0;
  let mut x502: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x501, &mut x502, x470, (arg2[5]));
  let mut x503: u32 = 0;
  let mut x504: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x503, &mut x504, x470, (arg2[4]));
  let mut x505: u32 = 0;
  let mut x506: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x505, &mut x506, x470, (arg2[3]));
  let mut x507: u32 = 0;
  let mut x508: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x507, &mut x508, x470, (arg2[2]));
  let mut x509: u32 = 0;
  let mut x510: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x509, &mut x510, x470, (arg2[1]));
  let mut x511: u32 = 0;
  let mut x512: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x511, &mut x512, x470, (arg2[0]));
  let mut x513: u32 = 0;
  let mut x514: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x513, &mut x514, ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32), x469);
  let mut x515: u32 = 0;
  let mut x516: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x515, &mut x516, ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32), (arg2[5]));
  let mut x517: u32 = 0;
  let mut x518: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x517, &mut x518, ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32), (arg2[4]));
  let mut x519: u32 = 0;
  let mut x520: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x519, &mut x520, ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32), (arg2[3]));
  let mut x521: u32 = 0;
  let mut x522: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x521, &mut x522, ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32), (arg2[2]));
  let mut x523: u32 = 0;
  let mut x524: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x523, &mut x524, ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32), (arg2[1]));
  let mut x525: u32 = 0;
  let mut x526: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x525, &mut x526, ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32), (arg2[0]));
  let mut x527: u32 = 0;
  let mut x528: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x527, &mut x528, 0x0, x516, x471);
  let mut x529: u32 = 0;
  let mut x530: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x529, &mut x530, 0x0, x527, x473);
  let mut x531: u32 = 0;
  let mut x532: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x531, &mut x532, 0x0, x518, x475);
  let mut x533: u32 = 0;
  let mut x534: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x533, &mut x534, x532, x529, x476);
  let mut x535: u32 = 0;
  let mut x536: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x535, &mut x536, 0x0, x531, x479);
  let mut x537: u32 = 0;
  let mut x538: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x537, &mut x538, x536, x533, x477);
  let mut x539: u32 = 0;
  let mut x540: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x539, &mut x540, 0x0, x520, x481);
  let mut x541: u32 = 0;
  let mut x542: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x541, &mut x542, x540, x535, x482);
  let mut x543: u32 = 0;
  let mut x544: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x543, &mut x544, x542, x537, x480);
  let mut x545: u32 = 0;
  let mut x546: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x545, &mut x546, 0x0, x539, x487);
  let mut x547: u32 = 0;
  let mut x548: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x547, &mut x548, x546, x541, x485);
  let mut x549: u32 = 0;
  let mut x550: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x549, &mut x550, x548, x543, x483);
  let mut x551: u32 = 0;
  let mut x552: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x551, &mut x552, 0x0, x522, x489);
  let mut x553: u32 = 0;
  let mut x554: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x553, &mut x554, x552, x545, x490);
  let mut x555: u32 = 0;
  let mut x556: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x555, &mut x556, x554, x547, x488);
  let mut x557: u32 = 0;
  let mut x558: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x557, &mut x558, x556, x549, x486);
  let mut x559: u32 = 0;
  let mut x560: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x559, &mut x560, 0x0, x551, x497);
  let mut x561: u32 = 0;
  let mut x562: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x561, &mut x562, x560, x553, x495);
  let mut x563: u32 = 0;
  let mut x564: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x563, &mut x564, x562, x555, x493);
  let mut x565: u32 = 0;
  let mut x566: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x565, &mut x566, x564, x557, x491);
  let mut x567: u32 = 0;
  let mut x568: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x567, &mut x568, 0x0, x524, x499);
  let mut x569: u32 = 0;
  let mut x570: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x569, &mut x570, x568, x559, x500);
  let mut x571: u32 = 0;
  let mut x572: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x571, &mut x572, x570, x561, x498);
  let mut x573: u32 = 0;
  let mut x574: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x573, &mut x574, x572, x563, x496);
  let mut x575: u32 = 0;
  let mut x576: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x575, &mut x576, x574, x565, x494);
  let mut x577: u32 = 0;
  let mut x578: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x577, &mut x578, 0x0, x567, x509);
  let mut x579: u32 = 0;
  let mut x580: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x579, &mut x580, x578, x569, x507);
  let mut x581: u32 = 0;
  let mut x582: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x581, &mut x582, x580, x571, x505);
  let mut x583: u32 = 0;
  let mut x584: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x583, &mut x584, x582, x573, x503);
  let mut x585: u32 = 0;
  let mut x586: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x585, &mut x586, x584, x575, x501);
  let mut x587: u32 = 0;
  let mut x588: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x587, &mut x588, 0x0, x526, x511);
  let mut x589: u32 = 0;
  let mut x590: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x589, &mut x590, x588, x577, x512);
  let mut x591: u32 = 0;
  let mut x592: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x591, &mut x592, x590, x579, x510);
  let mut x593: u32 = 0;
  let mut x594: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x593, &mut x594, x592, x581, x508);
  let mut x595: u32 = 0;
  let mut x596: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x595, &mut x596, x594, x583, x506);
  let mut x597: u32 = 0;
  let mut x598: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x597, &mut x598, x596, x585, x504);
  let mut x599: u32 = 0;
  let mut x600: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x599, &mut x600, 0x0, x587, x523);
  let mut x601: u32 = 0;
  let mut x602: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x601, &mut x602, x600, x589, x521);
  let mut x603: u32 = 0;
  let mut x604: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x603, &mut x604, x602, x591, x519);
  let mut x605: u32 = 0;
  let mut x606: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x605, &mut x606, x604, x593, x517);
  let mut x607: u32 = 0;
  let mut x608: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x607, &mut x608, x606, x595, x515);
  let mut x609: u32 = 0;
  let mut x610: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x609, &mut x610, x608, x597, x513);
  let mut x611: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x611, (((arg1[5]) >> 31) as fiat_poly1305_u1), (0x0 as u32), 0xffffffff);
  let mut x612: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x612, ((((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32) >> 31) as fiat_poly1305_u1), (0x0 as u32), 0xffffffff);
  let mut x613: u32 = 0;
  let mut x614: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x613, &mut x614, x612, (arg1[0]));
  let mut x615: u32 = 0;
  let mut x616: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x615, &mut x616, x612, (arg1[1]));
  let mut x617: u32 = 0;
  let mut x618: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x617, &mut x618, x612, (arg1[0]));
  let mut x619: u32 = 0;
  let mut x620: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x619, &mut x620, x612, (arg1[2]));
  let mut x621: u32 = 0;
  let mut x622: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x621, &mut x622, x612, (arg1[1]));
  let mut x623: u32 = 0;
  let mut x624: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x623, &mut x624, x612, (arg1[0]));
  let mut x625: u32 = 0;
  let mut x626: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x625, &mut x626, x612, (arg1[3]));
  let mut x627: u32 = 0;
  let mut x628: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x627, &mut x628, x612, (arg1[2]));
  let mut x629: u32 = 0;
  let mut x630: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x629, &mut x630, x612, (arg1[1]));
  let mut x631: u32 = 0;
  let mut x632: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x631, &mut x632, x612, (arg1[0]));
  let mut x633: u32 = 0;
  let mut x634: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x633, &mut x634, x612, (arg1[4]));
  let mut x635: u32 = 0;
  let mut x636: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x635, &mut x636, x612, (arg1[3]));
  let mut x637: u32 = 0;
  let mut x638: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x637, &mut x638, x612, (arg1[2]));
  let mut x639: u32 = 0;
  let mut x640: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x639, &mut x640, x612, (arg1[1]));
  let mut x641: u32 = 0;
  let mut x642: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x641, &mut x642, x612, (arg1[0]));
  let mut x643: u32 = 0;
  let mut x644: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x643, &mut x644, x612, (arg1[5]));
  let mut x645: u32 = 0;
  let mut x646: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x645, &mut x646, x612, (arg1[4]));
  let mut x647: u32 = 0;
  let mut x648: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x647, &mut x648, x612, (arg1[3]));
  let mut x649: u32 = 0;
  let mut x650: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x649, &mut x650, x612, (arg1[2]));
  let mut x651: u32 = 0;
  let mut x652: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x651, &mut x652, x612, (arg1[1]));
  let mut x653: u32 = 0;
  let mut x654: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x653, &mut x654, x612, (arg1[0]));
  let mut x655: u32 = 0;
  let mut x656: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x655, &mut x656, ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32), x611);
  let mut x657: u32 = 0;
  let mut x658: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x657, &mut x658, ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32), (arg1[5]));
  let mut x659: u32 = 0;
  let mut x660: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x659, &mut x660, ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32), (arg1[4]));
  let mut x661: u32 = 0;
  let mut x662: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x661, &mut x662, ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32), (arg1[3]));
  let mut x663: u32 = 0;
  let mut x664: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x663, &mut x664, ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32), (arg1[2]));
  let mut x665: u32 = 0;
  let mut x666: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x665, &mut x666, ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32), (arg1[1]));
  let mut x667: u32 = 0;
  let mut x668: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x667, &mut x668, ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32), (arg1[0]));
  let mut x669: u32 = 0;
  let mut x670: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x669, &mut x670, 0x0, x658, x613);
  let mut x671: u32 = 0;
  let mut x672: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x671, &mut x672, 0x0, x669, x615);
  let mut x673: u32 = 0;
  let mut x674: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x673, &mut x674, 0x0, x660, x617);
  let mut x675: u32 = 0;
  let mut x676: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x675, &mut x676, x674, x671, x618);
  let mut x677: u32 = 0;
  let mut x678: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x677, &mut x678, 0x0, x673, x621);
  let mut x679: u32 = 0;
  let mut x680: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x679, &mut x680, x678, x675, x619);
  let mut x681: u32 = 0;
  let mut x682: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x681, &mut x682, 0x0, x662, x623);
  let mut x683: u32 = 0;
  let mut x684: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x683, &mut x684, x682, x677, x624);
  let mut x685: u32 = 0;
  let mut x686: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x685, &mut x686, x684, x679, x622);
  let mut x687: u32 = 0;
  let mut x688: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x687, &mut x688, 0x0, x681, x629);
  let mut x689: u32 = 0;
  let mut x690: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x689, &mut x690, x688, x683, x627);
  let mut x691: u32 = 0;
  let mut x692: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x691, &mut x692, x690, x685, x625);
  let mut x693: u32 = 0;
  let mut x694: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x693, &mut x694, 0x0, x664, x631);
  let mut x695: u32 = 0;
  let mut x696: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x695, &mut x696, x694, x687, x632);
  let mut x697: u32 = 0;
  let mut x698: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x697, &mut x698, x696, x689, x630);
  let mut x699: u32 = 0;
  let mut x700: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x699, &mut x700, x698, x691, x628);
  let mut x701: u32 = 0;
  let mut x702: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x701, &mut x702, 0x0, x693, x639);
  let mut x703: u32 = 0;
  let mut x704: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x703, &mut x704, x702, x695, x637);
  let mut x705: u32 = 0;
  let mut x706: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x705, &mut x706, x704, x697, x635);
  let mut x707: u32 = 0;
  let mut x708: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x707, &mut x708, x706, x699, x633);
  let mut x709: u32 = 0;
  let mut x710: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x709, &mut x710, 0x0, x666, x641);
  let mut x711: u32 = 0;
  let mut x712: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x711, &mut x712, x710, x701, x642);
  let mut x713: u32 = 0;
  let mut x714: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x713, &mut x714, x712, x703, x640);
  let mut x715: u32 = 0;
  let mut x716: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x715, &mut x716, x714, x705, x638);
  let mut x717: u32 = 0;
  let mut x718: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x717, &mut x718, x716, x707, x636);
  let mut x719: u32 = 0;
  let mut x720: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x719, &mut x720, 0x0, x709, x651);
  let mut x721: u32 = 0;
  let mut x722: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x721, &mut x722, x720, x711, x649);
  let mut x723: u32 = 0;
  let mut x724: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x723, &mut x724, x722, x713, x647);
  let mut x725: u32 = 0;
  let mut x726: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x725, &mut x726, x724, x715, x645);
  let mut x727: u32 = 0;
  let mut x728: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x727, &mut x728, x726, x717, x643);
  let mut x729: u32 = 0;
  let mut x730: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x729, &mut x730, 0x0, x668, x653);
  let mut x731: u32 = 0;
  let mut x732: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x731, &mut x732, x730, x719, x654);
  let mut x733: u32 = 0;
  let mut x734: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x733, &mut x734, x732, x721, x652);
  let mut x735: u32 = 0;
  let mut x736: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x735, &mut x736, x734, x723, x650);
  let mut x737: u32 = 0;
  let mut x738: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x737, &mut x738, x736, x725, x648);
  let mut x739: u32 = 0;
  let mut x740: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x739, &mut x740, x738, x727, x646);
  let mut x741: u32 = 0;
  let mut x742: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x741, &mut x742, 0x0, x729, x665);
  let mut x743: u32 = 0;
  let mut x744: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x743, &mut x744, x742, x731, x663);
  let mut x745: u32 = 0;
  let mut x746: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x745, &mut x746, x744, x733, x661);
  let mut x747: u32 = 0;
  let mut x748: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x747, &mut x748, x746, x735, x659);
  let mut x749: u32 = 0;
  let mut x750: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x749, &mut x750, x748, x737, x657);
  let mut x751: u32 = 0;
  let mut x752: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x751, &mut x752, x750, x739, x655);
  let mut x753: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x753, (((arg2[5]) >> 31) as fiat_poly1305_u1), (0x0 as u32), 0xffffffff);
  let mut x754: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x754, ((((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32) >> 31) as fiat_poly1305_u1), (0x0 as u32), 0xffffffff);
  let mut x755: u32 = 0;
  let mut x756: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x755, &mut x756, x754, (arg2[0]));
  let mut x757: u32 = 0;
  let mut x758: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x757, &mut x758, x754, (arg2[1]));
  let mut x759: u32 = 0;
  let mut x760: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x759, &mut x760, x754, (arg2[0]));
  let mut x761: u32 = 0;
  let mut x762: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x761, &mut x762, x754, (arg2[2]));
  let mut x763: u32 = 0;
  let mut x764: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x763, &mut x764, x754, (arg2[1]));
  let mut x765: u32 = 0;
  let mut x766: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x765, &mut x766, x754, (arg2[0]));
  let mut x767: u32 = 0;
  let mut x768: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x767, &mut x768, x754, (arg2[3]));
  let mut x769: u32 = 0;
  let mut x770: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x769, &mut x770, x754, (arg2[2]));
  let mut x771: u32 = 0;
  let mut x772: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x771, &mut x772, x754, (arg2[1]));
  let mut x773: u32 = 0;
  let mut x774: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x773, &mut x774, x754, (arg2[0]));
  let mut x775: u32 = 0;
  let mut x776: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x775, &mut x776, x754, (arg2[4]));
  let mut x777: u32 = 0;
  let mut x778: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x777, &mut x778, x754, (arg2[3]));
  let mut x779: u32 = 0;
  let mut x780: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x779, &mut x780, x754, (arg2[2]));
  let mut x781: u32 = 0;
  let mut x782: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x781, &mut x782, x754, (arg2[1]));
  let mut x783: u32 = 0;
  let mut x784: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x783, &mut x784, x754, (arg2[0]));
  let mut x785: u32 = 0;
  let mut x786: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x785, &mut x786, x754, (arg2[5]));
  let mut x787: u32 = 0;
  let mut x788: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x787, &mut x788, x754, (arg2[4]));
  let mut x789: u32 = 0;
  let mut x790: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x789, &mut x790, x754, (arg2[3]));
  let mut x791: u32 = 0;
  let mut x792: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x791, &mut x792, x754, (arg2[2]));
  let mut x793: u32 = 0;
  let mut x794: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x793, &mut x794, x754, (arg2[1]));
  let mut x795: u32 = 0;
  let mut x796: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x795, &mut x796, x754, (arg2[0]));
  let mut x797: u32 = 0;
  let mut x798: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x797, &mut x798, ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32), x753);
  let mut x799: u32 = 0;
  let mut x800: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x799, &mut x800, ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32), (arg2[5]));
  let mut x801: u32 = 0;
  let mut x802: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x801, &mut x802, ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32), (arg2[4]));
  let mut x803: u32 = 0;
  let mut x804: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x803, &mut x804, ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32), (arg2[3]));
  let mut x805: u32 = 0;
  let mut x806: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x805, &mut x806, ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32), (arg2[2]));
  let mut x807: u32 = 0;
  let mut x808: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x807, &mut x808, ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32), (arg2[1]));
  let mut x809: u32 = 0;
  let mut x810: u32 = 0;
  fiat_poly1305_mulx_u32(&mut x809, &mut x810, ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32), (arg2[0]));
  let mut x811: u32 = 0;
  let mut x812: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x811, &mut x812, 0x0, x800, x755);
  let mut x813: u32 = 0;
  let mut x814: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x813, &mut x814, 0x0, x811, x757);
  let mut x815: u32 = 0;
  let mut x816: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x815, &mut x816, 0x0, x802, x759);
  let mut x817: u32 = 0;
  let mut x818: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x817, &mut x818, x816, x813, x760);
  let mut x819: u32 = 0;
  let mut x820: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x819, &mut x820, 0x0, x815, x763);
  let mut x821: u32 = 0;
  let mut x822: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x821, &mut x822, x820, x817, x761);
  let mut x823: u32 = 0;
  let mut x824: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x823, &mut x824, 0x0, x804, x765);
  let mut x825: u32 = 0;
  let mut x826: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x825, &mut x826, x824, x819, x766);
  let mut x827: u32 = 0;
  let mut x828: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x827, &mut x828, x826, x821, x764);
  let mut x829: u32 = 0;
  let mut x830: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x829, &mut x830, 0x0, x823, x771);
  let mut x831: u32 = 0;
  let mut x832: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x831, &mut x832, x830, x825, x769);
  let mut x833: u32 = 0;
  let mut x834: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x833, &mut x834, x832, x827, x767);
  let mut x835: u32 = 0;
  let mut x836: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x835, &mut x836, 0x0, x806, x773);
  let mut x837: u32 = 0;
  let mut x838: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x837, &mut x838, x836, x829, x774);
  let mut x839: u32 = 0;
  let mut x840: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x839, &mut x840, x838, x831, x772);
  let mut x841: u32 = 0;
  let mut x842: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x841, &mut x842, x840, x833, x770);
  let mut x843: u32 = 0;
  let mut x844: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x843, &mut x844, 0x0, x835, x781);
  let mut x845: u32 = 0;
  let mut x846: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x845, &mut x846, x844, x837, x779);
  let mut x847: u32 = 0;
  let mut x848: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x847, &mut x848, x846, x839, x777);
  let mut x849: u32 = 0;
  let mut x850: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x849, &mut x850, x848, x841, x775);
  let mut x851: u32 = 0;
  let mut x852: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x851, &mut x852, 0x0, x808, x783);
  let mut x853: u32 = 0;
  let mut x854: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x853, &mut x854, x852, x843, x784);
  let mut x855: u32 = 0;
  let mut x856: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x855, &mut x856, x854, x845, x782);
  let mut x857: u32 = 0;
  let mut x858: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x857, &mut x858, x856, x847, x780);
  let mut x859: u32 = 0;
  let mut x860: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x859, &mut x860, x858, x849, x778);
  let mut x861: u32 = 0;
  let mut x862: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x861, &mut x862, 0x0, x851, x793);
  let mut x863: u32 = 0;
  let mut x864: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x863, &mut x864, x862, x853, x791);
  let mut x865: u32 = 0;
  let mut x866: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x865, &mut x866, x864, x855, x789);
  let mut x867: u32 = 0;
  let mut x868: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x867, &mut x868, x866, x857, x787);
  let mut x869: u32 = 0;
  let mut x870: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x869, &mut x870, x868, x859, x785);
  let mut x871: u32 = 0;
  let mut x872: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x871, &mut x872, 0x0, x810, x795);
  let mut x873: u32 = 0;
  let mut x874: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x873, &mut x874, x872, x861, x796);
  let mut x875: u32 = 0;
  let mut x876: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x875, &mut x876, x874, x863, x794);
  let mut x877: u32 = 0;
  let mut x878: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x877, &mut x878, x876, x865, x792);
  let mut x879: u32 = 0;
  let mut x880: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x879, &mut x880, x878, x867, x790);
  let mut x881: u32 = 0;
  let mut x882: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x881, &mut x882, x880, x869, x788);
  let mut x883: u32 = 0;
  let mut x884: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x883, &mut x884, 0x0, x871, x807);
  let mut x885: u32 = 0;
  let mut x886: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x885, &mut x886, x884, x873, x805);
  let mut x887: u32 = 0;
  let mut x888: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x887, &mut x888, x886, x875, x803);
  let mut x889: u32 = 0;
  let mut x890: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x889, &mut x890, x888, x877, x801);
  let mut x891: u32 = 0;
  let mut x892: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x891, &mut x892, x890, x879, x799);
  let mut x893: u32 = 0;
  let mut x894: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x893, &mut x894, x892, x881, x797);
  let mut x895: u32 = 0;
  let mut x896: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x895, &mut x896, 0x0, x383, x525);
  let mut x897: u32 = 0;
  let mut x898: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x897, &mut x898, x896, x457, x599);
  let mut x899: u32 = 0;
  let mut x900: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x899, &mut x900, x898, x459, x601);
  let mut x901: u32 = 0;
  let mut x902: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x901, &mut x902, x900, x461, x603);
  let mut x903: u32 = 0;
  let mut x904: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x903, &mut x904, x902, x463, x605);
  let mut x905: u32 = 0;
  let mut x906: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x905, &mut x906, x904, x465, x607);
  let mut x907: u32 = 0;
  let mut x908: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x907, &mut x908, x906, x467, x609);
  let mut x909: u32 = 0;
  let mut x910: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x909, &mut x910, 0x0, x667, x809);
  let mut x911: u32 = 0;
  let mut x912: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x911, &mut x912, x910, x741, x883);
  let mut x913: u32 = 0;
  let mut x914: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x913, &mut x914, x912, x743, x885);
  let mut x915: u32 = 0;
  let mut x916: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x915, &mut x916, x914, x745, x887);
  let mut x917: u32 = 0;
  let mut x918: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x917, &mut x918, x916, x747, x889);
  let mut x919: u32 = 0;
  let mut x920: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x919, &mut x920, x918, x749, x891);
  let mut x921: u32 = 0;
  let mut x922: fiat_poly1305_u1 = 0;
  fiat_poly1305_addcarryx_u32(&mut x921, &mut x922, x920, x751, x893);
  let x923: u32 = ((x895 >> 30) | ((x897 << 2) & 0xffffffff));
  let x924: u32 = ((x897 >> 30) | ((x899 << 2) & 0xffffffff));
  let x925: u32 = ((x899 >> 30) | ((x901 << 2) & 0xffffffff));
  let x926: u32 = ((x901 >> 30) | ((x903 << 2) & 0xffffffff));
  let x927: u32 = ((x903 >> 30) | ((x905 << 2) & 0xffffffff));
  let x928: u32 = ((x905 >> 30) | ((x907 << 2) & 0xffffffff));
  let x929: u32 = ((x909 >> 30) | ((x911 << 2) & 0xffffffff));
  let x930: u32 = ((x911 >> 30) | ((x913 << 2) & 0xffffffff));
  let x931: u32 = ((x913 >> 30) | ((x915 << 2) & 0xffffffff));
  let x932: u32 = ((x915 >> 30) | ((x917 << 2) & 0xffffffff));
  let x933: u32 = ((x917 >> 30) | ((x919 << 2) & 0xffffffff));
  let x934: u32 = ((x919 >> 30) | ((x921 << 2) & 0xffffffff));
  let x935: fiat_poly1305_u1 = ((((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32) >> 31) as fiat_poly1305_u1);
  let x936: u32 = (((((!((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let x937: u32 = ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32);
  let x938: u32 = (x937 >> 26);
  let x939: u32 = (x937 & 0x3ffffff);
  let x940: u32 = (x936 >> 26);
  let x941: u32 = (x936 & 0x3ffffff);
  let x942: u32 = (0x7fffff6 - x941);
  let x943: u32 = (0x7fffffe - x940);
  let x944: fiat_poly1305_u1 = ((x942 >> 26) as fiat_poly1305_u1);
  let x945: u32 = (x942 & 0x3ffffff);
  let x946: u32 = ((x944 as u32) + x943);
  let x947: u32 = (x946 & 0x3ffffff);
  let x948: u32 = (x945 + 0x5);
  let x949: fiat_poly1305_u1 = ((x948 >> 26) as fiat_poly1305_u1);
  let x950: u32 = (x948 & 0x3ffffff);
  let x951: u32 = ((x949 as u32) + x947);
  let x952: fiat_poly1305_u1 = ((x951 >> 26) as fiat_poly1305_u1);
  let x953: u32 = (x951 & 0x3ffffff);
  let x954: u32 = ((x952 as u32) + 0x3ffffff);
  let mut x955: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x955, x935, x939, x950);
  let mut x956: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x956, x935, x938, x953);
  let mut x957: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x957, x935, (0x0 as u32), x954);
  let mut x958: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x958, x935, (0x0 as u32), 0x3ffffff);
  let mut x959: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x959, x935, (0x0 as u32), 0x3ffffff);
  let x960: fiat_poly1305_u1 = ((((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32) >> 31) as fiat_poly1305_u1);
  let x961: u32 = (((((!((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let x962: u32 = ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32);
  let x963: u32 = (x962 >> 26);
  let x964: u32 = (x962 & 0x3ffffff);
  let x965: u32 = (x961 >> 26);
  let x966: u32 = (x961 & 0x3ffffff);
  let x967: u32 = (0x7fffff6 - x966);
  let x968: u32 = (0x7fffffe - x965);
  let x969: fiat_poly1305_u1 = ((x967 >> 26) as fiat_poly1305_u1);
  let x970: u32 = (x967 & 0x3ffffff);
  let x971: u32 = ((x969 as u32) + x968);
  let x972: u32 = (x971 & 0x3ffffff);
  let x973: u32 = (x970 + 0x5);
  let x974: fiat_poly1305_u1 = ((x973 >> 26) as fiat_poly1305_u1);
  let x975: u32 = (x973 & 0x3ffffff);
  let x976: u32 = ((x974 as u32) + x972);
  let x977: fiat_poly1305_u1 = ((x976 >> 26) as fiat_poly1305_u1);
  let x978: u32 = (x976 & 0x3ffffff);
  let x979: u32 = ((x977 as u32) + 0x3ffffff);
  let mut x980: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x980, x960, x964, x975);
  let mut x981: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x981, x960, x963, x978);
  let mut x982: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x982, x960, (0x0 as u32), x979);
  let mut x983: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x983, x960, (0x0 as u32), 0x3ffffff);
  let mut x984: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x984, x960, (0x0 as u32), 0x3ffffff);
  let x985: fiat_poly1305_u1 = ((((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32) >> 31) as fiat_poly1305_u1);
  let x986: u32 = (((((!((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let x987: u32 = ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32);
  let x988: u32 = (x987 >> 26);
  let x989: u32 = (x987 & 0x3ffffff);
  let x990: u32 = (x986 >> 26);
  let x991: u32 = (x986 & 0x3ffffff);
  let x992: u32 = (0x7fffff6 - x991);
  let x993: u32 = (0x7fffffe - x990);
  let x994: fiat_poly1305_u1 = ((x992 >> 26) as fiat_poly1305_u1);
  let x995: u32 = (x992 & 0x3ffffff);
  let x996: u32 = ((x994 as u32) + x993);
  let x997: u32 = (x996 & 0x3ffffff);
  let x998: u32 = (x995 + 0x5);
  let x999: fiat_poly1305_u1 = ((x998 >> 26) as fiat_poly1305_u1);
  let x1000: u32 = (x998 & 0x3ffffff);
  let x1001: u32 = ((x999 as u32) + x997);
  let x1002: fiat_poly1305_u1 = ((x1001 >> 26) as fiat_poly1305_u1);
  let x1003: u32 = (x1001 & 0x3ffffff);
  let x1004: u32 = ((x1002 as u32) + 0x3ffffff);
  let mut x1005: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x1005, x985, x989, x1000);
  let mut x1006: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x1006, x985, x988, x1003);
  let mut x1007: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x1007, x985, (0x0 as u32), x1004);
  let mut x1008: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x1008, x985, (0x0 as u32), 0x3ffffff);
  let mut x1009: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x1009, x985, (0x0 as u32), 0x3ffffff);
  let x1010: fiat_poly1305_u1 = ((((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32) >> 31) as fiat_poly1305_u1);
  let x1011: u32 = (((((!((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let x1012: u32 = ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32);
  let x1013: u32 = (x1012 >> 26);
  let x1014: u32 = (x1012 & 0x3ffffff);
  let x1015: u32 = (x1011 >> 26);
  let x1016: u32 = (x1011 & 0x3ffffff);
  let x1017: u32 = (0x7fffff6 - x1016);
  let x1018: u32 = (0x7fffffe - x1015);
  let x1019: fiat_poly1305_u1 = ((x1017 >> 26) as fiat_poly1305_u1);
  let x1020: u32 = (x1017 & 0x3ffffff);
  let x1021: u32 = ((x1019 as u32) + x1018);
  let x1022: u32 = (x1021 & 0x3ffffff);
  let x1023: u32 = (x1020 + 0x5);
  let x1024: fiat_poly1305_u1 = ((x1023 >> 26) as fiat_poly1305_u1);
  let x1025: u32 = (x1023 & 0x3ffffff);
  let x1026: u32 = ((x1024 as u32) + x1022);
  let x1027: fiat_poly1305_u1 = ((x1026 >> 26) as fiat_poly1305_u1);
  let x1028: u32 = (x1026 & 0x3ffffff);
  let x1029: u32 = ((x1027 as u32) + 0x3ffffff);
  let mut x1030: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x1030, x1010, x1014, x1025);
  let mut x1031: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x1031, x1010, x1013, x1028);
  let mut x1032: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x1032, x1010, (0x0 as u32), x1029);
  let mut x1033: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x1033, x1010, (0x0 as u32), 0x3ffffff);
  let mut x1034: u32 = 0;
  fiat_poly1305_cmovznz_u32(&mut x1034, x1010, (0x0 as u32), 0x3ffffff);
  let x1035: u64 = ((x959 as u64) * (((arg3[4]) * 0x5) as u64));
  let x1036: u64 = ((x959 as u64) * (((arg3[3]) * 0x5) as u64));
  let x1037: u64 = ((x959 as u64) * (((arg3[2]) * 0x5) as u64));
  let x1038: u64 = ((x959 as u64) * (((arg3[1]) * 0x5) as u64));
  let x1039: u64 = ((x958 as u64) * (((arg3[4]) * 0x5) as u64));
  let x1040: u64 = ((x958 as u64) * (((arg3[3]) * 0x5) as u64));
  let x1041: u64 = ((x958 as u64) * (((arg3[2]) * 0x5) as u64));
  let x1042: u64 = ((x957 as u64) * (((arg3[4]) * 0x5) as u64));
  let x1043: u64 = ((x957 as u64) * (((arg3[3]) * 0x5) as u64));
  let x1044: u64 = ((x956 as u64) * (((arg3[4]) * 0x5) as u64));
  let x1045: u64 = ((x959 as u64) * ((arg3[0]) as u64));
  let x1046: u64 = ((x958 as u64) * ((arg3[1]) as u64));
  let x1047: u64 = ((x958 as u64) * ((arg3[0]) as u64));
  let x1048: u64 = ((x957 as u64) * ((arg3[2]) as u64));
  let x1049: u64 = ((x957 as u64) * ((arg3[1]) as u64));
  let x1050: u64 = ((x957 as u64) * ((arg3[0]) as u64));
  let x1051: u64 = ((x956 as u64) * ((arg3[3]) as u64));
  let x1052: u64 = ((x956 as u64) * ((arg3[2]) as u64));
  let x1053: u64 = ((x956 as u64) * ((arg3[1]) as u64));
  let x1054: u64 = ((x956 as u64) * ((arg3[0]) as u64));
  let x1055: u64 = ((x955 as u64) * ((arg3[4]) as u64));
  let x1056: u64 = ((x955 as u64) * ((arg3[3]) as u64));
  let x1057: u64 = ((x955 as u64) * ((arg3[2]) as u64));
  let x1058: u64 = ((x955 as u64) * ((arg3[1]) as u64));
  let x1059: u64 = ((x955 as u64) * ((arg3[0]) as u64));
  let x1060: u64 = (x1059 + (x1044 + (x1043 + (x1041 + x1038))));
  let x1061: u32 = ((x1060 >> 26) as u32);
  let x1062: u32 = ((x1060 & (0x3ffffff as u64)) as u32);
  let x1063: u64 = (x1055 + (x1051 + (x1048 + (x1046 + x1045))));
  let x1064: u64 = (x1056 + (x1052 + (x1049 + (x1047 + x1035))));
  let x1065: u64 = (x1057 + (x1053 + (x1050 + (x1039 + x1036))));
  let x1066: u64 = (x1058 + (x1054 + (x1042 + (x1040 + x1037))));
  let x1067: u64 = ((x1061 as u64) + x1066);
  let x1068: u32 = ((x1067 >> 26) as u32);
  let x1069: u32 = ((x1067 & (0x3ffffff as u64)) as u32);
  let x1070: u64 = ((x1068 as u64) + x1065);
  let x1071: u32 = ((x1070 >> 26) as u32);
  let x1072: u32 = ((x1070 & (0x3ffffff as u64)) as u32);
  let x1073: u64 = ((x1071 as u64) + x1064);
  let x1074: u32 = ((x1073 >> 26) as u32);
  let x1075: u32 = ((x1073 & (0x3ffffff as u64)) as u32);
  let x1076: u64 = ((x1074 as u64) + x1063);
  let x1077: u32 = ((x1076 >> 26) as u32);
  let x1078: u32 = ((x1076 & (0x3ffffff as u64)) as u32);
  let x1079: u32 = (x1077 * 0x5);
  let x1080: u32 = (x1062 + x1079);
  let x1081: u32 = (x1080 >> 26);
  let x1082: u32 = (x1080 & 0x3ffffff);
  let x1083: u32 = (x1081 + x1069);
  let x1084: fiat_poly1305_u1 = ((x1083 >> 26) as fiat_poly1305_u1);
  let x1085: u32 = (x1083 & 0x3ffffff);
  let x1086: u32 = ((x1084 as u32) + x1072);
  let x1087: u64 = ((x984 as u64) * (((arg4[4]) * 0x5) as u64));
  let x1088: u64 = ((x984 as u64) * (((arg4[3]) * 0x5) as u64));
  let x1089: u64 = ((x984 as u64) * (((arg4[2]) * 0x5) as u64));
  let x1090: u64 = ((x984 as u64) * (((arg4[1]) * 0x5) as u64));
  let x1091: u64 = ((x983 as u64) * (((arg4[4]) * 0x5) as u64));
  let x1092: u64 = ((x983 as u64) * (((arg4[3]) * 0x5) as u64));
  let x1093: u64 = ((x983 as u64) * (((arg4[2]) * 0x5) as u64));
  let x1094: u64 = ((x982 as u64) * (((arg4[4]) * 0x5) as u64));
  let x1095: u64 = ((x982 as u64) * (((arg4[3]) * 0x5) as u64));
  let x1096: u64 = ((x981 as u64) * (((arg4[4]) * 0x5) as u64));
  let x1097: u64 = ((x984 as u64) * ((arg4[0]) as u64));
  let x1098: u64 = ((x983 as u64) * ((arg4[1]) as u64));
  let x1099: u64 = ((x983 as u64) * ((arg4[0]) as u64));
  let x1100: u64 = ((x982 as u64) * ((arg4[2]) as u64));
  let x1101: u64 = ((x982 as u64) * ((arg4[1]) as u64));
  let x1102: u64 = ((x982 as u64) * ((arg4[0]) as u64));
  let x1103: u64 = ((x981 as u64) * ((arg4[3]) as u64));
  let x1104: u64 = ((x981 as u64) * ((arg4[2]) as u64));
  let x1105: u64 = ((x981 as u64) * ((arg4[1]) as u64));
  let x1106: u64 = ((x981 as u64) * ((arg4[0]) as u64));
  let x1107: u64 = ((x980 as u64) * ((arg4[4]) as u64));
  let x1108: u64 = ((x980 as u64) * ((arg4[3]) as u64));
  let x1109: u64 = ((x980 as u64) * ((arg4[2]) as u64));
  let x1110: u64 = ((x980 as u64) * ((arg4[1]) as u64));
  let x1111: u64 = ((x980 as u64) * ((arg4[0]) as u64));
  let x1112: u64 = (x1111 + (x1096 + (x1095 + (x1093 + x1090))));
  let x1113: u32 = ((x1112 >> 26) as u32);
  let x1114: u32 = ((x1112 & (0x3ffffff as u64)) as u32);
  let x1115: u64 = (x1107 + (x1103 + (x1100 + (x1098 + x1097))));
  let x1116: u64 = (x1108 + (x1104 + (x1101 + (x1099 + x1087))));
  let x1117: u64 = (x1109 + (x1105 + (x1102 + (x1091 + x1088))));
  let x1118: u64 = (x1110 + (x1106 + (x1094 + (x1092 + x1089))));
  let x1119: u64 = ((x1113 as u64) + x1118);
  let x1120: u32 = ((x1119 >> 26) as u32);
  let x1121: u32 = ((x1119 & (0x3ffffff as u64)) as u32);
  let x1122: u64 = ((x1120 as u64) + x1117);
  let x1123: u32 = ((x1122 >> 26) as u32);
  let x1124: u32 = ((x1122 & (0x3ffffff as u64)) as u32);
  let x1125: u64 = ((x1123 as u64) + x1116);
  let x1126: u32 = ((x1125 >> 26) as u32);
  let x1127: u32 = ((x1125 & (0x3ffffff as u64)) as u32);
  let x1128: u64 = ((x1126 as u64) + x1115);
  let x1129: u32 = ((x1128 >> 26) as u32);
  let x1130: u32 = ((x1128 & (0x3ffffff as u64)) as u32);
  let x1131: u32 = (x1129 * 0x5);
  let x1132: u32 = (x1114 + x1131);
  let x1133: u32 = (x1132 >> 26);
  let x1134: u32 = (x1132 & 0x3ffffff);
  let x1135: u32 = (x1133 + x1121);
  let x1136: fiat_poly1305_u1 = ((x1135 >> 26) as fiat_poly1305_u1);
  let x1137: u32 = (x1135 & 0x3ffffff);
  let x1138: u32 = ((x1136 as u32) + x1124);
  let x1139: u64 = ((x1009 as u64) * (((arg3[4]) * 0x5) as u64));
  let x1140: u64 = ((x1009 as u64) * (((arg3[3]) * 0x5) as u64));
  let x1141: u64 = ((x1009 as u64) * (((arg3[2]) * 0x5) as u64));
  let x1142: u64 = ((x1009 as u64) * (((arg3[1]) * 0x5) as u64));
  let x1143: u64 = ((x1008 as u64) * (((arg3[4]) * 0x5) as u64));
  let x1144: u64 = ((x1008 as u64) * (((arg3[3]) * 0x5) as u64));
  let x1145: u64 = ((x1008 as u64) * (((arg3[2]) * 0x5) as u64));
  let x1146: u64 = ((x1007 as u64) * (((arg3[4]) * 0x5) as u64));
  let x1147: u64 = ((x1007 as u64) * (((arg3[3]) * 0x5) as u64));
  let x1148: u64 = ((x1006 as u64) * (((arg3[4]) * 0x5) as u64));
  let x1149: u64 = ((x1009 as u64) * ((arg3[0]) as u64));
  let x1150: u64 = ((x1008 as u64) * ((arg3[1]) as u64));
  let x1151: u64 = ((x1008 as u64) * ((arg3[0]) as u64));
  let x1152: u64 = ((x1007 as u64) * ((arg3[2]) as u64));
  let x1153: u64 = ((x1007 as u64) * ((arg3[1]) as u64));
  let x1154: u64 = ((x1007 as u64) * ((arg3[0]) as u64));
  let x1155: u64 = ((x1006 as u64) * ((arg3[3]) as u64));
  let x1156: u64 = ((x1006 as u64) * ((arg3[2]) as u64));
  let x1157: u64 = ((x1006 as u64) * ((arg3[1]) as u64));
  let x1158: u64 = ((x1006 as u64) * ((arg3[0]) as u64));
  let x1159: u64 = ((x1005 as u64) * ((arg3[4]) as u64));
  let x1160: u64 = ((x1005 as u64) * ((arg3[3]) as u64));
  let x1161: u64 = ((x1005 as u64) * ((arg3[2]) as u64));
  let x1162: u64 = ((x1005 as u64) * ((arg3[1]) as u64));
  let x1163: u64 = ((x1005 as u64) * ((arg3[0]) as u64));
  let x1164: u64 = (x1163 + (x1148 + (x1147 + (x1145 + x1142))));
  let x1165: u32 = ((x1164 >> 26) as u32);
  let x1166: u32 = ((x1164 & (0x3ffffff as u64)) as u32);
  let x1167: u64 = (x1159 + (x1155 + (x1152 + (x1150 + x1149))));
  let x1168: u64 = (x1160 + (x1156 + (x1153 + (x1151 + x1139))));
  let x1169: u64 = (x1161 + (x1157 + (x1154 + (x1143 + x1140))));
  let x1170: u64 = (x1162 + (x1158 + (x1146 + (x1144 + x1141))));
  let x1171: u64 = ((x1165 as u64) + x1170);
  let x1172: u32 = ((x1171 >> 26) as u32);
  let x1173: u32 = ((x1171 & (0x3ffffff as u64)) as u32);
  let x1174: u64 = ((x1172 as u64) + x1169);
  let x1175: u32 = ((x1174 >> 26) as u32);
  let x1176: u32 = ((x1174 & (0x3ffffff as u64)) as u32);
  let x1177: u64 = ((x1175 as u64) + x1168);
  let x1178: u32 = ((x1177 >> 26) as u32);
  let x1179: u32 = ((x1177 & (0x3ffffff as u64)) as u32);
  let x1180: u64 = ((x1178 as u64) + x1167);
  let x1181: u32 = ((x1180 >> 26) as u32);
  let x1182: u32 = ((x1180 & (0x3ffffff as u64)) as u32);
  let x1183: u32 = (x1181 * 0x5);
  let x1184: u32 = (x1166 + x1183);
  let x1185: u32 = (x1184 >> 26);
  let x1186: u32 = (x1184 & 0x3ffffff);
  let x1187: u32 = (x1185 + x1173);
  let x1188: fiat_poly1305_u1 = ((x1187 >> 26) as fiat_poly1305_u1);
  let x1189: u32 = (x1187 & 0x3ffffff);
  let x1190: u32 = ((x1188 as u32) + x1176);
  let x1191: u64 = ((x1034 as u64) * (((arg4[4]) * 0x5) as u64));
  let x1192: u64 = ((x1034 as u64) * (((arg4[3]) * 0x5) as u64));
  let x1193: u64 = ((x1034 as u64) * (((arg4[2]) * 0x5) as u64));
  let x1194: u64 = ((x1034 as u64) * (((arg4[1]) * 0x5) as u64));
  let x1195: u64 = ((x1033 as u64) * (((arg4[4]) * 0x5) as u64));
  let x1196: u64 = ((x1033 as u64) * (((arg4[3]) * 0x5) as u64));
  let x1197: u64 = ((x1033 as u64) * (((arg4[2]) * 0x5) as u64));
  let x1198: u64 = ((x1032 as u64) * (((arg4[4]) * 0x5) as u64));
  let x1199: u64 = ((x1032 as u64) * (((arg4[3]) * 0x5) as u64));
  let x1200: u64 = ((x1031 as u64) * (((arg4[4]) * 0x5) as u64));
  let x1201: u64 = ((x1034 as u64) * ((arg4[0]) as u64));
  let x1202: u64 = ((x1033 as u64) * ((arg4[1]) as u64));
  let x1203: u64 = ((x1033 as u64) * ((arg4[0]) as u64));
  let x1204: u64 = ((x1032 as u64) * ((arg4[2]) as u64));
  let x1205: u64 = ((x1032 as u64) * ((arg4[1]) as u64));
  let x1206: u64 = ((x1032 as u64) * ((arg4[0]) as u64));
  let x1207: u64 = ((x1031 as u64) * ((arg4[3]) as u64));
  let x1208: u64 = ((x1031 as u64) * ((arg4[2]) as u64));
  let x1209: u64 = ((x1031 as u64) * ((arg4[1]) as u64));
  let x1210: u64 = ((x1031 as u64) * ((arg4[0]) as u64));
  let x1211: u64 = ((x1030 as u64) * ((arg4[4]) as u64));
  let x1212: u64 = ((x1030 as u64) * ((arg4[3]) as u64));
  let x1213: u64 = ((x1030 as u64) * ((arg4[2]) as u64));
  let x1214: u64 = ((x1030 as u64) * ((arg4[1]) as u64));
  let x1215: u64 = ((x1030 as u64) * ((arg4[0]) as u64));
  let x1216: u64 = (x1215 + (x1200 + (x1199 + (x1197 + x1194))));
  let x1217: u32 = ((x1216 >> 26) as u32);
  let x1218: u32 = ((x1216 & (0x3ffffff as u64)) as u32);
  let x1219: u64 = (x1211 + (x1207 + (x1204 + (x1202 + x1201))));
  let x1220: u64 = (x1212 + (x1208 + (x1205 + (x1203 + x1191))));
  let x1221: u64 = (x1213 + (x1209 + (x1206 + (x1195 + x1192))));
  let x1222: u64 = (x1214 + (x1210 + (x1198 + (x1196 + x1193))));
  let x1223: u64 = ((x1217 as u64) + x1222);
  let x1224: u32 = ((x1223 >> 26) as u32);
  let x1225: u32 = ((x1223 & (0x3ffffff as u64)) as u32);
  let x1226: u64 = ((x1224 as u64) + x1221);
  let x1227: u32 = ((x1226 >> 26) as u32);
  let x1228: u32 = ((x1226 & (0x3ffffff as u64)) as u32);
  let x1229: u64 = ((x1227 as u64) + x1220);
  let x1230: u32 = ((x1229 >> 26) as u32);
  let x1231: u32 = ((x1229 & (0x3ffffff as u64)) as u32);
  let x1232: u64 = ((x1230 as u64) + x1219);
  let x1233: u32 = ((x1232 >> 26) as u32);
  let x1234: u32 = ((x1232 & (0x3ffffff as u64)) as u32);
  let x1235: u32 = (x1233 * 0x5);
  let x1236: u32 = (x1218 + x1235);
  let x1237: u32 = (x1236 >> 26);
  let x1238: u32 = (x1236 & 0x3ffffff);
  let x1239: u32 = (x1237 + x1225);
  let x1240: fiat_poly1305_u1 = ((x1239 >> 26) as fiat_poly1305_u1);
  let x1241: u32 = (x1239 & 0x3ffffff);
  let x1242: u32 = ((x1240 as u32) + x1228);
  let x1243: u32 = (x1082 + x1134);
  let x1244: u32 = (x1085 + x1137);
  let x1245: u32 = (x1086 + x1138);
  let x1246: u32 = (x1075 + x1127);
  let x1247: u32 = (x1078 + x1130);
  let x1248: fiat_poly1305_u1 = ((x1243 >> 26) as fiat_poly1305_u1);
  let x1249: u32 = (x1243 & 0x3ffffff);
  let x1250: u32 = ((x1248 as u32) + x1244);
  let x1251: fiat_poly1305_u1 = ((x1250 >> 26) as fiat_poly1305_u1);
  let x1252: u32 = (x1250 & 0x3ffffff);
  let x1253: u32 = ((x1251 as u32) + x1245);
  let x1254: u32 = (x1253 >> 26);
  let x1255: u32 = (x1253 & 0x3ffffff);
  let x1256: u32 = (x1254 + x1246);
  let x1257: u32 = (x1256 >> 26);
  let x1258: u32 = (x1256 & 0x3ffffff);
  let x1259: u32 = (x1257 + x1247);
  let x1260: u32 = (x1259 >> 26);
  let x1261: u32 = (x1259 & 0x3ffffff);
  let x1262: u32 = (x1260 * 0x5);
  let x1263: u32 = (x1249 + x1262);
  let x1264: fiat_poly1305_u1 = ((x1263 >> 26) as fiat_poly1305_u1);
  let x1265: u32 = (x1263 & 0x3ffffff);
  let x1266: u32 = ((x1264 as u32) + x1252);
  let x1267: fiat_poly1305_u1 = ((x1266 >> 26) as fiat_poly1305_u1);
  let x1268: u32 = (x1266 & 0x3ffffff);
  let x1269: u32 = ((x1267 as u32) + x1255);
  let x1270: u32 = (x1186 + x1238);
  let x1271: u32 = (x1189 + x1241);
  let x1272: u32 = (x1190 + x1242);
  let x1273: u32 = (x1179 + x1231);
  let x1274: u32 = (x1182 + x1234);
  let x1275: fiat_poly1305_u1 = ((x1270 >> 26) as fiat_poly1305_u1);
  let x1276: u32 = (x1270 & 0x3ffffff);
  let x1277: u32 = ((x1275 as u32) + x1271);
  let x1278: fiat_poly1305_u1 = ((x1277 >> 26) as fiat_poly1305_u1);
  let x1279: u32 = (x1277 & 0x3ffffff);
  let x1280: u32 = ((x1278 as u32) + x1272);
  let x1281: u32 = (x1280 >> 26);
  let x1282: u32 = (x1280 & 0x3ffffff);
  let x1283: u32 = (x1281 + x1273);
  let x1284: u32 = (x1283 >> 26);
  let x1285: u32 = (x1283 & 0x3ffffff);
  let x1286: u32 = (x1284 + x1274);
  let x1287: u32 = (x1286 >> 26);
  let x1288: u32 = (x1286 & 0x3ffffff);
  let x1289: u32 = (x1287 * 0x5);
  let x1290: u32 = (x1276 + x1289);
  let x1291: fiat_poly1305_u1 = ((x1290 >> 26) as fiat_poly1305_u1);
  let x1292: u32 = (x1290 & 0x3ffffff);
  let x1293: u32 = ((x1291 as u32) + x1279);
  let x1294: fiat_poly1305_u1 = ((x1293 >> 26) as fiat_poly1305_u1);
  let x1295: u32 = (x1293 & 0x3ffffff);
  let x1296: u32 = ((x1294 as u32) + x1282);
  out1[0] = x923;
  out1[1] = x924;
  out1[2] = x925;
  out1[3] = x926;
  out1[4] = x927;
  out1[5] = x928;
  out2[0] = x929;
  out2[1] = x930;
  out2[2] = x931;
  out2[3] = x932;
  out2[4] = x933;
  out2[5] = x934;
  out3[0] = x1265;
  out3[1] = x1268;
  out3[2] = x1269;
  out3[3] = x1258;
  out3[4] = x1261;
  out4[0] = x1292;
  out4[1] = x1295;
  out4[2] = x1296;
  out4[3] = x1285;
  out4[4] = x1288;
}

