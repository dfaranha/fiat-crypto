//! Autogenerated: src/ExtractionOCaml/word_by_word_montgomery --lang Rust p256 32 '2^256 - 2^224 + 2^192 + 2^96 - 1' mul square add sub opp from_montgomery to_montgomery nonzero selectznz to_bytes from_bytes one twos_complement_word_to_montgomery_no_encode msat sat_from_bytes divstep divstep_precomp twos_complement_word_full_divstep asr_mw_sub2 sat_add word_sat_mul jumpdivstep_precomp outer_loop_body
//! curve description: p256
//! machine_wordsize = 32 (from "32")
//! requested operations: mul, square, add, sub, opp, from_montgomery, to_montgomery, nonzero, selectznz, to_bytes, from_bytes, one, twos_complement_word_to_montgomery_no_encode, msat, sat_from_bytes, divstep, divstep_precomp, twos_complement_word_full_divstep, asr_mw_sub2, sat_add, word_sat_mul, jumpdivstep_precomp, outer_loop_body
//! m = 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff (from "2^256 - 2^224 + 2^192 + 2^96 - 1")
//!
//! NOTE: In addition to the bounds specified above each function, all
//!   functions synthesized for this Montgomery arithmetic require the
//!   input to be strictly less than the prime modulus (m), and also
//!   require the input to be in the unique saturated representation.
//!   All functions also ensure that these two properties are true of
//!   return values.
//!
//! Computed values:
//! eval z = z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160) + (z[6] << 192) + (z[7] << 224)
//! bytes_eval z = z[0] + (z[1] << 8) + (z[2] << 16) + (z[3] << 24) + (z[4] << 32) + (z[5] << 40) + (z[6] << 48) + (z[7] << 56) + (z[8] << 64) + (z[9] << 72) + (z[10] << 80) + (z[11] << 88) + (z[12] << 96) + (z[13] << 104) + (z[14] << 112) + (z[15] << 120) + (z[16] << 128) + (z[17] << 136) + (z[18] << 144) + (z[19] << 152) + (z[20] << 160) + (z[21] << 168) + (z[22] << 176) + (z[23] << 184) + (z[24] << 192) + (z[25] << 200) + (z[26] << 208) + (z[27] << 216) + (z[28] << 224) + (z[29] << 232) + (z[30] << 240) + (z[31] << 248)

#![allow(unused_parens)]
#[allow(non_camel_case_types)]

pub type fiat_p256_u1 = u8;
pub type fiat_p256_i1 = i8;
pub type fiat_p256_u2 = u8;
pub type fiat_p256_i2 = i8;


/// The function fiat_p256_addcarryx_u32 is an addition with carry.
/// Postconditions:
///   out1 = (arg1 + arg2 + arg3) mod 2^32
///   out2 = ⌊(arg1 + arg2 + arg3) / 2^32⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffff]
///   arg3: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [0x0 ~> 0x1]
#[inline]
pub fn fiat_p256_addcarryx_u32(out1: &mut u32, out2: &mut fiat_p256_u1, arg1: fiat_p256_u1, arg2: u32, arg3: u32) -> () {
  let x1: u64 = (((arg1 as u64) + (arg2 as u64)) + (arg3 as u64));
  let x2: u32 = ((x1 & (0xffffffff as u64)) as u32);
  let x3: fiat_p256_u1 = ((x1 >> 32) as fiat_p256_u1);
  *out1 = x2;
  *out2 = x3;
}

/// The function fiat_p256_subborrowx_u32 is a subtraction with borrow.
/// Postconditions:
///   out1 = (-arg1 + arg2 + -arg3) mod 2^32
///   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^32⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffff]
///   arg3: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [0x0 ~> 0x1]
#[inline]
pub fn fiat_p256_subborrowx_u32(out1: &mut u32, out2: &mut fiat_p256_u1, arg1: fiat_p256_u1, arg2: u32, arg3: u32) -> () {
  let x1: i64 = (((arg2 as i64) - (arg1 as i64)) - (arg3 as i64));
  let x2: fiat_p256_i1 = ((x1 >> 32) as fiat_p256_i1);
  let x3: u32 = ((x1 & (0xffffffff as i64)) as u32);
  *out1 = x3;
  *out2 = (((0x0 as fiat_p256_i2) - (x2 as fiat_p256_i2)) as fiat_p256_u1);
}

/// The function fiat_p256_mulx_u32 is a multiplication, returning the full double-width result.
/// Postconditions:
///   out1 = (arg1 * arg2) mod 2^32
///   out2 = ⌊arg1 * arg2 / 2^32⌋
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffff]
///   arg2: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [0x0 ~> 0xffffffff]
#[inline]
pub fn fiat_p256_mulx_u32(out1: &mut u32, out2: &mut u32, arg1: u32, arg2: u32) -> () {
  let x1: u64 = ((arg1 as u64) * (arg2 as u64));
  let x2: u32 = ((x1 & (0xffffffff as u64)) as u32);
  let x3: u32 = ((x1 >> 32) as u32);
  *out1 = x2;
  *out2 = x3;
}

/// The function fiat_p256_cmovznz_u32 is a single-word conditional move.
/// Postconditions:
///   out1 = (if arg1 = 0 then arg2 else arg3)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0xffffffff]
///   arg3: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
#[inline]
pub fn fiat_p256_cmovznz_u32(out1: &mut u32, arg1: fiat_p256_u1, arg2: u32, arg3: u32) -> () {
  let x1: fiat_p256_u1 = (!(!arg1));
  let x2: u32 = ((((((0x0 as fiat_p256_i2) - (x1 as fiat_p256_i2)) as fiat_p256_i1) as i64) & (0xffffffff as i64)) as u32);
  let x3: u32 = ((x2 & arg3) | ((!x2) & arg2));
  *out1 = x3;
}

/// The function fiat_p256_cmovznz_u1 is a single-word conditional move.
/// Postconditions:
///   out1 = (if arg1 = 0 then arg2 else arg3)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [0x0 ~> 0x1]
///   arg3: [0x0 ~> 0x1]
/// Output Bounds:
///   out1: [0x0 ~> 0x1]
#[inline]
pub fn fiat_p256_cmovznz_u1(out1: &mut fiat_p256_u1, arg1: fiat_p256_u1, arg2: fiat_p256_u1, arg3: fiat_p256_u1) -> () {
  let x1: fiat_p256_u1 = (!(!arg1));
  let x2: fiat_p256_u1 = ((((((0x0 as fiat_p256_i2) - (x1 as fiat_p256_i2)) as fiat_p256_i1) as fiat_p256_i2) & (0x1 as fiat_p256_i2)) as fiat_p256_u1);
  let x3: fiat_p256_u1 = ((x2 & arg3) | ((!x2) & arg2));
  *out1 = x3;
}

/// The function fiat_p256_mul multiplies two field elements in the Montgomery domain.
/// Preconditions:
///   0 ≤ eval arg1 < m
///   0 ≤ eval arg2 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m
///   0 ≤ eval out1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_p256_mul(out1: &mut [u32; 8], arg1: &[u32; 8], arg2: &[u32; 8]) -> () {
  let x1: u32 = (arg1[1]);
  let x2: u32 = (arg1[2]);
  let x3: u32 = (arg1[3]);
  let x4: u32 = (arg1[4]);
  let x5: u32 = (arg1[5]);
  let x6: u32 = (arg1[6]);
  let x7: u32 = (arg1[7]);
  let x8: u32 = (arg1[0]);
  let mut x9: u32 = 0;
  let mut x10: u32 = 0;
  fiat_p256_mulx_u32(&mut x9, &mut x10, x8, (arg2[7]));
  let mut x11: u32 = 0;
  let mut x12: u32 = 0;
  fiat_p256_mulx_u32(&mut x11, &mut x12, x8, (arg2[6]));
  let mut x13: u32 = 0;
  let mut x14: u32 = 0;
  fiat_p256_mulx_u32(&mut x13, &mut x14, x8, (arg2[5]));
  let mut x15: u32 = 0;
  let mut x16: u32 = 0;
  fiat_p256_mulx_u32(&mut x15, &mut x16, x8, (arg2[4]));
  let mut x17: u32 = 0;
  let mut x18: u32 = 0;
  fiat_p256_mulx_u32(&mut x17, &mut x18, x8, (arg2[3]));
  let mut x19: u32 = 0;
  let mut x20: u32 = 0;
  fiat_p256_mulx_u32(&mut x19, &mut x20, x8, (arg2[2]));
  let mut x21: u32 = 0;
  let mut x22: u32 = 0;
  fiat_p256_mulx_u32(&mut x21, &mut x22, x8, (arg2[1]));
  let mut x23: u32 = 0;
  let mut x24: u32 = 0;
  fiat_p256_mulx_u32(&mut x23, &mut x24, x8, (arg2[0]));
  let mut x25: u32 = 0;
  let mut x26: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x25, &mut x26, 0x0, x24, x21);
  let mut x27: u32 = 0;
  let mut x28: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x27, &mut x28, x26, x22, x19);
  let mut x29: u32 = 0;
  let mut x30: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x29, &mut x30, x28, x20, x17);
  let mut x31: u32 = 0;
  let mut x32: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x31, &mut x32, x30, x18, x15);
  let mut x33: u32 = 0;
  let mut x34: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x33, &mut x34, x32, x16, x13);
  let mut x35: u32 = 0;
  let mut x36: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x35, &mut x36, x34, x14, x11);
  let mut x37: u32 = 0;
  let mut x38: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x37, &mut x38, x36, x12, x9);
  let x39: u32 = ((x38 as u32) + x10);
  let mut x40: u32 = 0;
  let mut x41: u32 = 0;
  fiat_p256_mulx_u32(&mut x40, &mut x41, x23, 0xffffffff);
  let mut x42: u32 = 0;
  let mut x43: u32 = 0;
  fiat_p256_mulx_u32(&mut x42, &mut x43, x23, 0xffffffff);
  let mut x44: u32 = 0;
  let mut x45: u32 = 0;
  fiat_p256_mulx_u32(&mut x44, &mut x45, x23, 0xffffffff);
  let mut x46: u32 = 0;
  let mut x47: u32 = 0;
  fiat_p256_mulx_u32(&mut x46, &mut x47, x23, 0xffffffff);
  let mut x48: u32 = 0;
  let mut x49: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x48, &mut x49, 0x0, x47, x44);
  let mut x50: u32 = 0;
  let mut x51: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x50, &mut x51, x49, x45, x42);
  let x52: u32 = ((x51 as u32) + x43);
  let mut x53: u32 = 0;
  let mut x54: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x53, &mut x54, 0x0, x23, x46);
  let mut x55: u32 = 0;
  let mut x56: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x55, &mut x56, x54, x25, x48);
  let mut x57: u32 = 0;
  let mut x58: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x57, &mut x58, x56, x27, x50);
  let mut x59: u32 = 0;
  let mut x60: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x59, &mut x60, x58, x29, x52);
  let mut x61: u32 = 0;
  let mut x62: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x61, &mut x62, x60, x31, (0x0 as u32));
  let mut x63: u32 = 0;
  let mut x64: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x63, &mut x64, x62, x33, (0x0 as u32));
  let mut x65: u32 = 0;
  let mut x66: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x65, &mut x66, x64, x35, x23);
  let mut x67: u32 = 0;
  let mut x68: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x67, &mut x68, x66, x37, x40);
  let mut x69: u32 = 0;
  let mut x70: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x69, &mut x70, x68, x39, x41);
  let mut x71: u32 = 0;
  let mut x72: u32 = 0;
  fiat_p256_mulx_u32(&mut x71, &mut x72, x1, (arg2[7]));
  let mut x73: u32 = 0;
  let mut x74: u32 = 0;
  fiat_p256_mulx_u32(&mut x73, &mut x74, x1, (arg2[6]));
  let mut x75: u32 = 0;
  let mut x76: u32 = 0;
  fiat_p256_mulx_u32(&mut x75, &mut x76, x1, (arg2[5]));
  let mut x77: u32 = 0;
  let mut x78: u32 = 0;
  fiat_p256_mulx_u32(&mut x77, &mut x78, x1, (arg2[4]));
  let mut x79: u32 = 0;
  let mut x80: u32 = 0;
  fiat_p256_mulx_u32(&mut x79, &mut x80, x1, (arg2[3]));
  let mut x81: u32 = 0;
  let mut x82: u32 = 0;
  fiat_p256_mulx_u32(&mut x81, &mut x82, x1, (arg2[2]));
  let mut x83: u32 = 0;
  let mut x84: u32 = 0;
  fiat_p256_mulx_u32(&mut x83, &mut x84, x1, (arg2[1]));
  let mut x85: u32 = 0;
  let mut x86: u32 = 0;
  fiat_p256_mulx_u32(&mut x85, &mut x86, x1, (arg2[0]));
  let mut x87: u32 = 0;
  let mut x88: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x87, &mut x88, 0x0, x86, x83);
  let mut x89: u32 = 0;
  let mut x90: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x89, &mut x90, x88, x84, x81);
  let mut x91: u32 = 0;
  let mut x92: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x91, &mut x92, x90, x82, x79);
  let mut x93: u32 = 0;
  let mut x94: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x93, &mut x94, x92, x80, x77);
  let mut x95: u32 = 0;
  let mut x96: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x95, &mut x96, x94, x78, x75);
  let mut x97: u32 = 0;
  let mut x98: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x97, &mut x98, x96, x76, x73);
  let mut x99: u32 = 0;
  let mut x100: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x99, &mut x100, x98, x74, x71);
  let x101: u32 = ((x100 as u32) + x72);
  let mut x102: u32 = 0;
  let mut x103: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x102, &mut x103, 0x0, x55, x85);
  let mut x104: u32 = 0;
  let mut x105: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x104, &mut x105, x103, x57, x87);
  let mut x106: u32 = 0;
  let mut x107: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x106, &mut x107, x105, x59, x89);
  let mut x108: u32 = 0;
  let mut x109: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x108, &mut x109, x107, x61, x91);
  let mut x110: u32 = 0;
  let mut x111: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x110, &mut x111, x109, x63, x93);
  let mut x112: u32 = 0;
  let mut x113: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x112, &mut x113, x111, x65, x95);
  let mut x114: u32 = 0;
  let mut x115: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x114, &mut x115, x113, x67, x97);
  let mut x116: u32 = 0;
  let mut x117: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x116, &mut x117, x115, x69, x99);
  let mut x118: u32 = 0;
  let mut x119: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x118, &mut x119, x117, (x70 as u32), x101);
  let mut x120: u32 = 0;
  let mut x121: u32 = 0;
  fiat_p256_mulx_u32(&mut x120, &mut x121, x102, 0xffffffff);
  let mut x122: u32 = 0;
  let mut x123: u32 = 0;
  fiat_p256_mulx_u32(&mut x122, &mut x123, x102, 0xffffffff);
  let mut x124: u32 = 0;
  let mut x125: u32 = 0;
  fiat_p256_mulx_u32(&mut x124, &mut x125, x102, 0xffffffff);
  let mut x126: u32 = 0;
  let mut x127: u32 = 0;
  fiat_p256_mulx_u32(&mut x126, &mut x127, x102, 0xffffffff);
  let mut x128: u32 = 0;
  let mut x129: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x128, &mut x129, 0x0, x127, x124);
  let mut x130: u32 = 0;
  let mut x131: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x130, &mut x131, x129, x125, x122);
  let x132: u32 = ((x131 as u32) + x123);
  let mut x133: u32 = 0;
  let mut x134: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x133, &mut x134, 0x0, x102, x126);
  let mut x135: u32 = 0;
  let mut x136: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x135, &mut x136, x134, x104, x128);
  let mut x137: u32 = 0;
  let mut x138: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x137, &mut x138, x136, x106, x130);
  let mut x139: u32 = 0;
  let mut x140: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x139, &mut x140, x138, x108, x132);
  let mut x141: u32 = 0;
  let mut x142: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x141, &mut x142, x140, x110, (0x0 as u32));
  let mut x143: u32 = 0;
  let mut x144: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x143, &mut x144, x142, x112, (0x0 as u32));
  let mut x145: u32 = 0;
  let mut x146: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x145, &mut x146, x144, x114, x102);
  let mut x147: u32 = 0;
  let mut x148: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x147, &mut x148, x146, x116, x120);
  let mut x149: u32 = 0;
  let mut x150: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x149, &mut x150, x148, x118, x121);
  let x151: u32 = ((x150 as u32) + (x119 as u32));
  let mut x152: u32 = 0;
  let mut x153: u32 = 0;
  fiat_p256_mulx_u32(&mut x152, &mut x153, x2, (arg2[7]));
  let mut x154: u32 = 0;
  let mut x155: u32 = 0;
  fiat_p256_mulx_u32(&mut x154, &mut x155, x2, (arg2[6]));
  let mut x156: u32 = 0;
  let mut x157: u32 = 0;
  fiat_p256_mulx_u32(&mut x156, &mut x157, x2, (arg2[5]));
  let mut x158: u32 = 0;
  let mut x159: u32 = 0;
  fiat_p256_mulx_u32(&mut x158, &mut x159, x2, (arg2[4]));
  let mut x160: u32 = 0;
  let mut x161: u32 = 0;
  fiat_p256_mulx_u32(&mut x160, &mut x161, x2, (arg2[3]));
  let mut x162: u32 = 0;
  let mut x163: u32 = 0;
  fiat_p256_mulx_u32(&mut x162, &mut x163, x2, (arg2[2]));
  let mut x164: u32 = 0;
  let mut x165: u32 = 0;
  fiat_p256_mulx_u32(&mut x164, &mut x165, x2, (arg2[1]));
  let mut x166: u32 = 0;
  let mut x167: u32 = 0;
  fiat_p256_mulx_u32(&mut x166, &mut x167, x2, (arg2[0]));
  let mut x168: u32 = 0;
  let mut x169: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x168, &mut x169, 0x0, x167, x164);
  let mut x170: u32 = 0;
  let mut x171: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x170, &mut x171, x169, x165, x162);
  let mut x172: u32 = 0;
  let mut x173: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x172, &mut x173, x171, x163, x160);
  let mut x174: u32 = 0;
  let mut x175: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x174, &mut x175, x173, x161, x158);
  let mut x176: u32 = 0;
  let mut x177: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x176, &mut x177, x175, x159, x156);
  let mut x178: u32 = 0;
  let mut x179: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x178, &mut x179, x177, x157, x154);
  let mut x180: u32 = 0;
  let mut x181: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x180, &mut x181, x179, x155, x152);
  let x182: u32 = ((x181 as u32) + x153);
  let mut x183: u32 = 0;
  let mut x184: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x183, &mut x184, 0x0, x135, x166);
  let mut x185: u32 = 0;
  let mut x186: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x185, &mut x186, x184, x137, x168);
  let mut x187: u32 = 0;
  let mut x188: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x187, &mut x188, x186, x139, x170);
  let mut x189: u32 = 0;
  let mut x190: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x189, &mut x190, x188, x141, x172);
  let mut x191: u32 = 0;
  let mut x192: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x191, &mut x192, x190, x143, x174);
  let mut x193: u32 = 0;
  let mut x194: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x193, &mut x194, x192, x145, x176);
  let mut x195: u32 = 0;
  let mut x196: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x195, &mut x196, x194, x147, x178);
  let mut x197: u32 = 0;
  let mut x198: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x197, &mut x198, x196, x149, x180);
  let mut x199: u32 = 0;
  let mut x200: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x199, &mut x200, x198, x151, x182);
  let mut x201: u32 = 0;
  let mut x202: u32 = 0;
  fiat_p256_mulx_u32(&mut x201, &mut x202, x183, 0xffffffff);
  let mut x203: u32 = 0;
  let mut x204: u32 = 0;
  fiat_p256_mulx_u32(&mut x203, &mut x204, x183, 0xffffffff);
  let mut x205: u32 = 0;
  let mut x206: u32 = 0;
  fiat_p256_mulx_u32(&mut x205, &mut x206, x183, 0xffffffff);
  let mut x207: u32 = 0;
  let mut x208: u32 = 0;
  fiat_p256_mulx_u32(&mut x207, &mut x208, x183, 0xffffffff);
  let mut x209: u32 = 0;
  let mut x210: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x209, &mut x210, 0x0, x208, x205);
  let mut x211: u32 = 0;
  let mut x212: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x211, &mut x212, x210, x206, x203);
  let x213: u32 = ((x212 as u32) + x204);
  let mut x214: u32 = 0;
  let mut x215: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x214, &mut x215, 0x0, x183, x207);
  let mut x216: u32 = 0;
  let mut x217: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x216, &mut x217, x215, x185, x209);
  let mut x218: u32 = 0;
  let mut x219: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x218, &mut x219, x217, x187, x211);
  let mut x220: u32 = 0;
  let mut x221: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x220, &mut x221, x219, x189, x213);
  let mut x222: u32 = 0;
  let mut x223: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x222, &mut x223, x221, x191, (0x0 as u32));
  let mut x224: u32 = 0;
  let mut x225: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x224, &mut x225, x223, x193, (0x0 as u32));
  let mut x226: u32 = 0;
  let mut x227: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x226, &mut x227, x225, x195, x183);
  let mut x228: u32 = 0;
  let mut x229: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x228, &mut x229, x227, x197, x201);
  let mut x230: u32 = 0;
  let mut x231: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x230, &mut x231, x229, x199, x202);
  let x232: u32 = ((x231 as u32) + (x200 as u32));
  let mut x233: u32 = 0;
  let mut x234: u32 = 0;
  fiat_p256_mulx_u32(&mut x233, &mut x234, x3, (arg2[7]));
  let mut x235: u32 = 0;
  let mut x236: u32 = 0;
  fiat_p256_mulx_u32(&mut x235, &mut x236, x3, (arg2[6]));
  let mut x237: u32 = 0;
  let mut x238: u32 = 0;
  fiat_p256_mulx_u32(&mut x237, &mut x238, x3, (arg2[5]));
  let mut x239: u32 = 0;
  let mut x240: u32 = 0;
  fiat_p256_mulx_u32(&mut x239, &mut x240, x3, (arg2[4]));
  let mut x241: u32 = 0;
  let mut x242: u32 = 0;
  fiat_p256_mulx_u32(&mut x241, &mut x242, x3, (arg2[3]));
  let mut x243: u32 = 0;
  let mut x244: u32 = 0;
  fiat_p256_mulx_u32(&mut x243, &mut x244, x3, (arg2[2]));
  let mut x245: u32 = 0;
  let mut x246: u32 = 0;
  fiat_p256_mulx_u32(&mut x245, &mut x246, x3, (arg2[1]));
  let mut x247: u32 = 0;
  let mut x248: u32 = 0;
  fiat_p256_mulx_u32(&mut x247, &mut x248, x3, (arg2[0]));
  let mut x249: u32 = 0;
  let mut x250: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x249, &mut x250, 0x0, x248, x245);
  let mut x251: u32 = 0;
  let mut x252: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x251, &mut x252, x250, x246, x243);
  let mut x253: u32 = 0;
  let mut x254: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x253, &mut x254, x252, x244, x241);
  let mut x255: u32 = 0;
  let mut x256: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x255, &mut x256, x254, x242, x239);
  let mut x257: u32 = 0;
  let mut x258: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x257, &mut x258, x256, x240, x237);
  let mut x259: u32 = 0;
  let mut x260: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x259, &mut x260, x258, x238, x235);
  let mut x261: u32 = 0;
  let mut x262: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x261, &mut x262, x260, x236, x233);
  let x263: u32 = ((x262 as u32) + x234);
  let mut x264: u32 = 0;
  let mut x265: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x264, &mut x265, 0x0, x216, x247);
  let mut x266: u32 = 0;
  let mut x267: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x266, &mut x267, x265, x218, x249);
  let mut x268: u32 = 0;
  let mut x269: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x268, &mut x269, x267, x220, x251);
  let mut x270: u32 = 0;
  let mut x271: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x270, &mut x271, x269, x222, x253);
  let mut x272: u32 = 0;
  let mut x273: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x272, &mut x273, x271, x224, x255);
  let mut x274: u32 = 0;
  let mut x275: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x274, &mut x275, x273, x226, x257);
  let mut x276: u32 = 0;
  let mut x277: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x276, &mut x277, x275, x228, x259);
  let mut x278: u32 = 0;
  let mut x279: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x278, &mut x279, x277, x230, x261);
  let mut x280: u32 = 0;
  let mut x281: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x280, &mut x281, x279, x232, x263);
  let mut x282: u32 = 0;
  let mut x283: u32 = 0;
  fiat_p256_mulx_u32(&mut x282, &mut x283, x264, 0xffffffff);
  let mut x284: u32 = 0;
  let mut x285: u32 = 0;
  fiat_p256_mulx_u32(&mut x284, &mut x285, x264, 0xffffffff);
  let mut x286: u32 = 0;
  let mut x287: u32 = 0;
  fiat_p256_mulx_u32(&mut x286, &mut x287, x264, 0xffffffff);
  let mut x288: u32 = 0;
  let mut x289: u32 = 0;
  fiat_p256_mulx_u32(&mut x288, &mut x289, x264, 0xffffffff);
  let mut x290: u32 = 0;
  let mut x291: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x290, &mut x291, 0x0, x289, x286);
  let mut x292: u32 = 0;
  let mut x293: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x292, &mut x293, x291, x287, x284);
  let x294: u32 = ((x293 as u32) + x285);
  let mut x295: u32 = 0;
  let mut x296: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x295, &mut x296, 0x0, x264, x288);
  let mut x297: u32 = 0;
  let mut x298: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x297, &mut x298, x296, x266, x290);
  let mut x299: u32 = 0;
  let mut x300: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x299, &mut x300, x298, x268, x292);
  let mut x301: u32 = 0;
  let mut x302: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x301, &mut x302, x300, x270, x294);
  let mut x303: u32 = 0;
  let mut x304: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x303, &mut x304, x302, x272, (0x0 as u32));
  let mut x305: u32 = 0;
  let mut x306: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x305, &mut x306, x304, x274, (0x0 as u32));
  let mut x307: u32 = 0;
  let mut x308: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x307, &mut x308, x306, x276, x264);
  let mut x309: u32 = 0;
  let mut x310: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x309, &mut x310, x308, x278, x282);
  let mut x311: u32 = 0;
  let mut x312: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x311, &mut x312, x310, x280, x283);
  let x313: u32 = ((x312 as u32) + (x281 as u32));
  let mut x314: u32 = 0;
  let mut x315: u32 = 0;
  fiat_p256_mulx_u32(&mut x314, &mut x315, x4, (arg2[7]));
  let mut x316: u32 = 0;
  let mut x317: u32 = 0;
  fiat_p256_mulx_u32(&mut x316, &mut x317, x4, (arg2[6]));
  let mut x318: u32 = 0;
  let mut x319: u32 = 0;
  fiat_p256_mulx_u32(&mut x318, &mut x319, x4, (arg2[5]));
  let mut x320: u32 = 0;
  let mut x321: u32 = 0;
  fiat_p256_mulx_u32(&mut x320, &mut x321, x4, (arg2[4]));
  let mut x322: u32 = 0;
  let mut x323: u32 = 0;
  fiat_p256_mulx_u32(&mut x322, &mut x323, x4, (arg2[3]));
  let mut x324: u32 = 0;
  let mut x325: u32 = 0;
  fiat_p256_mulx_u32(&mut x324, &mut x325, x4, (arg2[2]));
  let mut x326: u32 = 0;
  let mut x327: u32 = 0;
  fiat_p256_mulx_u32(&mut x326, &mut x327, x4, (arg2[1]));
  let mut x328: u32 = 0;
  let mut x329: u32 = 0;
  fiat_p256_mulx_u32(&mut x328, &mut x329, x4, (arg2[0]));
  let mut x330: u32 = 0;
  let mut x331: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x330, &mut x331, 0x0, x329, x326);
  let mut x332: u32 = 0;
  let mut x333: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x332, &mut x333, x331, x327, x324);
  let mut x334: u32 = 0;
  let mut x335: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x334, &mut x335, x333, x325, x322);
  let mut x336: u32 = 0;
  let mut x337: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x336, &mut x337, x335, x323, x320);
  let mut x338: u32 = 0;
  let mut x339: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x338, &mut x339, x337, x321, x318);
  let mut x340: u32 = 0;
  let mut x341: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x340, &mut x341, x339, x319, x316);
  let mut x342: u32 = 0;
  let mut x343: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x342, &mut x343, x341, x317, x314);
  let x344: u32 = ((x343 as u32) + x315);
  let mut x345: u32 = 0;
  let mut x346: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x345, &mut x346, 0x0, x297, x328);
  let mut x347: u32 = 0;
  let mut x348: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x347, &mut x348, x346, x299, x330);
  let mut x349: u32 = 0;
  let mut x350: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x349, &mut x350, x348, x301, x332);
  let mut x351: u32 = 0;
  let mut x352: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x351, &mut x352, x350, x303, x334);
  let mut x353: u32 = 0;
  let mut x354: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x353, &mut x354, x352, x305, x336);
  let mut x355: u32 = 0;
  let mut x356: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x355, &mut x356, x354, x307, x338);
  let mut x357: u32 = 0;
  let mut x358: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x357, &mut x358, x356, x309, x340);
  let mut x359: u32 = 0;
  let mut x360: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x359, &mut x360, x358, x311, x342);
  let mut x361: u32 = 0;
  let mut x362: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x361, &mut x362, x360, x313, x344);
  let mut x363: u32 = 0;
  let mut x364: u32 = 0;
  fiat_p256_mulx_u32(&mut x363, &mut x364, x345, 0xffffffff);
  let mut x365: u32 = 0;
  let mut x366: u32 = 0;
  fiat_p256_mulx_u32(&mut x365, &mut x366, x345, 0xffffffff);
  let mut x367: u32 = 0;
  let mut x368: u32 = 0;
  fiat_p256_mulx_u32(&mut x367, &mut x368, x345, 0xffffffff);
  let mut x369: u32 = 0;
  let mut x370: u32 = 0;
  fiat_p256_mulx_u32(&mut x369, &mut x370, x345, 0xffffffff);
  let mut x371: u32 = 0;
  let mut x372: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x371, &mut x372, 0x0, x370, x367);
  let mut x373: u32 = 0;
  let mut x374: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x373, &mut x374, x372, x368, x365);
  let x375: u32 = ((x374 as u32) + x366);
  let mut x376: u32 = 0;
  let mut x377: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x376, &mut x377, 0x0, x345, x369);
  let mut x378: u32 = 0;
  let mut x379: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x378, &mut x379, x377, x347, x371);
  let mut x380: u32 = 0;
  let mut x381: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x380, &mut x381, x379, x349, x373);
  let mut x382: u32 = 0;
  let mut x383: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x382, &mut x383, x381, x351, x375);
  let mut x384: u32 = 0;
  let mut x385: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x384, &mut x385, x383, x353, (0x0 as u32));
  let mut x386: u32 = 0;
  let mut x387: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x386, &mut x387, x385, x355, (0x0 as u32));
  let mut x388: u32 = 0;
  let mut x389: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x388, &mut x389, x387, x357, x345);
  let mut x390: u32 = 0;
  let mut x391: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x390, &mut x391, x389, x359, x363);
  let mut x392: u32 = 0;
  let mut x393: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x392, &mut x393, x391, x361, x364);
  let x394: u32 = ((x393 as u32) + (x362 as u32));
  let mut x395: u32 = 0;
  let mut x396: u32 = 0;
  fiat_p256_mulx_u32(&mut x395, &mut x396, x5, (arg2[7]));
  let mut x397: u32 = 0;
  let mut x398: u32 = 0;
  fiat_p256_mulx_u32(&mut x397, &mut x398, x5, (arg2[6]));
  let mut x399: u32 = 0;
  let mut x400: u32 = 0;
  fiat_p256_mulx_u32(&mut x399, &mut x400, x5, (arg2[5]));
  let mut x401: u32 = 0;
  let mut x402: u32 = 0;
  fiat_p256_mulx_u32(&mut x401, &mut x402, x5, (arg2[4]));
  let mut x403: u32 = 0;
  let mut x404: u32 = 0;
  fiat_p256_mulx_u32(&mut x403, &mut x404, x5, (arg2[3]));
  let mut x405: u32 = 0;
  let mut x406: u32 = 0;
  fiat_p256_mulx_u32(&mut x405, &mut x406, x5, (arg2[2]));
  let mut x407: u32 = 0;
  let mut x408: u32 = 0;
  fiat_p256_mulx_u32(&mut x407, &mut x408, x5, (arg2[1]));
  let mut x409: u32 = 0;
  let mut x410: u32 = 0;
  fiat_p256_mulx_u32(&mut x409, &mut x410, x5, (arg2[0]));
  let mut x411: u32 = 0;
  let mut x412: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x411, &mut x412, 0x0, x410, x407);
  let mut x413: u32 = 0;
  let mut x414: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x413, &mut x414, x412, x408, x405);
  let mut x415: u32 = 0;
  let mut x416: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x415, &mut x416, x414, x406, x403);
  let mut x417: u32 = 0;
  let mut x418: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x417, &mut x418, x416, x404, x401);
  let mut x419: u32 = 0;
  let mut x420: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x419, &mut x420, x418, x402, x399);
  let mut x421: u32 = 0;
  let mut x422: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x421, &mut x422, x420, x400, x397);
  let mut x423: u32 = 0;
  let mut x424: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x423, &mut x424, x422, x398, x395);
  let x425: u32 = ((x424 as u32) + x396);
  let mut x426: u32 = 0;
  let mut x427: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x426, &mut x427, 0x0, x378, x409);
  let mut x428: u32 = 0;
  let mut x429: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x428, &mut x429, x427, x380, x411);
  let mut x430: u32 = 0;
  let mut x431: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x430, &mut x431, x429, x382, x413);
  let mut x432: u32 = 0;
  let mut x433: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x432, &mut x433, x431, x384, x415);
  let mut x434: u32 = 0;
  let mut x435: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x434, &mut x435, x433, x386, x417);
  let mut x436: u32 = 0;
  let mut x437: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x436, &mut x437, x435, x388, x419);
  let mut x438: u32 = 0;
  let mut x439: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x438, &mut x439, x437, x390, x421);
  let mut x440: u32 = 0;
  let mut x441: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x440, &mut x441, x439, x392, x423);
  let mut x442: u32 = 0;
  let mut x443: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x442, &mut x443, x441, x394, x425);
  let mut x444: u32 = 0;
  let mut x445: u32 = 0;
  fiat_p256_mulx_u32(&mut x444, &mut x445, x426, 0xffffffff);
  let mut x446: u32 = 0;
  let mut x447: u32 = 0;
  fiat_p256_mulx_u32(&mut x446, &mut x447, x426, 0xffffffff);
  let mut x448: u32 = 0;
  let mut x449: u32 = 0;
  fiat_p256_mulx_u32(&mut x448, &mut x449, x426, 0xffffffff);
  let mut x450: u32 = 0;
  let mut x451: u32 = 0;
  fiat_p256_mulx_u32(&mut x450, &mut x451, x426, 0xffffffff);
  let mut x452: u32 = 0;
  let mut x453: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x452, &mut x453, 0x0, x451, x448);
  let mut x454: u32 = 0;
  let mut x455: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x454, &mut x455, x453, x449, x446);
  let x456: u32 = ((x455 as u32) + x447);
  let mut x457: u32 = 0;
  let mut x458: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x457, &mut x458, 0x0, x426, x450);
  let mut x459: u32 = 0;
  let mut x460: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x459, &mut x460, x458, x428, x452);
  let mut x461: u32 = 0;
  let mut x462: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x461, &mut x462, x460, x430, x454);
  let mut x463: u32 = 0;
  let mut x464: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x463, &mut x464, x462, x432, x456);
  let mut x465: u32 = 0;
  let mut x466: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x465, &mut x466, x464, x434, (0x0 as u32));
  let mut x467: u32 = 0;
  let mut x468: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x467, &mut x468, x466, x436, (0x0 as u32));
  let mut x469: u32 = 0;
  let mut x470: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x469, &mut x470, x468, x438, x426);
  let mut x471: u32 = 0;
  let mut x472: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x471, &mut x472, x470, x440, x444);
  let mut x473: u32 = 0;
  let mut x474: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x473, &mut x474, x472, x442, x445);
  let x475: u32 = ((x474 as u32) + (x443 as u32));
  let mut x476: u32 = 0;
  let mut x477: u32 = 0;
  fiat_p256_mulx_u32(&mut x476, &mut x477, x6, (arg2[7]));
  let mut x478: u32 = 0;
  let mut x479: u32 = 0;
  fiat_p256_mulx_u32(&mut x478, &mut x479, x6, (arg2[6]));
  let mut x480: u32 = 0;
  let mut x481: u32 = 0;
  fiat_p256_mulx_u32(&mut x480, &mut x481, x6, (arg2[5]));
  let mut x482: u32 = 0;
  let mut x483: u32 = 0;
  fiat_p256_mulx_u32(&mut x482, &mut x483, x6, (arg2[4]));
  let mut x484: u32 = 0;
  let mut x485: u32 = 0;
  fiat_p256_mulx_u32(&mut x484, &mut x485, x6, (arg2[3]));
  let mut x486: u32 = 0;
  let mut x487: u32 = 0;
  fiat_p256_mulx_u32(&mut x486, &mut x487, x6, (arg2[2]));
  let mut x488: u32 = 0;
  let mut x489: u32 = 0;
  fiat_p256_mulx_u32(&mut x488, &mut x489, x6, (arg2[1]));
  let mut x490: u32 = 0;
  let mut x491: u32 = 0;
  fiat_p256_mulx_u32(&mut x490, &mut x491, x6, (arg2[0]));
  let mut x492: u32 = 0;
  let mut x493: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x492, &mut x493, 0x0, x491, x488);
  let mut x494: u32 = 0;
  let mut x495: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x494, &mut x495, x493, x489, x486);
  let mut x496: u32 = 0;
  let mut x497: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x496, &mut x497, x495, x487, x484);
  let mut x498: u32 = 0;
  let mut x499: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x498, &mut x499, x497, x485, x482);
  let mut x500: u32 = 0;
  let mut x501: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x500, &mut x501, x499, x483, x480);
  let mut x502: u32 = 0;
  let mut x503: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x502, &mut x503, x501, x481, x478);
  let mut x504: u32 = 0;
  let mut x505: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x504, &mut x505, x503, x479, x476);
  let x506: u32 = ((x505 as u32) + x477);
  let mut x507: u32 = 0;
  let mut x508: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x507, &mut x508, 0x0, x459, x490);
  let mut x509: u32 = 0;
  let mut x510: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x509, &mut x510, x508, x461, x492);
  let mut x511: u32 = 0;
  let mut x512: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x511, &mut x512, x510, x463, x494);
  let mut x513: u32 = 0;
  let mut x514: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x513, &mut x514, x512, x465, x496);
  let mut x515: u32 = 0;
  let mut x516: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x515, &mut x516, x514, x467, x498);
  let mut x517: u32 = 0;
  let mut x518: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x517, &mut x518, x516, x469, x500);
  let mut x519: u32 = 0;
  let mut x520: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x519, &mut x520, x518, x471, x502);
  let mut x521: u32 = 0;
  let mut x522: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x521, &mut x522, x520, x473, x504);
  let mut x523: u32 = 0;
  let mut x524: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x523, &mut x524, x522, x475, x506);
  let mut x525: u32 = 0;
  let mut x526: u32 = 0;
  fiat_p256_mulx_u32(&mut x525, &mut x526, x507, 0xffffffff);
  let mut x527: u32 = 0;
  let mut x528: u32 = 0;
  fiat_p256_mulx_u32(&mut x527, &mut x528, x507, 0xffffffff);
  let mut x529: u32 = 0;
  let mut x530: u32 = 0;
  fiat_p256_mulx_u32(&mut x529, &mut x530, x507, 0xffffffff);
  let mut x531: u32 = 0;
  let mut x532: u32 = 0;
  fiat_p256_mulx_u32(&mut x531, &mut x532, x507, 0xffffffff);
  let mut x533: u32 = 0;
  let mut x534: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x533, &mut x534, 0x0, x532, x529);
  let mut x535: u32 = 0;
  let mut x536: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x535, &mut x536, x534, x530, x527);
  let x537: u32 = ((x536 as u32) + x528);
  let mut x538: u32 = 0;
  let mut x539: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x538, &mut x539, 0x0, x507, x531);
  let mut x540: u32 = 0;
  let mut x541: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x540, &mut x541, x539, x509, x533);
  let mut x542: u32 = 0;
  let mut x543: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x542, &mut x543, x541, x511, x535);
  let mut x544: u32 = 0;
  let mut x545: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x544, &mut x545, x543, x513, x537);
  let mut x546: u32 = 0;
  let mut x547: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x546, &mut x547, x545, x515, (0x0 as u32));
  let mut x548: u32 = 0;
  let mut x549: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x548, &mut x549, x547, x517, (0x0 as u32));
  let mut x550: u32 = 0;
  let mut x551: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x550, &mut x551, x549, x519, x507);
  let mut x552: u32 = 0;
  let mut x553: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x552, &mut x553, x551, x521, x525);
  let mut x554: u32 = 0;
  let mut x555: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x554, &mut x555, x553, x523, x526);
  let x556: u32 = ((x555 as u32) + (x524 as u32));
  let mut x557: u32 = 0;
  let mut x558: u32 = 0;
  fiat_p256_mulx_u32(&mut x557, &mut x558, x7, (arg2[7]));
  let mut x559: u32 = 0;
  let mut x560: u32 = 0;
  fiat_p256_mulx_u32(&mut x559, &mut x560, x7, (arg2[6]));
  let mut x561: u32 = 0;
  let mut x562: u32 = 0;
  fiat_p256_mulx_u32(&mut x561, &mut x562, x7, (arg2[5]));
  let mut x563: u32 = 0;
  let mut x564: u32 = 0;
  fiat_p256_mulx_u32(&mut x563, &mut x564, x7, (arg2[4]));
  let mut x565: u32 = 0;
  let mut x566: u32 = 0;
  fiat_p256_mulx_u32(&mut x565, &mut x566, x7, (arg2[3]));
  let mut x567: u32 = 0;
  let mut x568: u32 = 0;
  fiat_p256_mulx_u32(&mut x567, &mut x568, x7, (arg2[2]));
  let mut x569: u32 = 0;
  let mut x570: u32 = 0;
  fiat_p256_mulx_u32(&mut x569, &mut x570, x7, (arg2[1]));
  let mut x571: u32 = 0;
  let mut x572: u32 = 0;
  fiat_p256_mulx_u32(&mut x571, &mut x572, x7, (arg2[0]));
  let mut x573: u32 = 0;
  let mut x574: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x573, &mut x574, 0x0, x572, x569);
  let mut x575: u32 = 0;
  let mut x576: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x575, &mut x576, x574, x570, x567);
  let mut x577: u32 = 0;
  let mut x578: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x577, &mut x578, x576, x568, x565);
  let mut x579: u32 = 0;
  let mut x580: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x579, &mut x580, x578, x566, x563);
  let mut x581: u32 = 0;
  let mut x582: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x581, &mut x582, x580, x564, x561);
  let mut x583: u32 = 0;
  let mut x584: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x583, &mut x584, x582, x562, x559);
  let mut x585: u32 = 0;
  let mut x586: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x585, &mut x586, x584, x560, x557);
  let x587: u32 = ((x586 as u32) + x558);
  let mut x588: u32 = 0;
  let mut x589: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x588, &mut x589, 0x0, x540, x571);
  let mut x590: u32 = 0;
  let mut x591: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x590, &mut x591, x589, x542, x573);
  let mut x592: u32 = 0;
  let mut x593: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x592, &mut x593, x591, x544, x575);
  let mut x594: u32 = 0;
  let mut x595: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x594, &mut x595, x593, x546, x577);
  let mut x596: u32 = 0;
  let mut x597: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x596, &mut x597, x595, x548, x579);
  let mut x598: u32 = 0;
  let mut x599: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x598, &mut x599, x597, x550, x581);
  let mut x600: u32 = 0;
  let mut x601: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x600, &mut x601, x599, x552, x583);
  let mut x602: u32 = 0;
  let mut x603: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x602, &mut x603, x601, x554, x585);
  let mut x604: u32 = 0;
  let mut x605: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x604, &mut x605, x603, x556, x587);
  let mut x606: u32 = 0;
  let mut x607: u32 = 0;
  fiat_p256_mulx_u32(&mut x606, &mut x607, x588, 0xffffffff);
  let mut x608: u32 = 0;
  let mut x609: u32 = 0;
  fiat_p256_mulx_u32(&mut x608, &mut x609, x588, 0xffffffff);
  let mut x610: u32 = 0;
  let mut x611: u32 = 0;
  fiat_p256_mulx_u32(&mut x610, &mut x611, x588, 0xffffffff);
  let mut x612: u32 = 0;
  let mut x613: u32 = 0;
  fiat_p256_mulx_u32(&mut x612, &mut x613, x588, 0xffffffff);
  let mut x614: u32 = 0;
  let mut x615: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x614, &mut x615, 0x0, x613, x610);
  let mut x616: u32 = 0;
  let mut x617: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x616, &mut x617, x615, x611, x608);
  let x618: u32 = ((x617 as u32) + x609);
  let mut x619: u32 = 0;
  let mut x620: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x619, &mut x620, 0x0, x588, x612);
  let mut x621: u32 = 0;
  let mut x622: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x621, &mut x622, x620, x590, x614);
  let mut x623: u32 = 0;
  let mut x624: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x623, &mut x624, x622, x592, x616);
  let mut x625: u32 = 0;
  let mut x626: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x625, &mut x626, x624, x594, x618);
  let mut x627: u32 = 0;
  let mut x628: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x627, &mut x628, x626, x596, (0x0 as u32));
  let mut x629: u32 = 0;
  let mut x630: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x629, &mut x630, x628, x598, (0x0 as u32));
  let mut x631: u32 = 0;
  let mut x632: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x631, &mut x632, x630, x600, x588);
  let mut x633: u32 = 0;
  let mut x634: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x633, &mut x634, x632, x602, x606);
  let mut x635: u32 = 0;
  let mut x636: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x635, &mut x636, x634, x604, x607);
  let x637: u32 = ((x636 as u32) + (x605 as u32));
  let mut x638: u32 = 0;
  let mut x639: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x638, &mut x639, 0x0, x621, 0xffffffff);
  let mut x640: u32 = 0;
  let mut x641: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x640, &mut x641, x639, x623, 0xffffffff);
  let mut x642: u32 = 0;
  let mut x643: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x642, &mut x643, x641, x625, 0xffffffff);
  let mut x644: u32 = 0;
  let mut x645: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x644, &mut x645, x643, x627, (0x0 as u32));
  let mut x646: u32 = 0;
  let mut x647: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x646, &mut x647, x645, x629, (0x0 as u32));
  let mut x648: u32 = 0;
  let mut x649: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x648, &mut x649, x647, x631, (0x0 as u32));
  let mut x650: u32 = 0;
  let mut x651: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x650, &mut x651, x649, x633, (0x1 as u32));
  let mut x652: u32 = 0;
  let mut x653: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x652, &mut x653, x651, x635, 0xffffffff);
  let mut x654: u32 = 0;
  let mut x655: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x654, &mut x655, x653, x637, (0x0 as u32));
  let mut x656: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x656, x655, x638, x621);
  let mut x657: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x657, x655, x640, x623);
  let mut x658: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x658, x655, x642, x625);
  let mut x659: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x659, x655, x644, x627);
  let mut x660: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x660, x655, x646, x629);
  let mut x661: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x661, x655, x648, x631);
  let mut x662: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x662, x655, x650, x633);
  let mut x663: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x663, x655, x652, x635);
  out1[0] = x656;
  out1[1] = x657;
  out1[2] = x658;
  out1[3] = x659;
  out1[4] = x660;
  out1[5] = x661;
  out1[6] = x662;
  out1[7] = x663;
}

/// The function fiat_p256_square squares a field element in the Montgomery domain.
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m
///   0 ≤ eval out1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_p256_square(out1: &mut [u32; 8], arg1: &[u32; 8]) -> () {
  let x1: u32 = (arg1[1]);
  let x2: u32 = (arg1[2]);
  let x3: u32 = (arg1[3]);
  let x4: u32 = (arg1[4]);
  let x5: u32 = (arg1[5]);
  let x6: u32 = (arg1[6]);
  let x7: u32 = (arg1[7]);
  let x8: u32 = (arg1[0]);
  let mut x9: u32 = 0;
  let mut x10: u32 = 0;
  fiat_p256_mulx_u32(&mut x9, &mut x10, x8, (arg1[7]));
  let mut x11: u32 = 0;
  let mut x12: u32 = 0;
  fiat_p256_mulx_u32(&mut x11, &mut x12, x8, (arg1[6]));
  let mut x13: u32 = 0;
  let mut x14: u32 = 0;
  fiat_p256_mulx_u32(&mut x13, &mut x14, x8, (arg1[5]));
  let mut x15: u32 = 0;
  let mut x16: u32 = 0;
  fiat_p256_mulx_u32(&mut x15, &mut x16, x8, (arg1[4]));
  let mut x17: u32 = 0;
  let mut x18: u32 = 0;
  fiat_p256_mulx_u32(&mut x17, &mut x18, x8, (arg1[3]));
  let mut x19: u32 = 0;
  let mut x20: u32 = 0;
  fiat_p256_mulx_u32(&mut x19, &mut x20, x8, (arg1[2]));
  let mut x21: u32 = 0;
  let mut x22: u32 = 0;
  fiat_p256_mulx_u32(&mut x21, &mut x22, x8, (arg1[1]));
  let mut x23: u32 = 0;
  let mut x24: u32 = 0;
  fiat_p256_mulx_u32(&mut x23, &mut x24, x8, (arg1[0]));
  let mut x25: u32 = 0;
  let mut x26: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x25, &mut x26, 0x0, x24, x21);
  let mut x27: u32 = 0;
  let mut x28: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x27, &mut x28, x26, x22, x19);
  let mut x29: u32 = 0;
  let mut x30: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x29, &mut x30, x28, x20, x17);
  let mut x31: u32 = 0;
  let mut x32: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x31, &mut x32, x30, x18, x15);
  let mut x33: u32 = 0;
  let mut x34: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x33, &mut x34, x32, x16, x13);
  let mut x35: u32 = 0;
  let mut x36: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x35, &mut x36, x34, x14, x11);
  let mut x37: u32 = 0;
  let mut x38: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x37, &mut x38, x36, x12, x9);
  let x39: u32 = ((x38 as u32) + x10);
  let mut x40: u32 = 0;
  let mut x41: u32 = 0;
  fiat_p256_mulx_u32(&mut x40, &mut x41, x23, 0xffffffff);
  let mut x42: u32 = 0;
  let mut x43: u32 = 0;
  fiat_p256_mulx_u32(&mut x42, &mut x43, x23, 0xffffffff);
  let mut x44: u32 = 0;
  let mut x45: u32 = 0;
  fiat_p256_mulx_u32(&mut x44, &mut x45, x23, 0xffffffff);
  let mut x46: u32 = 0;
  let mut x47: u32 = 0;
  fiat_p256_mulx_u32(&mut x46, &mut x47, x23, 0xffffffff);
  let mut x48: u32 = 0;
  let mut x49: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x48, &mut x49, 0x0, x47, x44);
  let mut x50: u32 = 0;
  let mut x51: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x50, &mut x51, x49, x45, x42);
  let x52: u32 = ((x51 as u32) + x43);
  let mut x53: u32 = 0;
  let mut x54: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x53, &mut x54, 0x0, x23, x46);
  let mut x55: u32 = 0;
  let mut x56: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x55, &mut x56, x54, x25, x48);
  let mut x57: u32 = 0;
  let mut x58: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x57, &mut x58, x56, x27, x50);
  let mut x59: u32 = 0;
  let mut x60: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x59, &mut x60, x58, x29, x52);
  let mut x61: u32 = 0;
  let mut x62: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x61, &mut x62, x60, x31, (0x0 as u32));
  let mut x63: u32 = 0;
  let mut x64: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x63, &mut x64, x62, x33, (0x0 as u32));
  let mut x65: u32 = 0;
  let mut x66: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x65, &mut x66, x64, x35, x23);
  let mut x67: u32 = 0;
  let mut x68: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x67, &mut x68, x66, x37, x40);
  let mut x69: u32 = 0;
  let mut x70: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x69, &mut x70, x68, x39, x41);
  let mut x71: u32 = 0;
  let mut x72: u32 = 0;
  fiat_p256_mulx_u32(&mut x71, &mut x72, x1, (arg1[7]));
  let mut x73: u32 = 0;
  let mut x74: u32 = 0;
  fiat_p256_mulx_u32(&mut x73, &mut x74, x1, (arg1[6]));
  let mut x75: u32 = 0;
  let mut x76: u32 = 0;
  fiat_p256_mulx_u32(&mut x75, &mut x76, x1, (arg1[5]));
  let mut x77: u32 = 0;
  let mut x78: u32 = 0;
  fiat_p256_mulx_u32(&mut x77, &mut x78, x1, (arg1[4]));
  let mut x79: u32 = 0;
  let mut x80: u32 = 0;
  fiat_p256_mulx_u32(&mut x79, &mut x80, x1, (arg1[3]));
  let mut x81: u32 = 0;
  let mut x82: u32 = 0;
  fiat_p256_mulx_u32(&mut x81, &mut x82, x1, (arg1[2]));
  let mut x83: u32 = 0;
  let mut x84: u32 = 0;
  fiat_p256_mulx_u32(&mut x83, &mut x84, x1, (arg1[1]));
  let mut x85: u32 = 0;
  let mut x86: u32 = 0;
  fiat_p256_mulx_u32(&mut x85, &mut x86, x1, (arg1[0]));
  let mut x87: u32 = 0;
  let mut x88: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x87, &mut x88, 0x0, x86, x83);
  let mut x89: u32 = 0;
  let mut x90: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x89, &mut x90, x88, x84, x81);
  let mut x91: u32 = 0;
  let mut x92: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x91, &mut x92, x90, x82, x79);
  let mut x93: u32 = 0;
  let mut x94: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x93, &mut x94, x92, x80, x77);
  let mut x95: u32 = 0;
  let mut x96: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x95, &mut x96, x94, x78, x75);
  let mut x97: u32 = 0;
  let mut x98: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x97, &mut x98, x96, x76, x73);
  let mut x99: u32 = 0;
  let mut x100: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x99, &mut x100, x98, x74, x71);
  let x101: u32 = ((x100 as u32) + x72);
  let mut x102: u32 = 0;
  let mut x103: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x102, &mut x103, 0x0, x55, x85);
  let mut x104: u32 = 0;
  let mut x105: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x104, &mut x105, x103, x57, x87);
  let mut x106: u32 = 0;
  let mut x107: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x106, &mut x107, x105, x59, x89);
  let mut x108: u32 = 0;
  let mut x109: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x108, &mut x109, x107, x61, x91);
  let mut x110: u32 = 0;
  let mut x111: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x110, &mut x111, x109, x63, x93);
  let mut x112: u32 = 0;
  let mut x113: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x112, &mut x113, x111, x65, x95);
  let mut x114: u32 = 0;
  let mut x115: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x114, &mut x115, x113, x67, x97);
  let mut x116: u32 = 0;
  let mut x117: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x116, &mut x117, x115, x69, x99);
  let mut x118: u32 = 0;
  let mut x119: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x118, &mut x119, x117, (x70 as u32), x101);
  let mut x120: u32 = 0;
  let mut x121: u32 = 0;
  fiat_p256_mulx_u32(&mut x120, &mut x121, x102, 0xffffffff);
  let mut x122: u32 = 0;
  let mut x123: u32 = 0;
  fiat_p256_mulx_u32(&mut x122, &mut x123, x102, 0xffffffff);
  let mut x124: u32 = 0;
  let mut x125: u32 = 0;
  fiat_p256_mulx_u32(&mut x124, &mut x125, x102, 0xffffffff);
  let mut x126: u32 = 0;
  let mut x127: u32 = 0;
  fiat_p256_mulx_u32(&mut x126, &mut x127, x102, 0xffffffff);
  let mut x128: u32 = 0;
  let mut x129: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x128, &mut x129, 0x0, x127, x124);
  let mut x130: u32 = 0;
  let mut x131: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x130, &mut x131, x129, x125, x122);
  let x132: u32 = ((x131 as u32) + x123);
  let mut x133: u32 = 0;
  let mut x134: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x133, &mut x134, 0x0, x102, x126);
  let mut x135: u32 = 0;
  let mut x136: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x135, &mut x136, x134, x104, x128);
  let mut x137: u32 = 0;
  let mut x138: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x137, &mut x138, x136, x106, x130);
  let mut x139: u32 = 0;
  let mut x140: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x139, &mut x140, x138, x108, x132);
  let mut x141: u32 = 0;
  let mut x142: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x141, &mut x142, x140, x110, (0x0 as u32));
  let mut x143: u32 = 0;
  let mut x144: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x143, &mut x144, x142, x112, (0x0 as u32));
  let mut x145: u32 = 0;
  let mut x146: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x145, &mut x146, x144, x114, x102);
  let mut x147: u32 = 0;
  let mut x148: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x147, &mut x148, x146, x116, x120);
  let mut x149: u32 = 0;
  let mut x150: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x149, &mut x150, x148, x118, x121);
  let x151: u32 = ((x150 as u32) + (x119 as u32));
  let mut x152: u32 = 0;
  let mut x153: u32 = 0;
  fiat_p256_mulx_u32(&mut x152, &mut x153, x2, (arg1[7]));
  let mut x154: u32 = 0;
  let mut x155: u32 = 0;
  fiat_p256_mulx_u32(&mut x154, &mut x155, x2, (arg1[6]));
  let mut x156: u32 = 0;
  let mut x157: u32 = 0;
  fiat_p256_mulx_u32(&mut x156, &mut x157, x2, (arg1[5]));
  let mut x158: u32 = 0;
  let mut x159: u32 = 0;
  fiat_p256_mulx_u32(&mut x158, &mut x159, x2, (arg1[4]));
  let mut x160: u32 = 0;
  let mut x161: u32 = 0;
  fiat_p256_mulx_u32(&mut x160, &mut x161, x2, (arg1[3]));
  let mut x162: u32 = 0;
  let mut x163: u32 = 0;
  fiat_p256_mulx_u32(&mut x162, &mut x163, x2, (arg1[2]));
  let mut x164: u32 = 0;
  let mut x165: u32 = 0;
  fiat_p256_mulx_u32(&mut x164, &mut x165, x2, (arg1[1]));
  let mut x166: u32 = 0;
  let mut x167: u32 = 0;
  fiat_p256_mulx_u32(&mut x166, &mut x167, x2, (arg1[0]));
  let mut x168: u32 = 0;
  let mut x169: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x168, &mut x169, 0x0, x167, x164);
  let mut x170: u32 = 0;
  let mut x171: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x170, &mut x171, x169, x165, x162);
  let mut x172: u32 = 0;
  let mut x173: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x172, &mut x173, x171, x163, x160);
  let mut x174: u32 = 0;
  let mut x175: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x174, &mut x175, x173, x161, x158);
  let mut x176: u32 = 0;
  let mut x177: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x176, &mut x177, x175, x159, x156);
  let mut x178: u32 = 0;
  let mut x179: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x178, &mut x179, x177, x157, x154);
  let mut x180: u32 = 0;
  let mut x181: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x180, &mut x181, x179, x155, x152);
  let x182: u32 = ((x181 as u32) + x153);
  let mut x183: u32 = 0;
  let mut x184: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x183, &mut x184, 0x0, x135, x166);
  let mut x185: u32 = 0;
  let mut x186: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x185, &mut x186, x184, x137, x168);
  let mut x187: u32 = 0;
  let mut x188: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x187, &mut x188, x186, x139, x170);
  let mut x189: u32 = 0;
  let mut x190: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x189, &mut x190, x188, x141, x172);
  let mut x191: u32 = 0;
  let mut x192: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x191, &mut x192, x190, x143, x174);
  let mut x193: u32 = 0;
  let mut x194: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x193, &mut x194, x192, x145, x176);
  let mut x195: u32 = 0;
  let mut x196: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x195, &mut x196, x194, x147, x178);
  let mut x197: u32 = 0;
  let mut x198: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x197, &mut x198, x196, x149, x180);
  let mut x199: u32 = 0;
  let mut x200: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x199, &mut x200, x198, x151, x182);
  let mut x201: u32 = 0;
  let mut x202: u32 = 0;
  fiat_p256_mulx_u32(&mut x201, &mut x202, x183, 0xffffffff);
  let mut x203: u32 = 0;
  let mut x204: u32 = 0;
  fiat_p256_mulx_u32(&mut x203, &mut x204, x183, 0xffffffff);
  let mut x205: u32 = 0;
  let mut x206: u32 = 0;
  fiat_p256_mulx_u32(&mut x205, &mut x206, x183, 0xffffffff);
  let mut x207: u32 = 0;
  let mut x208: u32 = 0;
  fiat_p256_mulx_u32(&mut x207, &mut x208, x183, 0xffffffff);
  let mut x209: u32 = 0;
  let mut x210: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x209, &mut x210, 0x0, x208, x205);
  let mut x211: u32 = 0;
  let mut x212: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x211, &mut x212, x210, x206, x203);
  let x213: u32 = ((x212 as u32) + x204);
  let mut x214: u32 = 0;
  let mut x215: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x214, &mut x215, 0x0, x183, x207);
  let mut x216: u32 = 0;
  let mut x217: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x216, &mut x217, x215, x185, x209);
  let mut x218: u32 = 0;
  let mut x219: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x218, &mut x219, x217, x187, x211);
  let mut x220: u32 = 0;
  let mut x221: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x220, &mut x221, x219, x189, x213);
  let mut x222: u32 = 0;
  let mut x223: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x222, &mut x223, x221, x191, (0x0 as u32));
  let mut x224: u32 = 0;
  let mut x225: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x224, &mut x225, x223, x193, (0x0 as u32));
  let mut x226: u32 = 0;
  let mut x227: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x226, &mut x227, x225, x195, x183);
  let mut x228: u32 = 0;
  let mut x229: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x228, &mut x229, x227, x197, x201);
  let mut x230: u32 = 0;
  let mut x231: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x230, &mut x231, x229, x199, x202);
  let x232: u32 = ((x231 as u32) + (x200 as u32));
  let mut x233: u32 = 0;
  let mut x234: u32 = 0;
  fiat_p256_mulx_u32(&mut x233, &mut x234, x3, (arg1[7]));
  let mut x235: u32 = 0;
  let mut x236: u32 = 0;
  fiat_p256_mulx_u32(&mut x235, &mut x236, x3, (arg1[6]));
  let mut x237: u32 = 0;
  let mut x238: u32 = 0;
  fiat_p256_mulx_u32(&mut x237, &mut x238, x3, (arg1[5]));
  let mut x239: u32 = 0;
  let mut x240: u32 = 0;
  fiat_p256_mulx_u32(&mut x239, &mut x240, x3, (arg1[4]));
  let mut x241: u32 = 0;
  let mut x242: u32 = 0;
  fiat_p256_mulx_u32(&mut x241, &mut x242, x3, (arg1[3]));
  let mut x243: u32 = 0;
  let mut x244: u32 = 0;
  fiat_p256_mulx_u32(&mut x243, &mut x244, x3, (arg1[2]));
  let mut x245: u32 = 0;
  let mut x246: u32 = 0;
  fiat_p256_mulx_u32(&mut x245, &mut x246, x3, (arg1[1]));
  let mut x247: u32 = 0;
  let mut x248: u32 = 0;
  fiat_p256_mulx_u32(&mut x247, &mut x248, x3, (arg1[0]));
  let mut x249: u32 = 0;
  let mut x250: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x249, &mut x250, 0x0, x248, x245);
  let mut x251: u32 = 0;
  let mut x252: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x251, &mut x252, x250, x246, x243);
  let mut x253: u32 = 0;
  let mut x254: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x253, &mut x254, x252, x244, x241);
  let mut x255: u32 = 0;
  let mut x256: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x255, &mut x256, x254, x242, x239);
  let mut x257: u32 = 0;
  let mut x258: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x257, &mut x258, x256, x240, x237);
  let mut x259: u32 = 0;
  let mut x260: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x259, &mut x260, x258, x238, x235);
  let mut x261: u32 = 0;
  let mut x262: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x261, &mut x262, x260, x236, x233);
  let x263: u32 = ((x262 as u32) + x234);
  let mut x264: u32 = 0;
  let mut x265: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x264, &mut x265, 0x0, x216, x247);
  let mut x266: u32 = 0;
  let mut x267: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x266, &mut x267, x265, x218, x249);
  let mut x268: u32 = 0;
  let mut x269: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x268, &mut x269, x267, x220, x251);
  let mut x270: u32 = 0;
  let mut x271: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x270, &mut x271, x269, x222, x253);
  let mut x272: u32 = 0;
  let mut x273: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x272, &mut x273, x271, x224, x255);
  let mut x274: u32 = 0;
  let mut x275: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x274, &mut x275, x273, x226, x257);
  let mut x276: u32 = 0;
  let mut x277: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x276, &mut x277, x275, x228, x259);
  let mut x278: u32 = 0;
  let mut x279: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x278, &mut x279, x277, x230, x261);
  let mut x280: u32 = 0;
  let mut x281: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x280, &mut x281, x279, x232, x263);
  let mut x282: u32 = 0;
  let mut x283: u32 = 0;
  fiat_p256_mulx_u32(&mut x282, &mut x283, x264, 0xffffffff);
  let mut x284: u32 = 0;
  let mut x285: u32 = 0;
  fiat_p256_mulx_u32(&mut x284, &mut x285, x264, 0xffffffff);
  let mut x286: u32 = 0;
  let mut x287: u32 = 0;
  fiat_p256_mulx_u32(&mut x286, &mut x287, x264, 0xffffffff);
  let mut x288: u32 = 0;
  let mut x289: u32 = 0;
  fiat_p256_mulx_u32(&mut x288, &mut x289, x264, 0xffffffff);
  let mut x290: u32 = 0;
  let mut x291: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x290, &mut x291, 0x0, x289, x286);
  let mut x292: u32 = 0;
  let mut x293: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x292, &mut x293, x291, x287, x284);
  let x294: u32 = ((x293 as u32) + x285);
  let mut x295: u32 = 0;
  let mut x296: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x295, &mut x296, 0x0, x264, x288);
  let mut x297: u32 = 0;
  let mut x298: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x297, &mut x298, x296, x266, x290);
  let mut x299: u32 = 0;
  let mut x300: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x299, &mut x300, x298, x268, x292);
  let mut x301: u32 = 0;
  let mut x302: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x301, &mut x302, x300, x270, x294);
  let mut x303: u32 = 0;
  let mut x304: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x303, &mut x304, x302, x272, (0x0 as u32));
  let mut x305: u32 = 0;
  let mut x306: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x305, &mut x306, x304, x274, (0x0 as u32));
  let mut x307: u32 = 0;
  let mut x308: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x307, &mut x308, x306, x276, x264);
  let mut x309: u32 = 0;
  let mut x310: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x309, &mut x310, x308, x278, x282);
  let mut x311: u32 = 0;
  let mut x312: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x311, &mut x312, x310, x280, x283);
  let x313: u32 = ((x312 as u32) + (x281 as u32));
  let mut x314: u32 = 0;
  let mut x315: u32 = 0;
  fiat_p256_mulx_u32(&mut x314, &mut x315, x4, (arg1[7]));
  let mut x316: u32 = 0;
  let mut x317: u32 = 0;
  fiat_p256_mulx_u32(&mut x316, &mut x317, x4, (arg1[6]));
  let mut x318: u32 = 0;
  let mut x319: u32 = 0;
  fiat_p256_mulx_u32(&mut x318, &mut x319, x4, (arg1[5]));
  let mut x320: u32 = 0;
  let mut x321: u32 = 0;
  fiat_p256_mulx_u32(&mut x320, &mut x321, x4, (arg1[4]));
  let mut x322: u32 = 0;
  let mut x323: u32 = 0;
  fiat_p256_mulx_u32(&mut x322, &mut x323, x4, (arg1[3]));
  let mut x324: u32 = 0;
  let mut x325: u32 = 0;
  fiat_p256_mulx_u32(&mut x324, &mut x325, x4, (arg1[2]));
  let mut x326: u32 = 0;
  let mut x327: u32 = 0;
  fiat_p256_mulx_u32(&mut x326, &mut x327, x4, (arg1[1]));
  let mut x328: u32 = 0;
  let mut x329: u32 = 0;
  fiat_p256_mulx_u32(&mut x328, &mut x329, x4, (arg1[0]));
  let mut x330: u32 = 0;
  let mut x331: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x330, &mut x331, 0x0, x329, x326);
  let mut x332: u32 = 0;
  let mut x333: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x332, &mut x333, x331, x327, x324);
  let mut x334: u32 = 0;
  let mut x335: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x334, &mut x335, x333, x325, x322);
  let mut x336: u32 = 0;
  let mut x337: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x336, &mut x337, x335, x323, x320);
  let mut x338: u32 = 0;
  let mut x339: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x338, &mut x339, x337, x321, x318);
  let mut x340: u32 = 0;
  let mut x341: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x340, &mut x341, x339, x319, x316);
  let mut x342: u32 = 0;
  let mut x343: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x342, &mut x343, x341, x317, x314);
  let x344: u32 = ((x343 as u32) + x315);
  let mut x345: u32 = 0;
  let mut x346: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x345, &mut x346, 0x0, x297, x328);
  let mut x347: u32 = 0;
  let mut x348: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x347, &mut x348, x346, x299, x330);
  let mut x349: u32 = 0;
  let mut x350: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x349, &mut x350, x348, x301, x332);
  let mut x351: u32 = 0;
  let mut x352: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x351, &mut x352, x350, x303, x334);
  let mut x353: u32 = 0;
  let mut x354: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x353, &mut x354, x352, x305, x336);
  let mut x355: u32 = 0;
  let mut x356: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x355, &mut x356, x354, x307, x338);
  let mut x357: u32 = 0;
  let mut x358: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x357, &mut x358, x356, x309, x340);
  let mut x359: u32 = 0;
  let mut x360: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x359, &mut x360, x358, x311, x342);
  let mut x361: u32 = 0;
  let mut x362: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x361, &mut x362, x360, x313, x344);
  let mut x363: u32 = 0;
  let mut x364: u32 = 0;
  fiat_p256_mulx_u32(&mut x363, &mut x364, x345, 0xffffffff);
  let mut x365: u32 = 0;
  let mut x366: u32 = 0;
  fiat_p256_mulx_u32(&mut x365, &mut x366, x345, 0xffffffff);
  let mut x367: u32 = 0;
  let mut x368: u32 = 0;
  fiat_p256_mulx_u32(&mut x367, &mut x368, x345, 0xffffffff);
  let mut x369: u32 = 0;
  let mut x370: u32 = 0;
  fiat_p256_mulx_u32(&mut x369, &mut x370, x345, 0xffffffff);
  let mut x371: u32 = 0;
  let mut x372: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x371, &mut x372, 0x0, x370, x367);
  let mut x373: u32 = 0;
  let mut x374: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x373, &mut x374, x372, x368, x365);
  let x375: u32 = ((x374 as u32) + x366);
  let mut x376: u32 = 0;
  let mut x377: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x376, &mut x377, 0x0, x345, x369);
  let mut x378: u32 = 0;
  let mut x379: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x378, &mut x379, x377, x347, x371);
  let mut x380: u32 = 0;
  let mut x381: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x380, &mut x381, x379, x349, x373);
  let mut x382: u32 = 0;
  let mut x383: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x382, &mut x383, x381, x351, x375);
  let mut x384: u32 = 0;
  let mut x385: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x384, &mut x385, x383, x353, (0x0 as u32));
  let mut x386: u32 = 0;
  let mut x387: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x386, &mut x387, x385, x355, (0x0 as u32));
  let mut x388: u32 = 0;
  let mut x389: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x388, &mut x389, x387, x357, x345);
  let mut x390: u32 = 0;
  let mut x391: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x390, &mut x391, x389, x359, x363);
  let mut x392: u32 = 0;
  let mut x393: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x392, &mut x393, x391, x361, x364);
  let x394: u32 = ((x393 as u32) + (x362 as u32));
  let mut x395: u32 = 0;
  let mut x396: u32 = 0;
  fiat_p256_mulx_u32(&mut x395, &mut x396, x5, (arg1[7]));
  let mut x397: u32 = 0;
  let mut x398: u32 = 0;
  fiat_p256_mulx_u32(&mut x397, &mut x398, x5, (arg1[6]));
  let mut x399: u32 = 0;
  let mut x400: u32 = 0;
  fiat_p256_mulx_u32(&mut x399, &mut x400, x5, (arg1[5]));
  let mut x401: u32 = 0;
  let mut x402: u32 = 0;
  fiat_p256_mulx_u32(&mut x401, &mut x402, x5, (arg1[4]));
  let mut x403: u32 = 0;
  let mut x404: u32 = 0;
  fiat_p256_mulx_u32(&mut x403, &mut x404, x5, (arg1[3]));
  let mut x405: u32 = 0;
  let mut x406: u32 = 0;
  fiat_p256_mulx_u32(&mut x405, &mut x406, x5, (arg1[2]));
  let mut x407: u32 = 0;
  let mut x408: u32 = 0;
  fiat_p256_mulx_u32(&mut x407, &mut x408, x5, (arg1[1]));
  let mut x409: u32 = 0;
  let mut x410: u32 = 0;
  fiat_p256_mulx_u32(&mut x409, &mut x410, x5, (arg1[0]));
  let mut x411: u32 = 0;
  let mut x412: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x411, &mut x412, 0x0, x410, x407);
  let mut x413: u32 = 0;
  let mut x414: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x413, &mut x414, x412, x408, x405);
  let mut x415: u32 = 0;
  let mut x416: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x415, &mut x416, x414, x406, x403);
  let mut x417: u32 = 0;
  let mut x418: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x417, &mut x418, x416, x404, x401);
  let mut x419: u32 = 0;
  let mut x420: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x419, &mut x420, x418, x402, x399);
  let mut x421: u32 = 0;
  let mut x422: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x421, &mut x422, x420, x400, x397);
  let mut x423: u32 = 0;
  let mut x424: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x423, &mut x424, x422, x398, x395);
  let x425: u32 = ((x424 as u32) + x396);
  let mut x426: u32 = 0;
  let mut x427: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x426, &mut x427, 0x0, x378, x409);
  let mut x428: u32 = 0;
  let mut x429: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x428, &mut x429, x427, x380, x411);
  let mut x430: u32 = 0;
  let mut x431: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x430, &mut x431, x429, x382, x413);
  let mut x432: u32 = 0;
  let mut x433: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x432, &mut x433, x431, x384, x415);
  let mut x434: u32 = 0;
  let mut x435: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x434, &mut x435, x433, x386, x417);
  let mut x436: u32 = 0;
  let mut x437: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x436, &mut x437, x435, x388, x419);
  let mut x438: u32 = 0;
  let mut x439: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x438, &mut x439, x437, x390, x421);
  let mut x440: u32 = 0;
  let mut x441: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x440, &mut x441, x439, x392, x423);
  let mut x442: u32 = 0;
  let mut x443: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x442, &mut x443, x441, x394, x425);
  let mut x444: u32 = 0;
  let mut x445: u32 = 0;
  fiat_p256_mulx_u32(&mut x444, &mut x445, x426, 0xffffffff);
  let mut x446: u32 = 0;
  let mut x447: u32 = 0;
  fiat_p256_mulx_u32(&mut x446, &mut x447, x426, 0xffffffff);
  let mut x448: u32 = 0;
  let mut x449: u32 = 0;
  fiat_p256_mulx_u32(&mut x448, &mut x449, x426, 0xffffffff);
  let mut x450: u32 = 0;
  let mut x451: u32 = 0;
  fiat_p256_mulx_u32(&mut x450, &mut x451, x426, 0xffffffff);
  let mut x452: u32 = 0;
  let mut x453: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x452, &mut x453, 0x0, x451, x448);
  let mut x454: u32 = 0;
  let mut x455: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x454, &mut x455, x453, x449, x446);
  let x456: u32 = ((x455 as u32) + x447);
  let mut x457: u32 = 0;
  let mut x458: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x457, &mut x458, 0x0, x426, x450);
  let mut x459: u32 = 0;
  let mut x460: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x459, &mut x460, x458, x428, x452);
  let mut x461: u32 = 0;
  let mut x462: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x461, &mut x462, x460, x430, x454);
  let mut x463: u32 = 0;
  let mut x464: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x463, &mut x464, x462, x432, x456);
  let mut x465: u32 = 0;
  let mut x466: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x465, &mut x466, x464, x434, (0x0 as u32));
  let mut x467: u32 = 0;
  let mut x468: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x467, &mut x468, x466, x436, (0x0 as u32));
  let mut x469: u32 = 0;
  let mut x470: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x469, &mut x470, x468, x438, x426);
  let mut x471: u32 = 0;
  let mut x472: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x471, &mut x472, x470, x440, x444);
  let mut x473: u32 = 0;
  let mut x474: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x473, &mut x474, x472, x442, x445);
  let x475: u32 = ((x474 as u32) + (x443 as u32));
  let mut x476: u32 = 0;
  let mut x477: u32 = 0;
  fiat_p256_mulx_u32(&mut x476, &mut x477, x6, (arg1[7]));
  let mut x478: u32 = 0;
  let mut x479: u32 = 0;
  fiat_p256_mulx_u32(&mut x478, &mut x479, x6, (arg1[6]));
  let mut x480: u32 = 0;
  let mut x481: u32 = 0;
  fiat_p256_mulx_u32(&mut x480, &mut x481, x6, (arg1[5]));
  let mut x482: u32 = 0;
  let mut x483: u32 = 0;
  fiat_p256_mulx_u32(&mut x482, &mut x483, x6, (arg1[4]));
  let mut x484: u32 = 0;
  let mut x485: u32 = 0;
  fiat_p256_mulx_u32(&mut x484, &mut x485, x6, (arg1[3]));
  let mut x486: u32 = 0;
  let mut x487: u32 = 0;
  fiat_p256_mulx_u32(&mut x486, &mut x487, x6, (arg1[2]));
  let mut x488: u32 = 0;
  let mut x489: u32 = 0;
  fiat_p256_mulx_u32(&mut x488, &mut x489, x6, (arg1[1]));
  let mut x490: u32 = 0;
  let mut x491: u32 = 0;
  fiat_p256_mulx_u32(&mut x490, &mut x491, x6, (arg1[0]));
  let mut x492: u32 = 0;
  let mut x493: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x492, &mut x493, 0x0, x491, x488);
  let mut x494: u32 = 0;
  let mut x495: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x494, &mut x495, x493, x489, x486);
  let mut x496: u32 = 0;
  let mut x497: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x496, &mut x497, x495, x487, x484);
  let mut x498: u32 = 0;
  let mut x499: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x498, &mut x499, x497, x485, x482);
  let mut x500: u32 = 0;
  let mut x501: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x500, &mut x501, x499, x483, x480);
  let mut x502: u32 = 0;
  let mut x503: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x502, &mut x503, x501, x481, x478);
  let mut x504: u32 = 0;
  let mut x505: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x504, &mut x505, x503, x479, x476);
  let x506: u32 = ((x505 as u32) + x477);
  let mut x507: u32 = 0;
  let mut x508: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x507, &mut x508, 0x0, x459, x490);
  let mut x509: u32 = 0;
  let mut x510: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x509, &mut x510, x508, x461, x492);
  let mut x511: u32 = 0;
  let mut x512: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x511, &mut x512, x510, x463, x494);
  let mut x513: u32 = 0;
  let mut x514: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x513, &mut x514, x512, x465, x496);
  let mut x515: u32 = 0;
  let mut x516: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x515, &mut x516, x514, x467, x498);
  let mut x517: u32 = 0;
  let mut x518: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x517, &mut x518, x516, x469, x500);
  let mut x519: u32 = 0;
  let mut x520: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x519, &mut x520, x518, x471, x502);
  let mut x521: u32 = 0;
  let mut x522: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x521, &mut x522, x520, x473, x504);
  let mut x523: u32 = 0;
  let mut x524: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x523, &mut x524, x522, x475, x506);
  let mut x525: u32 = 0;
  let mut x526: u32 = 0;
  fiat_p256_mulx_u32(&mut x525, &mut x526, x507, 0xffffffff);
  let mut x527: u32 = 0;
  let mut x528: u32 = 0;
  fiat_p256_mulx_u32(&mut x527, &mut x528, x507, 0xffffffff);
  let mut x529: u32 = 0;
  let mut x530: u32 = 0;
  fiat_p256_mulx_u32(&mut x529, &mut x530, x507, 0xffffffff);
  let mut x531: u32 = 0;
  let mut x532: u32 = 0;
  fiat_p256_mulx_u32(&mut x531, &mut x532, x507, 0xffffffff);
  let mut x533: u32 = 0;
  let mut x534: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x533, &mut x534, 0x0, x532, x529);
  let mut x535: u32 = 0;
  let mut x536: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x535, &mut x536, x534, x530, x527);
  let x537: u32 = ((x536 as u32) + x528);
  let mut x538: u32 = 0;
  let mut x539: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x538, &mut x539, 0x0, x507, x531);
  let mut x540: u32 = 0;
  let mut x541: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x540, &mut x541, x539, x509, x533);
  let mut x542: u32 = 0;
  let mut x543: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x542, &mut x543, x541, x511, x535);
  let mut x544: u32 = 0;
  let mut x545: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x544, &mut x545, x543, x513, x537);
  let mut x546: u32 = 0;
  let mut x547: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x546, &mut x547, x545, x515, (0x0 as u32));
  let mut x548: u32 = 0;
  let mut x549: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x548, &mut x549, x547, x517, (0x0 as u32));
  let mut x550: u32 = 0;
  let mut x551: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x550, &mut x551, x549, x519, x507);
  let mut x552: u32 = 0;
  let mut x553: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x552, &mut x553, x551, x521, x525);
  let mut x554: u32 = 0;
  let mut x555: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x554, &mut x555, x553, x523, x526);
  let x556: u32 = ((x555 as u32) + (x524 as u32));
  let mut x557: u32 = 0;
  let mut x558: u32 = 0;
  fiat_p256_mulx_u32(&mut x557, &mut x558, x7, (arg1[7]));
  let mut x559: u32 = 0;
  let mut x560: u32 = 0;
  fiat_p256_mulx_u32(&mut x559, &mut x560, x7, (arg1[6]));
  let mut x561: u32 = 0;
  let mut x562: u32 = 0;
  fiat_p256_mulx_u32(&mut x561, &mut x562, x7, (arg1[5]));
  let mut x563: u32 = 0;
  let mut x564: u32 = 0;
  fiat_p256_mulx_u32(&mut x563, &mut x564, x7, (arg1[4]));
  let mut x565: u32 = 0;
  let mut x566: u32 = 0;
  fiat_p256_mulx_u32(&mut x565, &mut x566, x7, (arg1[3]));
  let mut x567: u32 = 0;
  let mut x568: u32 = 0;
  fiat_p256_mulx_u32(&mut x567, &mut x568, x7, (arg1[2]));
  let mut x569: u32 = 0;
  let mut x570: u32 = 0;
  fiat_p256_mulx_u32(&mut x569, &mut x570, x7, (arg1[1]));
  let mut x571: u32 = 0;
  let mut x572: u32 = 0;
  fiat_p256_mulx_u32(&mut x571, &mut x572, x7, (arg1[0]));
  let mut x573: u32 = 0;
  let mut x574: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x573, &mut x574, 0x0, x572, x569);
  let mut x575: u32 = 0;
  let mut x576: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x575, &mut x576, x574, x570, x567);
  let mut x577: u32 = 0;
  let mut x578: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x577, &mut x578, x576, x568, x565);
  let mut x579: u32 = 0;
  let mut x580: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x579, &mut x580, x578, x566, x563);
  let mut x581: u32 = 0;
  let mut x582: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x581, &mut x582, x580, x564, x561);
  let mut x583: u32 = 0;
  let mut x584: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x583, &mut x584, x582, x562, x559);
  let mut x585: u32 = 0;
  let mut x586: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x585, &mut x586, x584, x560, x557);
  let x587: u32 = ((x586 as u32) + x558);
  let mut x588: u32 = 0;
  let mut x589: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x588, &mut x589, 0x0, x540, x571);
  let mut x590: u32 = 0;
  let mut x591: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x590, &mut x591, x589, x542, x573);
  let mut x592: u32 = 0;
  let mut x593: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x592, &mut x593, x591, x544, x575);
  let mut x594: u32 = 0;
  let mut x595: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x594, &mut x595, x593, x546, x577);
  let mut x596: u32 = 0;
  let mut x597: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x596, &mut x597, x595, x548, x579);
  let mut x598: u32 = 0;
  let mut x599: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x598, &mut x599, x597, x550, x581);
  let mut x600: u32 = 0;
  let mut x601: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x600, &mut x601, x599, x552, x583);
  let mut x602: u32 = 0;
  let mut x603: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x602, &mut x603, x601, x554, x585);
  let mut x604: u32 = 0;
  let mut x605: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x604, &mut x605, x603, x556, x587);
  let mut x606: u32 = 0;
  let mut x607: u32 = 0;
  fiat_p256_mulx_u32(&mut x606, &mut x607, x588, 0xffffffff);
  let mut x608: u32 = 0;
  let mut x609: u32 = 0;
  fiat_p256_mulx_u32(&mut x608, &mut x609, x588, 0xffffffff);
  let mut x610: u32 = 0;
  let mut x611: u32 = 0;
  fiat_p256_mulx_u32(&mut x610, &mut x611, x588, 0xffffffff);
  let mut x612: u32 = 0;
  let mut x613: u32 = 0;
  fiat_p256_mulx_u32(&mut x612, &mut x613, x588, 0xffffffff);
  let mut x614: u32 = 0;
  let mut x615: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x614, &mut x615, 0x0, x613, x610);
  let mut x616: u32 = 0;
  let mut x617: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x616, &mut x617, x615, x611, x608);
  let x618: u32 = ((x617 as u32) + x609);
  let mut x619: u32 = 0;
  let mut x620: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x619, &mut x620, 0x0, x588, x612);
  let mut x621: u32 = 0;
  let mut x622: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x621, &mut x622, x620, x590, x614);
  let mut x623: u32 = 0;
  let mut x624: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x623, &mut x624, x622, x592, x616);
  let mut x625: u32 = 0;
  let mut x626: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x625, &mut x626, x624, x594, x618);
  let mut x627: u32 = 0;
  let mut x628: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x627, &mut x628, x626, x596, (0x0 as u32));
  let mut x629: u32 = 0;
  let mut x630: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x629, &mut x630, x628, x598, (0x0 as u32));
  let mut x631: u32 = 0;
  let mut x632: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x631, &mut x632, x630, x600, x588);
  let mut x633: u32 = 0;
  let mut x634: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x633, &mut x634, x632, x602, x606);
  let mut x635: u32 = 0;
  let mut x636: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x635, &mut x636, x634, x604, x607);
  let x637: u32 = ((x636 as u32) + (x605 as u32));
  let mut x638: u32 = 0;
  let mut x639: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x638, &mut x639, 0x0, x621, 0xffffffff);
  let mut x640: u32 = 0;
  let mut x641: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x640, &mut x641, x639, x623, 0xffffffff);
  let mut x642: u32 = 0;
  let mut x643: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x642, &mut x643, x641, x625, 0xffffffff);
  let mut x644: u32 = 0;
  let mut x645: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x644, &mut x645, x643, x627, (0x0 as u32));
  let mut x646: u32 = 0;
  let mut x647: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x646, &mut x647, x645, x629, (0x0 as u32));
  let mut x648: u32 = 0;
  let mut x649: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x648, &mut x649, x647, x631, (0x0 as u32));
  let mut x650: u32 = 0;
  let mut x651: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x650, &mut x651, x649, x633, (0x1 as u32));
  let mut x652: u32 = 0;
  let mut x653: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x652, &mut x653, x651, x635, 0xffffffff);
  let mut x654: u32 = 0;
  let mut x655: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x654, &mut x655, x653, x637, (0x0 as u32));
  let mut x656: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x656, x655, x638, x621);
  let mut x657: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x657, x655, x640, x623);
  let mut x658: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x658, x655, x642, x625);
  let mut x659: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x659, x655, x644, x627);
  let mut x660: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x660, x655, x646, x629);
  let mut x661: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x661, x655, x648, x631);
  let mut x662: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x662, x655, x650, x633);
  let mut x663: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x663, x655, x652, x635);
  out1[0] = x656;
  out1[1] = x657;
  out1[2] = x658;
  out1[3] = x659;
  out1[4] = x660;
  out1[5] = x661;
  out1[6] = x662;
  out1[7] = x663;
}

/// The function fiat_p256_add adds two field elements in the Montgomery domain.
/// Preconditions:
///   0 ≤ eval arg1 < m
///   0 ≤ eval arg2 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m
///   0 ≤ eval out1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_p256_add(out1: &mut [u32; 8], arg1: &[u32; 8], arg2: &[u32; 8]) -> () {
  let mut x1: u32 = 0;
  let mut x2: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1, &mut x2, 0x0, (arg1[0]), (arg2[0]));
  let mut x3: u32 = 0;
  let mut x4: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3, &mut x4, x2, (arg1[1]), (arg2[1]));
  let mut x5: u32 = 0;
  let mut x6: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x5, &mut x6, x4, (arg1[2]), (arg2[2]));
  let mut x7: u32 = 0;
  let mut x8: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x7, &mut x8, x6, (arg1[3]), (arg2[3]));
  let mut x9: u32 = 0;
  let mut x10: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x9, &mut x10, x8, (arg1[4]), (arg2[4]));
  let mut x11: u32 = 0;
  let mut x12: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x11, &mut x12, x10, (arg1[5]), (arg2[5]));
  let mut x13: u32 = 0;
  let mut x14: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x13, &mut x14, x12, (arg1[6]), (arg2[6]));
  let mut x15: u32 = 0;
  let mut x16: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x15, &mut x16, x14, (arg1[7]), (arg2[7]));
  let mut x17: u32 = 0;
  let mut x18: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x17, &mut x18, 0x0, x1, 0xffffffff);
  let mut x19: u32 = 0;
  let mut x20: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x19, &mut x20, x18, x3, 0xffffffff);
  let mut x21: u32 = 0;
  let mut x22: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x21, &mut x22, x20, x5, 0xffffffff);
  let mut x23: u32 = 0;
  let mut x24: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x23, &mut x24, x22, x7, (0x0 as u32));
  let mut x25: u32 = 0;
  let mut x26: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x25, &mut x26, x24, x9, (0x0 as u32));
  let mut x27: u32 = 0;
  let mut x28: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x27, &mut x28, x26, x11, (0x0 as u32));
  let mut x29: u32 = 0;
  let mut x30: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x29, &mut x30, x28, x13, (0x1 as u32));
  let mut x31: u32 = 0;
  let mut x32: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x31, &mut x32, x30, x15, 0xffffffff);
  let mut x33: u32 = 0;
  let mut x34: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x33, &mut x34, x32, (x16 as u32), (0x0 as u32));
  let mut x35: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x35, x34, x17, x1);
  let mut x36: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x36, x34, x19, x3);
  let mut x37: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x37, x34, x21, x5);
  let mut x38: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x38, x34, x23, x7);
  let mut x39: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x39, x34, x25, x9);
  let mut x40: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x40, x34, x27, x11);
  let mut x41: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x41, x34, x29, x13);
  let mut x42: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x42, x34, x31, x15);
  out1[0] = x35;
  out1[1] = x36;
  out1[2] = x37;
  out1[3] = x38;
  out1[4] = x39;
  out1[5] = x40;
  out1[6] = x41;
  out1[7] = x42;
}

/// The function fiat_p256_sub subtracts two field elements in the Montgomery domain.
/// Preconditions:
///   0 ≤ eval arg1 < m
///   0 ≤ eval arg2 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m
///   0 ≤ eval out1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_p256_sub(out1: &mut [u32; 8], arg1: &[u32; 8], arg2: &[u32; 8]) -> () {
  let mut x1: u32 = 0;
  let mut x2: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1, &mut x2, 0x0, (arg1[0]), (arg2[0]));
  let mut x3: u32 = 0;
  let mut x4: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x3, &mut x4, x2, (arg1[1]), (arg2[1]));
  let mut x5: u32 = 0;
  let mut x6: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x5, &mut x6, x4, (arg1[2]), (arg2[2]));
  let mut x7: u32 = 0;
  let mut x8: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x7, &mut x8, x6, (arg1[3]), (arg2[3]));
  let mut x9: u32 = 0;
  let mut x10: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x9, &mut x10, x8, (arg1[4]), (arg2[4]));
  let mut x11: u32 = 0;
  let mut x12: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x11, &mut x12, x10, (arg1[5]), (arg2[5]));
  let mut x13: u32 = 0;
  let mut x14: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x13, &mut x14, x12, (arg1[6]), (arg2[6]));
  let mut x15: u32 = 0;
  let mut x16: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x15, &mut x16, x14, (arg1[7]), (arg2[7]));
  let mut x17: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x17, x16, (0x0 as u32), 0xffffffff);
  let mut x18: u32 = 0;
  let mut x19: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x18, &mut x19, 0x0, x1, x17);
  let mut x20: u32 = 0;
  let mut x21: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x20, &mut x21, x19, x3, x17);
  let mut x22: u32 = 0;
  let mut x23: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x22, &mut x23, x21, x5, x17);
  let mut x24: u32 = 0;
  let mut x25: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x24, &mut x25, x23, x7, (0x0 as u32));
  let mut x26: u32 = 0;
  let mut x27: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x26, &mut x27, x25, x9, (0x0 as u32));
  let mut x28: u32 = 0;
  let mut x29: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x28, &mut x29, x27, x11, (0x0 as u32));
  let mut x30: u32 = 0;
  let mut x31: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x30, &mut x31, x29, x13, (((x17 & (0x1 as u32)) as fiat_p256_u1) as u32));
  let mut x32: u32 = 0;
  let mut x33: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x32, &mut x33, x31, x15, x17);
  out1[0] = x18;
  out1[1] = x20;
  out1[2] = x22;
  out1[3] = x24;
  out1[4] = x26;
  out1[5] = x28;
  out1[6] = x30;
  out1[7] = x32;
}

/// The function fiat_p256_opp negates a field element in the Montgomery domain.
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m
///   0 ≤ eval out1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_p256_opp(out1: &mut [u32; 8], arg1: &[u32; 8]) -> () {
  let mut x1: u32 = 0;
  let mut x2: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1, &mut x2, 0x0, (0x0 as u32), (arg1[0]));
  let mut x3: u32 = 0;
  let mut x4: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x3, &mut x4, x2, (0x0 as u32), (arg1[1]));
  let mut x5: u32 = 0;
  let mut x6: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x5, &mut x6, x4, (0x0 as u32), (arg1[2]));
  let mut x7: u32 = 0;
  let mut x8: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x7, &mut x8, x6, (0x0 as u32), (arg1[3]));
  let mut x9: u32 = 0;
  let mut x10: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x9, &mut x10, x8, (0x0 as u32), (arg1[4]));
  let mut x11: u32 = 0;
  let mut x12: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x11, &mut x12, x10, (0x0 as u32), (arg1[5]));
  let mut x13: u32 = 0;
  let mut x14: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x13, &mut x14, x12, (0x0 as u32), (arg1[6]));
  let mut x15: u32 = 0;
  let mut x16: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x15, &mut x16, x14, (0x0 as u32), (arg1[7]));
  let mut x17: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x17, x16, (0x0 as u32), 0xffffffff);
  let mut x18: u32 = 0;
  let mut x19: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x18, &mut x19, 0x0, x1, x17);
  let mut x20: u32 = 0;
  let mut x21: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x20, &mut x21, x19, x3, x17);
  let mut x22: u32 = 0;
  let mut x23: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x22, &mut x23, x21, x5, x17);
  let mut x24: u32 = 0;
  let mut x25: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x24, &mut x25, x23, x7, (0x0 as u32));
  let mut x26: u32 = 0;
  let mut x27: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x26, &mut x27, x25, x9, (0x0 as u32));
  let mut x28: u32 = 0;
  let mut x29: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x28, &mut x29, x27, x11, (0x0 as u32));
  let mut x30: u32 = 0;
  let mut x31: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x30, &mut x31, x29, x13, (((x17 & (0x1 as u32)) as fiat_p256_u1) as u32));
  let mut x32: u32 = 0;
  let mut x33: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x32, &mut x33, x31, x15, x17);
  out1[0] = x18;
  out1[1] = x20;
  out1[2] = x22;
  out1[3] = x24;
  out1[4] = x26;
  out1[5] = x28;
  out1[6] = x30;
  out1[7] = x32;
}

/// The function fiat_p256_from_montgomery translates a field element out of the Montgomery domain.
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval out1 mod m = (eval arg1 * ((2^32)⁻¹ mod m)^8) mod m
///   0 ≤ eval out1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_p256_from_montgomery(out1: &mut [u32; 8], arg1: &[u32; 8]) -> () {
  let x1: u32 = (arg1[0]);
  let mut x2: u32 = 0;
  let mut x3: u32 = 0;
  fiat_p256_mulx_u32(&mut x2, &mut x3, x1, 0xffffffff);
  let mut x4: u32 = 0;
  let mut x5: u32 = 0;
  fiat_p256_mulx_u32(&mut x4, &mut x5, x1, 0xffffffff);
  let mut x6: u32 = 0;
  let mut x7: u32 = 0;
  fiat_p256_mulx_u32(&mut x6, &mut x7, x1, 0xffffffff);
  let mut x8: u32 = 0;
  let mut x9: u32 = 0;
  fiat_p256_mulx_u32(&mut x8, &mut x9, x1, 0xffffffff);
  let mut x10: u32 = 0;
  let mut x11: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x10, &mut x11, 0x0, x9, x6);
  let mut x12: u32 = 0;
  let mut x13: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x12, &mut x13, x11, x7, x4);
  let mut x14: u32 = 0;
  let mut x15: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x14, &mut x15, 0x0, x1, x8);
  let mut x16: u32 = 0;
  let mut x17: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x16, &mut x17, x15, (0x0 as u32), x10);
  let mut x18: u32 = 0;
  let mut x19: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x18, &mut x19, x17, (0x0 as u32), x12);
  let mut x20: u32 = 0;
  let mut x21: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x20, &mut x21, x19, (0x0 as u32), ((x13 as u32) + x5));
  let mut x22: u32 = 0;
  let mut x23: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x22, &mut x23, 0x0, x16, (arg1[1]));
  let mut x24: u32 = 0;
  let mut x25: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x24, &mut x25, x23, x18, (0x0 as u32));
  let mut x26: u32 = 0;
  let mut x27: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x26, &mut x27, x25, x20, (0x0 as u32));
  let mut x28: u32 = 0;
  let mut x29: u32 = 0;
  fiat_p256_mulx_u32(&mut x28, &mut x29, x22, 0xffffffff);
  let mut x30: u32 = 0;
  let mut x31: u32 = 0;
  fiat_p256_mulx_u32(&mut x30, &mut x31, x22, 0xffffffff);
  let mut x32: u32 = 0;
  let mut x33: u32 = 0;
  fiat_p256_mulx_u32(&mut x32, &mut x33, x22, 0xffffffff);
  let mut x34: u32 = 0;
  let mut x35: u32 = 0;
  fiat_p256_mulx_u32(&mut x34, &mut x35, x22, 0xffffffff);
  let mut x36: u32 = 0;
  let mut x37: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x36, &mut x37, 0x0, x35, x32);
  let mut x38: u32 = 0;
  let mut x39: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x38, &mut x39, x37, x33, x30);
  let mut x40: u32 = 0;
  let mut x41: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x40, &mut x41, 0x0, x22, x34);
  let mut x42: u32 = 0;
  let mut x43: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x42, &mut x43, x41, x24, x36);
  let mut x44: u32 = 0;
  let mut x45: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x44, &mut x45, x43, x26, x38);
  let mut x46: u32 = 0;
  let mut x47: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x46, &mut x47, x45, ((x27 as u32) + (x21 as u32)), ((x39 as u32) + x31));
  let mut x48: u32 = 0;
  let mut x49: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x48, &mut x49, 0x0, x2, x22);
  let mut x50: u32 = 0;
  let mut x51: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x50, &mut x51, x49, x3, x28);
  let mut x52: u32 = 0;
  let mut x53: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x52, &mut x53, 0x0, x42, (arg1[2]));
  let mut x54: u32 = 0;
  let mut x55: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x54, &mut x55, x53, x44, (0x0 as u32));
  let mut x56: u32 = 0;
  let mut x57: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x56, &mut x57, x55, x46, (0x0 as u32));
  let mut x58: u32 = 0;
  let mut x59: u32 = 0;
  fiat_p256_mulx_u32(&mut x58, &mut x59, x52, 0xffffffff);
  let mut x60: u32 = 0;
  let mut x61: u32 = 0;
  fiat_p256_mulx_u32(&mut x60, &mut x61, x52, 0xffffffff);
  let mut x62: u32 = 0;
  let mut x63: u32 = 0;
  fiat_p256_mulx_u32(&mut x62, &mut x63, x52, 0xffffffff);
  let mut x64: u32 = 0;
  let mut x65: u32 = 0;
  fiat_p256_mulx_u32(&mut x64, &mut x65, x52, 0xffffffff);
  let mut x66: u32 = 0;
  let mut x67: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x66, &mut x67, 0x0, x65, x62);
  let mut x68: u32 = 0;
  let mut x69: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x68, &mut x69, x67, x63, x60);
  let mut x70: u32 = 0;
  let mut x71: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x70, &mut x71, 0x0, x52, x64);
  let mut x72: u32 = 0;
  let mut x73: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x72, &mut x73, x71, x54, x66);
  let mut x74: u32 = 0;
  let mut x75: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x74, &mut x75, x73, x56, x68);
  let mut x76: u32 = 0;
  let mut x77: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x76, &mut x77, x75, ((x57 as u32) + (x47 as u32)), ((x69 as u32) + x61));
  let mut x78: u32 = 0;
  let mut x79: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x78, &mut x79, x77, x1, (0x0 as u32));
  let mut x80: u32 = 0;
  let mut x81: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x80, &mut x81, x79, x48, (0x0 as u32));
  let mut x82: u32 = 0;
  let mut x83: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x82, &mut x83, x81, x50, x52);
  let mut x84: u32 = 0;
  let mut x85: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x84, &mut x85, x83, ((x51 as u32) + x29), x58);
  let mut x86: u32 = 0;
  let mut x87: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x86, &mut x87, 0x0, x72, (arg1[3]));
  let mut x88: u32 = 0;
  let mut x89: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x88, &mut x89, x87, x74, (0x0 as u32));
  let mut x90: u32 = 0;
  let mut x91: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x90, &mut x91, x89, x76, (0x0 as u32));
  let mut x92: u32 = 0;
  let mut x93: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x92, &mut x93, x91, x78, (0x0 as u32));
  let mut x94: u32 = 0;
  let mut x95: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x94, &mut x95, x93, x80, (0x0 as u32));
  let mut x96: u32 = 0;
  let mut x97: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x96, &mut x97, x95, x82, (0x0 as u32));
  let mut x98: u32 = 0;
  let mut x99: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x98, &mut x99, x97, x84, (0x0 as u32));
  let mut x100: u32 = 0;
  let mut x101: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x100, &mut x101, x99, ((x85 as u32) + x59), (0x0 as u32));
  let mut x102: u32 = 0;
  let mut x103: u32 = 0;
  fiat_p256_mulx_u32(&mut x102, &mut x103, x86, 0xffffffff);
  let mut x104: u32 = 0;
  let mut x105: u32 = 0;
  fiat_p256_mulx_u32(&mut x104, &mut x105, x86, 0xffffffff);
  let mut x106: u32 = 0;
  let mut x107: u32 = 0;
  fiat_p256_mulx_u32(&mut x106, &mut x107, x86, 0xffffffff);
  let mut x108: u32 = 0;
  let mut x109: u32 = 0;
  fiat_p256_mulx_u32(&mut x108, &mut x109, x86, 0xffffffff);
  let mut x110: u32 = 0;
  let mut x111: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x110, &mut x111, 0x0, x109, x106);
  let mut x112: u32 = 0;
  let mut x113: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x112, &mut x113, x111, x107, x104);
  let mut x114: u32 = 0;
  let mut x115: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x114, &mut x115, 0x0, x86, x108);
  let mut x116: u32 = 0;
  let mut x117: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x116, &mut x117, x115, x88, x110);
  let mut x118: u32 = 0;
  let mut x119: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x118, &mut x119, x117, x90, x112);
  let mut x120: u32 = 0;
  let mut x121: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x120, &mut x121, x119, x92, ((x113 as u32) + x105));
  let mut x122: u32 = 0;
  let mut x123: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x122, &mut x123, x121, x94, (0x0 as u32));
  let mut x124: u32 = 0;
  let mut x125: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x124, &mut x125, x123, x96, (0x0 as u32));
  let mut x126: u32 = 0;
  let mut x127: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x126, &mut x127, x125, x98, x86);
  let mut x128: u32 = 0;
  let mut x129: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x128, &mut x129, x127, x100, x102);
  let mut x130: u32 = 0;
  let mut x131: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x130, &mut x131, x129, (x101 as u32), x103);
  let mut x132: u32 = 0;
  let mut x133: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x132, &mut x133, 0x0, x116, (arg1[4]));
  let mut x134: u32 = 0;
  let mut x135: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x134, &mut x135, x133, x118, (0x0 as u32));
  let mut x136: u32 = 0;
  let mut x137: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x136, &mut x137, x135, x120, (0x0 as u32));
  let mut x138: u32 = 0;
  let mut x139: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x138, &mut x139, x137, x122, (0x0 as u32));
  let mut x140: u32 = 0;
  let mut x141: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x140, &mut x141, x139, x124, (0x0 as u32));
  let mut x142: u32 = 0;
  let mut x143: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x142, &mut x143, x141, x126, (0x0 as u32));
  let mut x144: u32 = 0;
  let mut x145: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x144, &mut x145, x143, x128, (0x0 as u32));
  let mut x146: u32 = 0;
  let mut x147: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x146, &mut x147, x145, x130, (0x0 as u32));
  let mut x148: u32 = 0;
  let mut x149: u32 = 0;
  fiat_p256_mulx_u32(&mut x148, &mut x149, x132, 0xffffffff);
  let mut x150: u32 = 0;
  let mut x151: u32 = 0;
  fiat_p256_mulx_u32(&mut x150, &mut x151, x132, 0xffffffff);
  let mut x152: u32 = 0;
  let mut x153: u32 = 0;
  fiat_p256_mulx_u32(&mut x152, &mut x153, x132, 0xffffffff);
  let mut x154: u32 = 0;
  let mut x155: u32 = 0;
  fiat_p256_mulx_u32(&mut x154, &mut x155, x132, 0xffffffff);
  let mut x156: u32 = 0;
  let mut x157: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x156, &mut x157, 0x0, x155, x152);
  let mut x158: u32 = 0;
  let mut x159: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x158, &mut x159, x157, x153, x150);
  let mut x160: u32 = 0;
  let mut x161: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x160, &mut x161, 0x0, x132, x154);
  let mut x162: u32 = 0;
  let mut x163: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x162, &mut x163, x161, x134, x156);
  let mut x164: u32 = 0;
  let mut x165: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x164, &mut x165, x163, x136, x158);
  let mut x166: u32 = 0;
  let mut x167: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x166, &mut x167, x165, x138, ((x159 as u32) + x151));
  let mut x168: u32 = 0;
  let mut x169: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x168, &mut x169, x167, x140, (0x0 as u32));
  let mut x170: u32 = 0;
  let mut x171: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x170, &mut x171, x169, x142, (0x0 as u32));
  let mut x172: u32 = 0;
  let mut x173: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x172, &mut x173, x171, x144, x132);
  let mut x174: u32 = 0;
  let mut x175: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x174, &mut x175, x173, x146, x148);
  let mut x176: u32 = 0;
  let mut x177: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x176, &mut x177, x175, ((x147 as u32) + (x131 as u32)), x149);
  let mut x178: u32 = 0;
  let mut x179: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x178, &mut x179, 0x0, x162, (arg1[5]));
  let mut x180: u32 = 0;
  let mut x181: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x180, &mut x181, x179, x164, (0x0 as u32));
  let mut x182: u32 = 0;
  let mut x183: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x182, &mut x183, x181, x166, (0x0 as u32));
  let mut x184: u32 = 0;
  let mut x185: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x184, &mut x185, x183, x168, (0x0 as u32));
  let mut x186: u32 = 0;
  let mut x187: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x186, &mut x187, x185, x170, (0x0 as u32));
  let mut x188: u32 = 0;
  let mut x189: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x188, &mut x189, x187, x172, (0x0 as u32));
  let mut x190: u32 = 0;
  let mut x191: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x190, &mut x191, x189, x174, (0x0 as u32));
  let mut x192: u32 = 0;
  let mut x193: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x192, &mut x193, x191, x176, (0x0 as u32));
  let mut x194: u32 = 0;
  let mut x195: u32 = 0;
  fiat_p256_mulx_u32(&mut x194, &mut x195, x178, 0xffffffff);
  let mut x196: u32 = 0;
  let mut x197: u32 = 0;
  fiat_p256_mulx_u32(&mut x196, &mut x197, x178, 0xffffffff);
  let mut x198: u32 = 0;
  let mut x199: u32 = 0;
  fiat_p256_mulx_u32(&mut x198, &mut x199, x178, 0xffffffff);
  let mut x200: u32 = 0;
  let mut x201: u32 = 0;
  fiat_p256_mulx_u32(&mut x200, &mut x201, x178, 0xffffffff);
  let mut x202: u32 = 0;
  let mut x203: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x202, &mut x203, 0x0, x201, x198);
  let mut x204: u32 = 0;
  let mut x205: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x204, &mut x205, x203, x199, x196);
  let mut x206: u32 = 0;
  let mut x207: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x206, &mut x207, 0x0, x178, x200);
  let mut x208: u32 = 0;
  let mut x209: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x208, &mut x209, x207, x180, x202);
  let mut x210: u32 = 0;
  let mut x211: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x210, &mut x211, x209, x182, x204);
  let mut x212: u32 = 0;
  let mut x213: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x212, &mut x213, x211, x184, ((x205 as u32) + x197));
  let mut x214: u32 = 0;
  let mut x215: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x214, &mut x215, x213, x186, (0x0 as u32));
  let mut x216: u32 = 0;
  let mut x217: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x216, &mut x217, x215, x188, (0x0 as u32));
  let mut x218: u32 = 0;
  let mut x219: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x218, &mut x219, x217, x190, x178);
  let mut x220: u32 = 0;
  let mut x221: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x220, &mut x221, x219, x192, x194);
  let mut x222: u32 = 0;
  let mut x223: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x222, &mut x223, x221, ((x193 as u32) + (x177 as u32)), x195);
  let mut x224: u32 = 0;
  let mut x225: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x224, &mut x225, 0x0, x208, (arg1[6]));
  let mut x226: u32 = 0;
  let mut x227: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x226, &mut x227, x225, x210, (0x0 as u32));
  let mut x228: u32 = 0;
  let mut x229: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x228, &mut x229, x227, x212, (0x0 as u32));
  let mut x230: u32 = 0;
  let mut x231: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x230, &mut x231, x229, x214, (0x0 as u32));
  let mut x232: u32 = 0;
  let mut x233: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x232, &mut x233, x231, x216, (0x0 as u32));
  let mut x234: u32 = 0;
  let mut x235: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x234, &mut x235, x233, x218, (0x0 as u32));
  let mut x236: u32 = 0;
  let mut x237: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x236, &mut x237, x235, x220, (0x0 as u32));
  let mut x238: u32 = 0;
  let mut x239: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x238, &mut x239, x237, x222, (0x0 as u32));
  let mut x240: u32 = 0;
  let mut x241: u32 = 0;
  fiat_p256_mulx_u32(&mut x240, &mut x241, x224, 0xffffffff);
  let mut x242: u32 = 0;
  let mut x243: u32 = 0;
  fiat_p256_mulx_u32(&mut x242, &mut x243, x224, 0xffffffff);
  let mut x244: u32 = 0;
  let mut x245: u32 = 0;
  fiat_p256_mulx_u32(&mut x244, &mut x245, x224, 0xffffffff);
  let mut x246: u32 = 0;
  let mut x247: u32 = 0;
  fiat_p256_mulx_u32(&mut x246, &mut x247, x224, 0xffffffff);
  let mut x248: u32 = 0;
  let mut x249: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x248, &mut x249, 0x0, x247, x244);
  let mut x250: u32 = 0;
  let mut x251: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x250, &mut x251, x249, x245, x242);
  let mut x252: u32 = 0;
  let mut x253: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x252, &mut x253, 0x0, x224, x246);
  let mut x254: u32 = 0;
  let mut x255: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x254, &mut x255, x253, x226, x248);
  let mut x256: u32 = 0;
  let mut x257: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x256, &mut x257, x255, x228, x250);
  let mut x258: u32 = 0;
  let mut x259: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x258, &mut x259, x257, x230, ((x251 as u32) + x243));
  let mut x260: u32 = 0;
  let mut x261: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x260, &mut x261, x259, x232, (0x0 as u32));
  let mut x262: u32 = 0;
  let mut x263: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x262, &mut x263, x261, x234, (0x0 as u32));
  let mut x264: u32 = 0;
  let mut x265: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x264, &mut x265, x263, x236, x224);
  let mut x266: u32 = 0;
  let mut x267: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x266, &mut x267, x265, x238, x240);
  let mut x268: u32 = 0;
  let mut x269: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x268, &mut x269, x267, ((x239 as u32) + (x223 as u32)), x241);
  let mut x270: u32 = 0;
  let mut x271: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x270, &mut x271, 0x0, x254, (arg1[7]));
  let mut x272: u32 = 0;
  let mut x273: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x272, &mut x273, x271, x256, (0x0 as u32));
  let mut x274: u32 = 0;
  let mut x275: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x274, &mut x275, x273, x258, (0x0 as u32));
  let mut x276: u32 = 0;
  let mut x277: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x276, &mut x277, x275, x260, (0x0 as u32));
  let mut x278: u32 = 0;
  let mut x279: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x278, &mut x279, x277, x262, (0x0 as u32));
  let mut x280: u32 = 0;
  let mut x281: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x280, &mut x281, x279, x264, (0x0 as u32));
  let mut x282: u32 = 0;
  let mut x283: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x282, &mut x283, x281, x266, (0x0 as u32));
  let mut x284: u32 = 0;
  let mut x285: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x284, &mut x285, x283, x268, (0x0 as u32));
  let mut x286: u32 = 0;
  let mut x287: u32 = 0;
  fiat_p256_mulx_u32(&mut x286, &mut x287, x270, 0xffffffff);
  let mut x288: u32 = 0;
  let mut x289: u32 = 0;
  fiat_p256_mulx_u32(&mut x288, &mut x289, x270, 0xffffffff);
  let mut x290: u32 = 0;
  let mut x291: u32 = 0;
  fiat_p256_mulx_u32(&mut x290, &mut x291, x270, 0xffffffff);
  let mut x292: u32 = 0;
  let mut x293: u32 = 0;
  fiat_p256_mulx_u32(&mut x292, &mut x293, x270, 0xffffffff);
  let mut x294: u32 = 0;
  let mut x295: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x294, &mut x295, 0x0, x293, x290);
  let mut x296: u32 = 0;
  let mut x297: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x296, &mut x297, x295, x291, x288);
  let mut x298: u32 = 0;
  let mut x299: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x298, &mut x299, 0x0, x270, x292);
  let mut x300: u32 = 0;
  let mut x301: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x300, &mut x301, x299, x272, x294);
  let mut x302: u32 = 0;
  let mut x303: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x302, &mut x303, x301, x274, x296);
  let mut x304: u32 = 0;
  let mut x305: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x304, &mut x305, x303, x276, ((x297 as u32) + x289));
  let mut x306: u32 = 0;
  let mut x307: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x306, &mut x307, x305, x278, (0x0 as u32));
  let mut x308: u32 = 0;
  let mut x309: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x308, &mut x309, x307, x280, (0x0 as u32));
  let mut x310: u32 = 0;
  let mut x311: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x310, &mut x311, x309, x282, x270);
  let mut x312: u32 = 0;
  let mut x313: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x312, &mut x313, x311, x284, x286);
  let mut x314: u32 = 0;
  let mut x315: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x314, &mut x315, x313, ((x285 as u32) + (x269 as u32)), x287);
  let mut x316: u32 = 0;
  let mut x317: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x316, &mut x317, 0x0, x300, 0xffffffff);
  let mut x318: u32 = 0;
  let mut x319: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x318, &mut x319, x317, x302, 0xffffffff);
  let mut x320: u32 = 0;
  let mut x321: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x320, &mut x321, x319, x304, 0xffffffff);
  let mut x322: u32 = 0;
  let mut x323: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x322, &mut x323, x321, x306, (0x0 as u32));
  let mut x324: u32 = 0;
  let mut x325: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x324, &mut x325, x323, x308, (0x0 as u32));
  let mut x326: u32 = 0;
  let mut x327: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x326, &mut x327, x325, x310, (0x0 as u32));
  let mut x328: u32 = 0;
  let mut x329: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x328, &mut x329, x327, x312, (0x1 as u32));
  let mut x330: u32 = 0;
  let mut x331: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x330, &mut x331, x329, x314, 0xffffffff);
  let mut x332: u32 = 0;
  let mut x333: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x332, &mut x333, x331, (x315 as u32), (0x0 as u32));
  let mut x334: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x334, x333, x316, x300);
  let mut x335: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x335, x333, x318, x302);
  let mut x336: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x336, x333, x320, x304);
  let mut x337: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x337, x333, x322, x306);
  let mut x338: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x338, x333, x324, x308);
  let mut x339: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x339, x333, x326, x310);
  let mut x340: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x340, x333, x328, x312);
  let mut x341: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x341, x333, x330, x314);
  out1[0] = x334;
  out1[1] = x335;
  out1[2] = x336;
  out1[3] = x337;
  out1[4] = x338;
  out1[5] = x339;
  out1[6] = x340;
  out1[7] = x341;
}

/// The function fiat_p256_to_montgomery translates a field element into the Montgomery domain.
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   eval (from_montgomery out1) mod m = eval arg1 mod m
///   0 ≤ eval out1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_p256_to_montgomery(out1: &mut [u32; 8], arg1: &[u32; 8]) -> () {
  let x1: u32 = (arg1[1]);
  let x2: u32 = (arg1[2]);
  let x3: u32 = (arg1[3]);
  let x4: u32 = (arg1[4]);
  let x5: u32 = (arg1[5]);
  let x6: u32 = (arg1[6]);
  let x7: u32 = (arg1[7]);
  let x8: u32 = (arg1[0]);
  let mut x9: u32 = 0;
  let mut x10: u32 = 0;
  fiat_p256_mulx_u32(&mut x9, &mut x10, x8, 0x4);
  let mut x11: u32 = 0;
  let mut x12: u32 = 0;
  fiat_p256_mulx_u32(&mut x11, &mut x12, x8, 0xfffffffd);
  let mut x13: u32 = 0;
  let mut x14: u32 = 0;
  fiat_p256_mulx_u32(&mut x13, &mut x14, x8, 0xffffffff);
  let mut x15: u32 = 0;
  let mut x16: u32 = 0;
  fiat_p256_mulx_u32(&mut x15, &mut x16, x8, 0xfffffffe);
  let mut x17: u32 = 0;
  let mut x18: u32 = 0;
  fiat_p256_mulx_u32(&mut x17, &mut x18, x8, 0xfffffffb);
  let mut x19: u32 = 0;
  let mut x20: u32 = 0;
  fiat_p256_mulx_u32(&mut x19, &mut x20, x8, 0xffffffff);
  let mut x21: u32 = 0;
  let mut x22: u32 = 0;
  fiat_p256_mulx_u32(&mut x21, &mut x22, x8, 0x3);
  let mut x23: u32 = 0;
  let mut x24: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x23, &mut x24, 0x0, x20, x17);
  let mut x25: u32 = 0;
  let mut x26: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x25, &mut x26, x24, x18, x15);
  let mut x27: u32 = 0;
  let mut x28: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x27, &mut x28, x26, x16, x13);
  let mut x29: u32 = 0;
  let mut x30: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x29, &mut x30, x28, x14, x11);
  let mut x31: u32 = 0;
  let mut x32: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x31, &mut x32, x30, x12, x9);
  let mut x33: u32 = 0;
  let mut x34: u32 = 0;
  fiat_p256_mulx_u32(&mut x33, &mut x34, x21, 0xffffffff);
  let mut x35: u32 = 0;
  let mut x36: u32 = 0;
  fiat_p256_mulx_u32(&mut x35, &mut x36, x21, 0xffffffff);
  let mut x37: u32 = 0;
  let mut x38: u32 = 0;
  fiat_p256_mulx_u32(&mut x37, &mut x38, x21, 0xffffffff);
  let mut x39: u32 = 0;
  let mut x40: u32 = 0;
  fiat_p256_mulx_u32(&mut x39, &mut x40, x21, 0xffffffff);
  let mut x41: u32 = 0;
  let mut x42: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x41, &mut x42, 0x0, x40, x37);
  let mut x43: u32 = 0;
  let mut x44: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x43, &mut x44, x42, x38, x35);
  let mut x45: u32 = 0;
  let mut x46: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x45, &mut x46, 0x0, x21, x39);
  let mut x47: u32 = 0;
  let mut x48: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x47, &mut x48, x46, x22, x41);
  let mut x49: u32 = 0;
  let mut x50: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x49, &mut x50, x48, x19, x43);
  let mut x51: u32 = 0;
  let mut x52: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x51, &mut x52, x50, x23, ((x44 as u32) + x36));
  let mut x53: u32 = 0;
  let mut x54: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x53, &mut x54, x52, x25, (0x0 as u32));
  let mut x55: u32 = 0;
  let mut x56: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x55, &mut x56, x54, x27, (0x0 as u32));
  let mut x57: u32 = 0;
  let mut x58: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x57, &mut x58, x56, x29, x21);
  let mut x59: u32 = 0;
  let mut x60: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x59, &mut x60, x58, x31, x33);
  let mut x61: u32 = 0;
  let mut x62: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x61, &mut x62, x60, ((x32 as u32) + x10), x34);
  let mut x63: u32 = 0;
  let mut x64: u32 = 0;
  fiat_p256_mulx_u32(&mut x63, &mut x64, x1, 0x4);
  let mut x65: u32 = 0;
  let mut x66: u32 = 0;
  fiat_p256_mulx_u32(&mut x65, &mut x66, x1, 0xfffffffd);
  let mut x67: u32 = 0;
  let mut x68: u32 = 0;
  fiat_p256_mulx_u32(&mut x67, &mut x68, x1, 0xffffffff);
  let mut x69: u32 = 0;
  let mut x70: u32 = 0;
  fiat_p256_mulx_u32(&mut x69, &mut x70, x1, 0xfffffffe);
  let mut x71: u32 = 0;
  let mut x72: u32 = 0;
  fiat_p256_mulx_u32(&mut x71, &mut x72, x1, 0xfffffffb);
  let mut x73: u32 = 0;
  let mut x74: u32 = 0;
  fiat_p256_mulx_u32(&mut x73, &mut x74, x1, 0xffffffff);
  let mut x75: u32 = 0;
  let mut x76: u32 = 0;
  fiat_p256_mulx_u32(&mut x75, &mut x76, x1, 0x3);
  let mut x77: u32 = 0;
  let mut x78: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x77, &mut x78, 0x0, x74, x71);
  let mut x79: u32 = 0;
  let mut x80: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x79, &mut x80, x78, x72, x69);
  let mut x81: u32 = 0;
  let mut x82: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x81, &mut x82, x80, x70, x67);
  let mut x83: u32 = 0;
  let mut x84: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x83, &mut x84, x82, x68, x65);
  let mut x85: u32 = 0;
  let mut x86: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x85, &mut x86, x84, x66, x63);
  let mut x87: u32 = 0;
  let mut x88: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x87, &mut x88, 0x0, x47, x75);
  let mut x89: u32 = 0;
  let mut x90: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x89, &mut x90, x88, x49, x76);
  let mut x91: u32 = 0;
  let mut x92: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x91, &mut x92, x90, x51, x73);
  let mut x93: u32 = 0;
  let mut x94: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x93, &mut x94, x92, x53, x77);
  let mut x95: u32 = 0;
  let mut x96: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x95, &mut x96, x94, x55, x79);
  let mut x97: u32 = 0;
  let mut x98: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x97, &mut x98, x96, x57, x81);
  let mut x99: u32 = 0;
  let mut x100: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x99, &mut x100, x98, x59, x83);
  let mut x101: u32 = 0;
  let mut x102: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x101, &mut x102, x100, x61, x85);
  let mut x103: u32 = 0;
  let mut x104: u32 = 0;
  fiat_p256_mulx_u32(&mut x103, &mut x104, x87, 0xffffffff);
  let mut x105: u32 = 0;
  let mut x106: u32 = 0;
  fiat_p256_mulx_u32(&mut x105, &mut x106, x87, 0xffffffff);
  let mut x107: u32 = 0;
  let mut x108: u32 = 0;
  fiat_p256_mulx_u32(&mut x107, &mut x108, x87, 0xffffffff);
  let mut x109: u32 = 0;
  let mut x110: u32 = 0;
  fiat_p256_mulx_u32(&mut x109, &mut x110, x87, 0xffffffff);
  let mut x111: u32 = 0;
  let mut x112: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x111, &mut x112, 0x0, x110, x107);
  let mut x113: u32 = 0;
  let mut x114: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x113, &mut x114, x112, x108, x105);
  let mut x115: u32 = 0;
  let mut x116: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x115, &mut x116, 0x0, x87, x109);
  let mut x117: u32 = 0;
  let mut x118: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x117, &mut x118, x116, x89, x111);
  let mut x119: u32 = 0;
  let mut x120: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x119, &mut x120, x118, x91, x113);
  let mut x121: u32 = 0;
  let mut x122: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x121, &mut x122, x120, x93, ((x114 as u32) + x106));
  let mut x123: u32 = 0;
  let mut x124: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x123, &mut x124, x122, x95, (0x0 as u32));
  let mut x125: u32 = 0;
  let mut x126: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x125, &mut x126, x124, x97, (0x0 as u32));
  let mut x127: u32 = 0;
  let mut x128: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x127, &mut x128, x126, x99, x87);
  let mut x129: u32 = 0;
  let mut x130: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x129, &mut x130, x128, x101, x103);
  let mut x131: u32 = 0;
  let mut x132: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x131, &mut x132, x130, (((x102 as u32) + (x62 as u32)) + ((x86 as u32) + x64)), x104);
  let mut x133: u32 = 0;
  let mut x134: u32 = 0;
  fiat_p256_mulx_u32(&mut x133, &mut x134, x2, 0x4);
  let mut x135: u32 = 0;
  let mut x136: u32 = 0;
  fiat_p256_mulx_u32(&mut x135, &mut x136, x2, 0xfffffffd);
  let mut x137: u32 = 0;
  let mut x138: u32 = 0;
  fiat_p256_mulx_u32(&mut x137, &mut x138, x2, 0xffffffff);
  let mut x139: u32 = 0;
  let mut x140: u32 = 0;
  fiat_p256_mulx_u32(&mut x139, &mut x140, x2, 0xfffffffe);
  let mut x141: u32 = 0;
  let mut x142: u32 = 0;
  fiat_p256_mulx_u32(&mut x141, &mut x142, x2, 0xfffffffb);
  let mut x143: u32 = 0;
  let mut x144: u32 = 0;
  fiat_p256_mulx_u32(&mut x143, &mut x144, x2, 0xffffffff);
  let mut x145: u32 = 0;
  let mut x146: u32 = 0;
  fiat_p256_mulx_u32(&mut x145, &mut x146, x2, 0x3);
  let mut x147: u32 = 0;
  let mut x148: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x147, &mut x148, 0x0, x144, x141);
  let mut x149: u32 = 0;
  let mut x150: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x149, &mut x150, x148, x142, x139);
  let mut x151: u32 = 0;
  let mut x152: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x151, &mut x152, x150, x140, x137);
  let mut x153: u32 = 0;
  let mut x154: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x153, &mut x154, x152, x138, x135);
  let mut x155: u32 = 0;
  let mut x156: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x155, &mut x156, x154, x136, x133);
  let mut x157: u32 = 0;
  let mut x158: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x157, &mut x158, 0x0, x117, x145);
  let mut x159: u32 = 0;
  let mut x160: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x159, &mut x160, x158, x119, x146);
  let mut x161: u32 = 0;
  let mut x162: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x161, &mut x162, x160, x121, x143);
  let mut x163: u32 = 0;
  let mut x164: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x163, &mut x164, x162, x123, x147);
  let mut x165: u32 = 0;
  let mut x166: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x165, &mut x166, x164, x125, x149);
  let mut x167: u32 = 0;
  let mut x168: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x167, &mut x168, x166, x127, x151);
  let mut x169: u32 = 0;
  let mut x170: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x169, &mut x170, x168, x129, x153);
  let mut x171: u32 = 0;
  let mut x172: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x171, &mut x172, x170, x131, x155);
  let mut x173: u32 = 0;
  let mut x174: u32 = 0;
  fiat_p256_mulx_u32(&mut x173, &mut x174, x157, 0xffffffff);
  let mut x175: u32 = 0;
  let mut x176: u32 = 0;
  fiat_p256_mulx_u32(&mut x175, &mut x176, x157, 0xffffffff);
  let mut x177: u32 = 0;
  let mut x178: u32 = 0;
  fiat_p256_mulx_u32(&mut x177, &mut x178, x157, 0xffffffff);
  let mut x179: u32 = 0;
  let mut x180: u32 = 0;
  fiat_p256_mulx_u32(&mut x179, &mut x180, x157, 0xffffffff);
  let mut x181: u32 = 0;
  let mut x182: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x181, &mut x182, 0x0, x180, x177);
  let mut x183: u32 = 0;
  let mut x184: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x183, &mut x184, x182, x178, x175);
  let mut x185: u32 = 0;
  let mut x186: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x185, &mut x186, 0x0, x157, x179);
  let mut x187: u32 = 0;
  let mut x188: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x187, &mut x188, x186, x159, x181);
  let mut x189: u32 = 0;
  let mut x190: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x189, &mut x190, x188, x161, x183);
  let mut x191: u32 = 0;
  let mut x192: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x191, &mut x192, x190, x163, ((x184 as u32) + x176));
  let mut x193: u32 = 0;
  let mut x194: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x193, &mut x194, x192, x165, (0x0 as u32));
  let mut x195: u32 = 0;
  let mut x196: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x195, &mut x196, x194, x167, (0x0 as u32));
  let mut x197: u32 = 0;
  let mut x198: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x197, &mut x198, x196, x169, x157);
  let mut x199: u32 = 0;
  let mut x200: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x199, &mut x200, x198, x171, x173);
  let mut x201: u32 = 0;
  let mut x202: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x201, &mut x202, x200, (((x172 as u32) + (x132 as u32)) + ((x156 as u32) + x134)), x174);
  let mut x203: u32 = 0;
  let mut x204: u32 = 0;
  fiat_p256_mulx_u32(&mut x203, &mut x204, x3, 0x4);
  let mut x205: u32 = 0;
  let mut x206: u32 = 0;
  fiat_p256_mulx_u32(&mut x205, &mut x206, x3, 0xfffffffd);
  let mut x207: u32 = 0;
  let mut x208: u32 = 0;
  fiat_p256_mulx_u32(&mut x207, &mut x208, x3, 0xffffffff);
  let mut x209: u32 = 0;
  let mut x210: u32 = 0;
  fiat_p256_mulx_u32(&mut x209, &mut x210, x3, 0xfffffffe);
  let mut x211: u32 = 0;
  let mut x212: u32 = 0;
  fiat_p256_mulx_u32(&mut x211, &mut x212, x3, 0xfffffffb);
  let mut x213: u32 = 0;
  let mut x214: u32 = 0;
  fiat_p256_mulx_u32(&mut x213, &mut x214, x3, 0xffffffff);
  let mut x215: u32 = 0;
  let mut x216: u32 = 0;
  fiat_p256_mulx_u32(&mut x215, &mut x216, x3, 0x3);
  let mut x217: u32 = 0;
  let mut x218: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x217, &mut x218, 0x0, x214, x211);
  let mut x219: u32 = 0;
  let mut x220: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x219, &mut x220, x218, x212, x209);
  let mut x221: u32 = 0;
  let mut x222: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x221, &mut x222, x220, x210, x207);
  let mut x223: u32 = 0;
  let mut x224: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x223, &mut x224, x222, x208, x205);
  let mut x225: u32 = 0;
  let mut x226: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x225, &mut x226, x224, x206, x203);
  let mut x227: u32 = 0;
  let mut x228: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x227, &mut x228, 0x0, x187, x215);
  let mut x229: u32 = 0;
  let mut x230: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x229, &mut x230, x228, x189, x216);
  let mut x231: u32 = 0;
  let mut x232: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x231, &mut x232, x230, x191, x213);
  let mut x233: u32 = 0;
  let mut x234: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x233, &mut x234, x232, x193, x217);
  let mut x235: u32 = 0;
  let mut x236: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x235, &mut x236, x234, x195, x219);
  let mut x237: u32 = 0;
  let mut x238: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x237, &mut x238, x236, x197, x221);
  let mut x239: u32 = 0;
  let mut x240: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x239, &mut x240, x238, x199, x223);
  let mut x241: u32 = 0;
  let mut x242: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x241, &mut x242, x240, x201, x225);
  let mut x243: u32 = 0;
  let mut x244: u32 = 0;
  fiat_p256_mulx_u32(&mut x243, &mut x244, x227, 0xffffffff);
  let mut x245: u32 = 0;
  let mut x246: u32 = 0;
  fiat_p256_mulx_u32(&mut x245, &mut x246, x227, 0xffffffff);
  let mut x247: u32 = 0;
  let mut x248: u32 = 0;
  fiat_p256_mulx_u32(&mut x247, &mut x248, x227, 0xffffffff);
  let mut x249: u32 = 0;
  let mut x250: u32 = 0;
  fiat_p256_mulx_u32(&mut x249, &mut x250, x227, 0xffffffff);
  let mut x251: u32 = 0;
  let mut x252: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x251, &mut x252, 0x0, x250, x247);
  let mut x253: u32 = 0;
  let mut x254: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x253, &mut x254, x252, x248, x245);
  let mut x255: u32 = 0;
  let mut x256: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x255, &mut x256, 0x0, x227, x249);
  let mut x257: u32 = 0;
  let mut x258: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x257, &mut x258, x256, x229, x251);
  let mut x259: u32 = 0;
  let mut x260: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x259, &mut x260, x258, x231, x253);
  let mut x261: u32 = 0;
  let mut x262: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x261, &mut x262, x260, x233, ((x254 as u32) + x246));
  let mut x263: u32 = 0;
  let mut x264: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x263, &mut x264, x262, x235, (0x0 as u32));
  let mut x265: u32 = 0;
  let mut x266: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x265, &mut x266, x264, x237, (0x0 as u32));
  let mut x267: u32 = 0;
  let mut x268: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x267, &mut x268, x266, x239, x227);
  let mut x269: u32 = 0;
  let mut x270: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x269, &mut x270, x268, x241, x243);
  let mut x271: u32 = 0;
  let mut x272: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x271, &mut x272, x270, (((x242 as u32) + (x202 as u32)) + ((x226 as u32) + x204)), x244);
  let mut x273: u32 = 0;
  let mut x274: u32 = 0;
  fiat_p256_mulx_u32(&mut x273, &mut x274, x4, 0x4);
  let mut x275: u32 = 0;
  let mut x276: u32 = 0;
  fiat_p256_mulx_u32(&mut x275, &mut x276, x4, 0xfffffffd);
  let mut x277: u32 = 0;
  let mut x278: u32 = 0;
  fiat_p256_mulx_u32(&mut x277, &mut x278, x4, 0xffffffff);
  let mut x279: u32 = 0;
  let mut x280: u32 = 0;
  fiat_p256_mulx_u32(&mut x279, &mut x280, x4, 0xfffffffe);
  let mut x281: u32 = 0;
  let mut x282: u32 = 0;
  fiat_p256_mulx_u32(&mut x281, &mut x282, x4, 0xfffffffb);
  let mut x283: u32 = 0;
  let mut x284: u32 = 0;
  fiat_p256_mulx_u32(&mut x283, &mut x284, x4, 0xffffffff);
  let mut x285: u32 = 0;
  let mut x286: u32 = 0;
  fiat_p256_mulx_u32(&mut x285, &mut x286, x4, 0x3);
  let mut x287: u32 = 0;
  let mut x288: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x287, &mut x288, 0x0, x284, x281);
  let mut x289: u32 = 0;
  let mut x290: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x289, &mut x290, x288, x282, x279);
  let mut x291: u32 = 0;
  let mut x292: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x291, &mut x292, x290, x280, x277);
  let mut x293: u32 = 0;
  let mut x294: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x293, &mut x294, x292, x278, x275);
  let mut x295: u32 = 0;
  let mut x296: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x295, &mut x296, x294, x276, x273);
  let mut x297: u32 = 0;
  let mut x298: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x297, &mut x298, 0x0, x257, x285);
  let mut x299: u32 = 0;
  let mut x300: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x299, &mut x300, x298, x259, x286);
  let mut x301: u32 = 0;
  let mut x302: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x301, &mut x302, x300, x261, x283);
  let mut x303: u32 = 0;
  let mut x304: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x303, &mut x304, x302, x263, x287);
  let mut x305: u32 = 0;
  let mut x306: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x305, &mut x306, x304, x265, x289);
  let mut x307: u32 = 0;
  let mut x308: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x307, &mut x308, x306, x267, x291);
  let mut x309: u32 = 0;
  let mut x310: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x309, &mut x310, x308, x269, x293);
  let mut x311: u32 = 0;
  let mut x312: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x311, &mut x312, x310, x271, x295);
  let mut x313: u32 = 0;
  let mut x314: u32 = 0;
  fiat_p256_mulx_u32(&mut x313, &mut x314, x297, 0xffffffff);
  let mut x315: u32 = 0;
  let mut x316: u32 = 0;
  fiat_p256_mulx_u32(&mut x315, &mut x316, x297, 0xffffffff);
  let mut x317: u32 = 0;
  let mut x318: u32 = 0;
  fiat_p256_mulx_u32(&mut x317, &mut x318, x297, 0xffffffff);
  let mut x319: u32 = 0;
  let mut x320: u32 = 0;
  fiat_p256_mulx_u32(&mut x319, &mut x320, x297, 0xffffffff);
  let mut x321: u32 = 0;
  let mut x322: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x321, &mut x322, 0x0, x320, x317);
  let mut x323: u32 = 0;
  let mut x324: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x323, &mut x324, x322, x318, x315);
  let mut x325: u32 = 0;
  let mut x326: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x325, &mut x326, 0x0, x297, x319);
  let mut x327: u32 = 0;
  let mut x328: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x327, &mut x328, x326, x299, x321);
  let mut x329: u32 = 0;
  let mut x330: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x329, &mut x330, x328, x301, x323);
  let mut x331: u32 = 0;
  let mut x332: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x331, &mut x332, x330, x303, ((x324 as u32) + x316));
  let mut x333: u32 = 0;
  let mut x334: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x333, &mut x334, x332, x305, (0x0 as u32));
  let mut x335: u32 = 0;
  let mut x336: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x335, &mut x336, x334, x307, (0x0 as u32));
  let mut x337: u32 = 0;
  let mut x338: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x337, &mut x338, x336, x309, x297);
  let mut x339: u32 = 0;
  let mut x340: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x339, &mut x340, x338, x311, x313);
  let mut x341: u32 = 0;
  let mut x342: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x341, &mut x342, x340, (((x312 as u32) + (x272 as u32)) + ((x296 as u32) + x274)), x314);
  let mut x343: u32 = 0;
  let mut x344: u32 = 0;
  fiat_p256_mulx_u32(&mut x343, &mut x344, x5, 0x4);
  let mut x345: u32 = 0;
  let mut x346: u32 = 0;
  fiat_p256_mulx_u32(&mut x345, &mut x346, x5, 0xfffffffd);
  let mut x347: u32 = 0;
  let mut x348: u32 = 0;
  fiat_p256_mulx_u32(&mut x347, &mut x348, x5, 0xffffffff);
  let mut x349: u32 = 0;
  let mut x350: u32 = 0;
  fiat_p256_mulx_u32(&mut x349, &mut x350, x5, 0xfffffffe);
  let mut x351: u32 = 0;
  let mut x352: u32 = 0;
  fiat_p256_mulx_u32(&mut x351, &mut x352, x5, 0xfffffffb);
  let mut x353: u32 = 0;
  let mut x354: u32 = 0;
  fiat_p256_mulx_u32(&mut x353, &mut x354, x5, 0xffffffff);
  let mut x355: u32 = 0;
  let mut x356: u32 = 0;
  fiat_p256_mulx_u32(&mut x355, &mut x356, x5, 0x3);
  let mut x357: u32 = 0;
  let mut x358: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x357, &mut x358, 0x0, x354, x351);
  let mut x359: u32 = 0;
  let mut x360: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x359, &mut x360, x358, x352, x349);
  let mut x361: u32 = 0;
  let mut x362: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x361, &mut x362, x360, x350, x347);
  let mut x363: u32 = 0;
  let mut x364: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x363, &mut x364, x362, x348, x345);
  let mut x365: u32 = 0;
  let mut x366: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x365, &mut x366, x364, x346, x343);
  let mut x367: u32 = 0;
  let mut x368: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x367, &mut x368, 0x0, x327, x355);
  let mut x369: u32 = 0;
  let mut x370: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x369, &mut x370, x368, x329, x356);
  let mut x371: u32 = 0;
  let mut x372: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x371, &mut x372, x370, x331, x353);
  let mut x373: u32 = 0;
  let mut x374: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x373, &mut x374, x372, x333, x357);
  let mut x375: u32 = 0;
  let mut x376: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x375, &mut x376, x374, x335, x359);
  let mut x377: u32 = 0;
  let mut x378: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x377, &mut x378, x376, x337, x361);
  let mut x379: u32 = 0;
  let mut x380: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x379, &mut x380, x378, x339, x363);
  let mut x381: u32 = 0;
  let mut x382: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x381, &mut x382, x380, x341, x365);
  let mut x383: u32 = 0;
  let mut x384: u32 = 0;
  fiat_p256_mulx_u32(&mut x383, &mut x384, x367, 0xffffffff);
  let mut x385: u32 = 0;
  let mut x386: u32 = 0;
  fiat_p256_mulx_u32(&mut x385, &mut x386, x367, 0xffffffff);
  let mut x387: u32 = 0;
  let mut x388: u32 = 0;
  fiat_p256_mulx_u32(&mut x387, &mut x388, x367, 0xffffffff);
  let mut x389: u32 = 0;
  let mut x390: u32 = 0;
  fiat_p256_mulx_u32(&mut x389, &mut x390, x367, 0xffffffff);
  let mut x391: u32 = 0;
  let mut x392: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x391, &mut x392, 0x0, x390, x387);
  let mut x393: u32 = 0;
  let mut x394: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x393, &mut x394, x392, x388, x385);
  let mut x395: u32 = 0;
  let mut x396: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x395, &mut x396, 0x0, x367, x389);
  let mut x397: u32 = 0;
  let mut x398: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x397, &mut x398, x396, x369, x391);
  let mut x399: u32 = 0;
  let mut x400: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x399, &mut x400, x398, x371, x393);
  let mut x401: u32 = 0;
  let mut x402: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x401, &mut x402, x400, x373, ((x394 as u32) + x386));
  let mut x403: u32 = 0;
  let mut x404: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x403, &mut x404, x402, x375, (0x0 as u32));
  let mut x405: u32 = 0;
  let mut x406: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x405, &mut x406, x404, x377, (0x0 as u32));
  let mut x407: u32 = 0;
  let mut x408: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x407, &mut x408, x406, x379, x367);
  let mut x409: u32 = 0;
  let mut x410: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x409, &mut x410, x408, x381, x383);
  let mut x411: u32 = 0;
  let mut x412: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x411, &mut x412, x410, (((x382 as u32) + (x342 as u32)) + ((x366 as u32) + x344)), x384);
  let mut x413: u32 = 0;
  let mut x414: u32 = 0;
  fiat_p256_mulx_u32(&mut x413, &mut x414, x6, 0x4);
  let mut x415: u32 = 0;
  let mut x416: u32 = 0;
  fiat_p256_mulx_u32(&mut x415, &mut x416, x6, 0xfffffffd);
  let mut x417: u32 = 0;
  let mut x418: u32 = 0;
  fiat_p256_mulx_u32(&mut x417, &mut x418, x6, 0xffffffff);
  let mut x419: u32 = 0;
  let mut x420: u32 = 0;
  fiat_p256_mulx_u32(&mut x419, &mut x420, x6, 0xfffffffe);
  let mut x421: u32 = 0;
  let mut x422: u32 = 0;
  fiat_p256_mulx_u32(&mut x421, &mut x422, x6, 0xfffffffb);
  let mut x423: u32 = 0;
  let mut x424: u32 = 0;
  fiat_p256_mulx_u32(&mut x423, &mut x424, x6, 0xffffffff);
  let mut x425: u32 = 0;
  let mut x426: u32 = 0;
  fiat_p256_mulx_u32(&mut x425, &mut x426, x6, 0x3);
  let mut x427: u32 = 0;
  let mut x428: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x427, &mut x428, 0x0, x424, x421);
  let mut x429: u32 = 0;
  let mut x430: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x429, &mut x430, x428, x422, x419);
  let mut x431: u32 = 0;
  let mut x432: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x431, &mut x432, x430, x420, x417);
  let mut x433: u32 = 0;
  let mut x434: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x433, &mut x434, x432, x418, x415);
  let mut x435: u32 = 0;
  let mut x436: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x435, &mut x436, x434, x416, x413);
  let mut x437: u32 = 0;
  let mut x438: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x437, &mut x438, 0x0, x397, x425);
  let mut x439: u32 = 0;
  let mut x440: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x439, &mut x440, x438, x399, x426);
  let mut x441: u32 = 0;
  let mut x442: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x441, &mut x442, x440, x401, x423);
  let mut x443: u32 = 0;
  let mut x444: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x443, &mut x444, x442, x403, x427);
  let mut x445: u32 = 0;
  let mut x446: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x445, &mut x446, x444, x405, x429);
  let mut x447: u32 = 0;
  let mut x448: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x447, &mut x448, x446, x407, x431);
  let mut x449: u32 = 0;
  let mut x450: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x449, &mut x450, x448, x409, x433);
  let mut x451: u32 = 0;
  let mut x452: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x451, &mut x452, x450, x411, x435);
  let mut x453: u32 = 0;
  let mut x454: u32 = 0;
  fiat_p256_mulx_u32(&mut x453, &mut x454, x437, 0xffffffff);
  let mut x455: u32 = 0;
  let mut x456: u32 = 0;
  fiat_p256_mulx_u32(&mut x455, &mut x456, x437, 0xffffffff);
  let mut x457: u32 = 0;
  let mut x458: u32 = 0;
  fiat_p256_mulx_u32(&mut x457, &mut x458, x437, 0xffffffff);
  let mut x459: u32 = 0;
  let mut x460: u32 = 0;
  fiat_p256_mulx_u32(&mut x459, &mut x460, x437, 0xffffffff);
  let mut x461: u32 = 0;
  let mut x462: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x461, &mut x462, 0x0, x460, x457);
  let mut x463: u32 = 0;
  let mut x464: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x463, &mut x464, x462, x458, x455);
  let mut x465: u32 = 0;
  let mut x466: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x465, &mut x466, 0x0, x437, x459);
  let mut x467: u32 = 0;
  let mut x468: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x467, &mut x468, x466, x439, x461);
  let mut x469: u32 = 0;
  let mut x470: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x469, &mut x470, x468, x441, x463);
  let mut x471: u32 = 0;
  let mut x472: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x471, &mut x472, x470, x443, ((x464 as u32) + x456));
  let mut x473: u32 = 0;
  let mut x474: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x473, &mut x474, x472, x445, (0x0 as u32));
  let mut x475: u32 = 0;
  let mut x476: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x475, &mut x476, x474, x447, (0x0 as u32));
  let mut x477: u32 = 0;
  let mut x478: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x477, &mut x478, x476, x449, x437);
  let mut x479: u32 = 0;
  let mut x480: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x479, &mut x480, x478, x451, x453);
  let mut x481: u32 = 0;
  let mut x482: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x481, &mut x482, x480, (((x452 as u32) + (x412 as u32)) + ((x436 as u32) + x414)), x454);
  let mut x483: u32 = 0;
  let mut x484: u32 = 0;
  fiat_p256_mulx_u32(&mut x483, &mut x484, x7, 0x4);
  let mut x485: u32 = 0;
  let mut x486: u32 = 0;
  fiat_p256_mulx_u32(&mut x485, &mut x486, x7, 0xfffffffd);
  let mut x487: u32 = 0;
  let mut x488: u32 = 0;
  fiat_p256_mulx_u32(&mut x487, &mut x488, x7, 0xffffffff);
  let mut x489: u32 = 0;
  let mut x490: u32 = 0;
  fiat_p256_mulx_u32(&mut x489, &mut x490, x7, 0xfffffffe);
  let mut x491: u32 = 0;
  let mut x492: u32 = 0;
  fiat_p256_mulx_u32(&mut x491, &mut x492, x7, 0xfffffffb);
  let mut x493: u32 = 0;
  let mut x494: u32 = 0;
  fiat_p256_mulx_u32(&mut x493, &mut x494, x7, 0xffffffff);
  let mut x495: u32 = 0;
  let mut x496: u32 = 0;
  fiat_p256_mulx_u32(&mut x495, &mut x496, x7, 0x3);
  let mut x497: u32 = 0;
  let mut x498: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x497, &mut x498, 0x0, x494, x491);
  let mut x499: u32 = 0;
  let mut x500: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x499, &mut x500, x498, x492, x489);
  let mut x501: u32 = 0;
  let mut x502: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x501, &mut x502, x500, x490, x487);
  let mut x503: u32 = 0;
  let mut x504: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x503, &mut x504, x502, x488, x485);
  let mut x505: u32 = 0;
  let mut x506: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x505, &mut x506, x504, x486, x483);
  let mut x507: u32 = 0;
  let mut x508: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x507, &mut x508, 0x0, x467, x495);
  let mut x509: u32 = 0;
  let mut x510: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x509, &mut x510, x508, x469, x496);
  let mut x511: u32 = 0;
  let mut x512: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x511, &mut x512, x510, x471, x493);
  let mut x513: u32 = 0;
  let mut x514: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x513, &mut x514, x512, x473, x497);
  let mut x515: u32 = 0;
  let mut x516: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x515, &mut x516, x514, x475, x499);
  let mut x517: u32 = 0;
  let mut x518: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x517, &mut x518, x516, x477, x501);
  let mut x519: u32 = 0;
  let mut x520: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x519, &mut x520, x518, x479, x503);
  let mut x521: u32 = 0;
  let mut x522: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x521, &mut x522, x520, x481, x505);
  let mut x523: u32 = 0;
  let mut x524: u32 = 0;
  fiat_p256_mulx_u32(&mut x523, &mut x524, x507, 0xffffffff);
  let mut x525: u32 = 0;
  let mut x526: u32 = 0;
  fiat_p256_mulx_u32(&mut x525, &mut x526, x507, 0xffffffff);
  let mut x527: u32 = 0;
  let mut x528: u32 = 0;
  fiat_p256_mulx_u32(&mut x527, &mut x528, x507, 0xffffffff);
  let mut x529: u32 = 0;
  let mut x530: u32 = 0;
  fiat_p256_mulx_u32(&mut x529, &mut x530, x507, 0xffffffff);
  let mut x531: u32 = 0;
  let mut x532: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x531, &mut x532, 0x0, x530, x527);
  let mut x533: u32 = 0;
  let mut x534: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x533, &mut x534, x532, x528, x525);
  let mut x535: u32 = 0;
  let mut x536: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x535, &mut x536, 0x0, x507, x529);
  let mut x537: u32 = 0;
  let mut x538: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x537, &mut x538, x536, x509, x531);
  let mut x539: u32 = 0;
  let mut x540: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x539, &mut x540, x538, x511, x533);
  let mut x541: u32 = 0;
  let mut x542: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x541, &mut x542, x540, x513, ((x534 as u32) + x526));
  let mut x543: u32 = 0;
  let mut x544: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x543, &mut x544, x542, x515, (0x0 as u32));
  let mut x545: u32 = 0;
  let mut x546: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x545, &mut x546, x544, x517, (0x0 as u32));
  let mut x547: u32 = 0;
  let mut x548: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x547, &mut x548, x546, x519, x507);
  let mut x549: u32 = 0;
  let mut x550: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x549, &mut x550, x548, x521, x523);
  let mut x551: u32 = 0;
  let mut x552: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x551, &mut x552, x550, (((x522 as u32) + (x482 as u32)) + ((x506 as u32) + x484)), x524);
  let mut x553: u32 = 0;
  let mut x554: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x553, &mut x554, 0x0, x537, 0xffffffff);
  let mut x555: u32 = 0;
  let mut x556: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x555, &mut x556, x554, x539, 0xffffffff);
  let mut x557: u32 = 0;
  let mut x558: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x557, &mut x558, x556, x541, 0xffffffff);
  let mut x559: u32 = 0;
  let mut x560: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x559, &mut x560, x558, x543, (0x0 as u32));
  let mut x561: u32 = 0;
  let mut x562: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x561, &mut x562, x560, x545, (0x0 as u32));
  let mut x563: u32 = 0;
  let mut x564: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x563, &mut x564, x562, x547, (0x0 as u32));
  let mut x565: u32 = 0;
  let mut x566: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x565, &mut x566, x564, x549, (0x1 as u32));
  let mut x567: u32 = 0;
  let mut x568: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x567, &mut x568, x566, x551, 0xffffffff);
  let mut x569: u32 = 0;
  let mut x570: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x569, &mut x570, x568, (x552 as u32), (0x0 as u32));
  let mut x571: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x571, x570, x553, x537);
  let mut x572: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x572, x570, x555, x539);
  let mut x573: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x573, x570, x557, x541);
  let mut x574: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x574, x570, x559, x543);
  let mut x575: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x575, x570, x561, x545);
  let mut x576: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x576, x570, x563, x547);
  let mut x577: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x577, x570, x565, x549);
  let mut x578: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x578, x570, x567, x551);
  out1[0] = x571;
  out1[1] = x572;
  out1[2] = x573;
  out1[3] = x574;
  out1[4] = x575;
  out1[5] = x576;
  out1[6] = x577;
  out1[7] = x578;
}

/// The function fiat_p256_nonzero outputs a single non-zero word if the input is non-zero and zero otherwise.
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
#[inline]
pub fn fiat_p256_nonzero(out1: &mut u32, arg1: &[u32; 8]) -> () {
  let x1: u32 = ((arg1[0]) | ((arg1[1]) | ((arg1[2]) | ((arg1[3]) | ((arg1[4]) | ((arg1[5]) | ((arg1[6]) | (arg1[7]))))))));
  *out1 = x1;
}

/// The function fiat_p256_selectznz is a multi-limb conditional select.
/// Postconditions:
///   eval out1 = (if arg1 = 0 then eval arg2 else eval arg3)
///
/// Input Bounds:
///   arg1: [0x0 ~> 0x1]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_p256_selectznz(out1: &mut [u32; 8], arg1: fiat_p256_u1, arg2: &[u32; 8], arg3: &[u32; 8]) -> () {
  let mut x1: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1, arg1, (arg2[0]), (arg3[0]));
  let mut x2: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x2, arg1, (arg2[1]), (arg3[1]));
  let mut x3: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x3, arg1, (arg2[2]), (arg3[2]));
  let mut x4: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x4, arg1, (arg2[3]), (arg3[3]));
  let mut x5: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x5, arg1, (arg2[4]), (arg3[4]));
  let mut x6: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x6, arg1, (arg2[5]), (arg3[5]));
  let mut x7: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x7, arg1, (arg2[6]), (arg3[6]));
  let mut x8: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x8, arg1, (arg2[7]), (arg3[7]));
  out1[0] = x1;
  out1[1] = x2;
  out1[2] = x3;
  out1[3] = x4;
  out1[4] = x5;
  out1[5] = x6;
  out1[6] = x7;
  out1[7] = x8;
}

/// The function fiat_p256_to_bytes serializes a field element NOT in the Montgomery domain to bytes in little-endian order.
/// Preconditions:
///   0 ≤ eval arg1 < m
/// Postconditions:
///   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..31]
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
#[inline]
pub fn fiat_p256_to_bytes(out1: &mut [u8; 32], arg1: &[u32; 8]) -> () {
  let x1: u32 = (arg1[7]);
  let x2: u32 = (arg1[6]);
  let x3: u32 = (arg1[5]);
  let x4: u32 = (arg1[4]);
  let x5: u32 = (arg1[3]);
  let x6: u32 = (arg1[2]);
  let x7: u32 = (arg1[1]);
  let x8: u32 = (arg1[0]);
  let x9: u8 = ((x8 & (0xff as u32)) as u8);
  let x10: u32 = (x8 >> 8);
  let x11: u8 = ((x10 & (0xff as u32)) as u8);
  let x12: u32 = (x10 >> 8);
  let x13: u8 = ((x12 & (0xff as u32)) as u8);
  let x14: u8 = ((x12 >> 8) as u8);
  let x15: u8 = ((x7 & (0xff as u32)) as u8);
  let x16: u32 = (x7 >> 8);
  let x17: u8 = ((x16 & (0xff as u32)) as u8);
  let x18: u32 = (x16 >> 8);
  let x19: u8 = ((x18 & (0xff as u32)) as u8);
  let x20: u8 = ((x18 >> 8) as u8);
  let x21: u8 = ((x6 & (0xff as u32)) as u8);
  let x22: u32 = (x6 >> 8);
  let x23: u8 = ((x22 & (0xff as u32)) as u8);
  let x24: u32 = (x22 >> 8);
  let x25: u8 = ((x24 & (0xff as u32)) as u8);
  let x26: u8 = ((x24 >> 8) as u8);
  let x27: u8 = ((x5 & (0xff as u32)) as u8);
  let x28: u32 = (x5 >> 8);
  let x29: u8 = ((x28 & (0xff as u32)) as u8);
  let x30: u32 = (x28 >> 8);
  let x31: u8 = ((x30 & (0xff as u32)) as u8);
  let x32: u8 = ((x30 >> 8) as u8);
  let x33: u8 = ((x4 & (0xff as u32)) as u8);
  let x34: u32 = (x4 >> 8);
  let x35: u8 = ((x34 & (0xff as u32)) as u8);
  let x36: u32 = (x34 >> 8);
  let x37: u8 = ((x36 & (0xff as u32)) as u8);
  let x38: u8 = ((x36 >> 8) as u8);
  let x39: u8 = ((x3 & (0xff as u32)) as u8);
  let x40: u32 = (x3 >> 8);
  let x41: u8 = ((x40 & (0xff as u32)) as u8);
  let x42: u32 = (x40 >> 8);
  let x43: u8 = ((x42 & (0xff as u32)) as u8);
  let x44: u8 = ((x42 >> 8) as u8);
  let x45: u8 = ((x2 & (0xff as u32)) as u8);
  let x46: u32 = (x2 >> 8);
  let x47: u8 = ((x46 & (0xff as u32)) as u8);
  let x48: u32 = (x46 >> 8);
  let x49: u8 = ((x48 & (0xff as u32)) as u8);
  let x50: u8 = ((x48 >> 8) as u8);
  let x51: u8 = ((x1 & (0xff as u32)) as u8);
  let x52: u32 = (x1 >> 8);
  let x53: u8 = ((x52 & (0xff as u32)) as u8);
  let x54: u32 = (x52 >> 8);
  let x55: u8 = ((x54 & (0xff as u32)) as u8);
  let x56: u8 = ((x54 >> 8) as u8);
  out1[0] = x9;
  out1[1] = x11;
  out1[2] = x13;
  out1[3] = x14;
  out1[4] = x15;
  out1[5] = x17;
  out1[6] = x19;
  out1[7] = x20;
  out1[8] = x21;
  out1[9] = x23;
  out1[10] = x25;
  out1[11] = x26;
  out1[12] = x27;
  out1[13] = x29;
  out1[14] = x31;
  out1[15] = x32;
  out1[16] = x33;
  out1[17] = x35;
  out1[18] = x37;
  out1[19] = x38;
  out1[20] = x39;
  out1[21] = x41;
  out1[22] = x43;
  out1[23] = x44;
  out1[24] = x45;
  out1[25] = x47;
  out1[26] = x49;
  out1[27] = x50;
  out1[28] = x51;
  out1[29] = x53;
  out1[30] = x55;
  out1[31] = x56;
}

/// The function fiat_p256_from_bytes deserializes a field element NOT in the Montgomery domain from bytes in little-endian order.
/// Preconditions:
///   0 ≤ bytes_eval arg1 < m
/// Postconditions:
///   eval out1 mod m = bytes_eval arg1 mod m
///   0 ≤ eval out1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_p256_from_bytes(out1: &mut [u32; 8], arg1: &[u8; 32]) -> () {
  let x1: u32 = (((arg1[31]) as u32) << 24);
  let x2: u32 = (((arg1[30]) as u32) << 16);
  let x3: u32 = (((arg1[29]) as u32) << 8);
  let x4: u8 = (arg1[28]);
  let x5: u32 = (((arg1[27]) as u32) << 24);
  let x6: u32 = (((arg1[26]) as u32) << 16);
  let x7: u32 = (((arg1[25]) as u32) << 8);
  let x8: u8 = (arg1[24]);
  let x9: u32 = (((arg1[23]) as u32) << 24);
  let x10: u32 = (((arg1[22]) as u32) << 16);
  let x11: u32 = (((arg1[21]) as u32) << 8);
  let x12: u8 = (arg1[20]);
  let x13: u32 = (((arg1[19]) as u32) << 24);
  let x14: u32 = (((arg1[18]) as u32) << 16);
  let x15: u32 = (((arg1[17]) as u32) << 8);
  let x16: u8 = (arg1[16]);
  let x17: u32 = (((arg1[15]) as u32) << 24);
  let x18: u32 = (((arg1[14]) as u32) << 16);
  let x19: u32 = (((arg1[13]) as u32) << 8);
  let x20: u8 = (arg1[12]);
  let x21: u32 = (((arg1[11]) as u32) << 24);
  let x22: u32 = (((arg1[10]) as u32) << 16);
  let x23: u32 = (((arg1[9]) as u32) << 8);
  let x24: u8 = (arg1[8]);
  let x25: u32 = (((arg1[7]) as u32) << 24);
  let x26: u32 = (((arg1[6]) as u32) << 16);
  let x27: u32 = (((arg1[5]) as u32) << 8);
  let x28: u8 = (arg1[4]);
  let x29: u32 = (((arg1[3]) as u32) << 24);
  let x30: u32 = (((arg1[2]) as u32) << 16);
  let x31: u32 = (((arg1[1]) as u32) << 8);
  let x32: u8 = (arg1[0]);
  let x33: u32 = (x31 + (x32 as u32));
  let x34: u32 = (x30 + x33);
  let x35: u32 = (x29 + x34);
  let x36: u32 = (x27 + (x28 as u32));
  let x37: u32 = (x26 + x36);
  let x38: u32 = (x25 + x37);
  let x39: u32 = (x23 + (x24 as u32));
  let x40: u32 = (x22 + x39);
  let x41: u32 = (x21 + x40);
  let x42: u32 = (x19 + (x20 as u32));
  let x43: u32 = (x18 + x42);
  let x44: u32 = (x17 + x43);
  let x45: u32 = (x15 + (x16 as u32));
  let x46: u32 = (x14 + x45);
  let x47: u32 = (x13 + x46);
  let x48: u32 = (x11 + (x12 as u32));
  let x49: u32 = (x10 + x48);
  let x50: u32 = (x9 + x49);
  let x51: u32 = (x7 + (x8 as u32));
  let x52: u32 = (x6 + x51);
  let x53: u32 = (x5 + x52);
  let x54: u32 = (x3 + (x4 as u32));
  let x55: u32 = (x2 + x54);
  let x56: u32 = (x1 + x55);
  out1[0] = x35;
  out1[1] = x38;
  out1[2] = x41;
  out1[3] = x44;
  out1[4] = x47;
  out1[5] = x50;
  out1[6] = x53;
  out1[7] = x56;
}

/// The function fiat_p256_set_one returns the field element one in the Montgomery domain.
/// Postconditions:
///   eval (from_montgomery out1) mod m = 1 mod m
///   0 ≤ eval out1 < m
///
/// Input Bounds:
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_p256_set_one(out1: &mut [u32; 8]) -> () {
  out1[0] = (0x1 as u32);
  out1[1] = (0x0 as u32);
  out1[2] = (0x0 as u32);
  out1[3] = 0xffffffff;
  out1[4] = 0xffffffff;
  out1[5] = 0xffffffff;
  out1[6] = 0xfffffffe;
  out1[7] = (0x0 as u32);
}

/// The function fiat_p256_twos_complement_word_to_montgomery_no_encode computes a divstep on wordsized integers.
/// Postconditions:
///   0 ≤ eval arg1 < m
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_p256_twos_complement_word_to_montgomery_no_encode(out1: &mut [u32; 8], arg1: u32) -> () {
  let x1: fiat_p256_u1 = ((arg1 >> 31) as fiat_p256_u1);
  let x2: u32 = (((((!arg1) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x3: u32 = 0;
  let mut x4: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x3, &mut x4, 0x0, (0x0 as u32), x2);
  let mut x5: u32 = 0;
  let mut x6: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x5, &mut x6, x4, (0x0 as u32), (0x0 as u32));
  let mut x7: u32 = 0;
  let mut x8: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x7, &mut x8, x6, (0x0 as u32), (0x0 as u32));
  let mut x9: u32 = 0;
  let mut x10: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x9, &mut x10, x8, (0x0 as u32), (0x0 as u32));
  let mut x11: u32 = 0;
  let mut x12: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x11, &mut x12, x10, (0x0 as u32), (0x0 as u32));
  let mut x13: u32 = 0;
  let mut x14: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x13, &mut x14, x12, (0x0 as u32), (0x0 as u32));
  let mut x15: u32 = 0;
  let mut x16: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x15, &mut x16, x14, (0x0 as u32), (0x0 as u32));
  let mut x17: u32 = 0;
  let mut x18: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x17, &mut x18, x16, (0x0 as u32), (0x0 as u32));
  let mut x19: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x19, x18, (0x0 as u32), 0xffffffff);
  let mut x20: u32 = 0;
  let mut x21: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x20, &mut x21, 0x0, x3, x19);
  let mut x22: u32 = 0;
  let mut x23: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x22, &mut x23, x21, x5, x19);
  let mut x24: u32 = 0;
  let mut x25: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x24, &mut x25, x23, x7, x19);
  let mut x26: u32 = 0;
  let mut x27: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x26, &mut x27, x25, x9, (0x0 as u32));
  let mut x28: u32 = 0;
  let mut x29: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x28, &mut x29, x27, x11, (0x0 as u32));
  let mut x30: u32 = 0;
  let mut x31: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x30, &mut x31, x29, x13, (0x0 as u32));
  let mut x32: u32 = 0;
  let mut x33: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x32, &mut x33, x31, x15, (((x19 & (0x1 as u32)) as fiat_p256_u1) as u32));
  let mut x34: u32 = 0;
  let mut x35: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x34, &mut x35, x33, x17, x19);
  let mut x36: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x36, x1, arg1, x20);
  let mut x37: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x37, x1, (0x0 as u32), x22);
  let mut x38: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x38, x1, (0x0 as u32), x24);
  let mut x39: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x39, x1, (0x0 as u32), x26);
  let mut x40: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x40, x1, (0x0 as u32), x28);
  let mut x41: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x41, x1, (0x0 as u32), x30);
  let mut x42: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x42, x1, (0x0 as u32), x32);
  let mut x43: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x43, x1, (0x0 as u32), x34);
  out1[0] = x36;
  out1[1] = x37;
  out1[2] = x38;
  out1[3] = x39;
  out1[4] = x40;
  out1[5] = x41;
  out1[6] = x42;
  out1[7] = x43;
}

/// The function fiat_p256_msat returns the saturated represtation of the prime modulus.
/// Postconditions:
///   twos_complement_eval out1 = m
///   0 ≤ eval out1 < m
///
/// Input Bounds:
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_p256_msat(out1: &mut [u32; 9]) -> () {
  out1[0] = 0xffffffff;
  out1[1] = 0xffffffff;
  out1[2] = 0xffffffff;
  out1[3] = (0x0 as u32);
  out1[4] = (0x0 as u32);
  out1[5] = (0x0 as u32);
  out1[6] = (0x1 as u32);
  out1[7] = 0xffffffff;
  out1[8] = (0x0 as u32);
}

/// The function fiat_p256_sat_from_bytes deserializes a field element NOT in the Montgomery domain from bytes in little-endian order.
/// Postconditions:
///   0 ≤ eval arg1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_p256_sat_from_bytes(out1: &mut [u32; 9], arg1: &[u8; 32]) -> () {
  let x1: u32 = (((arg1[31]) as u32) << 24);
  let x2: u32 = (((arg1[30]) as u32) << 16);
  let x3: u32 = (((arg1[29]) as u32) << 8);
  let x4: u8 = (arg1[28]);
  let x5: u32 = (((arg1[27]) as u32) << 24);
  let x6: u32 = (((arg1[26]) as u32) << 16);
  let x7: u32 = (((arg1[25]) as u32) << 8);
  let x8: u8 = (arg1[24]);
  let x9: u32 = (((arg1[23]) as u32) << 24);
  let x10: u32 = (((arg1[22]) as u32) << 16);
  let x11: u32 = (((arg1[21]) as u32) << 8);
  let x12: u8 = (arg1[20]);
  let x13: u32 = (((arg1[19]) as u32) << 24);
  let x14: u32 = (((arg1[18]) as u32) << 16);
  let x15: u32 = (((arg1[17]) as u32) << 8);
  let x16: u8 = (arg1[16]);
  let x17: u32 = (((arg1[15]) as u32) << 24);
  let x18: u32 = (((arg1[14]) as u32) << 16);
  let x19: u32 = (((arg1[13]) as u32) << 8);
  let x20: u8 = (arg1[12]);
  let x21: u32 = (((arg1[11]) as u32) << 24);
  let x22: u32 = (((arg1[10]) as u32) << 16);
  let x23: u32 = (((arg1[9]) as u32) << 8);
  let x24: u8 = (arg1[8]);
  let x25: u32 = (((arg1[7]) as u32) << 24);
  let x26: u32 = (((arg1[6]) as u32) << 16);
  let x27: u32 = (((arg1[5]) as u32) << 8);
  let x28: u8 = (arg1[4]);
  let x29: u32 = (((arg1[3]) as u32) << 24);
  let x30: u32 = (((arg1[2]) as u32) << 16);
  let x31: u32 = (((arg1[1]) as u32) << 8);
  let x32: u8 = (arg1[0]);
  let x33: u32 = (x31 + (x32 as u32));
  let x34: u32 = (x30 + x33);
  let x35: u32 = (x29 + x34);
  let x36: u32 = (x27 + (x28 as u32));
  let x37: u32 = (x26 + x36);
  let x38: u32 = (x25 + x37);
  let x39: u32 = (x23 + (x24 as u32));
  let x40: u32 = (x22 + x39);
  let x41: u32 = (x21 + x40);
  let x42: u32 = (x19 + (x20 as u32));
  let x43: u32 = (x18 + x42);
  let x44: u32 = (x17 + x43);
  let x45: u32 = (x15 + (x16 as u32));
  let x46: u32 = (x14 + x45);
  let x47: u32 = (x13 + x46);
  let x48: u32 = (x11 + (x12 as u32));
  let x49: u32 = (x10 + x48);
  let x50: u32 = (x9 + x49);
  let x51: u32 = (x7 + (x8 as u32));
  let x52: u32 = (x6 + x51);
  let x53: u32 = (x5 + x52);
  let x54: u32 = (x3 + (x4 as u32));
  let x55: u32 = (x2 + x54);
  let x56: u32 = (x1 + x55);
  out1[0] = x35;
  out1[1] = x38;
  out1[2] = x41;
  out1[3] = x44;
  out1[4] = x47;
  out1[5] = x50;
  out1[6] = x53;
  out1[7] = x56;
  out1[8] = (0x0 as u32);
}

/// The function fiat_p256_divstep computes a divstep.
/// Preconditions:
///   0 ≤ eval arg4 < m
///   0 ≤ eval arg5 < m
/// Postconditions:
///   out1 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then 1 - arg1 else 1 + arg1)
///   twos_complement_eval out2 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then twos_complement_eval arg3 else twos_complement_eval arg2)
///   twos_complement_eval out3 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then ⌊(twos_complement_eval arg3 - twos_complement_eval arg2) / 2⌋ else ⌊(twos_complement_eval arg3 + (twos_complement_eval arg3 mod 2) * twos_complement_eval arg2) / 2⌋)
///   eval (from_montgomery out4) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (2 * eval (from_montgomery arg5)) mod m else (2 * eval (from_montgomery arg4)) mod m)
///   eval (from_montgomery out5) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (eval (from_montgomery arg4) - eval (from_montgomery arg4)) mod m else (eval (from_montgomery arg5) + (twos_complement_eval arg3 mod 2) * eval (from_montgomery arg4)) mod m)
///   0 ≤ eval out5 < m
///   0 ≤ eval out4 < m
///   0 ≤ eval out2 < m
///   0 ≤ eval out3 < m
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffff]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg5: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out5: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_p256_divstep(out1: &mut u32, out2: &mut [u32; 9], out3: &mut [u32; 9], out4: &mut [u32; 8], out5: &mut [u32; 8], arg1: u32, arg2: &[u32; 9], arg3: &[u32; 9], arg4: &[u32; 8], arg5: &[u32; 8]) -> () {
  let mut x1: u32 = 0;
  let mut x2: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1, &mut x2, 0x0, (!arg1), (0x1 as u32));
  let x3: fiat_p256_u1 = (((x1 >> 31) as fiat_p256_u1) & (((arg3[0]) & (0x1 as u32)) as fiat_p256_u1));
  let mut x4: u32 = 0;
  let mut x5: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4, &mut x5, 0x0, (!arg1), (0x1 as u32));
  let mut x6: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x6, x3, arg1, x4);
  let mut x7: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x7, x3, (arg2[0]), (arg3[0]));
  let mut x8: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x8, x3, (arg2[1]), (arg3[1]));
  let mut x9: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x9, x3, (arg2[2]), (arg3[2]));
  let mut x10: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x10, x3, (arg2[3]), (arg3[3]));
  let mut x11: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x11, x3, (arg2[4]), (arg3[4]));
  let mut x12: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x12, x3, (arg2[5]), (arg3[5]));
  let mut x13: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x13, x3, (arg2[6]), (arg3[6]));
  let mut x14: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x14, x3, (arg2[7]), (arg3[7]));
  let mut x15: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x15, x3, (arg2[8]), (arg3[8]));
  let mut x16: u32 = 0;
  let mut x17: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x16, &mut x17, 0x0, (0x1 as u32), (!(arg2[0])));
  let mut x18: u32 = 0;
  let mut x19: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x18, &mut x19, x17, (0x0 as u32), (!(arg2[1])));
  let mut x20: u32 = 0;
  let mut x21: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x20, &mut x21, x19, (0x0 as u32), (!(arg2[2])));
  let mut x22: u32 = 0;
  let mut x23: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x22, &mut x23, x21, (0x0 as u32), (!(arg2[3])));
  let mut x24: u32 = 0;
  let mut x25: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x24, &mut x25, x23, (0x0 as u32), (!(arg2[4])));
  let mut x26: u32 = 0;
  let mut x27: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x26, &mut x27, x25, (0x0 as u32), (!(arg2[5])));
  let mut x28: u32 = 0;
  let mut x29: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x28, &mut x29, x27, (0x0 as u32), (!(arg2[6])));
  let mut x30: u32 = 0;
  let mut x31: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x30, &mut x31, x29, (0x0 as u32), (!(arg2[7])));
  let mut x32: u32 = 0;
  let mut x33: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x32, &mut x33, x31, (0x0 as u32), (!(arg2[8])));
  let mut x34: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x34, x3, (arg3[0]), x16);
  let mut x35: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x35, x3, (arg3[1]), x18);
  let mut x36: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x36, x3, (arg3[2]), x20);
  let mut x37: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x37, x3, (arg3[3]), x22);
  let mut x38: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x38, x3, (arg3[4]), x24);
  let mut x39: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x39, x3, (arg3[5]), x26);
  let mut x40: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x40, x3, (arg3[6]), x28);
  let mut x41: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x41, x3, (arg3[7]), x30);
  let mut x42: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x42, x3, (arg3[8]), x32);
  let mut x43: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x43, x3, (arg4[0]), (arg5[0]));
  let mut x44: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x44, x3, (arg4[1]), (arg5[1]));
  let mut x45: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x45, x3, (arg4[2]), (arg5[2]));
  let mut x46: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x46, x3, (arg4[3]), (arg5[3]));
  let mut x47: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x47, x3, (arg4[4]), (arg5[4]));
  let mut x48: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x48, x3, (arg4[5]), (arg5[5]));
  let mut x49: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x49, x3, (arg4[6]), (arg5[6]));
  let mut x50: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x50, x3, (arg4[7]), (arg5[7]));
  let mut x51: u32 = 0;
  let mut x52: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x51, &mut x52, 0x0, x43, x43);
  let mut x53: u32 = 0;
  let mut x54: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x53, &mut x54, x52, x44, x44);
  let mut x55: u32 = 0;
  let mut x56: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x55, &mut x56, x54, x45, x45);
  let mut x57: u32 = 0;
  let mut x58: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x57, &mut x58, x56, x46, x46);
  let mut x59: u32 = 0;
  let mut x60: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x59, &mut x60, x58, x47, x47);
  let mut x61: u32 = 0;
  let mut x62: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x61, &mut x62, x60, x48, x48);
  let mut x63: u32 = 0;
  let mut x64: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x63, &mut x64, x62, x49, x49);
  let mut x65: u32 = 0;
  let mut x66: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x65, &mut x66, x64, x50, x50);
  let mut x67: u32 = 0;
  let mut x68: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x67, &mut x68, 0x0, x51, 0xffffffff);
  let mut x69: u32 = 0;
  let mut x70: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x69, &mut x70, x68, x53, 0xffffffff);
  let mut x71: u32 = 0;
  let mut x72: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x71, &mut x72, x70, x55, 0xffffffff);
  let mut x73: u32 = 0;
  let mut x74: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x73, &mut x74, x72, x57, (0x0 as u32));
  let mut x75: u32 = 0;
  let mut x76: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x75, &mut x76, x74, x59, (0x0 as u32));
  let mut x77: u32 = 0;
  let mut x78: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x77, &mut x78, x76, x61, (0x0 as u32));
  let mut x79: u32 = 0;
  let mut x80: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x79, &mut x80, x78, x63, (0x1 as u32));
  let mut x81: u32 = 0;
  let mut x82: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x81, &mut x82, x80, x65, 0xffffffff);
  let mut x83: u32 = 0;
  let mut x84: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x83, &mut x84, x82, (x66 as u32), (0x0 as u32));
  let x85: u32 = (arg4[7]);
  let x86: u32 = (arg4[6]);
  let x87: u32 = (arg4[5]);
  let x88: u32 = (arg4[4]);
  let x89: u32 = (arg4[3]);
  let x90: u32 = (arg4[2]);
  let x91: u32 = (arg4[1]);
  let x92: u32 = (arg4[0]);
  let mut x93: u32 = 0;
  let mut x94: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x93, &mut x94, 0x0, (0x0 as u32), x92);
  let mut x95: u32 = 0;
  let mut x96: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x95, &mut x96, x94, (0x0 as u32), x91);
  let mut x97: u32 = 0;
  let mut x98: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x97, &mut x98, x96, (0x0 as u32), x90);
  let mut x99: u32 = 0;
  let mut x100: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x99, &mut x100, x98, (0x0 as u32), x89);
  let mut x101: u32 = 0;
  let mut x102: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x101, &mut x102, x100, (0x0 as u32), x88);
  let mut x103: u32 = 0;
  let mut x104: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x103, &mut x104, x102, (0x0 as u32), x87);
  let mut x105: u32 = 0;
  let mut x106: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x105, &mut x106, x104, (0x0 as u32), x86);
  let mut x107: u32 = 0;
  let mut x108: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x107, &mut x108, x106, (0x0 as u32), x85);
  let mut x109: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x109, x108, (0x0 as u32), 0xffffffff);
  let mut x110: u32 = 0;
  let mut x111: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x110, &mut x111, 0x0, x93, x109);
  let mut x112: u32 = 0;
  let mut x113: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x112, &mut x113, x111, x95, x109);
  let mut x114: u32 = 0;
  let mut x115: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x114, &mut x115, x113, x97, x109);
  let mut x116: u32 = 0;
  let mut x117: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x116, &mut x117, x115, x99, (0x0 as u32));
  let mut x118: u32 = 0;
  let mut x119: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x118, &mut x119, x117, x101, (0x0 as u32));
  let mut x120: u32 = 0;
  let mut x121: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x120, &mut x121, x119, x103, (0x0 as u32));
  let mut x122: u32 = 0;
  let mut x123: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x122, &mut x123, x121, x105, (((x109 & (0x1 as u32)) as fiat_p256_u1) as u32));
  let mut x124: u32 = 0;
  let mut x125: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x124, &mut x125, x123, x107, x109);
  let mut x126: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x126, x3, (arg5[0]), x110);
  let mut x127: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x127, x3, (arg5[1]), x112);
  let mut x128: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x128, x3, (arg5[2]), x114);
  let mut x129: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x129, x3, (arg5[3]), x116);
  let mut x130: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x130, x3, (arg5[4]), x118);
  let mut x131: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x131, x3, (arg5[5]), x120);
  let mut x132: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x132, x3, (arg5[6]), x122);
  let mut x133: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x133, x3, (arg5[7]), x124);
  let x134: fiat_p256_u1 = ((x34 & (0x1 as u32)) as fiat_p256_u1);
  let mut x135: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x135, x134, (0x0 as u32), x7);
  let mut x136: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x136, x134, (0x0 as u32), x8);
  let mut x137: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x137, x134, (0x0 as u32), x9);
  let mut x138: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x138, x134, (0x0 as u32), x10);
  let mut x139: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x139, x134, (0x0 as u32), x11);
  let mut x140: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x140, x134, (0x0 as u32), x12);
  let mut x141: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x141, x134, (0x0 as u32), x13);
  let mut x142: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x142, x134, (0x0 as u32), x14);
  let mut x143: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x143, x134, (0x0 as u32), x15);
  let mut x144: u32 = 0;
  let mut x145: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x144, &mut x145, 0x0, x34, x135);
  let mut x146: u32 = 0;
  let mut x147: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x146, &mut x147, x145, x35, x136);
  let mut x148: u32 = 0;
  let mut x149: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x148, &mut x149, x147, x36, x137);
  let mut x150: u32 = 0;
  let mut x151: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x150, &mut x151, x149, x37, x138);
  let mut x152: u32 = 0;
  let mut x153: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x152, &mut x153, x151, x38, x139);
  let mut x154: u32 = 0;
  let mut x155: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x154, &mut x155, x153, x39, x140);
  let mut x156: u32 = 0;
  let mut x157: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x156, &mut x157, x155, x40, x141);
  let mut x158: u32 = 0;
  let mut x159: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x158, &mut x159, x157, x41, x142);
  let mut x160: u32 = 0;
  let mut x161: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x160, &mut x161, x159, x42, x143);
  let mut x162: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x162, x134, (0x0 as u32), x43);
  let mut x163: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x163, x134, (0x0 as u32), x44);
  let mut x164: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x164, x134, (0x0 as u32), x45);
  let mut x165: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x165, x134, (0x0 as u32), x46);
  let mut x166: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x166, x134, (0x0 as u32), x47);
  let mut x167: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x167, x134, (0x0 as u32), x48);
  let mut x168: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x168, x134, (0x0 as u32), x49);
  let mut x169: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x169, x134, (0x0 as u32), x50);
  let mut x170: u32 = 0;
  let mut x171: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x170, &mut x171, 0x0, x126, x162);
  let mut x172: u32 = 0;
  let mut x173: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x172, &mut x173, x171, x127, x163);
  let mut x174: u32 = 0;
  let mut x175: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x174, &mut x175, x173, x128, x164);
  let mut x176: u32 = 0;
  let mut x177: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x176, &mut x177, x175, x129, x165);
  let mut x178: u32 = 0;
  let mut x179: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x178, &mut x179, x177, x130, x166);
  let mut x180: u32 = 0;
  let mut x181: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x180, &mut x181, x179, x131, x167);
  let mut x182: u32 = 0;
  let mut x183: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x182, &mut x183, x181, x132, x168);
  let mut x184: u32 = 0;
  let mut x185: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x184, &mut x185, x183, x133, x169);
  let mut x186: u32 = 0;
  let mut x187: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x186, &mut x187, 0x0, x170, 0xffffffff);
  let mut x188: u32 = 0;
  let mut x189: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x188, &mut x189, x187, x172, 0xffffffff);
  let mut x190: u32 = 0;
  let mut x191: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x190, &mut x191, x189, x174, 0xffffffff);
  let mut x192: u32 = 0;
  let mut x193: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x192, &mut x193, x191, x176, (0x0 as u32));
  let mut x194: u32 = 0;
  let mut x195: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x194, &mut x195, x193, x178, (0x0 as u32));
  let mut x196: u32 = 0;
  let mut x197: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x196, &mut x197, x195, x180, (0x0 as u32));
  let mut x198: u32 = 0;
  let mut x199: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x198, &mut x199, x197, x182, (0x1 as u32));
  let mut x200: u32 = 0;
  let mut x201: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x200, &mut x201, x199, x184, 0xffffffff);
  let mut x202: u32 = 0;
  let mut x203: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x202, &mut x203, x201, (x185 as u32), (0x0 as u32));
  let mut x204: u32 = 0;
  let mut x205: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x204, &mut x205, 0x0, x6, (0x1 as u32));
  let x206: u32 = ((x144 >> 1) | ((x146 << 31) & 0xffffffff));
  let x207: u32 = ((x146 >> 1) | ((x148 << 31) & 0xffffffff));
  let x208: u32 = ((x148 >> 1) | ((x150 << 31) & 0xffffffff));
  let x209: u32 = ((x150 >> 1) | ((x152 << 31) & 0xffffffff));
  let x210: u32 = ((x152 >> 1) | ((x154 << 31) & 0xffffffff));
  let x211: u32 = ((x154 >> 1) | ((x156 << 31) & 0xffffffff));
  let x212: u32 = ((x156 >> 1) | ((x158 << 31) & 0xffffffff));
  let x213: u32 = ((x158 >> 1) | ((x160 << 31) & 0xffffffff));
  let x214: u32 = ((x160 & 0x80000000) | (x160 >> 1));
  let mut x215: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x215, x84, x67, x51);
  let mut x216: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x216, x84, x69, x53);
  let mut x217: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x217, x84, x71, x55);
  let mut x218: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x218, x84, x73, x57);
  let mut x219: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x219, x84, x75, x59);
  let mut x220: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x220, x84, x77, x61);
  let mut x221: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x221, x84, x79, x63);
  let mut x222: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x222, x84, x81, x65);
  let mut x223: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x223, x203, x186, x170);
  let mut x224: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x224, x203, x188, x172);
  let mut x225: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x225, x203, x190, x174);
  let mut x226: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x226, x203, x192, x176);
  let mut x227: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x227, x203, x194, x178);
  let mut x228: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x228, x203, x196, x180);
  let mut x229: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x229, x203, x198, x182);
  let mut x230: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x230, x203, x200, x184);
  *out1 = x204;
  out2[0] = x7;
  out2[1] = x8;
  out2[2] = x9;
  out2[3] = x10;
  out2[4] = x11;
  out2[5] = x12;
  out2[6] = x13;
  out2[7] = x14;
  out2[8] = x15;
  out3[0] = x206;
  out3[1] = x207;
  out3[2] = x208;
  out3[3] = x209;
  out3[4] = x210;
  out3[5] = x211;
  out3[6] = x212;
  out3[7] = x213;
  out3[8] = x214;
  out4[0] = x215;
  out4[1] = x216;
  out4[2] = x217;
  out4[3] = x218;
  out4[4] = x219;
  out4[5] = x220;
  out4[6] = x221;
  out4[7] = x222;
  out5[0] = x223;
  out5[1] = x224;
  out5[2] = x225;
  out5[3] = x226;
  out5[4] = x227;
  out5[5] = x228;
  out5[6] = x229;
  out5[7] = x230;
}

/// The function fiat_p256_divstep_precomp returns the precomputed value for Bernstein-Yang-inversion (in montgomery form).
/// Postconditions:
///   eval (from_montgomery out1) = ⌊(m - 1) / 2⌋^(if (log2 m) + 1 < 46 then ⌊(49 * ((log2 m) + 1) + 80) / 17⌋ else ⌊(49 * ((log2 m) + 1) + 57) / 17⌋)
///   0 ≤ eval out1 < m
///
/// Input Bounds:
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_p256_divstep_precomp(out1: &mut [u32; 8]) -> () {
  out1[0] = 0xb8000000;
  out1[1] = 0x67ffffff;
  out1[2] = 0x38000000;
  out1[3] = 0xc0000000;
  out1[4] = 0x7fffffff;
  out1[5] = 0xd8000000;
  out1[6] = 0xffffffff;
  out1[7] = 0x2fffffff;
}

/// The function fiat_p256_twos_complement_word_full_divstep computes a divstep on wordsized integers.
/// Postconditions:
///   0 ≤ eval arg1 < m
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffff]
///   arg2: [0x0 ~> 0xffffffff]
///   arg3: [0x0 ~> 0xffffffff]
///   arg4: [0x0 ~> 0xffffffff]
///   arg5: [0x0 ~> 0xffffffff]
///   arg6: [0x0 ~> 0xffffffff]
///   arg7: [0x0 ~> 0xffffffff]
/// Output Bounds:
///   out1: [0x0 ~> 0xffffffff]
///   out2: [0x0 ~> 0xffffffff]
///   out3: [0x0 ~> 0xffffffff]
///   out4: [0x0 ~> 0xffffffff]
///   out5: [0x0 ~> 0xffffffff]
///   out6: [0x0 ~> 0xffffffff]
///   out7: [0x0 ~> 0xffffffff]
#[inline]
pub fn fiat_p256_twos_complement_word_full_divstep(out1: &mut u32, out2: &mut u32, out3: &mut u32, out4: &mut u32, out5: &mut u32, out6: &mut u32, out7: &mut u32, arg1: u32, arg2: u32, arg3: u32, arg4: u32, arg5: u32, arg6: u32, arg7: u32) -> () {
  let x1: u32 = (((((!arg1) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x2: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x2, (((x1 >> 31) as fiat_p256_u1) & ((arg3 & (0x1 as u32)) as fiat_p256_u1)), arg1, (((((!arg1) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x3: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x3, (((x1 >> 31) as fiat_p256_u1) & ((arg3 & (0x1 as u32)) as fiat_p256_u1)), arg2, arg3);
  let mut x4: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x4, (((x1 >> 31) as fiat_p256_u1) & ((arg3 & (0x1 as u32)) as fiat_p256_u1)), arg3, (((((!arg2) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x5: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x5, (((x1 >> 31) as fiat_p256_u1) & ((arg3 & (0x1 as u32)) as fiat_p256_u1)), arg4, arg6);
  let mut x6: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x6, (((x1 >> 31) as fiat_p256_u1) & ((arg3 & (0x1 as u32)) as fiat_p256_u1)), arg5, arg7);
  let mut x7: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x7, (((x1 >> 31) as fiat_p256_u1) & ((arg3 & (0x1 as u32)) as fiat_p256_u1)), arg6, (((((!arg4) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x8: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x8, (((x1 >> 31) as fiat_p256_u1) & ((arg3 & (0x1 as u32)) as fiat_p256_u1)), arg7, (((((!arg5) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x9: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x9, ((x4 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x3);
  let mut x10: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x10, ((x4 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x5);
  let mut x11: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x11, ((x4 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x6);
  let x12: u32 = ((((0x1 as u64) + (x2 as u64)) & (0xffffffff as u64)) as u32);
  let x13: u32 = ((((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x4 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32) >> 1));
  let x14: u32 = ((((x5 as u64) + (x5 as u64)) & (0xffffffff as u64)) as u32);
  let x15: u32 = ((((x6 as u64) + (x6 as u64)) & (0xffffffff as u64)) as u32);
  let x16: u32 = ((((x7 as u64) + (x10 as u64)) & (0xffffffff as u64)) as u32);
  let x17: u32 = ((((x8 as u64) + (x11 as u64)) & (0xffffffff as u64)) as u32);
  *out1 = x12;
  *out2 = x3;
  *out3 = x13;
  *out4 = x14;
  *out5 = x15;
  *out6 = x16;
  *out7 = x17;
}

/// The function fiat_p256_asr_mw_sub2 computes a divstep on wordsized integers.
/// Postconditions:
///   0 ≤ eval arg1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_p256_asr_mw_sub2(out1: &mut [u32; 10], arg1: &[u32; 10]) -> () {
  let mut x1: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1, (((arg1[9]) >> 31) as fiat_p256_u1), (0x0 as u32), 0xfffffffc);
  let x2: u32 = (((arg1[0]) >> 30) | (((arg1[1]) << 2) & 0xffffffff));
  let x3: u32 = (((arg1[1]) >> 30) | (((arg1[2]) << 2) & 0xffffffff));
  let x4: u32 = (((arg1[2]) >> 30) | (((arg1[3]) << 2) & 0xffffffff));
  let x5: u32 = (((arg1[3]) >> 30) | (((arg1[4]) << 2) & 0xffffffff));
  let x6: u32 = (((arg1[4]) >> 30) | (((arg1[5]) << 2) & 0xffffffff));
  let x7: u32 = (((arg1[5]) >> 30) | (((arg1[6]) << 2) & 0xffffffff));
  let x8: u32 = (((arg1[6]) >> 30) | (((arg1[7]) << 2) & 0xffffffff));
  let x9: u32 = (((arg1[7]) >> 30) | (((arg1[8]) << 2) & 0xffffffff));
  let x10: u32 = (((arg1[8]) >> 30) | (((arg1[9]) << 2) & 0xffffffff));
  let x11: u32 = (x1 | ((arg1[9]) >> 30));
  out1[0] = x2;
  out1[1] = x3;
  out1[2] = x4;
  out1[3] = x5;
  out1[4] = x6;
  out1[5] = x7;
  out1[6] = x8;
  out1[7] = x9;
  out1[8] = x10;
  out1[9] = x11;
}

/// The function fiat_p256_sat_add computes a divstep on wordsized integers.
/// Postconditions:
///   0 ≤ eval arg1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_p256_sat_add(out1: &mut [u32; 10], arg1: &[u32; 10], arg2: &[u32; 10]) -> () {
  let mut x1: u32 = 0;
  let mut x2: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1, &mut x2, 0x0, (arg1[0]), (arg2[0]));
  let mut x3: u32 = 0;
  let mut x4: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3, &mut x4, x2, (arg1[1]), (arg2[1]));
  let mut x5: u32 = 0;
  let mut x6: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x5, &mut x6, x4, (arg1[2]), (arg2[2]));
  let mut x7: u32 = 0;
  let mut x8: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x7, &mut x8, x6, (arg1[3]), (arg2[3]));
  let mut x9: u32 = 0;
  let mut x10: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x9, &mut x10, x8, (arg1[4]), (arg2[4]));
  let mut x11: u32 = 0;
  let mut x12: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x11, &mut x12, x10, (arg1[5]), (arg2[5]));
  let mut x13: u32 = 0;
  let mut x14: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x13, &mut x14, x12, (arg1[6]), (arg2[6]));
  let mut x15: u32 = 0;
  let mut x16: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x15, &mut x16, x14, (arg1[7]), (arg2[7]));
  let mut x17: u32 = 0;
  let mut x18: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x17, &mut x18, x16, (arg1[8]), (arg2[8]));
  let mut x19: u32 = 0;
  let mut x20: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x19, &mut x20, x18, (arg1[9]), (arg2[9]));
  out1[0] = x1;
  out1[1] = x3;
  out1[2] = x5;
  out1[3] = x7;
  out1[4] = x9;
  out1[5] = x11;
  out1[6] = x13;
  out1[7] = x15;
  out1[8] = x17;
  out1[9] = x19;
}

/// The function fiat_p256_word_sat_mul computes a divstep on wordsized integers.
/// Postconditions:
///   0 ≤ eval arg1 < m
///
/// Input Bounds:
///   arg1: [0x0 ~> 0xffffffff]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_p256_word_sat_mul(out1: &mut [u32; 10], arg1: u32, arg2: &[u32; 9]) -> () {
  let mut x1: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1, (((arg2[8]) >> 31) as fiat_p256_u1), (0x0 as u32), 0xffffffff);
  let mut x2: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x2, ((arg1 >> 31) as fiat_p256_u1), (0x0 as u32), 0xffffffff);
  let mut x3: u32 = 0;
  let mut x4: u32 = 0;
  fiat_p256_mulx_u32(&mut x3, &mut x4, x2, (arg2[0]));
  let mut x5: u32 = 0;
  let mut x6: u32 = 0;
  fiat_p256_mulx_u32(&mut x5, &mut x6, x2, (arg2[1]));
  let mut x7: u32 = 0;
  let mut x8: u32 = 0;
  fiat_p256_mulx_u32(&mut x7, &mut x8, x2, (arg2[0]));
  let mut x9: u32 = 0;
  let mut x10: u32 = 0;
  fiat_p256_mulx_u32(&mut x9, &mut x10, x2, (arg2[2]));
  let mut x11: u32 = 0;
  let mut x12: u32 = 0;
  fiat_p256_mulx_u32(&mut x11, &mut x12, x2, (arg2[1]));
  let mut x13: u32 = 0;
  let mut x14: u32 = 0;
  fiat_p256_mulx_u32(&mut x13, &mut x14, x2, (arg2[0]));
  let mut x15: u32 = 0;
  let mut x16: u32 = 0;
  fiat_p256_mulx_u32(&mut x15, &mut x16, x2, (arg2[3]));
  let mut x17: u32 = 0;
  let mut x18: u32 = 0;
  fiat_p256_mulx_u32(&mut x17, &mut x18, x2, (arg2[2]));
  let mut x19: u32 = 0;
  let mut x20: u32 = 0;
  fiat_p256_mulx_u32(&mut x19, &mut x20, x2, (arg2[1]));
  let mut x21: u32 = 0;
  let mut x22: u32 = 0;
  fiat_p256_mulx_u32(&mut x21, &mut x22, x2, (arg2[0]));
  let mut x23: u32 = 0;
  let mut x24: u32 = 0;
  fiat_p256_mulx_u32(&mut x23, &mut x24, x2, (arg2[4]));
  let mut x25: u32 = 0;
  let mut x26: u32 = 0;
  fiat_p256_mulx_u32(&mut x25, &mut x26, x2, (arg2[3]));
  let mut x27: u32 = 0;
  let mut x28: u32 = 0;
  fiat_p256_mulx_u32(&mut x27, &mut x28, x2, (arg2[2]));
  let mut x29: u32 = 0;
  let mut x30: u32 = 0;
  fiat_p256_mulx_u32(&mut x29, &mut x30, x2, (arg2[1]));
  let mut x31: u32 = 0;
  let mut x32: u32 = 0;
  fiat_p256_mulx_u32(&mut x31, &mut x32, x2, (arg2[0]));
  let mut x33: u32 = 0;
  let mut x34: u32 = 0;
  fiat_p256_mulx_u32(&mut x33, &mut x34, x2, (arg2[5]));
  let mut x35: u32 = 0;
  let mut x36: u32 = 0;
  fiat_p256_mulx_u32(&mut x35, &mut x36, x2, (arg2[4]));
  let mut x37: u32 = 0;
  let mut x38: u32 = 0;
  fiat_p256_mulx_u32(&mut x37, &mut x38, x2, (arg2[3]));
  let mut x39: u32 = 0;
  let mut x40: u32 = 0;
  fiat_p256_mulx_u32(&mut x39, &mut x40, x2, (arg2[2]));
  let mut x41: u32 = 0;
  let mut x42: u32 = 0;
  fiat_p256_mulx_u32(&mut x41, &mut x42, x2, (arg2[1]));
  let mut x43: u32 = 0;
  let mut x44: u32 = 0;
  fiat_p256_mulx_u32(&mut x43, &mut x44, x2, (arg2[0]));
  let mut x45: u32 = 0;
  let mut x46: u32 = 0;
  fiat_p256_mulx_u32(&mut x45, &mut x46, x2, (arg2[6]));
  let mut x47: u32 = 0;
  let mut x48: u32 = 0;
  fiat_p256_mulx_u32(&mut x47, &mut x48, x2, (arg2[5]));
  let mut x49: u32 = 0;
  let mut x50: u32 = 0;
  fiat_p256_mulx_u32(&mut x49, &mut x50, x2, (arg2[4]));
  let mut x51: u32 = 0;
  let mut x52: u32 = 0;
  fiat_p256_mulx_u32(&mut x51, &mut x52, x2, (arg2[3]));
  let mut x53: u32 = 0;
  let mut x54: u32 = 0;
  fiat_p256_mulx_u32(&mut x53, &mut x54, x2, (arg2[2]));
  let mut x55: u32 = 0;
  let mut x56: u32 = 0;
  fiat_p256_mulx_u32(&mut x55, &mut x56, x2, (arg2[1]));
  let mut x57: u32 = 0;
  let mut x58: u32 = 0;
  fiat_p256_mulx_u32(&mut x57, &mut x58, x2, (arg2[0]));
  let mut x59: u32 = 0;
  let mut x60: u32 = 0;
  fiat_p256_mulx_u32(&mut x59, &mut x60, x2, (arg2[7]));
  let mut x61: u32 = 0;
  let mut x62: u32 = 0;
  fiat_p256_mulx_u32(&mut x61, &mut x62, x2, (arg2[6]));
  let mut x63: u32 = 0;
  let mut x64: u32 = 0;
  fiat_p256_mulx_u32(&mut x63, &mut x64, x2, (arg2[5]));
  let mut x65: u32 = 0;
  let mut x66: u32 = 0;
  fiat_p256_mulx_u32(&mut x65, &mut x66, x2, (arg2[4]));
  let mut x67: u32 = 0;
  let mut x68: u32 = 0;
  fiat_p256_mulx_u32(&mut x67, &mut x68, x2, (arg2[3]));
  let mut x69: u32 = 0;
  let mut x70: u32 = 0;
  fiat_p256_mulx_u32(&mut x69, &mut x70, x2, (arg2[2]));
  let mut x71: u32 = 0;
  let mut x72: u32 = 0;
  fiat_p256_mulx_u32(&mut x71, &mut x72, x2, (arg2[1]));
  let mut x73: u32 = 0;
  let mut x74: u32 = 0;
  fiat_p256_mulx_u32(&mut x73, &mut x74, x2, (arg2[0]));
  let mut x75: u32 = 0;
  let mut x76: u32 = 0;
  fiat_p256_mulx_u32(&mut x75, &mut x76, x2, (arg2[8]));
  let mut x77: u32 = 0;
  let mut x78: u32 = 0;
  fiat_p256_mulx_u32(&mut x77, &mut x78, x2, (arg2[7]));
  let mut x79: u32 = 0;
  let mut x80: u32 = 0;
  fiat_p256_mulx_u32(&mut x79, &mut x80, x2, (arg2[6]));
  let mut x81: u32 = 0;
  let mut x82: u32 = 0;
  fiat_p256_mulx_u32(&mut x81, &mut x82, x2, (arg2[5]));
  let mut x83: u32 = 0;
  let mut x84: u32 = 0;
  fiat_p256_mulx_u32(&mut x83, &mut x84, x2, (arg2[4]));
  let mut x85: u32 = 0;
  let mut x86: u32 = 0;
  fiat_p256_mulx_u32(&mut x85, &mut x86, x2, (arg2[3]));
  let mut x87: u32 = 0;
  let mut x88: u32 = 0;
  fiat_p256_mulx_u32(&mut x87, &mut x88, x2, (arg2[2]));
  let mut x89: u32 = 0;
  let mut x90: u32 = 0;
  fiat_p256_mulx_u32(&mut x89, &mut x90, x2, (arg2[1]));
  let mut x91: u32 = 0;
  let mut x92: u32 = 0;
  fiat_p256_mulx_u32(&mut x91, &mut x92, x2, (arg2[0]));
  let mut x93: u32 = 0;
  let mut x94: u32 = 0;
  fiat_p256_mulx_u32(&mut x93, &mut x94, arg1, x1);
  let mut x95: u32 = 0;
  let mut x96: u32 = 0;
  fiat_p256_mulx_u32(&mut x95, &mut x96, arg1, (arg2[8]));
  let mut x97: u32 = 0;
  let mut x98: u32 = 0;
  fiat_p256_mulx_u32(&mut x97, &mut x98, arg1, (arg2[7]));
  let mut x99: u32 = 0;
  let mut x100: u32 = 0;
  fiat_p256_mulx_u32(&mut x99, &mut x100, arg1, (arg2[6]));
  let mut x101: u32 = 0;
  let mut x102: u32 = 0;
  fiat_p256_mulx_u32(&mut x101, &mut x102, arg1, (arg2[5]));
  let mut x103: u32 = 0;
  let mut x104: u32 = 0;
  fiat_p256_mulx_u32(&mut x103, &mut x104, arg1, (arg2[4]));
  let mut x105: u32 = 0;
  let mut x106: u32 = 0;
  fiat_p256_mulx_u32(&mut x105, &mut x106, arg1, (arg2[3]));
  let mut x107: u32 = 0;
  let mut x108: u32 = 0;
  fiat_p256_mulx_u32(&mut x107, &mut x108, arg1, (arg2[2]));
  let mut x109: u32 = 0;
  let mut x110: u32 = 0;
  fiat_p256_mulx_u32(&mut x109, &mut x110, arg1, (arg2[1]));
  let mut x111: u32 = 0;
  let mut x112: u32 = 0;
  fiat_p256_mulx_u32(&mut x111, &mut x112, arg1, (arg2[0]));
  let mut x113: u32 = 0;
  let mut x114: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x113, &mut x114, 0x0, x96, x3);
  let mut x115: u32 = 0;
  let mut x116: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x115, &mut x116, 0x0, x113, x5);
  let mut x117: u32 = 0;
  let mut x118: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x117, &mut x118, 0x0, x98, x7);
  let mut x119: u32 = 0;
  let mut x120: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x119, &mut x120, x118, x115, x8);
  let mut x121: u32 = 0;
  let mut x122: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x121, &mut x122, 0x0, x117, x11);
  let mut x123: u32 = 0;
  let mut x124: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x123, &mut x124, x122, x119, x9);
  let mut x125: u32 = 0;
  let mut x126: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x125, &mut x126, 0x0, x100, x13);
  let mut x127: u32 = 0;
  let mut x128: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x127, &mut x128, x126, x121, x14);
  let mut x129: u32 = 0;
  let mut x130: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x129, &mut x130, x128, x123, x12);
  let mut x131: u32 = 0;
  let mut x132: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x131, &mut x132, 0x0, x125, x19);
  let mut x133: u32 = 0;
  let mut x134: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x133, &mut x134, x132, x127, x17);
  let mut x135: u32 = 0;
  let mut x136: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x135, &mut x136, x134, x129, x15);
  let mut x137: u32 = 0;
  let mut x138: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x137, &mut x138, 0x0, x102, x21);
  let mut x139: u32 = 0;
  let mut x140: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x139, &mut x140, x138, x131, x22);
  let mut x141: u32 = 0;
  let mut x142: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x141, &mut x142, x140, x133, x20);
  let mut x143: u32 = 0;
  let mut x144: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x143, &mut x144, x142, x135, x18);
  let mut x145: u32 = 0;
  let mut x146: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x145, &mut x146, 0x0, x137, x29);
  let mut x147: u32 = 0;
  let mut x148: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x147, &mut x148, x146, x139, x27);
  let mut x149: u32 = 0;
  let mut x150: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x149, &mut x150, x148, x141, x25);
  let mut x151: u32 = 0;
  let mut x152: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x151, &mut x152, x150, x143, x23);
  let mut x153: u32 = 0;
  let mut x154: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x153, &mut x154, 0x0, x104, x31);
  let mut x155: u32 = 0;
  let mut x156: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x155, &mut x156, x154, x145, x32);
  let mut x157: u32 = 0;
  let mut x158: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x157, &mut x158, x156, x147, x30);
  let mut x159: u32 = 0;
  let mut x160: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x159, &mut x160, x158, x149, x28);
  let mut x161: u32 = 0;
  let mut x162: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x161, &mut x162, x160, x151, x26);
  let mut x163: u32 = 0;
  let mut x164: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x163, &mut x164, 0x0, x153, x41);
  let mut x165: u32 = 0;
  let mut x166: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x165, &mut x166, x164, x155, x39);
  let mut x167: u32 = 0;
  let mut x168: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x167, &mut x168, x166, x157, x37);
  let mut x169: u32 = 0;
  let mut x170: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x169, &mut x170, x168, x159, x35);
  let mut x171: u32 = 0;
  let mut x172: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x171, &mut x172, x170, x161, x33);
  let mut x173: u32 = 0;
  let mut x174: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x173, &mut x174, 0x0, x106, x43);
  let mut x175: u32 = 0;
  let mut x176: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x175, &mut x176, x174, x163, x44);
  let mut x177: u32 = 0;
  let mut x178: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x177, &mut x178, x176, x165, x42);
  let mut x179: u32 = 0;
  let mut x180: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x179, &mut x180, x178, x167, x40);
  let mut x181: u32 = 0;
  let mut x182: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x181, &mut x182, x180, x169, x38);
  let mut x183: u32 = 0;
  let mut x184: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x183, &mut x184, x182, x171, x36);
  let mut x185: u32 = 0;
  let mut x186: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x185, &mut x186, 0x0, x173, x55);
  let mut x187: u32 = 0;
  let mut x188: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x187, &mut x188, x186, x175, x53);
  let mut x189: u32 = 0;
  let mut x190: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x189, &mut x190, x188, x177, x51);
  let mut x191: u32 = 0;
  let mut x192: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x191, &mut x192, x190, x179, x49);
  let mut x193: u32 = 0;
  let mut x194: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x193, &mut x194, x192, x181, x47);
  let mut x195: u32 = 0;
  let mut x196: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x195, &mut x196, x194, x183, x45);
  let mut x197: u32 = 0;
  let mut x198: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x197, &mut x198, 0x0, x108, x57);
  let mut x199: u32 = 0;
  let mut x200: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x199, &mut x200, x198, x185, x58);
  let mut x201: u32 = 0;
  let mut x202: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x201, &mut x202, x200, x187, x56);
  let mut x203: u32 = 0;
  let mut x204: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x203, &mut x204, x202, x189, x54);
  let mut x205: u32 = 0;
  let mut x206: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x205, &mut x206, x204, x191, x52);
  let mut x207: u32 = 0;
  let mut x208: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x207, &mut x208, x206, x193, x50);
  let mut x209: u32 = 0;
  let mut x210: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x209, &mut x210, x208, x195, x48);
  let mut x211: u32 = 0;
  let mut x212: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x211, &mut x212, 0x0, x197, x71);
  let mut x213: u32 = 0;
  let mut x214: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x213, &mut x214, x212, x199, x69);
  let mut x215: u32 = 0;
  let mut x216: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x215, &mut x216, x214, x201, x67);
  let mut x217: u32 = 0;
  let mut x218: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x217, &mut x218, x216, x203, x65);
  let mut x219: u32 = 0;
  let mut x220: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x219, &mut x220, x218, x205, x63);
  let mut x221: u32 = 0;
  let mut x222: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x221, &mut x222, x220, x207, x61);
  let mut x223: u32 = 0;
  let mut x224: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x223, &mut x224, x222, x209, x59);
  let mut x225: u32 = 0;
  let mut x226: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x225, &mut x226, 0x0, x110, x73);
  let mut x227: u32 = 0;
  let mut x228: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x227, &mut x228, x226, x211, x74);
  let mut x229: u32 = 0;
  let mut x230: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x229, &mut x230, x228, x213, x72);
  let mut x231: u32 = 0;
  let mut x232: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x231, &mut x232, x230, x215, x70);
  let mut x233: u32 = 0;
  let mut x234: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x233, &mut x234, x232, x217, x68);
  let mut x235: u32 = 0;
  let mut x236: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x235, &mut x236, x234, x219, x66);
  let mut x237: u32 = 0;
  let mut x238: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x237, &mut x238, x236, x221, x64);
  let mut x239: u32 = 0;
  let mut x240: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x239, &mut x240, x238, x223, x62);
  let mut x241: u32 = 0;
  let mut x242: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x241, &mut x242, 0x0, x225, x89);
  let mut x243: u32 = 0;
  let mut x244: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x243, &mut x244, x242, x227, x87);
  let mut x245: u32 = 0;
  let mut x246: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x245, &mut x246, x244, x229, x85);
  let mut x247: u32 = 0;
  let mut x248: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x247, &mut x248, x246, x231, x83);
  let mut x249: u32 = 0;
  let mut x250: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x249, &mut x250, x248, x233, x81);
  let mut x251: u32 = 0;
  let mut x252: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x251, &mut x252, x250, x235, x79);
  let mut x253: u32 = 0;
  let mut x254: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x253, &mut x254, x252, x237, x77);
  let mut x255: u32 = 0;
  let mut x256: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x255, &mut x256, x254, x239, x75);
  let mut x257: u32 = 0;
  let mut x258: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x257, &mut x258, 0x0, x112, x91);
  let mut x259: u32 = 0;
  let mut x260: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x259, &mut x260, x258, x241, x92);
  let mut x261: u32 = 0;
  let mut x262: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x261, &mut x262, x260, x243, x90);
  let mut x263: u32 = 0;
  let mut x264: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x263, &mut x264, x262, x245, x88);
  let mut x265: u32 = 0;
  let mut x266: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x265, &mut x266, x264, x247, x86);
  let mut x267: u32 = 0;
  let mut x268: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x267, &mut x268, x266, x249, x84);
  let mut x269: u32 = 0;
  let mut x270: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x269, &mut x270, x268, x251, x82);
  let mut x271: u32 = 0;
  let mut x272: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x271, &mut x272, x270, x253, x80);
  let mut x273: u32 = 0;
  let mut x274: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x273, &mut x274, x272, x255, x78);
  let mut x275: u32 = 0;
  let mut x276: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x275, &mut x276, 0x0, x257, x109);
  let mut x277: u32 = 0;
  let mut x278: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x277, &mut x278, x276, x259, x107);
  let mut x279: u32 = 0;
  let mut x280: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x279, &mut x280, x278, x261, x105);
  let mut x281: u32 = 0;
  let mut x282: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x281, &mut x282, x280, x263, x103);
  let mut x283: u32 = 0;
  let mut x284: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x283, &mut x284, x282, x265, x101);
  let mut x285: u32 = 0;
  let mut x286: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x285, &mut x286, x284, x267, x99);
  let mut x287: u32 = 0;
  let mut x288: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x287, &mut x288, x286, x269, x97);
  let mut x289: u32 = 0;
  let mut x290: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x289, &mut x290, x288, x271, x95);
  let mut x291: u32 = 0;
  let mut x292: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x291, &mut x292, x290, x273, x93);
  out1[0] = x111;
  out1[1] = x275;
  out1[2] = x277;
  out1[3] = x279;
  out1[4] = x281;
  out1[5] = x283;
  out1[6] = x285;
  out1[7] = x287;
  out1[8] = x289;
  out1[9] = x291;
}

/// The function fiat_p256_jumpdivstep_precomp returns the precomputed value for the jump-version of Bernstein-Yang-inversion (in montgomery form).
/// Postconditions:
///   eval (from_montgomery out1) = ⌊(m - 1) / 2⌋^(if (log2 m) + 1 < 46 then ⌊(49 * ((log2 m) + 1) + 80) / 17⌋ else ⌊(49 * ((log2 m) + 1) + 57) / 17⌋)
///   0 ≤ eval out1 < m
///
/// Input Bounds:
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_p256_jumpdivstep_precomp(out1: &mut [u32; 8]) -> () {
  out1[0] = 0x316565;
  out1[1] = 0x5ad236bf;
  out1[2] = 0x20311f0f;
  out1[3] = 0x5989f9f3;
  out1[4] = 0xad313b89;
  out1[5] = 0x920ae1f1;
  out1[6] = 0xe1758a9;
  out1[7] = 0xee5b1013;
}

/// The function fiat_p256_outer_loop_body computes the body of the outer loop in BY-inversion (jumpdivstep version).
/// Postconditions:
///   0 ≤ eval arg1 < m
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   arg4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
/// Output Bounds:
///   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
///   out4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
#[inline]
pub fn fiat_p256_outer_loop_body(out1: &mut [u32; 9], out2: &mut [u32; 9], out3: &mut [u32; 8], out4: &mut [u32; 8], arg1: &[u32; 9], arg2: &[u32; 9], arg3: &[u32; 8], arg4: &[u32; 8]) -> () {
  let mut x1: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1, (((arg2[0]) & (0x1 as u32)) as fiat_p256_u1), (0x1 as u32), 0xffffffff);
  let mut x2: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x2, (((arg2[0]) & (0x1 as u32)) as fiat_p256_u1), (arg1[0]), (arg2[0]));
  let mut x3: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x3, (((arg2[0]) & (0x1 as u32)) as fiat_p256_u1), (arg2[0]), (((((!(arg1[0])) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x4: fiat_p256_u1 = 0;
  fiat_p256_cmovznz_u1(&mut x4, (((arg2[0]) & (0x1 as u32)) as fiat_p256_u1), 0x1, 0x0);
  let mut x5: fiat_p256_u1 = 0;
  fiat_p256_cmovznz_u1(&mut x5, (((arg2[0]) & (0x1 as u32)) as fiat_p256_u1), 0x0, 0x1);
  let mut x6: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x6, (((arg2[0]) & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), 0xffffffff);
  let mut x7: fiat_p256_u1 = 0;
  fiat_p256_cmovznz_u1(&mut x7, (((arg2[0]) & (0x1 as u32)) as fiat_p256_u1), 0x1, 0x0);
  let mut x8: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x8, ((x3 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x2);
  let mut x9: fiat_p256_u1 = 0;
  fiat_p256_cmovznz_u1(&mut x9, ((x3 & (0x1 as u32)) as fiat_p256_u1), 0x0, x4);
  let mut x10: fiat_p256_u1 = 0;
  fiat_p256_cmovznz_u1(&mut x10, ((x3 & (0x1 as u32)) as fiat_p256_u1), 0x0, x5);
  let x11: u32 = (((((!((((0x1 as u64) + (x1 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x12: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x12, (((x11 >> 31) as fiat_p256_u1) & ((((((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((0x1 as u64) + (x1 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x1 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x13: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x13, (((x11 >> 31) as fiat_p256_u1) & ((((((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), x2, ((((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x14: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x14, (((x11 >> 31) as fiat_p256_u1) & ((((((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x2) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x15: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x15, (((x11 >> 31) as fiat_p256_u1) & ((((((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((x4 as u32) + (x4 as u32)), ((((x6 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32));
  let mut x16: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x16, (((x11 >> 31) as fiat_p256_u1) & ((((((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((x5 as u32) + (x5 as u32)), ((x7 as u32) + (x10 as u32)));
  let mut x17: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x17, (((x11 >> 31) as fiat_p256_u1) & ((((((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x6 as u64) + (x9 as u64)) & (0xffffffff as u64)) as u32), (((((!((x4 as u32) + (x4 as u32))) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x18: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x18, (((x11 >> 31) as fiat_p256_u1) & ((((((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x3 as u64) + (x8 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((x7 as u32) + (x10 as u32)), (((((!((x5 as u32) + (x5 as u32))) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x19: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x19, ((x14 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x13);
  let mut x20: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x20, ((x14 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x15);
  let mut x21: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x21, ((x14 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x16);
  let x22: u32 = (((((!((((0x1 as u64) + (x12 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x23: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x23, (((x22 >> 31) as fiat_p256_u1) & ((((((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((0x1 as u64) + (x12 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x12 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x24: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x24, (((x22 >> 31) as fiat_p256_u1) & ((((((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), x13, ((((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x25: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x25, (((x22 >> 31) as fiat_p256_u1) & ((((((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x13) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x26: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x26, (((x22 >> 31) as fiat_p256_u1) & ((((((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x15 as u64) + (x15 as u64)) & (0xffffffff as u64)) as u32), ((((x17 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32));
  let mut x27: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x27, (((x22 >> 31) as fiat_p256_u1) & ((((((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), (x16 + x16), ((((x18 as u64) + (x21 as u64)) & (0xffffffff as u64)) as u32));
  let mut x28: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x28, (((x22 >> 31) as fiat_p256_u1) & ((((((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x17 as u64) + (x20 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x15 as u64) + (x15 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x29: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x29, (((x22 >> 31) as fiat_p256_u1) & ((((((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x14 as u64) + (x19 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x18 as u64) + (x21 as u64)) & (0xffffffff as u64)) as u32), (((((!(x16 + x16)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x30: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x30, ((x25 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x24);
  let mut x31: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x31, ((x25 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x26);
  let mut x32: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x32, ((x25 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x27);
  let x33: u32 = (((((!((((0x1 as u64) + (x23 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x34: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x34, (((x33 >> 31) as fiat_p256_u1) & ((((((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((0x1 as u64) + (x23 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x23 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x35: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x35, (((x33 >> 31) as fiat_p256_u1) & ((((((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), x24, ((((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x36: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x36, (((x33 >> 31) as fiat_p256_u1) & ((((((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x24) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x37: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x37, (((x33 >> 31) as fiat_p256_u1) & ((((((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x26 as u64) + (x26 as u64)) & (0xffffffff as u64)) as u32), ((((x28 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32));
  let mut x38: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x38, (((x33 >> 31) as fiat_p256_u1) & ((((((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x27 as u64) + (x27 as u64)) & (0xffffffff as u64)) as u32), ((((x29 as u64) + (x32 as u64)) & (0xffffffff as u64)) as u32));
  let mut x39: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x39, (((x33 >> 31) as fiat_p256_u1) & ((((((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x28 as u64) + (x31 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x26 as u64) + (x26 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x40: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x40, (((x33 >> 31) as fiat_p256_u1) & ((((((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x25 as u64) + (x30 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x29 as u64) + (x32 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x27 as u64) + (x27 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x41: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x41, ((x36 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x35);
  let mut x42: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x42, ((x36 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x37);
  let mut x43: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x43, ((x36 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x38);
  let x44: u32 = (((((!((((0x1 as u64) + (x34 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x45: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x45, (((x44 >> 31) as fiat_p256_u1) & ((((((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((0x1 as u64) + (x34 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x34 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x46: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x46, (((x44 >> 31) as fiat_p256_u1) & ((((((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), x35, ((((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x47: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x47, (((x44 >> 31) as fiat_p256_u1) & ((((((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x35) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x48: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x48, (((x44 >> 31) as fiat_p256_u1) & ((((((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x37 as u64) + (x37 as u64)) & (0xffffffff as u64)) as u32), ((((x39 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32));
  let mut x49: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x49, (((x44 >> 31) as fiat_p256_u1) & ((((((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x38 as u64) + (x38 as u64)) & (0xffffffff as u64)) as u32), ((((x40 as u64) + (x43 as u64)) & (0xffffffff as u64)) as u32));
  let mut x50: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x50, (((x44 >> 31) as fiat_p256_u1) & ((((((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x39 as u64) + (x42 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x37 as u64) + (x37 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x51: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x51, (((x44 >> 31) as fiat_p256_u1) & ((((((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x36 as u64) + (x41 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x40 as u64) + (x43 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x38 as u64) + (x38 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x52: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x52, ((x47 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x46);
  let mut x53: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x53, ((x47 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x48);
  let mut x54: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x54, ((x47 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x49);
  let x55: u32 = (((((!((((0x1 as u64) + (x45 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x56: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x56, (((x55 >> 31) as fiat_p256_u1) & ((((((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((0x1 as u64) + (x45 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x45 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x57: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x57, (((x55 >> 31) as fiat_p256_u1) & ((((((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), x46, ((((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x58: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x58, (((x55 >> 31) as fiat_p256_u1) & ((((((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x46) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x59: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x59, (((x55 >> 31) as fiat_p256_u1) & ((((((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x48 as u64) + (x48 as u64)) & (0xffffffff as u64)) as u32), ((((x50 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32));
  let mut x60: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x60, (((x55 >> 31) as fiat_p256_u1) & ((((((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x49 as u64) + (x49 as u64)) & (0xffffffff as u64)) as u32), ((((x51 as u64) + (x54 as u64)) & (0xffffffff as u64)) as u32));
  let mut x61: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x61, (((x55 >> 31) as fiat_p256_u1) & ((((((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x50 as u64) + (x53 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x48 as u64) + (x48 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x62: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x62, (((x55 >> 31) as fiat_p256_u1) & ((((((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x47 as u64) + (x52 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x51 as u64) + (x54 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x49 as u64) + (x49 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x63: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x63, ((x58 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x57);
  let mut x64: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x64, ((x58 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x59);
  let mut x65: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x65, ((x58 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x60);
  let x66: u32 = (((((!((((0x1 as u64) + (x56 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x67: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x67, (((x66 >> 31) as fiat_p256_u1) & ((((((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((0x1 as u64) + (x56 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x56 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x68: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x68, (((x66 >> 31) as fiat_p256_u1) & ((((((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), x57, ((((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x69: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x69, (((x66 >> 31) as fiat_p256_u1) & ((((((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x57) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x70: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x70, (((x66 >> 31) as fiat_p256_u1) & ((((((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x59 as u64) + (x59 as u64)) & (0xffffffff as u64)) as u32), ((((x61 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32));
  let mut x71: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x71, (((x66 >> 31) as fiat_p256_u1) & ((((((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x60 as u64) + (x60 as u64)) & (0xffffffff as u64)) as u32), ((((x62 as u64) + (x65 as u64)) & (0xffffffff as u64)) as u32));
  let mut x72: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x72, (((x66 >> 31) as fiat_p256_u1) & ((((((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x61 as u64) + (x64 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x59 as u64) + (x59 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x73: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x73, (((x66 >> 31) as fiat_p256_u1) & ((((((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x58 as u64) + (x63 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x62 as u64) + (x65 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x60 as u64) + (x60 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x74: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x74, ((x69 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x68);
  let mut x75: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x75, ((x69 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x70);
  let mut x76: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x76, ((x69 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x71);
  let x77: u32 = (((((!((((0x1 as u64) + (x67 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x78: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x78, (((x77 >> 31) as fiat_p256_u1) & ((((((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((0x1 as u64) + (x67 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x67 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x79: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x79, (((x77 >> 31) as fiat_p256_u1) & ((((((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), x68, ((((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x80: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x80, (((x77 >> 31) as fiat_p256_u1) & ((((((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x68) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x81: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x81, (((x77 >> 31) as fiat_p256_u1) & ((((((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x70 as u64) + (x70 as u64)) & (0xffffffff as u64)) as u32), ((((x72 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32));
  let mut x82: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x82, (((x77 >> 31) as fiat_p256_u1) & ((((((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x71 as u64) + (x71 as u64)) & (0xffffffff as u64)) as u32), ((((x73 as u64) + (x76 as u64)) & (0xffffffff as u64)) as u32));
  let mut x83: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x83, (((x77 >> 31) as fiat_p256_u1) & ((((((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x72 as u64) + (x75 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x70 as u64) + (x70 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x84: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x84, (((x77 >> 31) as fiat_p256_u1) & ((((((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x69 as u64) + (x74 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x73 as u64) + (x76 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x71 as u64) + (x71 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x85: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x85, ((x80 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x79);
  let mut x86: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x86, ((x80 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x81);
  let mut x87: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x87, ((x80 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x82);
  let x88: u32 = (((((!((((0x1 as u64) + (x78 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x89: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x89, (((x88 >> 31) as fiat_p256_u1) & ((((((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((0x1 as u64) + (x78 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x78 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x90: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x90, (((x88 >> 31) as fiat_p256_u1) & ((((((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), x79, ((((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x91: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x91, (((x88 >> 31) as fiat_p256_u1) & ((((((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x79) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x92: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x92, (((x88 >> 31) as fiat_p256_u1) & ((((((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x81 as u64) + (x81 as u64)) & (0xffffffff as u64)) as u32), ((((x83 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32));
  let mut x93: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x93, (((x88 >> 31) as fiat_p256_u1) & ((((((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x82 as u64) + (x82 as u64)) & (0xffffffff as u64)) as u32), ((((x84 as u64) + (x87 as u64)) & (0xffffffff as u64)) as u32));
  let mut x94: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x94, (((x88 >> 31) as fiat_p256_u1) & ((((((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x83 as u64) + (x86 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x81 as u64) + (x81 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x95: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x95, (((x88 >> 31) as fiat_p256_u1) & ((((((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x80 as u64) + (x85 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x84 as u64) + (x87 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x82 as u64) + (x82 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x96: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x96, ((x91 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x90);
  let mut x97: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x97, ((x91 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x92);
  let mut x98: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x98, ((x91 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x93);
  let x99: u32 = (((((!((((0x1 as u64) + (x89 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x100: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x100, (((x99 >> 31) as fiat_p256_u1) & ((((((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((0x1 as u64) + (x89 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x89 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x101: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x101, (((x99 >> 31) as fiat_p256_u1) & ((((((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), x90, ((((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x102: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x102, (((x99 >> 31) as fiat_p256_u1) & ((((((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x90) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x103: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x103, (((x99 >> 31) as fiat_p256_u1) & ((((((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x92 as u64) + (x92 as u64)) & (0xffffffff as u64)) as u32), ((((x94 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32));
  let mut x104: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x104, (((x99 >> 31) as fiat_p256_u1) & ((((((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x93 as u64) + (x93 as u64)) & (0xffffffff as u64)) as u32), ((((x95 as u64) + (x98 as u64)) & (0xffffffff as u64)) as u32));
  let mut x105: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x105, (((x99 >> 31) as fiat_p256_u1) & ((((((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x94 as u64) + (x97 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x92 as u64) + (x92 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x106: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x106, (((x99 >> 31) as fiat_p256_u1) & ((((((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x91 as u64) + (x96 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x95 as u64) + (x98 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x93 as u64) + (x93 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x107: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x107, ((x102 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x101);
  let mut x108: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x108, ((x102 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x103);
  let mut x109: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x109, ((x102 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x104);
  let x110: u32 = (((((!((((0x1 as u64) + (x100 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x111: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x111, (((x110 >> 31) as fiat_p256_u1) & ((((((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((0x1 as u64) + (x100 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x100 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x112: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x112, (((x110 >> 31) as fiat_p256_u1) & ((((((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), x101, ((((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x113: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x113, (((x110 >> 31) as fiat_p256_u1) & ((((((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x101) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x114: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x114, (((x110 >> 31) as fiat_p256_u1) & ((((((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x103 as u64) + (x103 as u64)) & (0xffffffff as u64)) as u32), ((((x105 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32));
  let mut x115: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x115, (((x110 >> 31) as fiat_p256_u1) & ((((((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x104 as u64) + (x104 as u64)) & (0xffffffff as u64)) as u32), ((((x106 as u64) + (x109 as u64)) & (0xffffffff as u64)) as u32));
  let mut x116: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x116, (((x110 >> 31) as fiat_p256_u1) & ((((((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x105 as u64) + (x108 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x103 as u64) + (x103 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x117: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x117, (((x110 >> 31) as fiat_p256_u1) & ((((((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x102 as u64) + (x107 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x106 as u64) + (x109 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x104 as u64) + (x104 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x118: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x118, ((x113 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x112);
  let mut x119: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x119, ((x113 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x114);
  let mut x120: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x120, ((x113 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x115);
  let x121: u32 = (((((!((((0x1 as u64) + (x111 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x122: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x122, (((x121 >> 31) as fiat_p256_u1) & ((((((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((0x1 as u64) + (x111 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x111 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x123: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x123, (((x121 >> 31) as fiat_p256_u1) & ((((((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), x112, ((((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x124: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x124, (((x121 >> 31) as fiat_p256_u1) & ((((((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x112) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x125: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x125, (((x121 >> 31) as fiat_p256_u1) & ((((((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x114 as u64) + (x114 as u64)) & (0xffffffff as u64)) as u32), ((((x116 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32));
  let mut x126: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x126, (((x121 >> 31) as fiat_p256_u1) & ((((((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x115 as u64) + (x115 as u64)) & (0xffffffff as u64)) as u32), ((((x117 as u64) + (x120 as u64)) & (0xffffffff as u64)) as u32));
  let mut x127: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x127, (((x121 >> 31) as fiat_p256_u1) & ((((((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x116 as u64) + (x119 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x114 as u64) + (x114 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x128: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x128, (((x121 >> 31) as fiat_p256_u1) & ((((((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x113 as u64) + (x118 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x117 as u64) + (x120 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x115 as u64) + (x115 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x129: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x129, ((x124 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x123);
  let mut x130: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x130, ((x124 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x125);
  let mut x131: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x131, ((x124 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x126);
  let x132: u32 = (((((!((((0x1 as u64) + (x122 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x133: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x133, (((x132 >> 31) as fiat_p256_u1) & ((((((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((0x1 as u64) + (x122 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x122 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x134: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x134, (((x132 >> 31) as fiat_p256_u1) & ((((((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), x123, ((((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x135: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x135, (((x132 >> 31) as fiat_p256_u1) & ((((((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x123) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x136: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x136, (((x132 >> 31) as fiat_p256_u1) & ((((((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x125 as u64) + (x125 as u64)) & (0xffffffff as u64)) as u32), ((((x127 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32));
  let mut x137: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x137, (((x132 >> 31) as fiat_p256_u1) & ((((((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x126 as u64) + (x126 as u64)) & (0xffffffff as u64)) as u32), ((((x128 as u64) + (x131 as u64)) & (0xffffffff as u64)) as u32));
  let mut x138: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x138, (((x132 >> 31) as fiat_p256_u1) & ((((((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x127 as u64) + (x130 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x125 as u64) + (x125 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x139: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x139, (((x132 >> 31) as fiat_p256_u1) & ((((((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x124 as u64) + (x129 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x128 as u64) + (x131 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x126 as u64) + (x126 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x140: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x140, ((x135 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x134);
  let mut x141: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x141, ((x135 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x136);
  let mut x142: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x142, ((x135 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x137);
  let x143: u32 = (((((!((((0x1 as u64) + (x133 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x144: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x144, (((x143 >> 31) as fiat_p256_u1) & ((((((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((0x1 as u64) + (x133 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x133 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x145: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x145, (((x143 >> 31) as fiat_p256_u1) & ((((((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), x134, ((((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x146: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x146, (((x143 >> 31) as fiat_p256_u1) & ((((((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x134) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x147: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x147, (((x143 >> 31) as fiat_p256_u1) & ((((((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x136 as u64) + (x136 as u64)) & (0xffffffff as u64)) as u32), ((((x138 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32));
  let mut x148: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x148, (((x143 >> 31) as fiat_p256_u1) & ((((((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x137 as u64) + (x137 as u64)) & (0xffffffff as u64)) as u32), ((((x139 as u64) + (x142 as u64)) & (0xffffffff as u64)) as u32));
  let mut x149: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x149, (((x143 >> 31) as fiat_p256_u1) & ((((((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x138 as u64) + (x141 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x136 as u64) + (x136 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x150: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x150, (((x143 >> 31) as fiat_p256_u1) & ((((((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x135 as u64) + (x140 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x139 as u64) + (x142 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x137 as u64) + (x137 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x151: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x151, ((x146 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x145);
  let mut x152: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x152, ((x146 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x147);
  let mut x153: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x153, ((x146 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x148);
  let x154: u32 = (((((!((((0x1 as u64) + (x144 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x155: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x155, (((x154 >> 31) as fiat_p256_u1) & ((((((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((0x1 as u64) + (x144 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x144 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x156: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x156, (((x154 >> 31) as fiat_p256_u1) & ((((((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), x145, ((((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x157: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x157, (((x154 >> 31) as fiat_p256_u1) & ((((((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x145) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x158: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x158, (((x154 >> 31) as fiat_p256_u1) & ((((((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x147 as u64) + (x147 as u64)) & (0xffffffff as u64)) as u32), ((((x149 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32));
  let mut x159: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x159, (((x154 >> 31) as fiat_p256_u1) & ((((((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x148 as u64) + (x148 as u64)) & (0xffffffff as u64)) as u32), ((((x150 as u64) + (x153 as u64)) & (0xffffffff as u64)) as u32));
  let mut x160: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x160, (((x154 >> 31) as fiat_p256_u1) & ((((((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x149 as u64) + (x152 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x147 as u64) + (x147 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x161: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x161, (((x154 >> 31) as fiat_p256_u1) & ((((((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x146 as u64) + (x151 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x150 as u64) + (x153 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x148 as u64) + (x148 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x162: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x162, ((x157 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x156);
  let mut x163: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x163, ((x157 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x158);
  let mut x164: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x164, ((x157 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x159);
  let x165: u32 = (((((!((((0x1 as u64) + (x155 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x166: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x166, (((x165 >> 31) as fiat_p256_u1) & ((((((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((0x1 as u64) + (x155 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x155 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x167: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x167, (((x165 >> 31) as fiat_p256_u1) & ((((((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), x156, ((((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x168: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x168, (((x165 >> 31) as fiat_p256_u1) & ((((((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x156) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x169: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x169, (((x165 >> 31) as fiat_p256_u1) & ((((((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x158 as u64) + (x158 as u64)) & (0xffffffff as u64)) as u32), ((((x160 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32));
  let mut x170: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x170, (((x165 >> 31) as fiat_p256_u1) & ((((((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x159 as u64) + (x159 as u64)) & (0xffffffff as u64)) as u32), ((((x161 as u64) + (x164 as u64)) & (0xffffffff as u64)) as u32));
  let mut x171: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x171, (((x165 >> 31) as fiat_p256_u1) & ((((((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x160 as u64) + (x163 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x158 as u64) + (x158 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x172: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x172, (((x165 >> 31) as fiat_p256_u1) & ((((((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x157 as u64) + (x162 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x161 as u64) + (x164 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x159 as u64) + (x159 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x173: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x173, ((x168 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x167);
  let mut x174: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x174, ((x168 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x169);
  let mut x175: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x175, ((x168 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x170);
  let x176: u32 = (((((!((((0x1 as u64) + (x166 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x177: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x177, (((x176 >> 31) as fiat_p256_u1) & ((((((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((0x1 as u64) + (x166 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x166 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x178: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x178, (((x176 >> 31) as fiat_p256_u1) & ((((((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), x167, ((((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x179: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x179, (((x176 >> 31) as fiat_p256_u1) & ((((((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x167) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x180: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x180, (((x176 >> 31) as fiat_p256_u1) & ((((((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x169 as u64) + (x169 as u64)) & (0xffffffff as u64)) as u32), ((((x171 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32));
  let mut x181: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x181, (((x176 >> 31) as fiat_p256_u1) & ((((((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x170 as u64) + (x170 as u64)) & (0xffffffff as u64)) as u32), ((((x172 as u64) + (x175 as u64)) & (0xffffffff as u64)) as u32));
  let mut x182: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x182, (((x176 >> 31) as fiat_p256_u1) & ((((((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x171 as u64) + (x174 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x169 as u64) + (x169 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x183: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x183, (((x176 >> 31) as fiat_p256_u1) & ((((((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x168 as u64) + (x173 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x172 as u64) + (x175 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x170 as u64) + (x170 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x184: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x184, ((x179 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x178);
  let mut x185: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x185, ((x179 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x180);
  let mut x186: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x186, ((x179 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x181);
  let x187: u32 = (((((!((((0x1 as u64) + (x177 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x188: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x188, (((x187 >> 31) as fiat_p256_u1) & ((((((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((0x1 as u64) + (x177 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x177 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x189: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x189, (((x187 >> 31) as fiat_p256_u1) & ((((((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), x178, ((((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x190: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x190, (((x187 >> 31) as fiat_p256_u1) & ((((((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x178) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x191: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x191, (((x187 >> 31) as fiat_p256_u1) & ((((((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x180 as u64) + (x180 as u64)) & (0xffffffff as u64)) as u32), ((((x182 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32));
  let mut x192: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x192, (((x187 >> 31) as fiat_p256_u1) & ((((((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x181 as u64) + (x181 as u64)) & (0xffffffff as u64)) as u32), ((((x183 as u64) + (x186 as u64)) & (0xffffffff as u64)) as u32));
  let mut x193: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x193, (((x187 >> 31) as fiat_p256_u1) & ((((((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x182 as u64) + (x185 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x180 as u64) + (x180 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x194: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x194, (((x187 >> 31) as fiat_p256_u1) & ((((((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x179 as u64) + (x184 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x183 as u64) + (x186 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x181 as u64) + (x181 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x195: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x195, ((x190 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x189);
  let mut x196: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x196, ((x190 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x191);
  let mut x197: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x197, ((x190 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x192);
  let x198: u32 = (((((!((((0x1 as u64) + (x188 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x199: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x199, (((x198 >> 31) as fiat_p256_u1) & ((((((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((0x1 as u64) + (x188 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x188 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x200: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x200, (((x198 >> 31) as fiat_p256_u1) & ((((((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), x189, ((((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x201: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x201, (((x198 >> 31) as fiat_p256_u1) & ((((((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x189) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x202: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x202, (((x198 >> 31) as fiat_p256_u1) & ((((((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x191 as u64) + (x191 as u64)) & (0xffffffff as u64)) as u32), ((((x193 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32));
  let mut x203: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x203, (((x198 >> 31) as fiat_p256_u1) & ((((((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x192 as u64) + (x192 as u64)) & (0xffffffff as u64)) as u32), ((((x194 as u64) + (x197 as u64)) & (0xffffffff as u64)) as u32));
  let mut x204: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x204, (((x198 >> 31) as fiat_p256_u1) & ((((((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x193 as u64) + (x196 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x191 as u64) + (x191 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x205: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x205, (((x198 >> 31) as fiat_p256_u1) & ((((((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x190 as u64) + (x195 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x194 as u64) + (x197 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x192 as u64) + (x192 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x206: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x206, ((x201 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x200);
  let mut x207: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x207, ((x201 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x202);
  let mut x208: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x208, ((x201 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x203);
  let x209: u32 = (((((!((((0x1 as u64) + (x199 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x210: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x210, (((x209 >> 31) as fiat_p256_u1) & ((((((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((0x1 as u64) + (x199 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x199 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x211: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x211, (((x209 >> 31) as fiat_p256_u1) & ((((((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), x200, ((((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x212: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x212, (((x209 >> 31) as fiat_p256_u1) & ((((((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x200) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x213: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x213, (((x209 >> 31) as fiat_p256_u1) & ((((((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x202 as u64) + (x202 as u64)) & (0xffffffff as u64)) as u32), ((((x204 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32));
  let mut x214: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x214, (((x209 >> 31) as fiat_p256_u1) & ((((((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x203 as u64) + (x203 as u64)) & (0xffffffff as u64)) as u32), ((((x205 as u64) + (x208 as u64)) & (0xffffffff as u64)) as u32));
  let mut x215: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x215, (((x209 >> 31) as fiat_p256_u1) & ((((((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x204 as u64) + (x207 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x202 as u64) + (x202 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x216: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x216, (((x209 >> 31) as fiat_p256_u1) & ((((((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x201 as u64) + (x206 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x205 as u64) + (x208 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x203 as u64) + (x203 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x217: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x217, ((x212 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x211);
  let mut x218: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x218, ((x212 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x213);
  let mut x219: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x219, ((x212 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x214);
  let x220: u32 = (((((!((((0x1 as u64) + (x210 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x221: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x221, (((x220 >> 31) as fiat_p256_u1) & ((((((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((0x1 as u64) + (x210 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x210 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x222: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x222, (((x220 >> 31) as fiat_p256_u1) & ((((((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), x211, ((((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x223: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x223, (((x220 >> 31) as fiat_p256_u1) & ((((((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x211) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x224: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x224, (((x220 >> 31) as fiat_p256_u1) & ((((((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x213 as u64) + (x213 as u64)) & (0xffffffff as u64)) as u32), ((((x215 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32));
  let mut x225: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x225, (((x220 >> 31) as fiat_p256_u1) & ((((((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x214 as u64) + (x214 as u64)) & (0xffffffff as u64)) as u32), ((((x216 as u64) + (x219 as u64)) & (0xffffffff as u64)) as u32));
  let mut x226: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x226, (((x220 >> 31) as fiat_p256_u1) & ((((((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x215 as u64) + (x218 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x213 as u64) + (x213 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x227: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x227, (((x220 >> 31) as fiat_p256_u1) & ((((((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x212 as u64) + (x217 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x216 as u64) + (x219 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x214 as u64) + (x214 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x228: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x228, ((x223 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x222);
  let mut x229: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x229, ((x223 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x224);
  let mut x230: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x230, ((x223 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x225);
  let x231: u32 = (((((!((((0x1 as u64) + (x221 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x232: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x232, (((x231 >> 31) as fiat_p256_u1) & ((((((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((0x1 as u64) + (x221 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x221 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x233: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x233, (((x231 >> 31) as fiat_p256_u1) & ((((((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), x222, ((((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x234: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x234, (((x231 >> 31) as fiat_p256_u1) & ((((((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x222) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x235: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x235, (((x231 >> 31) as fiat_p256_u1) & ((((((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x224 as u64) + (x224 as u64)) & (0xffffffff as u64)) as u32), ((((x226 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32));
  let mut x236: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x236, (((x231 >> 31) as fiat_p256_u1) & ((((((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x225 as u64) + (x225 as u64)) & (0xffffffff as u64)) as u32), ((((x227 as u64) + (x230 as u64)) & (0xffffffff as u64)) as u32));
  let mut x237: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x237, (((x231 >> 31) as fiat_p256_u1) & ((((((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x226 as u64) + (x229 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x224 as u64) + (x224 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x238: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x238, (((x231 >> 31) as fiat_p256_u1) & ((((((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x223 as u64) + (x228 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x227 as u64) + (x230 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x225 as u64) + (x225 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x239: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x239, ((x234 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x233);
  let mut x240: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x240, ((x234 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x235);
  let mut x241: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x241, ((x234 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x236);
  let x242: u32 = (((((!((((0x1 as u64) + (x232 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x243: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x243, (((x242 >> 31) as fiat_p256_u1) & ((((((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((0x1 as u64) + (x232 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x232 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x244: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x244, (((x242 >> 31) as fiat_p256_u1) & ((((((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), x233, ((((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x245: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x245, (((x242 >> 31) as fiat_p256_u1) & ((((((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x233) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x246: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x246, (((x242 >> 31) as fiat_p256_u1) & ((((((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x235 as u64) + (x235 as u64)) & (0xffffffff as u64)) as u32), ((((x237 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32));
  let mut x247: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x247, (((x242 >> 31) as fiat_p256_u1) & ((((((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x236 as u64) + (x236 as u64)) & (0xffffffff as u64)) as u32), ((((x238 as u64) + (x241 as u64)) & (0xffffffff as u64)) as u32));
  let mut x248: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x248, (((x242 >> 31) as fiat_p256_u1) & ((((((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x237 as u64) + (x240 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x235 as u64) + (x235 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x249: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x249, (((x242 >> 31) as fiat_p256_u1) & ((((((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x234 as u64) + (x239 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x238 as u64) + (x241 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x236 as u64) + (x236 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x250: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x250, ((x245 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x244);
  let mut x251: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x251, ((x245 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x246);
  let mut x252: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x252, ((x245 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x247);
  let x253: u32 = (((((!((((0x1 as u64) + (x243 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x254: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x254, (((x253 >> 31) as fiat_p256_u1) & ((((((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((0x1 as u64) + (x243 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x243 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x255: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x255, (((x253 >> 31) as fiat_p256_u1) & ((((((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), x244, ((((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x256: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x256, (((x253 >> 31) as fiat_p256_u1) & ((((((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x244) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x257: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x257, (((x253 >> 31) as fiat_p256_u1) & ((((((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x246 as u64) + (x246 as u64)) & (0xffffffff as u64)) as u32), ((((x248 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32));
  let mut x258: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x258, (((x253 >> 31) as fiat_p256_u1) & ((((((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x247 as u64) + (x247 as u64)) & (0xffffffff as u64)) as u32), ((((x249 as u64) + (x252 as u64)) & (0xffffffff as u64)) as u32));
  let mut x259: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x259, (((x253 >> 31) as fiat_p256_u1) & ((((((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x248 as u64) + (x251 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x246 as u64) + (x246 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x260: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x260, (((x253 >> 31) as fiat_p256_u1) & ((((((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x245 as u64) + (x250 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x249 as u64) + (x252 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x247 as u64) + (x247 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x261: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x261, ((x256 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x255);
  let mut x262: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x262, ((x256 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x257);
  let mut x263: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x263, ((x256 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x258);
  let x264: u32 = (((((!((((0x1 as u64) + (x254 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x265: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x265, (((x264 >> 31) as fiat_p256_u1) & ((((((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((0x1 as u64) + (x254 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x254 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x266: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x266, (((x264 >> 31) as fiat_p256_u1) & ((((((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), x255, ((((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x267: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x267, (((x264 >> 31) as fiat_p256_u1) & ((((((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x255) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x268: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x268, (((x264 >> 31) as fiat_p256_u1) & ((((((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x257 as u64) + (x257 as u64)) & (0xffffffff as u64)) as u32), ((((x259 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32));
  let mut x269: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x269, (((x264 >> 31) as fiat_p256_u1) & ((((((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x258 as u64) + (x258 as u64)) & (0xffffffff as u64)) as u32), ((((x260 as u64) + (x263 as u64)) & (0xffffffff as u64)) as u32));
  let mut x270: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x270, (((x264 >> 31) as fiat_p256_u1) & ((((((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x259 as u64) + (x262 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x257 as u64) + (x257 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x271: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x271, (((x264 >> 31) as fiat_p256_u1) & ((((((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x256 as u64) + (x261 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x260 as u64) + (x263 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x258 as u64) + (x258 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x272: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x272, ((x267 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x266);
  let mut x273: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x273, ((x267 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x268);
  let mut x274: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x274, ((x267 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x269);
  let x275: u32 = (((((!((((0x1 as u64) + (x265 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x276: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x276, (((x275 >> 31) as fiat_p256_u1) & ((((((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((0x1 as u64) + (x265 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x265 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x277: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x277, (((x275 >> 31) as fiat_p256_u1) & ((((((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), x266, ((((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x278: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x278, (((x275 >> 31) as fiat_p256_u1) & ((((((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x266) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x279: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x279, (((x275 >> 31) as fiat_p256_u1) & ((((((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x268 as u64) + (x268 as u64)) & (0xffffffff as u64)) as u32), ((((x270 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32));
  let mut x280: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x280, (((x275 >> 31) as fiat_p256_u1) & ((((((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x269 as u64) + (x269 as u64)) & (0xffffffff as u64)) as u32), ((((x271 as u64) + (x274 as u64)) & (0xffffffff as u64)) as u32));
  let mut x281: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x281, (((x275 >> 31) as fiat_p256_u1) & ((((((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x270 as u64) + (x273 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x268 as u64) + (x268 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x282: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x282, (((x275 >> 31) as fiat_p256_u1) & ((((((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x267 as u64) + (x272 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x271 as u64) + (x274 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x269 as u64) + (x269 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x283: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x283, ((x278 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x277);
  let mut x284: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x284, ((x278 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x279);
  let mut x285: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x285, ((x278 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x280);
  let x286: u32 = (((((!((((0x1 as u64) + (x276 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x287: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x287, (((x286 >> 31) as fiat_p256_u1) & ((((((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((0x1 as u64) + (x276 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x276 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x288: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x288, (((x286 >> 31) as fiat_p256_u1) & ((((((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), x277, ((((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x289: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x289, (((x286 >> 31) as fiat_p256_u1) & ((((((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x277) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x290: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x290, (((x286 >> 31) as fiat_p256_u1) & ((((((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x279 as u64) + (x279 as u64)) & (0xffffffff as u64)) as u32), ((((x281 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32));
  let mut x291: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x291, (((x286 >> 31) as fiat_p256_u1) & ((((((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x280 as u64) + (x280 as u64)) & (0xffffffff as u64)) as u32), ((((x282 as u64) + (x285 as u64)) & (0xffffffff as u64)) as u32));
  let mut x292: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x292, (((x286 >> 31) as fiat_p256_u1) & ((((((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x281 as u64) + (x284 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x279 as u64) + (x279 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x293: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x293, (((x286 >> 31) as fiat_p256_u1) & ((((((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x278 as u64) + (x283 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x282 as u64) + (x285 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x280 as u64) + (x280 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x294: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x294, ((x289 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x288);
  let mut x295: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x295, ((x289 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x290);
  let mut x296: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x296, ((x289 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x291);
  let x297: u32 = (((((!((((0x1 as u64) + (x287 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x298: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x298, (((x297 >> 31) as fiat_p256_u1) & ((((((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((0x1 as u64) + (x287 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x287 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x299: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x299, (((x297 >> 31) as fiat_p256_u1) & ((((((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), x288, ((((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x300: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x300, (((x297 >> 31) as fiat_p256_u1) & ((((((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x288) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x301: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x301, (((x297 >> 31) as fiat_p256_u1) & ((((((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x290 as u64) + (x290 as u64)) & (0xffffffff as u64)) as u32), ((((x292 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32));
  let mut x302: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x302, (((x297 >> 31) as fiat_p256_u1) & ((((((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x291 as u64) + (x291 as u64)) & (0xffffffff as u64)) as u32), ((((x293 as u64) + (x296 as u64)) & (0xffffffff as u64)) as u32));
  let mut x303: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x303, (((x297 >> 31) as fiat_p256_u1) & ((((((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x292 as u64) + (x295 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x290 as u64) + (x290 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x304: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x304, (((x297 >> 31) as fiat_p256_u1) & ((((((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x289 as u64) + (x294 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x293 as u64) + (x296 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x291 as u64) + (x291 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x305: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x305, ((x300 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x299);
  let mut x306: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x306, ((x300 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x301);
  let mut x307: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x307, ((x300 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x302);
  let x308: u32 = (((((!((((0x1 as u64) + (x298 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x309: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x309, (((x308 >> 31) as fiat_p256_u1) & ((((((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((0x1 as u64) + (x298 as u64)) & (0xffffffff as u64)) as u32), (((((!((((0x1 as u64) + (x298 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x310: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x310, (((x308 >> 31) as fiat_p256_u1) & ((((((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), x299, ((((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) >> 1)));
  let mut x311: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x311, (((x308 >> 31) as fiat_p256_u1) & ((((((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x299) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x312: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x312, (((x308 >> 31) as fiat_p256_u1) & ((((((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x301 as u64) + (x301 as u64)) & (0xffffffff as u64)) as u32), ((((x303 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32));
  let mut x313: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x313, (((x308 >> 31) as fiat_p256_u1) & ((((((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x302 as u64) + (x302 as u64)) & (0xffffffff as u64)) as u32), ((((x304 as u64) + (x307 as u64)) & (0xffffffff as u64)) as u32));
  let mut x314: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x314, (((x308 >> 31) as fiat_p256_u1) & ((((((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x303 as u64) + (x306 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x301 as u64) + (x301 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x315: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x315, (((x308 >> 31) as fiat_p256_u1) & ((((((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x300 as u64) + (x305 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x304 as u64) + (x307 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x302 as u64) + (x302 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x316: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x316, ((x311 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x310);
  let mut x317: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x317, ((x311 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x312);
  let mut x318: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x318, ((x311 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x313);
  let x319: u32 = (((((!((((0x1 as u64) + (x309 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let mut x320: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x320, (((x319 >> 31) as fiat_p256_u1) & ((((((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) >> 1)), (((((!x310) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x321: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x321, (((x319 >> 31) as fiat_p256_u1) & ((((((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x312 as u64) + (x312 as u64)) & (0xffffffff as u64)) as u32), ((((x314 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32));
  let mut x322: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x322, (((x319 >> 31) as fiat_p256_u1) & ((((((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x313 as u64) + (x313 as u64)) & (0xffffffff as u64)) as u32), ((((x315 as u64) + (x318 as u64)) & (0xffffffff as u64)) as u32));
  let mut x323: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x323, (((x319 >> 31) as fiat_p256_u1) & ((((((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x314 as u64) + (x317 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x312 as u64) + (x312 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x324: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x324, (((x319 >> 31) as fiat_p256_u1) & ((((((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) & 0x80000000) | (((((x311 as u64) + (x316 as u64)) & (0xffffffff as u64)) as u32) >> 1)) & (0x1 as u32)) as fiat_p256_u1)), ((((x315 as u64) + (x318 as u64)) & (0xffffffff as u64)) as u32), (((((!((((x313 as u64) + (x313 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32));
  let mut x325: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x325, ((x320 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x321);
  let mut x326: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x326, ((x320 & (0x1 as u32)) as fiat_p256_u1), (0x0 as u32), x322);
  let mut x327: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x327, (((arg1[8]) >> 31) as fiat_p256_u1), (0x0 as u32), 0xffffffff);
  let mut x328: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x328, ((((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32) >> 31) as fiat_p256_u1), (0x0 as u32), 0xffffffff);
  let mut x329: u32 = 0;
  let mut x330: u32 = 0;
  fiat_p256_mulx_u32(&mut x329, &mut x330, x328, (arg1[0]));
  let mut x331: u32 = 0;
  let mut x332: u32 = 0;
  fiat_p256_mulx_u32(&mut x331, &mut x332, x328, (arg1[1]));
  let mut x333: u32 = 0;
  let mut x334: u32 = 0;
  fiat_p256_mulx_u32(&mut x333, &mut x334, x328, (arg1[0]));
  let mut x335: u32 = 0;
  let mut x336: u32 = 0;
  fiat_p256_mulx_u32(&mut x335, &mut x336, x328, (arg1[2]));
  let mut x337: u32 = 0;
  let mut x338: u32 = 0;
  fiat_p256_mulx_u32(&mut x337, &mut x338, x328, (arg1[1]));
  let mut x339: u32 = 0;
  let mut x340: u32 = 0;
  fiat_p256_mulx_u32(&mut x339, &mut x340, x328, (arg1[0]));
  let mut x341: u32 = 0;
  let mut x342: u32 = 0;
  fiat_p256_mulx_u32(&mut x341, &mut x342, x328, (arg1[3]));
  let mut x343: u32 = 0;
  let mut x344: u32 = 0;
  fiat_p256_mulx_u32(&mut x343, &mut x344, x328, (arg1[2]));
  let mut x345: u32 = 0;
  let mut x346: u32 = 0;
  fiat_p256_mulx_u32(&mut x345, &mut x346, x328, (arg1[1]));
  let mut x347: u32 = 0;
  let mut x348: u32 = 0;
  fiat_p256_mulx_u32(&mut x347, &mut x348, x328, (arg1[0]));
  let mut x349: u32 = 0;
  let mut x350: u32 = 0;
  fiat_p256_mulx_u32(&mut x349, &mut x350, x328, (arg1[4]));
  let mut x351: u32 = 0;
  let mut x352: u32 = 0;
  fiat_p256_mulx_u32(&mut x351, &mut x352, x328, (arg1[3]));
  let mut x353: u32 = 0;
  let mut x354: u32 = 0;
  fiat_p256_mulx_u32(&mut x353, &mut x354, x328, (arg1[2]));
  let mut x355: u32 = 0;
  let mut x356: u32 = 0;
  fiat_p256_mulx_u32(&mut x355, &mut x356, x328, (arg1[1]));
  let mut x357: u32 = 0;
  let mut x358: u32 = 0;
  fiat_p256_mulx_u32(&mut x357, &mut x358, x328, (arg1[0]));
  let mut x359: u32 = 0;
  let mut x360: u32 = 0;
  fiat_p256_mulx_u32(&mut x359, &mut x360, x328, (arg1[5]));
  let mut x361: u32 = 0;
  let mut x362: u32 = 0;
  fiat_p256_mulx_u32(&mut x361, &mut x362, x328, (arg1[4]));
  let mut x363: u32 = 0;
  let mut x364: u32 = 0;
  fiat_p256_mulx_u32(&mut x363, &mut x364, x328, (arg1[3]));
  let mut x365: u32 = 0;
  let mut x366: u32 = 0;
  fiat_p256_mulx_u32(&mut x365, &mut x366, x328, (arg1[2]));
  let mut x367: u32 = 0;
  let mut x368: u32 = 0;
  fiat_p256_mulx_u32(&mut x367, &mut x368, x328, (arg1[1]));
  let mut x369: u32 = 0;
  let mut x370: u32 = 0;
  fiat_p256_mulx_u32(&mut x369, &mut x370, x328, (arg1[0]));
  let mut x371: u32 = 0;
  let mut x372: u32 = 0;
  fiat_p256_mulx_u32(&mut x371, &mut x372, x328, (arg1[6]));
  let mut x373: u32 = 0;
  let mut x374: u32 = 0;
  fiat_p256_mulx_u32(&mut x373, &mut x374, x328, (arg1[5]));
  let mut x375: u32 = 0;
  let mut x376: u32 = 0;
  fiat_p256_mulx_u32(&mut x375, &mut x376, x328, (arg1[4]));
  let mut x377: u32 = 0;
  let mut x378: u32 = 0;
  fiat_p256_mulx_u32(&mut x377, &mut x378, x328, (arg1[3]));
  let mut x379: u32 = 0;
  let mut x380: u32 = 0;
  fiat_p256_mulx_u32(&mut x379, &mut x380, x328, (arg1[2]));
  let mut x381: u32 = 0;
  let mut x382: u32 = 0;
  fiat_p256_mulx_u32(&mut x381, &mut x382, x328, (arg1[1]));
  let mut x383: u32 = 0;
  let mut x384: u32 = 0;
  fiat_p256_mulx_u32(&mut x383, &mut x384, x328, (arg1[0]));
  let mut x385: u32 = 0;
  let mut x386: u32 = 0;
  fiat_p256_mulx_u32(&mut x385, &mut x386, x328, (arg1[7]));
  let mut x387: u32 = 0;
  let mut x388: u32 = 0;
  fiat_p256_mulx_u32(&mut x387, &mut x388, x328, (arg1[6]));
  let mut x389: u32 = 0;
  let mut x390: u32 = 0;
  fiat_p256_mulx_u32(&mut x389, &mut x390, x328, (arg1[5]));
  let mut x391: u32 = 0;
  let mut x392: u32 = 0;
  fiat_p256_mulx_u32(&mut x391, &mut x392, x328, (arg1[4]));
  let mut x393: u32 = 0;
  let mut x394: u32 = 0;
  fiat_p256_mulx_u32(&mut x393, &mut x394, x328, (arg1[3]));
  let mut x395: u32 = 0;
  let mut x396: u32 = 0;
  fiat_p256_mulx_u32(&mut x395, &mut x396, x328, (arg1[2]));
  let mut x397: u32 = 0;
  let mut x398: u32 = 0;
  fiat_p256_mulx_u32(&mut x397, &mut x398, x328, (arg1[1]));
  let mut x399: u32 = 0;
  let mut x400: u32 = 0;
  fiat_p256_mulx_u32(&mut x399, &mut x400, x328, (arg1[0]));
  let mut x401: u32 = 0;
  let mut x402: u32 = 0;
  fiat_p256_mulx_u32(&mut x401, &mut x402, x328, (arg1[8]));
  let mut x403: u32 = 0;
  let mut x404: u32 = 0;
  fiat_p256_mulx_u32(&mut x403, &mut x404, x328, (arg1[7]));
  let mut x405: u32 = 0;
  let mut x406: u32 = 0;
  fiat_p256_mulx_u32(&mut x405, &mut x406, x328, (arg1[6]));
  let mut x407: u32 = 0;
  let mut x408: u32 = 0;
  fiat_p256_mulx_u32(&mut x407, &mut x408, x328, (arg1[5]));
  let mut x409: u32 = 0;
  let mut x410: u32 = 0;
  fiat_p256_mulx_u32(&mut x409, &mut x410, x328, (arg1[4]));
  let mut x411: u32 = 0;
  let mut x412: u32 = 0;
  fiat_p256_mulx_u32(&mut x411, &mut x412, x328, (arg1[3]));
  let mut x413: u32 = 0;
  let mut x414: u32 = 0;
  fiat_p256_mulx_u32(&mut x413, &mut x414, x328, (arg1[2]));
  let mut x415: u32 = 0;
  let mut x416: u32 = 0;
  fiat_p256_mulx_u32(&mut x415, &mut x416, x328, (arg1[1]));
  let mut x417: u32 = 0;
  let mut x418: u32 = 0;
  fiat_p256_mulx_u32(&mut x417, &mut x418, x328, (arg1[0]));
  let mut x419: u32 = 0;
  let mut x420: u32 = 0;
  fiat_p256_mulx_u32(&mut x419, &mut x420, ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32), x327);
  let mut x421: u32 = 0;
  let mut x422: u32 = 0;
  fiat_p256_mulx_u32(&mut x421, &mut x422, ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32), (arg1[8]));
  let mut x423: u32 = 0;
  let mut x424: u32 = 0;
  fiat_p256_mulx_u32(&mut x423, &mut x424, ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32), (arg1[7]));
  let mut x425: u32 = 0;
  let mut x426: u32 = 0;
  fiat_p256_mulx_u32(&mut x425, &mut x426, ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32), (arg1[6]));
  let mut x427: u32 = 0;
  let mut x428: u32 = 0;
  fiat_p256_mulx_u32(&mut x427, &mut x428, ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32), (arg1[5]));
  let mut x429: u32 = 0;
  let mut x430: u32 = 0;
  fiat_p256_mulx_u32(&mut x429, &mut x430, ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32), (arg1[4]));
  let mut x431: u32 = 0;
  let mut x432: u32 = 0;
  fiat_p256_mulx_u32(&mut x431, &mut x432, ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32), (arg1[3]));
  let mut x433: u32 = 0;
  let mut x434: u32 = 0;
  fiat_p256_mulx_u32(&mut x433, &mut x434, ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32), (arg1[2]));
  let mut x435: u32 = 0;
  let mut x436: u32 = 0;
  fiat_p256_mulx_u32(&mut x435, &mut x436, ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32), (arg1[1]));
  let mut x437: u32 = 0;
  let mut x438: u32 = 0;
  fiat_p256_mulx_u32(&mut x437, &mut x438, ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32), (arg1[0]));
  let mut x439: u32 = 0;
  let mut x440: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x439, &mut x440, 0x0, x422, x329);
  let mut x441: u32 = 0;
  let mut x442: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x441, &mut x442, 0x0, x439, x331);
  let mut x443: u32 = 0;
  let mut x444: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x443, &mut x444, 0x0, x424, x333);
  let mut x445: u32 = 0;
  let mut x446: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x445, &mut x446, x444, x441, x334);
  let mut x447: u32 = 0;
  let mut x448: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x447, &mut x448, 0x0, x443, x337);
  let mut x449: u32 = 0;
  let mut x450: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x449, &mut x450, x448, x445, x335);
  let mut x451: u32 = 0;
  let mut x452: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x451, &mut x452, 0x0, x426, x339);
  let mut x453: u32 = 0;
  let mut x454: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x453, &mut x454, x452, x447, x340);
  let mut x455: u32 = 0;
  let mut x456: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x455, &mut x456, x454, x449, x338);
  let mut x457: u32 = 0;
  let mut x458: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x457, &mut x458, 0x0, x451, x345);
  let mut x459: u32 = 0;
  let mut x460: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x459, &mut x460, x458, x453, x343);
  let mut x461: u32 = 0;
  let mut x462: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x461, &mut x462, x460, x455, x341);
  let mut x463: u32 = 0;
  let mut x464: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x463, &mut x464, 0x0, x428, x347);
  let mut x465: u32 = 0;
  let mut x466: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x465, &mut x466, x464, x457, x348);
  let mut x467: u32 = 0;
  let mut x468: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x467, &mut x468, x466, x459, x346);
  let mut x469: u32 = 0;
  let mut x470: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x469, &mut x470, x468, x461, x344);
  let mut x471: u32 = 0;
  let mut x472: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x471, &mut x472, 0x0, x463, x355);
  let mut x473: u32 = 0;
  let mut x474: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x473, &mut x474, x472, x465, x353);
  let mut x475: u32 = 0;
  let mut x476: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x475, &mut x476, x474, x467, x351);
  let mut x477: u32 = 0;
  let mut x478: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x477, &mut x478, x476, x469, x349);
  let mut x479: u32 = 0;
  let mut x480: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x479, &mut x480, 0x0, x430, x357);
  let mut x481: u32 = 0;
  let mut x482: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x481, &mut x482, x480, x471, x358);
  let mut x483: u32 = 0;
  let mut x484: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x483, &mut x484, x482, x473, x356);
  let mut x485: u32 = 0;
  let mut x486: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x485, &mut x486, x484, x475, x354);
  let mut x487: u32 = 0;
  let mut x488: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x487, &mut x488, x486, x477, x352);
  let mut x489: u32 = 0;
  let mut x490: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x489, &mut x490, 0x0, x479, x367);
  let mut x491: u32 = 0;
  let mut x492: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x491, &mut x492, x490, x481, x365);
  let mut x493: u32 = 0;
  let mut x494: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x493, &mut x494, x492, x483, x363);
  let mut x495: u32 = 0;
  let mut x496: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x495, &mut x496, x494, x485, x361);
  let mut x497: u32 = 0;
  let mut x498: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x497, &mut x498, x496, x487, x359);
  let mut x499: u32 = 0;
  let mut x500: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x499, &mut x500, 0x0, x432, x369);
  let mut x501: u32 = 0;
  let mut x502: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x501, &mut x502, x500, x489, x370);
  let mut x503: u32 = 0;
  let mut x504: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x503, &mut x504, x502, x491, x368);
  let mut x505: u32 = 0;
  let mut x506: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x505, &mut x506, x504, x493, x366);
  let mut x507: u32 = 0;
  let mut x508: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x507, &mut x508, x506, x495, x364);
  let mut x509: u32 = 0;
  let mut x510: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x509, &mut x510, x508, x497, x362);
  let mut x511: u32 = 0;
  let mut x512: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x511, &mut x512, 0x0, x499, x381);
  let mut x513: u32 = 0;
  let mut x514: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x513, &mut x514, x512, x501, x379);
  let mut x515: u32 = 0;
  let mut x516: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x515, &mut x516, x514, x503, x377);
  let mut x517: u32 = 0;
  let mut x518: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x517, &mut x518, x516, x505, x375);
  let mut x519: u32 = 0;
  let mut x520: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x519, &mut x520, x518, x507, x373);
  let mut x521: u32 = 0;
  let mut x522: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x521, &mut x522, x520, x509, x371);
  let mut x523: u32 = 0;
  let mut x524: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x523, &mut x524, 0x0, x434, x383);
  let mut x525: u32 = 0;
  let mut x526: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x525, &mut x526, x524, x511, x384);
  let mut x527: u32 = 0;
  let mut x528: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x527, &mut x528, x526, x513, x382);
  let mut x529: u32 = 0;
  let mut x530: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x529, &mut x530, x528, x515, x380);
  let mut x531: u32 = 0;
  let mut x532: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x531, &mut x532, x530, x517, x378);
  let mut x533: u32 = 0;
  let mut x534: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x533, &mut x534, x532, x519, x376);
  let mut x535: u32 = 0;
  let mut x536: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x535, &mut x536, x534, x521, x374);
  let mut x537: u32 = 0;
  let mut x538: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x537, &mut x538, 0x0, x523, x397);
  let mut x539: u32 = 0;
  let mut x540: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x539, &mut x540, x538, x525, x395);
  let mut x541: u32 = 0;
  let mut x542: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x541, &mut x542, x540, x527, x393);
  let mut x543: u32 = 0;
  let mut x544: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x543, &mut x544, x542, x529, x391);
  let mut x545: u32 = 0;
  let mut x546: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x545, &mut x546, x544, x531, x389);
  let mut x547: u32 = 0;
  let mut x548: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x547, &mut x548, x546, x533, x387);
  let mut x549: u32 = 0;
  let mut x550: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x549, &mut x550, x548, x535, x385);
  let mut x551: u32 = 0;
  let mut x552: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x551, &mut x552, 0x0, x436, x399);
  let mut x553: u32 = 0;
  let mut x554: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x553, &mut x554, x552, x537, x400);
  let mut x555: u32 = 0;
  let mut x556: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x555, &mut x556, x554, x539, x398);
  let mut x557: u32 = 0;
  let mut x558: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x557, &mut x558, x556, x541, x396);
  let mut x559: u32 = 0;
  let mut x560: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x559, &mut x560, x558, x543, x394);
  let mut x561: u32 = 0;
  let mut x562: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x561, &mut x562, x560, x545, x392);
  let mut x563: u32 = 0;
  let mut x564: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x563, &mut x564, x562, x547, x390);
  let mut x565: u32 = 0;
  let mut x566: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x565, &mut x566, x564, x549, x388);
  let mut x567: u32 = 0;
  let mut x568: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x567, &mut x568, 0x0, x551, x415);
  let mut x569: u32 = 0;
  let mut x570: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x569, &mut x570, x568, x553, x413);
  let mut x571: u32 = 0;
  let mut x572: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x571, &mut x572, x570, x555, x411);
  let mut x573: u32 = 0;
  let mut x574: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x573, &mut x574, x572, x557, x409);
  let mut x575: u32 = 0;
  let mut x576: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x575, &mut x576, x574, x559, x407);
  let mut x577: u32 = 0;
  let mut x578: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x577, &mut x578, x576, x561, x405);
  let mut x579: u32 = 0;
  let mut x580: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x579, &mut x580, x578, x563, x403);
  let mut x581: u32 = 0;
  let mut x582: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x581, &mut x582, x580, x565, x401);
  let mut x583: u32 = 0;
  let mut x584: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x583, &mut x584, 0x0, x438, x417);
  let mut x585: u32 = 0;
  let mut x586: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x585, &mut x586, x584, x567, x418);
  let mut x587: u32 = 0;
  let mut x588: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x587, &mut x588, x586, x569, x416);
  let mut x589: u32 = 0;
  let mut x590: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x589, &mut x590, x588, x571, x414);
  let mut x591: u32 = 0;
  let mut x592: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x591, &mut x592, x590, x573, x412);
  let mut x593: u32 = 0;
  let mut x594: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x593, &mut x594, x592, x575, x410);
  let mut x595: u32 = 0;
  let mut x596: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x595, &mut x596, x594, x577, x408);
  let mut x597: u32 = 0;
  let mut x598: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x597, &mut x598, x596, x579, x406);
  let mut x599: u32 = 0;
  let mut x600: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x599, &mut x600, x598, x581, x404);
  let mut x601: u32 = 0;
  let mut x602: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x601, &mut x602, 0x0, x583, x435);
  let mut x603: u32 = 0;
  let mut x604: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x603, &mut x604, x602, x585, x433);
  let mut x605: u32 = 0;
  let mut x606: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x605, &mut x606, x604, x587, x431);
  let mut x607: u32 = 0;
  let mut x608: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x607, &mut x608, x606, x589, x429);
  let mut x609: u32 = 0;
  let mut x610: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x609, &mut x610, x608, x591, x427);
  let mut x611: u32 = 0;
  let mut x612: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x611, &mut x612, x610, x593, x425);
  let mut x613: u32 = 0;
  let mut x614: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x613, &mut x614, x612, x595, x423);
  let mut x615: u32 = 0;
  let mut x616: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x615, &mut x616, x614, x597, x421);
  let mut x617: u32 = 0;
  let mut x618: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x617, &mut x618, x616, x599, x419);
  let mut x619: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x619, (((arg2[8]) >> 31) as fiat_p256_u1), (0x0 as u32), 0xffffffff);
  let mut x620: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x620, ((((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32) >> 31) as fiat_p256_u1), (0x0 as u32), 0xffffffff);
  let mut x621: u32 = 0;
  let mut x622: u32 = 0;
  fiat_p256_mulx_u32(&mut x621, &mut x622, x620, (arg2[0]));
  let mut x623: u32 = 0;
  let mut x624: u32 = 0;
  fiat_p256_mulx_u32(&mut x623, &mut x624, x620, (arg2[1]));
  let mut x625: u32 = 0;
  let mut x626: u32 = 0;
  fiat_p256_mulx_u32(&mut x625, &mut x626, x620, (arg2[0]));
  let mut x627: u32 = 0;
  let mut x628: u32 = 0;
  fiat_p256_mulx_u32(&mut x627, &mut x628, x620, (arg2[2]));
  let mut x629: u32 = 0;
  let mut x630: u32 = 0;
  fiat_p256_mulx_u32(&mut x629, &mut x630, x620, (arg2[1]));
  let mut x631: u32 = 0;
  let mut x632: u32 = 0;
  fiat_p256_mulx_u32(&mut x631, &mut x632, x620, (arg2[0]));
  let mut x633: u32 = 0;
  let mut x634: u32 = 0;
  fiat_p256_mulx_u32(&mut x633, &mut x634, x620, (arg2[3]));
  let mut x635: u32 = 0;
  let mut x636: u32 = 0;
  fiat_p256_mulx_u32(&mut x635, &mut x636, x620, (arg2[2]));
  let mut x637: u32 = 0;
  let mut x638: u32 = 0;
  fiat_p256_mulx_u32(&mut x637, &mut x638, x620, (arg2[1]));
  let mut x639: u32 = 0;
  let mut x640: u32 = 0;
  fiat_p256_mulx_u32(&mut x639, &mut x640, x620, (arg2[0]));
  let mut x641: u32 = 0;
  let mut x642: u32 = 0;
  fiat_p256_mulx_u32(&mut x641, &mut x642, x620, (arg2[4]));
  let mut x643: u32 = 0;
  let mut x644: u32 = 0;
  fiat_p256_mulx_u32(&mut x643, &mut x644, x620, (arg2[3]));
  let mut x645: u32 = 0;
  let mut x646: u32 = 0;
  fiat_p256_mulx_u32(&mut x645, &mut x646, x620, (arg2[2]));
  let mut x647: u32 = 0;
  let mut x648: u32 = 0;
  fiat_p256_mulx_u32(&mut x647, &mut x648, x620, (arg2[1]));
  let mut x649: u32 = 0;
  let mut x650: u32 = 0;
  fiat_p256_mulx_u32(&mut x649, &mut x650, x620, (arg2[0]));
  let mut x651: u32 = 0;
  let mut x652: u32 = 0;
  fiat_p256_mulx_u32(&mut x651, &mut x652, x620, (arg2[5]));
  let mut x653: u32 = 0;
  let mut x654: u32 = 0;
  fiat_p256_mulx_u32(&mut x653, &mut x654, x620, (arg2[4]));
  let mut x655: u32 = 0;
  let mut x656: u32 = 0;
  fiat_p256_mulx_u32(&mut x655, &mut x656, x620, (arg2[3]));
  let mut x657: u32 = 0;
  let mut x658: u32 = 0;
  fiat_p256_mulx_u32(&mut x657, &mut x658, x620, (arg2[2]));
  let mut x659: u32 = 0;
  let mut x660: u32 = 0;
  fiat_p256_mulx_u32(&mut x659, &mut x660, x620, (arg2[1]));
  let mut x661: u32 = 0;
  let mut x662: u32 = 0;
  fiat_p256_mulx_u32(&mut x661, &mut x662, x620, (arg2[0]));
  let mut x663: u32 = 0;
  let mut x664: u32 = 0;
  fiat_p256_mulx_u32(&mut x663, &mut x664, x620, (arg2[6]));
  let mut x665: u32 = 0;
  let mut x666: u32 = 0;
  fiat_p256_mulx_u32(&mut x665, &mut x666, x620, (arg2[5]));
  let mut x667: u32 = 0;
  let mut x668: u32 = 0;
  fiat_p256_mulx_u32(&mut x667, &mut x668, x620, (arg2[4]));
  let mut x669: u32 = 0;
  let mut x670: u32 = 0;
  fiat_p256_mulx_u32(&mut x669, &mut x670, x620, (arg2[3]));
  let mut x671: u32 = 0;
  let mut x672: u32 = 0;
  fiat_p256_mulx_u32(&mut x671, &mut x672, x620, (arg2[2]));
  let mut x673: u32 = 0;
  let mut x674: u32 = 0;
  fiat_p256_mulx_u32(&mut x673, &mut x674, x620, (arg2[1]));
  let mut x675: u32 = 0;
  let mut x676: u32 = 0;
  fiat_p256_mulx_u32(&mut x675, &mut x676, x620, (arg2[0]));
  let mut x677: u32 = 0;
  let mut x678: u32 = 0;
  fiat_p256_mulx_u32(&mut x677, &mut x678, x620, (arg2[7]));
  let mut x679: u32 = 0;
  let mut x680: u32 = 0;
  fiat_p256_mulx_u32(&mut x679, &mut x680, x620, (arg2[6]));
  let mut x681: u32 = 0;
  let mut x682: u32 = 0;
  fiat_p256_mulx_u32(&mut x681, &mut x682, x620, (arg2[5]));
  let mut x683: u32 = 0;
  let mut x684: u32 = 0;
  fiat_p256_mulx_u32(&mut x683, &mut x684, x620, (arg2[4]));
  let mut x685: u32 = 0;
  let mut x686: u32 = 0;
  fiat_p256_mulx_u32(&mut x685, &mut x686, x620, (arg2[3]));
  let mut x687: u32 = 0;
  let mut x688: u32 = 0;
  fiat_p256_mulx_u32(&mut x687, &mut x688, x620, (arg2[2]));
  let mut x689: u32 = 0;
  let mut x690: u32 = 0;
  fiat_p256_mulx_u32(&mut x689, &mut x690, x620, (arg2[1]));
  let mut x691: u32 = 0;
  let mut x692: u32 = 0;
  fiat_p256_mulx_u32(&mut x691, &mut x692, x620, (arg2[0]));
  let mut x693: u32 = 0;
  let mut x694: u32 = 0;
  fiat_p256_mulx_u32(&mut x693, &mut x694, x620, (arg2[8]));
  let mut x695: u32 = 0;
  let mut x696: u32 = 0;
  fiat_p256_mulx_u32(&mut x695, &mut x696, x620, (arg2[7]));
  let mut x697: u32 = 0;
  let mut x698: u32 = 0;
  fiat_p256_mulx_u32(&mut x697, &mut x698, x620, (arg2[6]));
  let mut x699: u32 = 0;
  let mut x700: u32 = 0;
  fiat_p256_mulx_u32(&mut x699, &mut x700, x620, (arg2[5]));
  let mut x701: u32 = 0;
  let mut x702: u32 = 0;
  fiat_p256_mulx_u32(&mut x701, &mut x702, x620, (arg2[4]));
  let mut x703: u32 = 0;
  let mut x704: u32 = 0;
  fiat_p256_mulx_u32(&mut x703, &mut x704, x620, (arg2[3]));
  let mut x705: u32 = 0;
  let mut x706: u32 = 0;
  fiat_p256_mulx_u32(&mut x705, &mut x706, x620, (arg2[2]));
  let mut x707: u32 = 0;
  let mut x708: u32 = 0;
  fiat_p256_mulx_u32(&mut x707, &mut x708, x620, (arg2[1]));
  let mut x709: u32 = 0;
  let mut x710: u32 = 0;
  fiat_p256_mulx_u32(&mut x709, &mut x710, x620, (arg2[0]));
  let mut x711: u32 = 0;
  let mut x712: u32 = 0;
  fiat_p256_mulx_u32(&mut x711, &mut x712, ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32), x619);
  let mut x713: u32 = 0;
  let mut x714: u32 = 0;
  fiat_p256_mulx_u32(&mut x713, &mut x714, ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32), (arg2[8]));
  let mut x715: u32 = 0;
  let mut x716: u32 = 0;
  fiat_p256_mulx_u32(&mut x715, &mut x716, ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32), (arg2[7]));
  let mut x717: u32 = 0;
  let mut x718: u32 = 0;
  fiat_p256_mulx_u32(&mut x717, &mut x718, ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32), (arg2[6]));
  let mut x719: u32 = 0;
  let mut x720: u32 = 0;
  fiat_p256_mulx_u32(&mut x719, &mut x720, ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32), (arg2[5]));
  let mut x721: u32 = 0;
  let mut x722: u32 = 0;
  fiat_p256_mulx_u32(&mut x721, &mut x722, ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32), (arg2[4]));
  let mut x723: u32 = 0;
  let mut x724: u32 = 0;
  fiat_p256_mulx_u32(&mut x723, &mut x724, ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32), (arg2[3]));
  let mut x725: u32 = 0;
  let mut x726: u32 = 0;
  fiat_p256_mulx_u32(&mut x725, &mut x726, ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32), (arg2[2]));
  let mut x727: u32 = 0;
  let mut x728: u32 = 0;
  fiat_p256_mulx_u32(&mut x727, &mut x728, ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32), (arg2[1]));
  let mut x729: u32 = 0;
  let mut x730: u32 = 0;
  fiat_p256_mulx_u32(&mut x729, &mut x730, ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32), (arg2[0]));
  let mut x731: u32 = 0;
  let mut x732: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x731, &mut x732, 0x0, x714, x621);
  let mut x733: u32 = 0;
  let mut x734: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x733, &mut x734, 0x0, x731, x623);
  let mut x735: u32 = 0;
  let mut x736: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x735, &mut x736, 0x0, x716, x625);
  let mut x737: u32 = 0;
  let mut x738: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x737, &mut x738, x736, x733, x626);
  let mut x739: u32 = 0;
  let mut x740: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x739, &mut x740, 0x0, x735, x629);
  let mut x741: u32 = 0;
  let mut x742: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x741, &mut x742, x740, x737, x627);
  let mut x743: u32 = 0;
  let mut x744: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x743, &mut x744, 0x0, x718, x631);
  let mut x745: u32 = 0;
  let mut x746: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x745, &mut x746, x744, x739, x632);
  let mut x747: u32 = 0;
  let mut x748: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x747, &mut x748, x746, x741, x630);
  let mut x749: u32 = 0;
  let mut x750: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x749, &mut x750, 0x0, x743, x637);
  let mut x751: u32 = 0;
  let mut x752: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x751, &mut x752, x750, x745, x635);
  let mut x753: u32 = 0;
  let mut x754: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x753, &mut x754, x752, x747, x633);
  let mut x755: u32 = 0;
  let mut x756: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x755, &mut x756, 0x0, x720, x639);
  let mut x757: u32 = 0;
  let mut x758: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x757, &mut x758, x756, x749, x640);
  let mut x759: u32 = 0;
  let mut x760: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x759, &mut x760, x758, x751, x638);
  let mut x761: u32 = 0;
  let mut x762: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x761, &mut x762, x760, x753, x636);
  let mut x763: u32 = 0;
  let mut x764: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x763, &mut x764, 0x0, x755, x647);
  let mut x765: u32 = 0;
  let mut x766: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x765, &mut x766, x764, x757, x645);
  let mut x767: u32 = 0;
  let mut x768: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x767, &mut x768, x766, x759, x643);
  let mut x769: u32 = 0;
  let mut x770: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x769, &mut x770, x768, x761, x641);
  let mut x771: u32 = 0;
  let mut x772: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x771, &mut x772, 0x0, x722, x649);
  let mut x773: u32 = 0;
  let mut x774: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x773, &mut x774, x772, x763, x650);
  let mut x775: u32 = 0;
  let mut x776: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x775, &mut x776, x774, x765, x648);
  let mut x777: u32 = 0;
  let mut x778: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x777, &mut x778, x776, x767, x646);
  let mut x779: u32 = 0;
  let mut x780: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x779, &mut x780, x778, x769, x644);
  let mut x781: u32 = 0;
  let mut x782: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x781, &mut x782, 0x0, x771, x659);
  let mut x783: u32 = 0;
  let mut x784: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x783, &mut x784, x782, x773, x657);
  let mut x785: u32 = 0;
  let mut x786: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x785, &mut x786, x784, x775, x655);
  let mut x787: u32 = 0;
  let mut x788: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x787, &mut x788, x786, x777, x653);
  let mut x789: u32 = 0;
  let mut x790: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x789, &mut x790, x788, x779, x651);
  let mut x791: u32 = 0;
  let mut x792: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x791, &mut x792, 0x0, x724, x661);
  let mut x793: u32 = 0;
  let mut x794: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x793, &mut x794, x792, x781, x662);
  let mut x795: u32 = 0;
  let mut x796: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x795, &mut x796, x794, x783, x660);
  let mut x797: u32 = 0;
  let mut x798: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x797, &mut x798, x796, x785, x658);
  let mut x799: u32 = 0;
  let mut x800: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x799, &mut x800, x798, x787, x656);
  let mut x801: u32 = 0;
  let mut x802: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x801, &mut x802, x800, x789, x654);
  let mut x803: u32 = 0;
  let mut x804: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x803, &mut x804, 0x0, x791, x673);
  let mut x805: u32 = 0;
  let mut x806: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x805, &mut x806, x804, x793, x671);
  let mut x807: u32 = 0;
  let mut x808: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x807, &mut x808, x806, x795, x669);
  let mut x809: u32 = 0;
  let mut x810: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x809, &mut x810, x808, x797, x667);
  let mut x811: u32 = 0;
  let mut x812: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x811, &mut x812, x810, x799, x665);
  let mut x813: u32 = 0;
  let mut x814: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x813, &mut x814, x812, x801, x663);
  let mut x815: u32 = 0;
  let mut x816: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x815, &mut x816, 0x0, x726, x675);
  let mut x817: u32 = 0;
  let mut x818: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x817, &mut x818, x816, x803, x676);
  let mut x819: u32 = 0;
  let mut x820: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x819, &mut x820, x818, x805, x674);
  let mut x821: u32 = 0;
  let mut x822: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x821, &mut x822, x820, x807, x672);
  let mut x823: u32 = 0;
  let mut x824: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x823, &mut x824, x822, x809, x670);
  let mut x825: u32 = 0;
  let mut x826: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x825, &mut x826, x824, x811, x668);
  let mut x827: u32 = 0;
  let mut x828: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x827, &mut x828, x826, x813, x666);
  let mut x829: u32 = 0;
  let mut x830: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x829, &mut x830, 0x0, x815, x689);
  let mut x831: u32 = 0;
  let mut x832: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x831, &mut x832, x830, x817, x687);
  let mut x833: u32 = 0;
  let mut x834: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x833, &mut x834, x832, x819, x685);
  let mut x835: u32 = 0;
  let mut x836: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x835, &mut x836, x834, x821, x683);
  let mut x837: u32 = 0;
  let mut x838: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x837, &mut x838, x836, x823, x681);
  let mut x839: u32 = 0;
  let mut x840: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x839, &mut x840, x838, x825, x679);
  let mut x841: u32 = 0;
  let mut x842: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x841, &mut x842, x840, x827, x677);
  let mut x843: u32 = 0;
  let mut x844: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x843, &mut x844, 0x0, x728, x691);
  let mut x845: u32 = 0;
  let mut x846: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x845, &mut x846, x844, x829, x692);
  let mut x847: u32 = 0;
  let mut x848: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x847, &mut x848, x846, x831, x690);
  let mut x849: u32 = 0;
  let mut x850: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x849, &mut x850, x848, x833, x688);
  let mut x851: u32 = 0;
  let mut x852: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x851, &mut x852, x850, x835, x686);
  let mut x853: u32 = 0;
  let mut x854: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x853, &mut x854, x852, x837, x684);
  let mut x855: u32 = 0;
  let mut x856: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x855, &mut x856, x854, x839, x682);
  let mut x857: u32 = 0;
  let mut x858: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x857, &mut x858, x856, x841, x680);
  let mut x859: u32 = 0;
  let mut x860: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x859, &mut x860, 0x0, x843, x707);
  let mut x861: u32 = 0;
  let mut x862: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x861, &mut x862, x860, x845, x705);
  let mut x863: u32 = 0;
  let mut x864: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x863, &mut x864, x862, x847, x703);
  let mut x865: u32 = 0;
  let mut x866: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x865, &mut x866, x864, x849, x701);
  let mut x867: u32 = 0;
  let mut x868: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x867, &mut x868, x866, x851, x699);
  let mut x869: u32 = 0;
  let mut x870: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x869, &mut x870, x868, x853, x697);
  let mut x871: u32 = 0;
  let mut x872: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x871, &mut x872, x870, x855, x695);
  let mut x873: u32 = 0;
  let mut x874: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x873, &mut x874, x872, x857, x693);
  let mut x875: u32 = 0;
  let mut x876: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x875, &mut x876, 0x0, x730, x709);
  let mut x877: u32 = 0;
  let mut x878: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x877, &mut x878, x876, x859, x710);
  let mut x879: u32 = 0;
  let mut x880: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x879, &mut x880, x878, x861, x708);
  let mut x881: u32 = 0;
  let mut x882: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x881, &mut x882, x880, x863, x706);
  let mut x883: u32 = 0;
  let mut x884: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x883, &mut x884, x882, x865, x704);
  let mut x885: u32 = 0;
  let mut x886: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x885, &mut x886, x884, x867, x702);
  let mut x887: u32 = 0;
  let mut x888: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x887, &mut x888, x886, x869, x700);
  let mut x889: u32 = 0;
  let mut x890: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x889, &mut x890, x888, x871, x698);
  let mut x891: u32 = 0;
  let mut x892: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x891, &mut x892, x890, x873, x696);
  let mut x893: u32 = 0;
  let mut x894: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x893, &mut x894, 0x0, x875, x727);
  let mut x895: u32 = 0;
  let mut x896: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x895, &mut x896, x894, x877, x725);
  let mut x897: u32 = 0;
  let mut x898: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x897, &mut x898, x896, x879, x723);
  let mut x899: u32 = 0;
  let mut x900: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x899, &mut x900, x898, x881, x721);
  let mut x901: u32 = 0;
  let mut x902: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x901, &mut x902, x900, x883, x719);
  let mut x903: u32 = 0;
  let mut x904: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x903, &mut x904, x902, x885, x717);
  let mut x905: u32 = 0;
  let mut x906: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x905, &mut x906, x904, x887, x715);
  let mut x907: u32 = 0;
  let mut x908: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x907, &mut x908, x906, x889, x713);
  let mut x909: u32 = 0;
  let mut x910: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x909, &mut x910, x908, x891, x711);
  let mut x911: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x911, (((arg1[8]) >> 31) as fiat_p256_u1), (0x0 as u32), 0xffffffff);
  let mut x912: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x912, ((((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32) >> 31) as fiat_p256_u1), (0x0 as u32), 0xffffffff);
  let mut x913: u32 = 0;
  let mut x914: u32 = 0;
  fiat_p256_mulx_u32(&mut x913, &mut x914, x912, (arg1[0]));
  let mut x915: u32 = 0;
  let mut x916: u32 = 0;
  fiat_p256_mulx_u32(&mut x915, &mut x916, x912, (arg1[1]));
  let mut x917: u32 = 0;
  let mut x918: u32 = 0;
  fiat_p256_mulx_u32(&mut x917, &mut x918, x912, (arg1[0]));
  let mut x919: u32 = 0;
  let mut x920: u32 = 0;
  fiat_p256_mulx_u32(&mut x919, &mut x920, x912, (arg1[2]));
  let mut x921: u32 = 0;
  let mut x922: u32 = 0;
  fiat_p256_mulx_u32(&mut x921, &mut x922, x912, (arg1[1]));
  let mut x923: u32 = 0;
  let mut x924: u32 = 0;
  fiat_p256_mulx_u32(&mut x923, &mut x924, x912, (arg1[0]));
  let mut x925: u32 = 0;
  let mut x926: u32 = 0;
  fiat_p256_mulx_u32(&mut x925, &mut x926, x912, (arg1[3]));
  let mut x927: u32 = 0;
  let mut x928: u32 = 0;
  fiat_p256_mulx_u32(&mut x927, &mut x928, x912, (arg1[2]));
  let mut x929: u32 = 0;
  let mut x930: u32 = 0;
  fiat_p256_mulx_u32(&mut x929, &mut x930, x912, (arg1[1]));
  let mut x931: u32 = 0;
  let mut x932: u32 = 0;
  fiat_p256_mulx_u32(&mut x931, &mut x932, x912, (arg1[0]));
  let mut x933: u32 = 0;
  let mut x934: u32 = 0;
  fiat_p256_mulx_u32(&mut x933, &mut x934, x912, (arg1[4]));
  let mut x935: u32 = 0;
  let mut x936: u32 = 0;
  fiat_p256_mulx_u32(&mut x935, &mut x936, x912, (arg1[3]));
  let mut x937: u32 = 0;
  let mut x938: u32 = 0;
  fiat_p256_mulx_u32(&mut x937, &mut x938, x912, (arg1[2]));
  let mut x939: u32 = 0;
  let mut x940: u32 = 0;
  fiat_p256_mulx_u32(&mut x939, &mut x940, x912, (arg1[1]));
  let mut x941: u32 = 0;
  let mut x942: u32 = 0;
  fiat_p256_mulx_u32(&mut x941, &mut x942, x912, (arg1[0]));
  let mut x943: u32 = 0;
  let mut x944: u32 = 0;
  fiat_p256_mulx_u32(&mut x943, &mut x944, x912, (arg1[5]));
  let mut x945: u32 = 0;
  let mut x946: u32 = 0;
  fiat_p256_mulx_u32(&mut x945, &mut x946, x912, (arg1[4]));
  let mut x947: u32 = 0;
  let mut x948: u32 = 0;
  fiat_p256_mulx_u32(&mut x947, &mut x948, x912, (arg1[3]));
  let mut x949: u32 = 0;
  let mut x950: u32 = 0;
  fiat_p256_mulx_u32(&mut x949, &mut x950, x912, (arg1[2]));
  let mut x951: u32 = 0;
  let mut x952: u32 = 0;
  fiat_p256_mulx_u32(&mut x951, &mut x952, x912, (arg1[1]));
  let mut x953: u32 = 0;
  let mut x954: u32 = 0;
  fiat_p256_mulx_u32(&mut x953, &mut x954, x912, (arg1[0]));
  let mut x955: u32 = 0;
  let mut x956: u32 = 0;
  fiat_p256_mulx_u32(&mut x955, &mut x956, x912, (arg1[6]));
  let mut x957: u32 = 0;
  let mut x958: u32 = 0;
  fiat_p256_mulx_u32(&mut x957, &mut x958, x912, (arg1[5]));
  let mut x959: u32 = 0;
  let mut x960: u32 = 0;
  fiat_p256_mulx_u32(&mut x959, &mut x960, x912, (arg1[4]));
  let mut x961: u32 = 0;
  let mut x962: u32 = 0;
  fiat_p256_mulx_u32(&mut x961, &mut x962, x912, (arg1[3]));
  let mut x963: u32 = 0;
  let mut x964: u32 = 0;
  fiat_p256_mulx_u32(&mut x963, &mut x964, x912, (arg1[2]));
  let mut x965: u32 = 0;
  let mut x966: u32 = 0;
  fiat_p256_mulx_u32(&mut x965, &mut x966, x912, (arg1[1]));
  let mut x967: u32 = 0;
  let mut x968: u32 = 0;
  fiat_p256_mulx_u32(&mut x967, &mut x968, x912, (arg1[0]));
  let mut x969: u32 = 0;
  let mut x970: u32 = 0;
  fiat_p256_mulx_u32(&mut x969, &mut x970, x912, (arg1[7]));
  let mut x971: u32 = 0;
  let mut x972: u32 = 0;
  fiat_p256_mulx_u32(&mut x971, &mut x972, x912, (arg1[6]));
  let mut x973: u32 = 0;
  let mut x974: u32 = 0;
  fiat_p256_mulx_u32(&mut x973, &mut x974, x912, (arg1[5]));
  let mut x975: u32 = 0;
  let mut x976: u32 = 0;
  fiat_p256_mulx_u32(&mut x975, &mut x976, x912, (arg1[4]));
  let mut x977: u32 = 0;
  let mut x978: u32 = 0;
  fiat_p256_mulx_u32(&mut x977, &mut x978, x912, (arg1[3]));
  let mut x979: u32 = 0;
  let mut x980: u32 = 0;
  fiat_p256_mulx_u32(&mut x979, &mut x980, x912, (arg1[2]));
  let mut x981: u32 = 0;
  let mut x982: u32 = 0;
  fiat_p256_mulx_u32(&mut x981, &mut x982, x912, (arg1[1]));
  let mut x983: u32 = 0;
  let mut x984: u32 = 0;
  fiat_p256_mulx_u32(&mut x983, &mut x984, x912, (arg1[0]));
  let mut x985: u32 = 0;
  let mut x986: u32 = 0;
  fiat_p256_mulx_u32(&mut x985, &mut x986, x912, (arg1[8]));
  let mut x987: u32 = 0;
  let mut x988: u32 = 0;
  fiat_p256_mulx_u32(&mut x987, &mut x988, x912, (arg1[7]));
  let mut x989: u32 = 0;
  let mut x990: u32 = 0;
  fiat_p256_mulx_u32(&mut x989, &mut x990, x912, (arg1[6]));
  let mut x991: u32 = 0;
  let mut x992: u32 = 0;
  fiat_p256_mulx_u32(&mut x991, &mut x992, x912, (arg1[5]));
  let mut x993: u32 = 0;
  let mut x994: u32 = 0;
  fiat_p256_mulx_u32(&mut x993, &mut x994, x912, (arg1[4]));
  let mut x995: u32 = 0;
  let mut x996: u32 = 0;
  fiat_p256_mulx_u32(&mut x995, &mut x996, x912, (arg1[3]));
  let mut x997: u32 = 0;
  let mut x998: u32 = 0;
  fiat_p256_mulx_u32(&mut x997, &mut x998, x912, (arg1[2]));
  let mut x999: u32 = 0;
  let mut x1000: u32 = 0;
  fiat_p256_mulx_u32(&mut x999, &mut x1000, x912, (arg1[1]));
  let mut x1001: u32 = 0;
  let mut x1002: u32 = 0;
  fiat_p256_mulx_u32(&mut x1001, &mut x1002, x912, (arg1[0]));
  let mut x1003: u32 = 0;
  let mut x1004: u32 = 0;
  fiat_p256_mulx_u32(&mut x1003, &mut x1004, ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32), x911);
  let mut x1005: u32 = 0;
  let mut x1006: u32 = 0;
  fiat_p256_mulx_u32(&mut x1005, &mut x1006, ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32), (arg1[8]));
  let mut x1007: u32 = 0;
  let mut x1008: u32 = 0;
  fiat_p256_mulx_u32(&mut x1007, &mut x1008, ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32), (arg1[7]));
  let mut x1009: u32 = 0;
  let mut x1010: u32 = 0;
  fiat_p256_mulx_u32(&mut x1009, &mut x1010, ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32), (arg1[6]));
  let mut x1011: u32 = 0;
  let mut x1012: u32 = 0;
  fiat_p256_mulx_u32(&mut x1011, &mut x1012, ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32), (arg1[5]));
  let mut x1013: u32 = 0;
  let mut x1014: u32 = 0;
  fiat_p256_mulx_u32(&mut x1013, &mut x1014, ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32), (arg1[4]));
  let mut x1015: u32 = 0;
  let mut x1016: u32 = 0;
  fiat_p256_mulx_u32(&mut x1015, &mut x1016, ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32), (arg1[3]));
  let mut x1017: u32 = 0;
  let mut x1018: u32 = 0;
  fiat_p256_mulx_u32(&mut x1017, &mut x1018, ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32), (arg1[2]));
  let mut x1019: u32 = 0;
  let mut x1020: u32 = 0;
  fiat_p256_mulx_u32(&mut x1019, &mut x1020, ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32), (arg1[1]));
  let mut x1021: u32 = 0;
  let mut x1022: u32 = 0;
  fiat_p256_mulx_u32(&mut x1021, &mut x1022, ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32), (arg1[0]));
  let mut x1023: u32 = 0;
  let mut x1024: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1023, &mut x1024, 0x0, x1006, x913);
  let mut x1025: u32 = 0;
  let mut x1026: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1025, &mut x1026, 0x0, x1023, x915);
  let mut x1027: u32 = 0;
  let mut x1028: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1027, &mut x1028, 0x0, x1008, x917);
  let mut x1029: u32 = 0;
  let mut x1030: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1029, &mut x1030, x1028, x1025, x918);
  let mut x1031: u32 = 0;
  let mut x1032: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1031, &mut x1032, 0x0, x1027, x921);
  let mut x1033: u32 = 0;
  let mut x1034: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1033, &mut x1034, x1032, x1029, x919);
  let mut x1035: u32 = 0;
  let mut x1036: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1035, &mut x1036, 0x0, x1010, x923);
  let mut x1037: u32 = 0;
  let mut x1038: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1037, &mut x1038, x1036, x1031, x924);
  let mut x1039: u32 = 0;
  let mut x1040: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1039, &mut x1040, x1038, x1033, x922);
  let mut x1041: u32 = 0;
  let mut x1042: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1041, &mut x1042, 0x0, x1035, x929);
  let mut x1043: u32 = 0;
  let mut x1044: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1043, &mut x1044, x1042, x1037, x927);
  let mut x1045: u32 = 0;
  let mut x1046: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1045, &mut x1046, x1044, x1039, x925);
  let mut x1047: u32 = 0;
  let mut x1048: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1047, &mut x1048, 0x0, x1012, x931);
  let mut x1049: u32 = 0;
  let mut x1050: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1049, &mut x1050, x1048, x1041, x932);
  let mut x1051: u32 = 0;
  let mut x1052: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1051, &mut x1052, x1050, x1043, x930);
  let mut x1053: u32 = 0;
  let mut x1054: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1053, &mut x1054, x1052, x1045, x928);
  let mut x1055: u32 = 0;
  let mut x1056: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1055, &mut x1056, 0x0, x1047, x939);
  let mut x1057: u32 = 0;
  let mut x1058: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1057, &mut x1058, x1056, x1049, x937);
  let mut x1059: u32 = 0;
  let mut x1060: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1059, &mut x1060, x1058, x1051, x935);
  let mut x1061: u32 = 0;
  let mut x1062: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1061, &mut x1062, x1060, x1053, x933);
  let mut x1063: u32 = 0;
  let mut x1064: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1063, &mut x1064, 0x0, x1014, x941);
  let mut x1065: u32 = 0;
  let mut x1066: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1065, &mut x1066, x1064, x1055, x942);
  let mut x1067: u32 = 0;
  let mut x1068: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1067, &mut x1068, x1066, x1057, x940);
  let mut x1069: u32 = 0;
  let mut x1070: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1069, &mut x1070, x1068, x1059, x938);
  let mut x1071: u32 = 0;
  let mut x1072: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1071, &mut x1072, x1070, x1061, x936);
  let mut x1073: u32 = 0;
  let mut x1074: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1073, &mut x1074, 0x0, x1063, x951);
  let mut x1075: u32 = 0;
  let mut x1076: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1075, &mut x1076, x1074, x1065, x949);
  let mut x1077: u32 = 0;
  let mut x1078: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1077, &mut x1078, x1076, x1067, x947);
  let mut x1079: u32 = 0;
  let mut x1080: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1079, &mut x1080, x1078, x1069, x945);
  let mut x1081: u32 = 0;
  let mut x1082: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1081, &mut x1082, x1080, x1071, x943);
  let mut x1083: u32 = 0;
  let mut x1084: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1083, &mut x1084, 0x0, x1016, x953);
  let mut x1085: u32 = 0;
  let mut x1086: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1085, &mut x1086, x1084, x1073, x954);
  let mut x1087: u32 = 0;
  let mut x1088: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1087, &mut x1088, x1086, x1075, x952);
  let mut x1089: u32 = 0;
  let mut x1090: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1089, &mut x1090, x1088, x1077, x950);
  let mut x1091: u32 = 0;
  let mut x1092: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1091, &mut x1092, x1090, x1079, x948);
  let mut x1093: u32 = 0;
  let mut x1094: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1093, &mut x1094, x1092, x1081, x946);
  let mut x1095: u32 = 0;
  let mut x1096: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1095, &mut x1096, 0x0, x1083, x965);
  let mut x1097: u32 = 0;
  let mut x1098: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1097, &mut x1098, x1096, x1085, x963);
  let mut x1099: u32 = 0;
  let mut x1100: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1099, &mut x1100, x1098, x1087, x961);
  let mut x1101: u32 = 0;
  let mut x1102: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1101, &mut x1102, x1100, x1089, x959);
  let mut x1103: u32 = 0;
  let mut x1104: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1103, &mut x1104, x1102, x1091, x957);
  let mut x1105: u32 = 0;
  let mut x1106: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1105, &mut x1106, x1104, x1093, x955);
  let mut x1107: u32 = 0;
  let mut x1108: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1107, &mut x1108, 0x0, x1018, x967);
  let mut x1109: u32 = 0;
  let mut x1110: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1109, &mut x1110, x1108, x1095, x968);
  let mut x1111: u32 = 0;
  let mut x1112: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1111, &mut x1112, x1110, x1097, x966);
  let mut x1113: u32 = 0;
  let mut x1114: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1113, &mut x1114, x1112, x1099, x964);
  let mut x1115: u32 = 0;
  let mut x1116: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1115, &mut x1116, x1114, x1101, x962);
  let mut x1117: u32 = 0;
  let mut x1118: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1117, &mut x1118, x1116, x1103, x960);
  let mut x1119: u32 = 0;
  let mut x1120: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1119, &mut x1120, x1118, x1105, x958);
  let mut x1121: u32 = 0;
  let mut x1122: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1121, &mut x1122, 0x0, x1107, x981);
  let mut x1123: u32 = 0;
  let mut x1124: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1123, &mut x1124, x1122, x1109, x979);
  let mut x1125: u32 = 0;
  let mut x1126: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1125, &mut x1126, x1124, x1111, x977);
  let mut x1127: u32 = 0;
  let mut x1128: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1127, &mut x1128, x1126, x1113, x975);
  let mut x1129: u32 = 0;
  let mut x1130: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1129, &mut x1130, x1128, x1115, x973);
  let mut x1131: u32 = 0;
  let mut x1132: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1131, &mut x1132, x1130, x1117, x971);
  let mut x1133: u32 = 0;
  let mut x1134: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1133, &mut x1134, x1132, x1119, x969);
  let mut x1135: u32 = 0;
  let mut x1136: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1135, &mut x1136, 0x0, x1020, x983);
  let mut x1137: u32 = 0;
  let mut x1138: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1137, &mut x1138, x1136, x1121, x984);
  let mut x1139: u32 = 0;
  let mut x1140: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1139, &mut x1140, x1138, x1123, x982);
  let mut x1141: u32 = 0;
  let mut x1142: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1141, &mut x1142, x1140, x1125, x980);
  let mut x1143: u32 = 0;
  let mut x1144: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1143, &mut x1144, x1142, x1127, x978);
  let mut x1145: u32 = 0;
  let mut x1146: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1145, &mut x1146, x1144, x1129, x976);
  let mut x1147: u32 = 0;
  let mut x1148: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1147, &mut x1148, x1146, x1131, x974);
  let mut x1149: u32 = 0;
  let mut x1150: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1149, &mut x1150, x1148, x1133, x972);
  let mut x1151: u32 = 0;
  let mut x1152: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1151, &mut x1152, 0x0, x1135, x999);
  let mut x1153: u32 = 0;
  let mut x1154: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1153, &mut x1154, x1152, x1137, x997);
  let mut x1155: u32 = 0;
  let mut x1156: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1155, &mut x1156, x1154, x1139, x995);
  let mut x1157: u32 = 0;
  let mut x1158: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1157, &mut x1158, x1156, x1141, x993);
  let mut x1159: u32 = 0;
  let mut x1160: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1159, &mut x1160, x1158, x1143, x991);
  let mut x1161: u32 = 0;
  let mut x1162: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1161, &mut x1162, x1160, x1145, x989);
  let mut x1163: u32 = 0;
  let mut x1164: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1163, &mut x1164, x1162, x1147, x987);
  let mut x1165: u32 = 0;
  let mut x1166: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1165, &mut x1166, x1164, x1149, x985);
  let mut x1167: u32 = 0;
  let mut x1168: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1167, &mut x1168, 0x0, x1022, x1001);
  let mut x1169: u32 = 0;
  let mut x1170: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1169, &mut x1170, x1168, x1151, x1002);
  let mut x1171: u32 = 0;
  let mut x1172: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1171, &mut x1172, x1170, x1153, x1000);
  let mut x1173: u32 = 0;
  let mut x1174: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1173, &mut x1174, x1172, x1155, x998);
  let mut x1175: u32 = 0;
  let mut x1176: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1175, &mut x1176, x1174, x1157, x996);
  let mut x1177: u32 = 0;
  let mut x1178: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1177, &mut x1178, x1176, x1159, x994);
  let mut x1179: u32 = 0;
  let mut x1180: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1179, &mut x1180, x1178, x1161, x992);
  let mut x1181: u32 = 0;
  let mut x1182: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1181, &mut x1182, x1180, x1163, x990);
  let mut x1183: u32 = 0;
  let mut x1184: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1183, &mut x1184, x1182, x1165, x988);
  let mut x1185: u32 = 0;
  let mut x1186: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1185, &mut x1186, 0x0, x1167, x1019);
  let mut x1187: u32 = 0;
  let mut x1188: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1187, &mut x1188, x1186, x1169, x1017);
  let mut x1189: u32 = 0;
  let mut x1190: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1189, &mut x1190, x1188, x1171, x1015);
  let mut x1191: u32 = 0;
  let mut x1192: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1191, &mut x1192, x1190, x1173, x1013);
  let mut x1193: u32 = 0;
  let mut x1194: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1193, &mut x1194, x1192, x1175, x1011);
  let mut x1195: u32 = 0;
  let mut x1196: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1195, &mut x1196, x1194, x1177, x1009);
  let mut x1197: u32 = 0;
  let mut x1198: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1197, &mut x1198, x1196, x1179, x1007);
  let mut x1199: u32 = 0;
  let mut x1200: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1199, &mut x1200, x1198, x1181, x1005);
  let mut x1201: u32 = 0;
  let mut x1202: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1201, &mut x1202, x1200, x1183, x1003);
  let mut x1203: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1203, (((arg2[8]) >> 31) as fiat_p256_u1), (0x0 as u32), 0xffffffff);
  let mut x1204: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1204, ((((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32) >> 31) as fiat_p256_u1), (0x0 as u32), 0xffffffff);
  let mut x1205: u32 = 0;
  let mut x1206: u32 = 0;
  fiat_p256_mulx_u32(&mut x1205, &mut x1206, x1204, (arg2[0]));
  let mut x1207: u32 = 0;
  let mut x1208: u32 = 0;
  fiat_p256_mulx_u32(&mut x1207, &mut x1208, x1204, (arg2[1]));
  let mut x1209: u32 = 0;
  let mut x1210: u32 = 0;
  fiat_p256_mulx_u32(&mut x1209, &mut x1210, x1204, (arg2[0]));
  let mut x1211: u32 = 0;
  let mut x1212: u32 = 0;
  fiat_p256_mulx_u32(&mut x1211, &mut x1212, x1204, (arg2[2]));
  let mut x1213: u32 = 0;
  let mut x1214: u32 = 0;
  fiat_p256_mulx_u32(&mut x1213, &mut x1214, x1204, (arg2[1]));
  let mut x1215: u32 = 0;
  let mut x1216: u32 = 0;
  fiat_p256_mulx_u32(&mut x1215, &mut x1216, x1204, (arg2[0]));
  let mut x1217: u32 = 0;
  let mut x1218: u32 = 0;
  fiat_p256_mulx_u32(&mut x1217, &mut x1218, x1204, (arg2[3]));
  let mut x1219: u32 = 0;
  let mut x1220: u32 = 0;
  fiat_p256_mulx_u32(&mut x1219, &mut x1220, x1204, (arg2[2]));
  let mut x1221: u32 = 0;
  let mut x1222: u32 = 0;
  fiat_p256_mulx_u32(&mut x1221, &mut x1222, x1204, (arg2[1]));
  let mut x1223: u32 = 0;
  let mut x1224: u32 = 0;
  fiat_p256_mulx_u32(&mut x1223, &mut x1224, x1204, (arg2[0]));
  let mut x1225: u32 = 0;
  let mut x1226: u32 = 0;
  fiat_p256_mulx_u32(&mut x1225, &mut x1226, x1204, (arg2[4]));
  let mut x1227: u32 = 0;
  let mut x1228: u32 = 0;
  fiat_p256_mulx_u32(&mut x1227, &mut x1228, x1204, (arg2[3]));
  let mut x1229: u32 = 0;
  let mut x1230: u32 = 0;
  fiat_p256_mulx_u32(&mut x1229, &mut x1230, x1204, (arg2[2]));
  let mut x1231: u32 = 0;
  let mut x1232: u32 = 0;
  fiat_p256_mulx_u32(&mut x1231, &mut x1232, x1204, (arg2[1]));
  let mut x1233: u32 = 0;
  let mut x1234: u32 = 0;
  fiat_p256_mulx_u32(&mut x1233, &mut x1234, x1204, (arg2[0]));
  let mut x1235: u32 = 0;
  let mut x1236: u32 = 0;
  fiat_p256_mulx_u32(&mut x1235, &mut x1236, x1204, (arg2[5]));
  let mut x1237: u32 = 0;
  let mut x1238: u32 = 0;
  fiat_p256_mulx_u32(&mut x1237, &mut x1238, x1204, (arg2[4]));
  let mut x1239: u32 = 0;
  let mut x1240: u32 = 0;
  fiat_p256_mulx_u32(&mut x1239, &mut x1240, x1204, (arg2[3]));
  let mut x1241: u32 = 0;
  let mut x1242: u32 = 0;
  fiat_p256_mulx_u32(&mut x1241, &mut x1242, x1204, (arg2[2]));
  let mut x1243: u32 = 0;
  let mut x1244: u32 = 0;
  fiat_p256_mulx_u32(&mut x1243, &mut x1244, x1204, (arg2[1]));
  let mut x1245: u32 = 0;
  let mut x1246: u32 = 0;
  fiat_p256_mulx_u32(&mut x1245, &mut x1246, x1204, (arg2[0]));
  let mut x1247: u32 = 0;
  let mut x1248: u32 = 0;
  fiat_p256_mulx_u32(&mut x1247, &mut x1248, x1204, (arg2[6]));
  let mut x1249: u32 = 0;
  let mut x1250: u32 = 0;
  fiat_p256_mulx_u32(&mut x1249, &mut x1250, x1204, (arg2[5]));
  let mut x1251: u32 = 0;
  let mut x1252: u32 = 0;
  fiat_p256_mulx_u32(&mut x1251, &mut x1252, x1204, (arg2[4]));
  let mut x1253: u32 = 0;
  let mut x1254: u32 = 0;
  fiat_p256_mulx_u32(&mut x1253, &mut x1254, x1204, (arg2[3]));
  let mut x1255: u32 = 0;
  let mut x1256: u32 = 0;
  fiat_p256_mulx_u32(&mut x1255, &mut x1256, x1204, (arg2[2]));
  let mut x1257: u32 = 0;
  let mut x1258: u32 = 0;
  fiat_p256_mulx_u32(&mut x1257, &mut x1258, x1204, (arg2[1]));
  let mut x1259: u32 = 0;
  let mut x1260: u32 = 0;
  fiat_p256_mulx_u32(&mut x1259, &mut x1260, x1204, (arg2[0]));
  let mut x1261: u32 = 0;
  let mut x1262: u32 = 0;
  fiat_p256_mulx_u32(&mut x1261, &mut x1262, x1204, (arg2[7]));
  let mut x1263: u32 = 0;
  let mut x1264: u32 = 0;
  fiat_p256_mulx_u32(&mut x1263, &mut x1264, x1204, (arg2[6]));
  let mut x1265: u32 = 0;
  let mut x1266: u32 = 0;
  fiat_p256_mulx_u32(&mut x1265, &mut x1266, x1204, (arg2[5]));
  let mut x1267: u32 = 0;
  let mut x1268: u32 = 0;
  fiat_p256_mulx_u32(&mut x1267, &mut x1268, x1204, (arg2[4]));
  let mut x1269: u32 = 0;
  let mut x1270: u32 = 0;
  fiat_p256_mulx_u32(&mut x1269, &mut x1270, x1204, (arg2[3]));
  let mut x1271: u32 = 0;
  let mut x1272: u32 = 0;
  fiat_p256_mulx_u32(&mut x1271, &mut x1272, x1204, (arg2[2]));
  let mut x1273: u32 = 0;
  let mut x1274: u32 = 0;
  fiat_p256_mulx_u32(&mut x1273, &mut x1274, x1204, (arg2[1]));
  let mut x1275: u32 = 0;
  let mut x1276: u32 = 0;
  fiat_p256_mulx_u32(&mut x1275, &mut x1276, x1204, (arg2[0]));
  let mut x1277: u32 = 0;
  let mut x1278: u32 = 0;
  fiat_p256_mulx_u32(&mut x1277, &mut x1278, x1204, (arg2[8]));
  let mut x1279: u32 = 0;
  let mut x1280: u32 = 0;
  fiat_p256_mulx_u32(&mut x1279, &mut x1280, x1204, (arg2[7]));
  let mut x1281: u32 = 0;
  let mut x1282: u32 = 0;
  fiat_p256_mulx_u32(&mut x1281, &mut x1282, x1204, (arg2[6]));
  let mut x1283: u32 = 0;
  let mut x1284: u32 = 0;
  fiat_p256_mulx_u32(&mut x1283, &mut x1284, x1204, (arg2[5]));
  let mut x1285: u32 = 0;
  let mut x1286: u32 = 0;
  fiat_p256_mulx_u32(&mut x1285, &mut x1286, x1204, (arg2[4]));
  let mut x1287: u32 = 0;
  let mut x1288: u32 = 0;
  fiat_p256_mulx_u32(&mut x1287, &mut x1288, x1204, (arg2[3]));
  let mut x1289: u32 = 0;
  let mut x1290: u32 = 0;
  fiat_p256_mulx_u32(&mut x1289, &mut x1290, x1204, (arg2[2]));
  let mut x1291: u32 = 0;
  let mut x1292: u32 = 0;
  fiat_p256_mulx_u32(&mut x1291, &mut x1292, x1204, (arg2[1]));
  let mut x1293: u32 = 0;
  let mut x1294: u32 = 0;
  fiat_p256_mulx_u32(&mut x1293, &mut x1294, x1204, (arg2[0]));
  let mut x1295: u32 = 0;
  let mut x1296: u32 = 0;
  fiat_p256_mulx_u32(&mut x1295, &mut x1296, ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32), x1203);
  let mut x1297: u32 = 0;
  let mut x1298: u32 = 0;
  fiat_p256_mulx_u32(&mut x1297, &mut x1298, ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32), (arg2[8]));
  let mut x1299: u32 = 0;
  let mut x1300: u32 = 0;
  fiat_p256_mulx_u32(&mut x1299, &mut x1300, ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32), (arg2[7]));
  let mut x1301: u32 = 0;
  let mut x1302: u32 = 0;
  fiat_p256_mulx_u32(&mut x1301, &mut x1302, ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32), (arg2[6]));
  let mut x1303: u32 = 0;
  let mut x1304: u32 = 0;
  fiat_p256_mulx_u32(&mut x1303, &mut x1304, ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32), (arg2[5]));
  let mut x1305: u32 = 0;
  let mut x1306: u32 = 0;
  fiat_p256_mulx_u32(&mut x1305, &mut x1306, ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32), (arg2[4]));
  let mut x1307: u32 = 0;
  let mut x1308: u32 = 0;
  fiat_p256_mulx_u32(&mut x1307, &mut x1308, ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32), (arg2[3]));
  let mut x1309: u32 = 0;
  let mut x1310: u32 = 0;
  fiat_p256_mulx_u32(&mut x1309, &mut x1310, ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32), (arg2[2]));
  let mut x1311: u32 = 0;
  let mut x1312: u32 = 0;
  fiat_p256_mulx_u32(&mut x1311, &mut x1312, ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32), (arg2[1]));
  let mut x1313: u32 = 0;
  let mut x1314: u32 = 0;
  fiat_p256_mulx_u32(&mut x1313, &mut x1314, ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32), (arg2[0]));
  let mut x1315: u32 = 0;
  let mut x1316: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1315, &mut x1316, 0x0, x1298, x1205);
  let mut x1317: u32 = 0;
  let mut x1318: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1317, &mut x1318, 0x0, x1315, x1207);
  let mut x1319: u32 = 0;
  let mut x1320: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1319, &mut x1320, 0x0, x1300, x1209);
  let mut x1321: u32 = 0;
  let mut x1322: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1321, &mut x1322, x1320, x1317, x1210);
  let mut x1323: u32 = 0;
  let mut x1324: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1323, &mut x1324, 0x0, x1319, x1213);
  let mut x1325: u32 = 0;
  let mut x1326: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1325, &mut x1326, x1324, x1321, x1211);
  let mut x1327: u32 = 0;
  let mut x1328: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1327, &mut x1328, 0x0, x1302, x1215);
  let mut x1329: u32 = 0;
  let mut x1330: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1329, &mut x1330, x1328, x1323, x1216);
  let mut x1331: u32 = 0;
  let mut x1332: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1331, &mut x1332, x1330, x1325, x1214);
  let mut x1333: u32 = 0;
  let mut x1334: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1333, &mut x1334, 0x0, x1327, x1221);
  let mut x1335: u32 = 0;
  let mut x1336: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1335, &mut x1336, x1334, x1329, x1219);
  let mut x1337: u32 = 0;
  let mut x1338: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1337, &mut x1338, x1336, x1331, x1217);
  let mut x1339: u32 = 0;
  let mut x1340: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1339, &mut x1340, 0x0, x1304, x1223);
  let mut x1341: u32 = 0;
  let mut x1342: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1341, &mut x1342, x1340, x1333, x1224);
  let mut x1343: u32 = 0;
  let mut x1344: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1343, &mut x1344, x1342, x1335, x1222);
  let mut x1345: u32 = 0;
  let mut x1346: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1345, &mut x1346, x1344, x1337, x1220);
  let mut x1347: u32 = 0;
  let mut x1348: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1347, &mut x1348, 0x0, x1339, x1231);
  let mut x1349: u32 = 0;
  let mut x1350: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1349, &mut x1350, x1348, x1341, x1229);
  let mut x1351: u32 = 0;
  let mut x1352: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1351, &mut x1352, x1350, x1343, x1227);
  let mut x1353: u32 = 0;
  let mut x1354: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1353, &mut x1354, x1352, x1345, x1225);
  let mut x1355: u32 = 0;
  let mut x1356: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1355, &mut x1356, 0x0, x1306, x1233);
  let mut x1357: u32 = 0;
  let mut x1358: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1357, &mut x1358, x1356, x1347, x1234);
  let mut x1359: u32 = 0;
  let mut x1360: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1359, &mut x1360, x1358, x1349, x1232);
  let mut x1361: u32 = 0;
  let mut x1362: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1361, &mut x1362, x1360, x1351, x1230);
  let mut x1363: u32 = 0;
  let mut x1364: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1363, &mut x1364, x1362, x1353, x1228);
  let mut x1365: u32 = 0;
  let mut x1366: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1365, &mut x1366, 0x0, x1355, x1243);
  let mut x1367: u32 = 0;
  let mut x1368: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1367, &mut x1368, x1366, x1357, x1241);
  let mut x1369: u32 = 0;
  let mut x1370: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1369, &mut x1370, x1368, x1359, x1239);
  let mut x1371: u32 = 0;
  let mut x1372: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1371, &mut x1372, x1370, x1361, x1237);
  let mut x1373: u32 = 0;
  let mut x1374: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1373, &mut x1374, x1372, x1363, x1235);
  let mut x1375: u32 = 0;
  let mut x1376: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1375, &mut x1376, 0x0, x1308, x1245);
  let mut x1377: u32 = 0;
  let mut x1378: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1377, &mut x1378, x1376, x1365, x1246);
  let mut x1379: u32 = 0;
  let mut x1380: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1379, &mut x1380, x1378, x1367, x1244);
  let mut x1381: u32 = 0;
  let mut x1382: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1381, &mut x1382, x1380, x1369, x1242);
  let mut x1383: u32 = 0;
  let mut x1384: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1383, &mut x1384, x1382, x1371, x1240);
  let mut x1385: u32 = 0;
  let mut x1386: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1385, &mut x1386, x1384, x1373, x1238);
  let mut x1387: u32 = 0;
  let mut x1388: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1387, &mut x1388, 0x0, x1375, x1257);
  let mut x1389: u32 = 0;
  let mut x1390: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1389, &mut x1390, x1388, x1377, x1255);
  let mut x1391: u32 = 0;
  let mut x1392: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1391, &mut x1392, x1390, x1379, x1253);
  let mut x1393: u32 = 0;
  let mut x1394: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1393, &mut x1394, x1392, x1381, x1251);
  let mut x1395: u32 = 0;
  let mut x1396: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1395, &mut x1396, x1394, x1383, x1249);
  let mut x1397: u32 = 0;
  let mut x1398: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1397, &mut x1398, x1396, x1385, x1247);
  let mut x1399: u32 = 0;
  let mut x1400: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1399, &mut x1400, 0x0, x1310, x1259);
  let mut x1401: u32 = 0;
  let mut x1402: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1401, &mut x1402, x1400, x1387, x1260);
  let mut x1403: u32 = 0;
  let mut x1404: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1403, &mut x1404, x1402, x1389, x1258);
  let mut x1405: u32 = 0;
  let mut x1406: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1405, &mut x1406, x1404, x1391, x1256);
  let mut x1407: u32 = 0;
  let mut x1408: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1407, &mut x1408, x1406, x1393, x1254);
  let mut x1409: u32 = 0;
  let mut x1410: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1409, &mut x1410, x1408, x1395, x1252);
  let mut x1411: u32 = 0;
  let mut x1412: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1411, &mut x1412, x1410, x1397, x1250);
  let mut x1413: u32 = 0;
  let mut x1414: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1413, &mut x1414, 0x0, x1399, x1273);
  let mut x1415: u32 = 0;
  let mut x1416: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1415, &mut x1416, x1414, x1401, x1271);
  let mut x1417: u32 = 0;
  let mut x1418: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1417, &mut x1418, x1416, x1403, x1269);
  let mut x1419: u32 = 0;
  let mut x1420: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1419, &mut x1420, x1418, x1405, x1267);
  let mut x1421: u32 = 0;
  let mut x1422: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1421, &mut x1422, x1420, x1407, x1265);
  let mut x1423: u32 = 0;
  let mut x1424: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1423, &mut x1424, x1422, x1409, x1263);
  let mut x1425: u32 = 0;
  let mut x1426: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1425, &mut x1426, x1424, x1411, x1261);
  let mut x1427: u32 = 0;
  let mut x1428: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1427, &mut x1428, 0x0, x1312, x1275);
  let mut x1429: u32 = 0;
  let mut x1430: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1429, &mut x1430, x1428, x1413, x1276);
  let mut x1431: u32 = 0;
  let mut x1432: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1431, &mut x1432, x1430, x1415, x1274);
  let mut x1433: u32 = 0;
  let mut x1434: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1433, &mut x1434, x1432, x1417, x1272);
  let mut x1435: u32 = 0;
  let mut x1436: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1435, &mut x1436, x1434, x1419, x1270);
  let mut x1437: u32 = 0;
  let mut x1438: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1437, &mut x1438, x1436, x1421, x1268);
  let mut x1439: u32 = 0;
  let mut x1440: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1439, &mut x1440, x1438, x1423, x1266);
  let mut x1441: u32 = 0;
  let mut x1442: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1441, &mut x1442, x1440, x1425, x1264);
  let mut x1443: u32 = 0;
  let mut x1444: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1443, &mut x1444, 0x0, x1427, x1291);
  let mut x1445: u32 = 0;
  let mut x1446: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1445, &mut x1446, x1444, x1429, x1289);
  let mut x1447: u32 = 0;
  let mut x1448: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1447, &mut x1448, x1446, x1431, x1287);
  let mut x1449: u32 = 0;
  let mut x1450: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1449, &mut x1450, x1448, x1433, x1285);
  let mut x1451: u32 = 0;
  let mut x1452: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1451, &mut x1452, x1450, x1435, x1283);
  let mut x1453: u32 = 0;
  let mut x1454: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1453, &mut x1454, x1452, x1437, x1281);
  let mut x1455: u32 = 0;
  let mut x1456: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1455, &mut x1456, x1454, x1439, x1279);
  let mut x1457: u32 = 0;
  let mut x1458: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1457, &mut x1458, x1456, x1441, x1277);
  let mut x1459: u32 = 0;
  let mut x1460: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1459, &mut x1460, 0x0, x1314, x1293);
  let mut x1461: u32 = 0;
  let mut x1462: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1461, &mut x1462, x1460, x1443, x1294);
  let mut x1463: u32 = 0;
  let mut x1464: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1463, &mut x1464, x1462, x1445, x1292);
  let mut x1465: u32 = 0;
  let mut x1466: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1465, &mut x1466, x1464, x1447, x1290);
  let mut x1467: u32 = 0;
  let mut x1468: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1467, &mut x1468, x1466, x1449, x1288);
  let mut x1469: u32 = 0;
  let mut x1470: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1469, &mut x1470, x1468, x1451, x1286);
  let mut x1471: u32 = 0;
  let mut x1472: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1471, &mut x1472, x1470, x1453, x1284);
  let mut x1473: u32 = 0;
  let mut x1474: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1473, &mut x1474, x1472, x1455, x1282);
  let mut x1475: u32 = 0;
  let mut x1476: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1475, &mut x1476, x1474, x1457, x1280);
  let mut x1477: u32 = 0;
  let mut x1478: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1477, &mut x1478, 0x0, x1459, x1311);
  let mut x1479: u32 = 0;
  let mut x1480: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1479, &mut x1480, x1478, x1461, x1309);
  let mut x1481: u32 = 0;
  let mut x1482: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1481, &mut x1482, x1480, x1463, x1307);
  let mut x1483: u32 = 0;
  let mut x1484: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1483, &mut x1484, x1482, x1465, x1305);
  let mut x1485: u32 = 0;
  let mut x1486: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1485, &mut x1486, x1484, x1467, x1303);
  let mut x1487: u32 = 0;
  let mut x1488: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1487, &mut x1488, x1486, x1469, x1301);
  let mut x1489: u32 = 0;
  let mut x1490: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1489, &mut x1490, x1488, x1471, x1299);
  let mut x1491: u32 = 0;
  let mut x1492: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1491, &mut x1492, x1490, x1473, x1297);
  let mut x1493: u32 = 0;
  let mut x1494: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1493, &mut x1494, x1492, x1475, x1295);
  let mut x1495: u32 = 0;
  let mut x1496: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1495, &mut x1496, 0x0, x437, x729);
  let mut x1497: u32 = 0;
  let mut x1498: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1497, &mut x1498, x1496, x601, x893);
  let mut x1499: u32 = 0;
  let mut x1500: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1499, &mut x1500, x1498, x603, x895);
  let mut x1501: u32 = 0;
  let mut x1502: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1501, &mut x1502, x1500, x605, x897);
  let mut x1503: u32 = 0;
  let mut x1504: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1503, &mut x1504, x1502, x607, x899);
  let mut x1505: u32 = 0;
  let mut x1506: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1505, &mut x1506, x1504, x609, x901);
  let mut x1507: u32 = 0;
  let mut x1508: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1507, &mut x1508, x1506, x611, x903);
  let mut x1509: u32 = 0;
  let mut x1510: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1509, &mut x1510, x1508, x613, x905);
  let mut x1511: u32 = 0;
  let mut x1512: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1511, &mut x1512, x1510, x615, x907);
  let mut x1513: u32 = 0;
  let mut x1514: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1513, &mut x1514, x1512, x617, x909);
  let mut x1515: u32 = 0;
  let mut x1516: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1515, &mut x1516, 0x0, x1021, x1313);
  let mut x1517: u32 = 0;
  let mut x1518: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1517, &mut x1518, x1516, x1185, x1477);
  let mut x1519: u32 = 0;
  let mut x1520: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1519, &mut x1520, x1518, x1187, x1479);
  let mut x1521: u32 = 0;
  let mut x1522: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1521, &mut x1522, x1520, x1189, x1481);
  let mut x1523: u32 = 0;
  let mut x1524: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1523, &mut x1524, x1522, x1191, x1483);
  let mut x1525: u32 = 0;
  let mut x1526: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1525, &mut x1526, x1524, x1193, x1485);
  let mut x1527: u32 = 0;
  let mut x1528: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1527, &mut x1528, x1526, x1195, x1487);
  let mut x1529: u32 = 0;
  let mut x1530: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1529, &mut x1530, x1528, x1197, x1489);
  let mut x1531: u32 = 0;
  let mut x1532: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1531, &mut x1532, x1530, x1199, x1491);
  let mut x1533: u32 = 0;
  let mut x1534: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1533, &mut x1534, x1532, x1201, x1493);
  let x1535: u32 = ((x1495 >> 30) | ((x1497 << 2) & 0xffffffff));
  let x1536: u32 = ((x1497 >> 30) | ((x1499 << 2) & 0xffffffff));
  let x1537: u32 = ((x1499 >> 30) | ((x1501 << 2) & 0xffffffff));
  let x1538: u32 = ((x1501 >> 30) | ((x1503 << 2) & 0xffffffff));
  let x1539: u32 = ((x1503 >> 30) | ((x1505 << 2) & 0xffffffff));
  let x1540: u32 = ((x1505 >> 30) | ((x1507 << 2) & 0xffffffff));
  let x1541: u32 = ((x1507 >> 30) | ((x1509 << 2) & 0xffffffff));
  let x1542: u32 = ((x1509 >> 30) | ((x1511 << 2) & 0xffffffff));
  let x1543: u32 = ((x1511 >> 30) | ((x1513 << 2) & 0xffffffff));
  let x1544: u32 = ((x1515 >> 30) | ((x1517 << 2) & 0xffffffff));
  let x1545: u32 = ((x1517 >> 30) | ((x1519 << 2) & 0xffffffff));
  let x1546: u32 = ((x1519 >> 30) | ((x1521 << 2) & 0xffffffff));
  let x1547: u32 = ((x1521 >> 30) | ((x1523 << 2) & 0xffffffff));
  let x1548: u32 = ((x1523 >> 30) | ((x1525 << 2) & 0xffffffff));
  let x1549: u32 = ((x1525 >> 30) | ((x1527 << 2) & 0xffffffff));
  let x1550: u32 = ((x1527 >> 30) | ((x1529 << 2) & 0xffffffff));
  let x1551: u32 = ((x1529 >> 30) | ((x1531 << 2) & 0xffffffff));
  let x1552: u32 = ((x1531 >> 30) | ((x1533 << 2) & 0xffffffff));
  let x1553: fiat_p256_u1 = ((((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32) >> 31) as fiat_p256_u1);
  let x1554: u32 = (((((!((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let x1555: u32 = ((((x321 as u64) + (x321 as u64)) & (0xffffffff as u64)) as u32);
  let mut x1556: u32 = 0;
  let mut x1557: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1556, &mut x1557, 0x0, (0x0 as u32), x1554);
  let mut x1558: u32 = 0;
  let mut x1559: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1558, &mut x1559, x1557, (0x0 as u32), (0x0 as u32));
  let mut x1560: u32 = 0;
  let mut x1561: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1560, &mut x1561, x1559, (0x0 as u32), (0x0 as u32));
  let mut x1562: u32 = 0;
  let mut x1563: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1562, &mut x1563, x1561, (0x0 as u32), (0x0 as u32));
  let mut x1564: u32 = 0;
  let mut x1565: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1564, &mut x1565, x1563, (0x0 as u32), (0x0 as u32));
  let mut x1566: u32 = 0;
  let mut x1567: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1566, &mut x1567, x1565, (0x0 as u32), (0x0 as u32));
  let mut x1568: u32 = 0;
  let mut x1569: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1568, &mut x1569, x1567, (0x0 as u32), (0x0 as u32));
  let mut x1570: u32 = 0;
  let mut x1571: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1570, &mut x1571, x1569, (0x0 as u32), (0x0 as u32));
  let mut x1572: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1572, x1571, (0x0 as u32), 0xffffffff);
  let mut x1573: u32 = 0;
  let mut x1574: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1573, &mut x1574, 0x0, x1556, x1572);
  let mut x1575: u32 = 0;
  let mut x1576: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1575, &mut x1576, x1574, x1558, x1572);
  let mut x1577: u32 = 0;
  let mut x1578: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1577, &mut x1578, x1576, x1560, x1572);
  let mut x1579: u32 = 0;
  let mut x1580: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1579, &mut x1580, x1578, x1562, (0x0 as u32));
  let mut x1581: u32 = 0;
  let mut x1582: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1581, &mut x1582, x1580, x1564, (0x0 as u32));
  let mut x1583: u32 = 0;
  let mut x1584: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1583, &mut x1584, x1582, x1566, (0x0 as u32));
  let mut x1585: u32 = 0;
  let mut x1586: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1585, &mut x1586, x1584, x1568, (((x1572 & (0x1 as u32)) as fiat_p256_u1) as u32));
  let mut x1587: u32 = 0;
  let mut x1588: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1587, &mut x1588, x1586, x1570, x1572);
  let mut x1589: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1589, x1553, x1555, x1573);
  let mut x1590: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1590, x1553, (0x0 as u32), x1575);
  let mut x1591: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1591, x1553, (0x0 as u32), x1577);
  let mut x1592: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1592, x1553, (0x0 as u32), x1579);
  let mut x1593: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1593, x1553, (0x0 as u32), x1581);
  let mut x1594: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1594, x1553, (0x0 as u32), x1583);
  let mut x1595: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1595, x1553, (0x0 as u32), x1585);
  let mut x1596: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1596, x1553, (0x0 as u32), x1587);
  let x1597: fiat_p256_u1 = ((((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32) >> 31) as fiat_p256_u1);
  let x1598: u32 = (((((!((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let x1599: u32 = ((((x322 as u64) + (x322 as u64)) & (0xffffffff as u64)) as u32);
  let mut x1600: u32 = 0;
  let mut x1601: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1600, &mut x1601, 0x0, (0x0 as u32), x1598);
  let mut x1602: u32 = 0;
  let mut x1603: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1602, &mut x1603, x1601, (0x0 as u32), (0x0 as u32));
  let mut x1604: u32 = 0;
  let mut x1605: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1604, &mut x1605, x1603, (0x0 as u32), (0x0 as u32));
  let mut x1606: u32 = 0;
  let mut x1607: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1606, &mut x1607, x1605, (0x0 as u32), (0x0 as u32));
  let mut x1608: u32 = 0;
  let mut x1609: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1608, &mut x1609, x1607, (0x0 as u32), (0x0 as u32));
  let mut x1610: u32 = 0;
  let mut x1611: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1610, &mut x1611, x1609, (0x0 as u32), (0x0 as u32));
  let mut x1612: u32 = 0;
  let mut x1613: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1612, &mut x1613, x1611, (0x0 as u32), (0x0 as u32));
  let mut x1614: u32 = 0;
  let mut x1615: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1614, &mut x1615, x1613, (0x0 as u32), (0x0 as u32));
  let mut x1616: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1616, x1615, (0x0 as u32), 0xffffffff);
  let mut x1617: u32 = 0;
  let mut x1618: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1617, &mut x1618, 0x0, x1600, x1616);
  let mut x1619: u32 = 0;
  let mut x1620: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1619, &mut x1620, x1618, x1602, x1616);
  let mut x1621: u32 = 0;
  let mut x1622: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1621, &mut x1622, x1620, x1604, x1616);
  let mut x1623: u32 = 0;
  let mut x1624: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1623, &mut x1624, x1622, x1606, (0x0 as u32));
  let mut x1625: u32 = 0;
  let mut x1626: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1625, &mut x1626, x1624, x1608, (0x0 as u32));
  let mut x1627: u32 = 0;
  let mut x1628: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1627, &mut x1628, x1626, x1610, (0x0 as u32));
  let mut x1629: u32 = 0;
  let mut x1630: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1629, &mut x1630, x1628, x1612, (((x1616 & (0x1 as u32)) as fiat_p256_u1) as u32));
  let mut x1631: u32 = 0;
  let mut x1632: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1631, &mut x1632, x1630, x1614, x1616);
  let mut x1633: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1633, x1597, x1599, x1617);
  let mut x1634: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1634, x1597, (0x0 as u32), x1619);
  let mut x1635: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1635, x1597, (0x0 as u32), x1621);
  let mut x1636: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1636, x1597, (0x0 as u32), x1623);
  let mut x1637: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1637, x1597, (0x0 as u32), x1625);
  let mut x1638: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1638, x1597, (0x0 as u32), x1627);
  let mut x1639: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1639, x1597, (0x0 as u32), x1629);
  let mut x1640: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1640, x1597, (0x0 as u32), x1631);
  let x1641: fiat_p256_u1 = ((((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32) >> 31) as fiat_p256_u1);
  let x1642: u32 = (((((!((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let x1643: u32 = ((((x323 as u64) + (x325 as u64)) & (0xffffffff as u64)) as u32);
  let mut x1644: u32 = 0;
  let mut x1645: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1644, &mut x1645, 0x0, (0x0 as u32), x1642);
  let mut x1646: u32 = 0;
  let mut x1647: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1646, &mut x1647, x1645, (0x0 as u32), (0x0 as u32));
  let mut x1648: u32 = 0;
  let mut x1649: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1648, &mut x1649, x1647, (0x0 as u32), (0x0 as u32));
  let mut x1650: u32 = 0;
  let mut x1651: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1650, &mut x1651, x1649, (0x0 as u32), (0x0 as u32));
  let mut x1652: u32 = 0;
  let mut x1653: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1652, &mut x1653, x1651, (0x0 as u32), (0x0 as u32));
  let mut x1654: u32 = 0;
  let mut x1655: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1654, &mut x1655, x1653, (0x0 as u32), (0x0 as u32));
  let mut x1656: u32 = 0;
  let mut x1657: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1656, &mut x1657, x1655, (0x0 as u32), (0x0 as u32));
  let mut x1658: u32 = 0;
  let mut x1659: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1658, &mut x1659, x1657, (0x0 as u32), (0x0 as u32));
  let mut x1660: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1660, x1659, (0x0 as u32), 0xffffffff);
  let mut x1661: u32 = 0;
  let mut x1662: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1661, &mut x1662, 0x0, x1644, x1660);
  let mut x1663: u32 = 0;
  let mut x1664: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1663, &mut x1664, x1662, x1646, x1660);
  let mut x1665: u32 = 0;
  let mut x1666: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1665, &mut x1666, x1664, x1648, x1660);
  let mut x1667: u32 = 0;
  let mut x1668: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1667, &mut x1668, x1666, x1650, (0x0 as u32));
  let mut x1669: u32 = 0;
  let mut x1670: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1669, &mut x1670, x1668, x1652, (0x0 as u32));
  let mut x1671: u32 = 0;
  let mut x1672: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1671, &mut x1672, x1670, x1654, (0x0 as u32));
  let mut x1673: u32 = 0;
  let mut x1674: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1673, &mut x1674, x1672, x1656, (((x1660 & (0x1 as u32)) as fiat_p256_u1) as u32));
  let mut x1675: u32 = 0;
  let mut x1676: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1675, &mut x1676, x1674, x1658, x1660);
  let mut x1677: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1677, x1641, x1643, x1661);
  let mut x1678: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1678, x1641, (0x0 as u32), x1663);
  let mut x1679: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1679, x1641, (0x0 as u32), x1665);
  let mut x1680: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1680, x1641, (0x0 as u32), x1667);
  let mut x1681: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1681, x1641, (0x0 as u32), x1669);
  let mut x1682: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1682, x1641, (0x0 as u32), x1671);
  let mut x1683: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1683, x1641, (0x0 as u32), x1673);
  let mut x1684: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1684, x1641, (0x0 as u32), x1675);
  let x1685: fiat_p256_u1 = ((((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32) >> 31) as fiat_p256_u1);
  let x1686: u32 = (((((!((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32)) as u64) + (0x1 as u64)) & (0xffffffff as u64)) as u32);
  let x1687: u32 = ((((x324 as u64) + (x326 as u64)) & (0xffffffff as u64)) as u32);
  let mut x1688: u32 = 0;
  let mut x1689: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1688, &mut x1689, 0x0, (0x0 as u32), x1686);
  let mut x1690: u32 = 0;
  let mut x1691: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1690, &mut x1691, x1689, (0x0 as u32), (0x0 as u32));
  let mut x1692: u32 = 0;
  let mut x1693: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1692, &mut x1693, x1691, (0x0 as u32), (0x0 as u32));
  let mut x1694: u32 = 0;
  let mut x1695: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1694, &mut x1695, x1693, (0x0 as u32), (0x0 as u32));
  let mut x1696: u32 = 0;
  let mut x1697: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1696, &mut x1697, x1695, (0x0 as u32), (0x0 as u32));
  let mut x1698: u32 = 0;
  let mut x1699: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1698, &mut x1699, x1697, (0x0 as u32), (0x0 as u32));
  let mut x1700: u32 = 0;
  let mut x1701: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1700, &mut x1701, x1699, (0x0 as u32), (0x0 as u32));
  let mut x1702: u32 = 0;
  let mut x1703: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x1702, &mut x1703, x1701, (0x0 as u32), (0x0 as u32));
  let mut x1704: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1704, x1703, (0x0 as u32), 0xffffffff);
  let mut x1705: u32 = 0;
  let mut x1706: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1705, &mut x1706, 0x0, x1688, x1704);
  let mut x1707: u32 = 0;
  let mut x1708: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1707, &mut x1708, x1706, x1690, x1704);
  let mut x1709: u32 = 0;
  let mut x1710: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1709, &mut x1710, x1708, x1692, x1704);
  let mut x1711: u32 = 0;
  let mut x1712: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1711, &mut x1712, x1710, x1694, (0x0 as u32));
  let mut x1713: u32 = 0;
  let mut x1714: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1713, &mut x1714, x1712, x1696, (0x0 as u32));
  let mut x1715: u32 = 0;
  let mut x1716: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1715, &mut x1716, x1714, x1698, (0x0 as u32));
  let mut x1717: u32 = 0;
  let mut x1718: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1717, &mut x1718, x1716, x1700, (((x1704 & (0x1 as u32)) as fiat_p256_u1) as u32));
  let mut x1719: u32 = 0;
  let mut x1720: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1719, &mut x1720, x1718, x1702, x1704);
  let mut x1721: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1721, x1685, x1687, x1705);
  let mut x1722: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1722, x1685, (0x0 as u32), x1707);
  let mut x1723: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1723, x1685, (0x0 as u32), x1709);
  let mut x1724: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1724, x1685, (0x0 as u32), x1711);
  let mut x1725: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1725, x1685, (0x0 as u32), x1713);
  let mut x1726: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1726, x1685, (0x0 as u32), x1715);
  let mut x1727: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1727, x1685, (0x0 as u32), x1717);
  let mut x1728: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x1728, x1685, (0x0 as u32), x1719);
  let mut x1729: u32 = 0;
  let mut x1730: u32 = 0;
  fiat_p256_mulx_u32(&mut x1729, &mut x1730, x1589, (arg3[7]));
  let mut x1731: u32 = 0;
  let mut x1732: u32 = 0;
  fiat_p256_mulx_u32(&mut x1731, &mut x1732, x1589, (arg3[6]));
  let mut x1733: u32 = 0;
  let mut x1734: u32 = 0;
  fiat_p256_mulx_u32(&mut x1733, &mut x1734, x1589, (arg3[5]));
  let mut x1735: u32 = 0;
  let mut x1736: u32 = 0;
  fiat_p256_mulx_u32(&mut x1735, &mut x1736, x1589, (arg3[4]));
  let mut x1737: u32 = 0;
  let mut x1738: u32 = 0;
  fiat_p256_mulx_u32(&mut x1737, &mut x1738, x1589, (arg3[3]));
  let mut x1739: u32 = 0;
  let mut x1740: u32 = 0;
  fiat_p256_mulx_u32(&mut x1739, &mut x1740, x1589, (arg3[2]));
  let mut x1741: u32 = 0;
  let mut x1742: u32 = 0;
  fiat_p256_mulx_u32(&mut x1741, &mut x1742, x1589, (arg3[1]));
  let mut x1743: u32 = 0;
  let mut x1744: u32 = 0;
  fiat_p256_mulx_u32(&mut x1743, &mut x1744, x1589, (arg3[0]));
  let mut x1745: u32 = 0;
  let mut x1746: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1745, &mut x1746, 0x0, x1744, x1741);
  let mut x1747: u32 = 0;
  let mut x1748: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1747, &mut x1748, x1746, x1742, x1739);
  let mut x1749: u32 = 0;
  let mut x1750: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1749, &mut x1750, x1748, x1740, x1737);
  let mut x1751: u32 = 0;
  let mut x1752: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1751, &mut x1752, x1750, x1738, x1735);
  let mut x1753: u32 = 0;
  let mut x1754: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1753, &mut x1754, x1752, x1736, x1733);
  let mut x1755: u32 = 0;
  let mut x1756: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1755, &mut x1756, x1754, x1734, x1731);
  let mut x1757: u32 = 0;
  let mut x1758: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1757, &mut x1758, x1756, x1732, x1729);
  let x1759: u32 = ((x1758 as u32) + x1730);
  let mut x1760: u32 = 0;
  let mut x1761: u32 = 0;
  fiat_p256_mulx_u32(&mut x1760, &mut x1761, x1743, 0xffffffff);
  let mut x1762: u32 = 0;
  let mut x1763: u32 = 0;
  fiat_p256_mulx_u32(&mut x1762, &mut x1763, x1743, 0xffffffff);
  let mut x1764: u32 = 0;
  let mut x1765: u32 = 0;
  fiat_p256_mulx_u32(&mut x1764, &mut x1765, x1743, 0xffffffff);
  let mut x1766: u32 = 0;
  let mut x1767: u32 = 0;
  fiat_p256_mulx_u32(&mut x1766, &mut x1767, x1743, 0xffffffff);
  let mut x1768: u32 = 0;
  let mut x1769: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1768, &mut x1769, 0x0, x1767, x1764);
  let mut x1770: u32 = 0;
  let mut x1771: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1770, &mut x1771, x1769, x1765, x1762);
  let x1772: u32 = ((x1771 as u32) + x1763);
  let mut x1773: u32 = 0;
  let mut x1774: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1773, &mut x1774, 0x0, x1743, x1766);
  let mut x1775: u32 = 0;
  let mut x1776: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1775, &mut x1776, x1774, x1745, x1768);
  let mut x1777: u32 = 0;
  let mut x1778: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1777, &mut x1778, x1776, x1747, x1770);
  let mut x1779: u32 = 0;
  let mut x1780: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1779, &mut x1780, x1778, x1749, x1772);
  let mut x1781: u32 = 0;
  let mut x1782: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1781, &mut x1782, x1780, x1751, (0x0 as u32));
  let mut x1783: u32 = 0;
  let mut x1784: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1783, &mut x1784, x1782, x1753, (0x0 as u32));
  let mut x1785: u32 = 0;
  let mut x1786: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1785, &mut x1786, x1784, x1755, x1743);
  let mut x1787: u32 = 0;
  let mut x1788: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1787, &mut x1788, x1786, x1757, x1760);
  let mut x1789: u32 = 0;
  let mut x1790: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1789, &mut x1790, x1788, x1759, x1761);
  let mut x1791: u32 = 0;
  let mut x1792: u32 = 0;
  fiat_p256_mulx_u32(&mut x1791, &mut x1792, x1590, (arg3[7]));
  let mut x1793: u32 = 0;
  let mut x1794: u32 = 0;
  fiat_p256_mulx_u32(&mut x1793, &mut x1794, x1590, (arg3[6]));
  let mut x1795: u32 = 0;
  let mut x1796: u32 = 0;
  fiat_p256_mulx_u32(&mut x1795, &mut x1796, x1590, (arg3[5]));
  let mut x1797: u32 = 0;
  let mut x1798: u32 = 0;
  fiat_p256_mulx_u32(&mut x1797, &mut x1798, x1590, (arg3[4]));
  let mut x1799: u32 = 0;
  let mut x1800: u32 = 0;
  fiat_p256_mulx_u32(&mut x1799, &mut x1800, x1590, (arg3[3]));
  let mut x1801: u32 = 0;
  let mut x1802: u32 = 0;
  fiat_p256_mulx_u32(&mut x1801, &mut x1802, x1590, (arg3[2]));
  let mut x1803: u32 = 0;
  let mut x1804: u32 = 0;
  fiat_p256_mulx_u32(&mut x1803, &mut x1804, x1590, (arg3[1]));
  let mut x1805: u32 = 0;
  let mut x1806: u32 = 0;
  fiat_p256_mulx_u32(&mut x1805, &mut x1806, x1590, (arg3[0]));
  let mut x1807: u32 = 0;
  let mut x1808: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1807, &mut x1808, 0x0, x1806, x1803);
  let mut x1809: u32 = 0;
  let mut x1810: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1809, &mut x1810, x1808, x1804, x1801);
  let mut x1811: u32 = 0;
  let mut x1812: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1811, &mut x1812, x1810, x1802, x1799);
  let mut x1813: u32 = 0;
  let mut x1814: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1813, &mut x1814, x1812, x1800, x1797);
  let mut x1815: u32 = 0;
  let mut x1816: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1815, &mut x1816, x1814, x1798, x1795);
  let mut x1817: u32 = 0;
  let mut x1818: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1817, &mut x1818, x1816, x1796, x1793);
  let mut x1819: u32 = 0;
  let mut x1820: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1819, &mut x1820, x1818, x1794, x1791);
  let x1821: u32 = ((x1820 as u32) + x1792);
  let mut x1822: u32 = 0;
  let mut x1823: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1822, &mut x1823, 0x0, x1775, x1805);
  let mut x1824: u32 = 0;
  let mut x1825: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1824, &mut x1825, x1823, x1777, x1807);
  let mut x1826: u32 = 0;
  let mut x1827: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1826, &mut x1827, x1825, x1779, x1809);
  let mut x1828: u32 = 0;
  let mut x1829: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1828, &mut x1829, x1827, x1781, x1811);
  let mut x1830: u32 = 0;
  let mut x1831: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1830, &mut x1831, x1829, x1783, x1813);
  let mut x1832: u32 = 0;
  let mut x1833: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1832, &mut x1833, x1831, x1785, x1815);
  let mut x1834: u32 = 0;
  let mut x1835: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1834, &mut x1835, x1833, x1787, x1817);
  let mut x1836: u32 = 0;
  let mut x1837: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1836, &mut x1837, x1835, x1789, x1819);
  let mut x1838: u32 = 0;
  let mut x1839: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1838, &mut x1839, x1837, (x1790 as u32), x1821);
  let mut x1840: u32 = 0;
  let mut x1841: u32 = 0;
  fiat_p256_mulx_u32(&mut x1840, &mut x1841, x1822, 0xffffffff);
  let mut x1842: u32 = 0;
  let mut x1843: u32 = 0;
  fiat_p256_mulx_u32(&mut x1842, &mut x1843, x1822, 0xffffffff);
  let mut x1844: u32 = 0;
  let mut x1845: u32 = 0;
  fiat_p256_mulx_u32(&mut x1844, &mut x1845, x1822, 0xffffffff);
  let mut x1846: u32 = 0;
  let mut x1847: u32 = 0;
  fiat_p256_mulx_u32(&mut x1846, &mut x1847, x1822, 0xffffffff);
  let mut x1848: u32 = 0;
  let mut x1849: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1848, &mut x1849, 0x0, x1847, x1844);
  let mut x1850: u32 = 0;
  let mut x1851: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1850, &mut x1851, x1849, x1845, x1842);
  let x1852: u32 = ((x1851 as u32) + x1843);
  let mut x1853: u32 = 0;
  let mut x1854: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1853, &mut x1854, 0x0, x1822, x1846);
  let mut x1855: u32 = 0;
  let mut x1856: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1855, &mut x1856, x1854, x1824, x1848);
  let mut x1857: u32 = 0;
  let mut x1858: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1857, &mut x1858, x1856, x1826, x1850);
  let mut x1859: u32 = 0;
  let mut x1860: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1859, &mut x1860, x1858, x1828, x1852);
  let mut x1861: u32 = 0;
  let mut x1862: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1861, &mut x1862, x1860, x1830, (0x0 as u32));
  let mut x1863: u32 = 0;
  let mut x1864: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1863, &mut x1864, x1862, x1832, (0x0 as u32));
  let mut x1865: u32 = 0;
  let mut x1866: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1865, &mut x1866, x1864, x1834, x1822);
  let mut x1867: u32 = 0;
  let mut x1868: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1867, &mut x1868, x1866, x1836, x1840);
  let mut x1869: u32 = 0;
  let mut x1870: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1869, &mut x1870, x1868, x1838, x1841);
  let x1871: u32 = ((x1870 as u32) + (x1839 as u32));
  let mut x1872: u32 = 0;
  let mut x1873: u32 = 0;
  fiat_p256_mulx_u32(&mut x1872, &mut x1873, x1591, (arg3[7]));
  let mut x1874: u32 = 0;
  let mut x1875: u32 = 0;
  fiat_p256_mulx_u32(&mut x1874, &mut x1875, x1591, (arg3[6]));
  let mut x1876: u32 = 0;
  let mut x1877: u32 = 0;
  fiat_p256_mulx_u32(&mut x1876, &mut x1877, x1591, (arg3[5]));
  let mut x1878: u32 = 0;
  let mut x1879: u32 = 0;
  fiat_p256_mulx_u32(&mut x1878, &mut x1879, x1591, (arg3[4]));
  let mut x1880: u32 = 0;
  let mut x1881: u32 = 0;
  fiat_p256_mulx_u32(&mut x1880, &mut x1881, x1591, (arg3[3]));
  let mut x1882: u32 = 0;
  let mut x1883: u32 = 0;
  fiat_p256_mulx_u32(&mut x1882, &mut x1883, x1591, (arg3[2]));
  let mut x1884: u32 = 0;
  let mut x1885: u32 = 0;
  fiat_p256_mulx_u32(&mut x1884, &mut x1885, x1591, (arg3[1]));
  let mut x1886: u32 = 0;
  let mut x1887: u32 = 0;
  fiat_p256_mulx_u32(&mut x1886, &mut x1887, x1591, (arg3[0]));
  let mut x1888: u32 = 0;
  let mut x1889: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1888, &mut x1889, 0x0, x1887, x1884);
  let mut x1890: u32 = 0;
  let mut x1891: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1890, &mut x1891, x1889, x1885, x1882);
  let mut x1892: u32 = 0;
  let mut x1893: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1892, &mut x1893, x1891, x1883, x1880);
  let mut x1894: u32 = 0;
  let mut x1895: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1894, &mut x1895, x1893, x1881, x1878);
  let mut x1896: u32 = 0;
  let mut x1897: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1896, &mut x1897, x1895, x1879, x1876);
  let mut x1898: u32 = 0;
  let mut x1899: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1898, &mut x1899, x1897, x1877, x1874);
  let mut x1900: u32 = 0;
  let mut x1901: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1900, &mut x1901, x1899, x1875, x1872);
  let x1902: u32 = ((x1901 as u32) + x1873);
  let mut x1903: u32 = 0;
  let mut x1904: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1903, &mut x1904, 0x0, x1855, x1886);
  let mut x1905: u32 = 0;
  let mut x1906: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1905, &mut x1906, x1904, x1857, x1888);
  let mut x1907: u32 = 0;
  let mut x1908: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1907, &mut x1908, x1906, x1859, x1890);
  let mut x1909: u32 = 0;
  let mut x1910: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1909, &mut x1910, x1908, x1861, x1892);
  let mut x1911: u32 = 0;
  let mut x1912: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1911, &mut x1912, x1910, x1863, x1894);
  let mut x1913: u32 = 0;
  let mut x1914: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1913, &mut x1914, x1912, x1865, x1896);
  let mut x1915: u32 = 0;
  let mut x1916: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1915, &mut x1916, x1914, x1867, x1898);
  let mut x1917: u32 = 0;
  let mut x1918: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1917, &mut x1918, x1916, x1869, x1900);
  let mut x1919: u32 = 0;
  let mut x1920: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1919, &mut x1920, x1918, x1871, x1902);
  let mut x1921: u32 = 0;
  let mut x1922: u32 = 0;
  fiat_p256_mulx_u32(&mut x1921, &mut x1922, x1903, 0xffffffff);
  let mut x1923: u32 = 0;
  let mut x1924: u32 = 0;
  fiat_p256_mulx_u32(&mut x1923, &mut x1924, x1903, 0xffffffff);
  let mut x1925: u32 = 0;
  let mut x1926: u32 = 0;
  fiat_p256_mulx_u32(&mut x1925, &mut x1926, x1903, 0xffffffff);
  let mut x1927: u32 = 0;
  let mut x1928: u32 = 0;
  fiat_p256_mulx_u32(&mut x1927, &mut x1928, x1903, 0xffffffff);
  let mut x1929: u32 = 0;
  let mut x1930: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1929, &mut x1930, 0x0, x1928, x1925);
  let mut x1931: u32 = 0;
  let mut x1932: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1931, &mut x1932, x1930, x1926, x1923);
  let x1933: u32 = ((x1932 as u32) + x1924);
  let mut x1934: u32 = 0;
  let mut x1935: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1934, &mut x1935, 0x0, x1903, x1927);
  let mut x1936: u32 = 0;
  let mut x1937: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1936, &mut x1937, x1935, x1905, x1929);
  let mut x1938: u32 = 0;
  let mut x1939: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1938, &mut x1939, x1937, x1907, x1931);
  let mut x1940: u32 = 0;
  let mut x1941: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1940, &mut x1941, x1939, x1909, x1933);
  let mut x1942: u32 = 0;
  let mut x1943: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1942, &mut x1943, x1941, x1911, (0x0 as u32));
  let mut x1944: u32 = 0;
  let mut x1945: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1944, &mut x1945, x1943, x1913, (0x0 as u32));
  let mut x1946: u32 = 0;
  let mut x1947: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1946, &mut x1947, x1945, x1915, x1903);
  let mut x1948: u32 = 0;
  let mut x1949: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1948, &mut x1949, x1947, x1917, x1921);
  let mut x1950: u32 = 0;
  let mut x1951: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1950, &mut x1951, x1949, x1919, x1922);
  let x1952: u32 = ((x1951 as u32) + (x1920 as u32));
  let mut x1953: u32 = 0;
  let mut x1954: u32 = 0;
  fiat_p256_mulx_u32(&mut x1953, &mut x1954, x1592, (arg3[7]));
  let mut x1955: u32 = 0;
  let mut x1956: u32 = 0;
  fiat_p256_mulx_u32(&mut x1955, &mut x1956, x1592, (arg3[6]));
  let mut x1957: u32 = 0;
  let mut x1958: u32 = 0;
  fiat_p256_mulx_u32(&mut x1957, &mut x1958, x1592, (arg3[5]));
  let mut x1959: u32 = 0;
  let mut x1960: u32 = 0;
  fiat_p256_mulx_u32(&mut x1959, &mut x1960, x1592, (arg3[4]));
  let mut x1961: u32 = 0;
  let mut x1962: u32 = 0;
  fiat_p256_mulx_u32(&mut x1961, &mut x1962, x1592, (arg3[3]));
  let mut x1963: u32 = 0;
  let mut x1964: u32 = 0;
  fiat_p256_mulx_u32(&mut x1963, &mut x1964, x1592, (arg3[2]));
  let mut x1965: u32 = 0;
  let mut x1966: u32 = 0;
  fiat_p256_mulx_u32(&mut x1965, &mut x1966, x1592, (arg3[1]));
  let mut x1967: u32 = 0;
  let mut x1968: u32 = 0;
  fiat_p256_mulx_u32(&mut x1967, &mut x1968, x1592, (arg3[0]));
  let mut x1969: u32 = 0;
  let mut x1970: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1969, &mut x1970, 0x0, x1968, x1965);
  let mut x1971: u32 = 0;
  let mut x1972: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1971, &mut x1972, x1970, x1966, x1963);
  let mut x1973: u32 = 0;
  let mut x1974: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1973, &mut x1974, x1972, x1964, x1961);
  let mut x1975: u32 = 0;
  let mut x1976: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1975, &mut x1976, x1974, x1962, x1959);
  let mut x1977: u32 = 0;
  let mut x1978: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1977, &mut x1978, x1976, x1960, x1957);
  let mut x1979: u32 = 0;
  let mut x1980: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1979, &mut x1980, x1978, x1958, x1955);
  let mut x1981: u32 = 0;
  let mut x1982: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1981, &mut x1982, x1980, x1956, x1953);
  let x1983: u32 = ((x1982 as u32) + x1954);
  let mut x1984: u32 = 0;
  let mut x1985: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1984, &mut x1985, 0x0, x1936, x1967);
  let mut x1986: u32 = 0;
  let mut x1987: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1986, &mut x1987, x1985, x1938, x1969);
  let mut x1988: u32 = 0;
  let mut x1989: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1988, &mut x1989, x1987, x1940, x1971);
  let mut x1990: u32 = 0;
  let mut x1991: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1990, &mut x1991, x1989, x1942, x1973);
  let mut x1992: u32 = 0;
  let mut x1993: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1992, &mut x1993, x1991, x1944, x1975);
  let mut x1994: u32 = 0;
  let mut x1995: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1994, &mut x1995, x1993, x1946, x1977);
  let mut x1996: u32 = 0;
  let mut x1997: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1996, &mut x1997, x1995, x1948, x1979);
  let mut x1998: u32 = 0;
  let mut x1999: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x1998, &mut x1999, x1997, x1950, x1981);
  let mut x2000: u32 = 0;
  let mut x2001: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2000, &mut x2001, x1999, x1952, x1983);
  let mut x2002: u32 = 0;
  let mut x2003: u32 = 0;
  fiat_p256_mulx_u32(&mut x2002, &mut x2003, x1984, 0xffffffff);
  let mut x2004: u32 = 0;
  let mut x2005: u32 = 0;
  fiat_p256_mulx_u32(&mut x2004, &mut x2005, x1984, 0xffffffff);
  let mut x2006: u32 = 0;
  let mut x2007: u32 = 0;
  fiat_p256_mulx_u32(&mut x2006, &mut x2007, x1984, 0xffffffff);
  let mut x2008: u32 = 0;
  let mut x2009: u32 = 0;
  fiat_p256_mulx_u32(&mut x2008, &mut x2009, x1984, 0xffffffff);
  let mut x2010: u32 = 0;
  let mut x2011: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2010, &mut x2011, 0x0, x2009, x2006);
  let mut x2012: u32 = 0;
  let mut x2013: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2012, &mut x2013, x2011, x2007, x2004);
  let x2014: u32 = ((x2013 as u32) + x2005);
  let mut x2015: u32 = 0;
  let mut x2016: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2015, &mut x2016, 0x0, x1984, x2008);
  let mut x2017: u32 = 0;
  let mut x2018: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2017, &mut x2018, x2016, x1986, x2010);
  let mut x2019: u32 = 0;
  let mut x2020: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2019, &mut x2020, x2018, x1988, x2012);
  let mut x2021: u32 = 0;
  let mut x2022: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2021, &mut x2022, x2020, x1990, x2014);
  let mut x2023: u32 = 0;
  let mut x2024: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2023, &mut x2024, x2022, x1992, (0x0 as u32));
  let mut x2025: u32 = 0;
  let mut x2026: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2025, &mut x2026, x2024, x1994, (0x0 as u32));
  let mut x2027: u32 = 0;
  let mut x2028: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2027, &mut x2028, x2026, x1996, x1984);
  let mut x2029: u32 = 0;
  let mut x2030: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2029, &mut x2030, x2028, x1998, x2002);
  let mut x2031: u32 = 0;
  let mut x2032: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2031, &mut x2032, x2030, x2000, x2003);
  let x2033: u32 = ((x2032 as u32) + (x2001 as u32));
  let mut x2034: u32 = 0;
  let mut x2035: u32 = 0;
  fiat_p256_mulx_u32(&mut x2034, &mut x2035, x1593, (arg3[7]));
  let mut x2036: u32 = 0;
  let mut x2037: u32 = 0;
  fiat_p256_mulx_u32(&mut x2036, &mut x2037, x1593, (arg3[6]));
  let mut x2038: u32 = 0;
  let mut x2039: u32 = 0;
  fiat_p256_mulx_u32(&mut x2038, &mut x2039, x1593, (arg3[5]));
  let mut x2040: u32 = 0;
  let mut x2041: u32 = 0;
  fiat_p256_mulx_u32(&mut x2040, &mut x2041, x1593, (arg3[4]));
  let mut x2042: u32 = 0;
  let mut x2043: u32 = 0;
  fiat_p256_mulx_u32(&mut x2042, &mut x2043, x1593, (arg3[3]));
  let mut x2044: u32 = 0;
  let mut x2045: u32 = 0;
  fiat_p256_mulx_u32(&mut x2044, &mut x2045, x1593, (arg3[2]));
  let mut x2046: u32 = 0;
  let mut x2047: u32 = 0;
  fiat_p256_mulx_u32(&mut x2046, &mut x2047, x1593, (arg3[1]));
  let mut x2048: u32 = 0;
  let mut x2049: u32 = 0;
  fiat_p256_mulx_u32(&mut x2048, &mut x2049, x1593, (arg3[0]));
  let mut x2050: u32 = 0;
  let mut x2051: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2050, &mut x2051, 0x0, x2049, x2046);
  let mut x2052: u32 = 0;
  let mut x2053: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2052, &mut x2053, x2051, x2047, x2044);
  let mut x2054: u32 = 0;
  let mut x2055: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2054, &mut x2055, x2053, x2045, x2042);
  let mut x2056: u32 = 0;
  let mut x2057: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2056, &mut x2057, x2055, x2043, x2040);
  let mut x2058: u32 = 0;
  let mut x2059: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2058, &mut x2059, x2057, x2041, x2038);
  let mut x2060: u32 = 0;
  let mut x2061: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2060, &mut x2061, x2059, x2039, x2036);
  let mut x2062: u32 = 0;
  let mut x2063: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2062, &mut x2063, x2061, x2037, x2034);
  let x2064: u32 = ((x2063 as u32) + x2035);
  let mut x2065: u32 = 0;
  let mut x2066: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2065, &mut x2066, 0x0, x2017, x2048);
  let mut x2067: u32 = 0;
  let mut x2068: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2067, &mut x2068, x2066, x2019, x2050);
  let mut x2069: u32 = 0;
  let mut x2070: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2069, &mut x2070, x2068, x2021, x2052);
  let mut x2071: u32 = 0;
  let mut x2072: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2071, &mut x2072, x2070, x2023, x2054);
  let mut x2073: u32 = 0;
  let mut x2074: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2073, &mut x2074, x2072, x2025, x2056);
  let mut x2075: u32 = 0;
  let mut x2076: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2075, &mut x2076, x2074, x2027, x2058);
  let mut x2077: u32 = 0;
  let mut x2078: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2077, &mut x2078, x2076, x2029, x2060);
  let mut x2079: u32 = 0;
  let mut x2080: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2079, &mut x2080, x2078, x2031, x2062);
  let mut x2081: u32 = 0;
  let mut x2082: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2081, &mut x2082, x2080, x2033, x2064);
  let mut x2083: u32 = 0;
  let mut x2084: u32 = 0;
  fiat_p256_mulx_u32(&mut x2083, &mut x2084, x2065, 0xffffffff);
  let mut x2085: u32 = 0;
  let mut x2086: u32 = 0;
  fiat_p256_mulx_u32(&mut x2085, &mut x2086, x2065, 0xffffffff);
  let mut x2087: u32 = 0;
  let mut x2088: u32 = 0;
  fiat_p256_mulx_u32(&mut x2087, &mut x2088, x2065, 0xffffffff);
  let mut x2089: u32 = 0;
  let mut x2090: u32 = 0;
  fiat_p256_mulx_u32(&mut x2089, &mut x2090, x2065, 0xffffffff);
  let mut x2091: u32 = 0;
  let mut x2092: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2091, &mut x2092, 0x0, x2090, x2087);
  let mut x2093: u32 = 0;
  let mut x2094: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2093, &mut x2094, x2092, x2088, x2085);
  let x2095: u32 = ((x2094 as u32) + x2086);
  let mut x2096: u32 = 0;
  let mut x2097: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2096, &mut x2097, 0x0, x2065, x2089);
  let mut x2098: u32 = 0;
  let mut x2099: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2098, &mut x2099, x2097, x2067, x2091);
  let mut x2100: u32 = 0;
  let mut x2101: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2100, &mut x2101, x2099, x2069, x2093);
  let mut x2102: u32 = 0;
  let mut x2103: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2102, &mut x2103, x2101, x2071, x2095);
  let mut x2104: u32 = 0;
  let mut x2105: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2104, &mut x2105, x2103, x2073, (0x0 as u32));
  let mut x2106: u32 = 0;
  let mut x2107: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2106, &mut x2107, x2105, x2075, (0x0 as u32));
  let mut x2108: u32 = 0;
  let mut x2109: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2108, &mut x2109, x2107, x2077, x2065);
  let mut x2110: u32 = 0;
  let mut x2111: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2110, &mut x2111, x2109, x2079, x2083);
  let mut x2112: u32 = 0;
  let mut x2113: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2112, &mut x2113, x2111, x2081, x2084);
  let x2114: u32 = ((x2113 as u32) + (x2082 as u32));
  let mut x2115: u32 = 0;
  let mut x2116: u32 = 0;
  fiat_p256_mulx_u32(&mut x2115, &mut x2116, x1594, (arg3[7]));
  let mut x2117: u32 = 0;
  let mut x2118: u32 = 0;
  fiat_p256_mulx_u32(&mut x2117, &mut x2118, x1594, (arg3[6]));
  let mut x2119: u32 = 0;
  let mut x2120: u32 = 0;
  fiat_p256_mulx_u32(&mut x2119, &mut x2120, x1594, (arg3[5]));
  let mut x2121: u32 = 0;
  let mut x2122: u32 = 0;
  fiat_p256_mulx_u32(&mut x2121, &mut x2122, x1594, (arg3[4]));
  let mut x2123: u32 = 0;
  let mut x2124: u32 = 0;
  fiat_p256_mulx_u32(&mut x2123, &mut x2124, x1594, (arg3[3]));
  let mut x2125: u32 = 0;
  let mut x2126: u32 = 0;
  fiat_p256_mulx_u32(&mut x2125, &mut x2126, x1594, (arg3[2]));
  let mut x2127: u32 = 0;
  let mut x2128: u32 = 0;
  fiat_p256_mulx_u32(&mut x2127, &mut x2128, x1594, (arg3[1]));
  let mut x2129: u32 = 0;
  let mut x2130: u32 = 0;
  fiat_p256_mulx_u32(&mut x2129, &mut x2130, x1594, (arg3[0]));
  let mut x2131: u32 = 0;
  let mut x2132: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2131, &mut x2132, 0x0, x2130, x2127);
  let mut x2133: u32 = 0;
  let mut x2134: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2133, &mut x2134, x2132, x2128, x2125);
  let mut x2135: u32 = 0;
  let mut x2136: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2135, &mut x2136, x2134, x2126, x2123);
  let mut x2137: u32 = 0;
  let mut x2138: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2137, &mut x2138, x2136, x2124, x2121);
  let mut x2139: u32 = 0;
  let mut x2140: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2139, &mut x2140, x2138, x2122, x2119);
  let mut x2141: u32 = 0;
  let mut x2142: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2141, &mut x2142, x2140, x2120, x2117);
  let mut x2143: u32 = 0;
  let mut x2144: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2143, &mut x2144, x2142, x2118, x2115);
  let x2145: u32 = ((x2144 as u32) + x2116);
  let mut x2146: u32 = 0;
  let mut x2147: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2146, &mut x2147, 0x0, x2098, x2129);
  let mut x2148: u32 = 0;
  let mut x2149: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2148, &mut x2149, x2147, x2100, x2131);
  let mut x2150: u32 = 0;
  let mut x2151: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2150, &mut x2151, x2149, x2102, x2133);
  let mut x2152: u32 = 0;
  let mut x2153: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2152, &mut x2153, x2151, x2104, x2135);
  let mut x2154: u32 = 0;
  let mut x2155: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2154, &mut x2155, x2153, x2106, x2137);
  let mut x2156: u32 = 0;
  let mut x2157: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2156, &mut x2157, x2155, x2108, x2139);
  let mut x2158: u32 = 0;
  let mut x2159: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2158, &mut x2159, x2157, x2110, x2141);
  let mut x2160: u32 = 0;
  let mut x2161: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2160, &mut x2161, x2159, x2112, x2143);
  let mut x2162: u32 = 0;
  let mut x2163: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2162, &mut x2163, x2161, x2114, x2145);
  let mut x2164: u32 = 0;
  let mut x2165: u32 = 0;
  fiat_p256_mulx_u32(&mut x2164, &mut x2165, x2146, 0xffffffff);
  let mut x2166: u32 = 0;
  let mut x2167: u32 = 0;
  fiat_p256_mulx_u32(&mut x2166, &mut x2167, x2146, 0xffffffff);
  let mut x2168: u32 = 0;
  let mut x2169: u32 = 0;
  fiat_p256_mulx_u32(&mut x2168, &mut x2169, x2146, 0xffffffff);
  let mut x2170: u32 = 0;
  let mut x2171: u32 = 0;
  fiat_p256_mulx_u32(&mut x2170, &mut x2171, x2146, 0xffffffff);
  let mut x2172: u32 = 0;
  let mut x2173: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2172, &mut x2173, 0x0, x2171, x2168);
  let mut x2174: u32 = 0;
  let mut x2175: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2174, &mut x2175, x2173, x2169, x2166);
  let x2176: u32 = ((x2175 as u32) + x2167);
  let mut x2177: u32 = 0;
  let mut x2178: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2177, &mut x2178, 0x0, x2146, x2170);
  let mut x2179: u32 = 0;
  let mut x2180: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2179, &mut x2180, x2178, x2148, x2172);
  let mut x2181: u32 = 0;
  let mut x2182: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2181, &mut x2182, x2180, x2150, x2174);
  let mut x2183: u32 = 0;
  let mut x2184: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2183, &mut x2184, x2182, x2152, x2176);
  let mut x2185: u32 = 0;
  let mut x2186: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2185, &mut x2186, x2184, x2154, (0x0 as u32));
  let mut x2187: u32 = 0;
  let mut x2188: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2187, &mut x2188, x2186, x2156, (0x0 as u32));
  let mut x2189: u32 = 0;
  let mut x2190: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2189, &mut x2190, x2188, x2158, x2146);
  let mut x2191: u32 = 0;
  let mut x2192: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2191, &mut x2192, x2190, x2160, x2164);
  let mut x2193: u32 = 0;
  let mut x2194: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2193, &mut x2194, x2192, x2162, x2165);
  let x2195: u32 = ((x2194 as u32) + (x2163 as u32));
  let mut x2196: u32 = 0;
  let mut x2197: u32 = 0;
  fiat_p256_mulx_u32(&mut x2196, &mut x2197, x1595, (arg3[7]));
  let mut x2198: u32 = 0;
  let mut x2199: u32 = 0;
  fiat_p256_mulx_u32(&mut x2198, &mut x2199, x1595, (arg3[6]));
  let mut x2200: u32 = 0;
  let mut x2201: u32 = 0;
  fiat_p256_mulx_u32(&mut x2200, &mut x2201, x1595, (arg3[5]));
  let mut x2202: u32 = 0;
  let mut x2203: u32 = 0;
  fiat_p256_mulx_u32(&mut x2202, &mut x2203, x1595, (arg3[4]));
  let mut x2204: u32 = 0;
  let mut x2205: u32 = 0;
  fiat_p256_mulx_u32(&mut x2204, &mut x2205, x1595, (arg3[3]));
  let mut x2206: u32 = 0;
  let mut x2207: u32 = 0;
  fiat_p256_mulx_u32(&mut x2206, &mut x2207, x1595, (arg3[2]));
  let mut x2208: u32 = 0;
  let mut x2209: u32 = 0;
  fiat_p256_mulx_u32(&mut x2208, &mut x2209, x1595, (arg3[1]));
  let mut x2210: u32 = 0;
  let mut x2211: u32 = 0;
  fiat_p256_mulx_u32(&mut x2210, &mut x2211, x1595, (arg3[0]));
  let mut x2212: u32 = 0;
  let mut x2213: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2212, &mut x2213, 0x0, x2211, x2208);
  let mut x2214: u32 = 0;
  let mut x2215: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2214, &mut x2215, x2213, x2209, x2206);
  let mut x2216: u32 = 0;
  let mut x2217: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2216, &mut x2217, x2215, x2207, x2204);
  let mut x2218: u32 = 0;
  let mut x2219: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2218, &mut x2219, x2217, x2205, x2202);
  let mut x2220: u32 = 0;
  let mut x2221: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2220, &mut x2221, x2219, x2203, x2200);
  let mut x2222: u32 = 0;
  let mut x2223: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2222, &mut x2223, x2221, x2201, x2198);
  let mut x2224: u32 = 0;
  let mut x2225: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2224, &mut x2225, x2223, x2199, x2196);
  let x2226: u32 = ((x2225 as u32) + x2197);
  let mut x2227: u32 = 0;
  let mut x2228: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2227, &mut x2228, 0x0, x2179, x2210);
  let mut x2229: u32 = 0;
  let mut x2230: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2229, &mut x2230, x2228, x2181, x2212);
  let mut x2231: u32 = 0;
  let mut x2232: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2231, &mut x2232, x2230, x2183, x2214);
  let mut x2233: u32 = 0;
  let mut x2234: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2233, &mut x2234, x2232, x2185, x2216);
  let mut x2235: u32 = 0;
  let mut x2236: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2235, &mut x2236, x2234, x2187, x2218);
  let mut x2237: u32 = 0;
  let mut x2238: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2237, &mut x2238, x2236, x2189, x2220);
  let mut x2239: u32 = 0;
  let mut x2240: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2239, &mut x2240, x2238, x2191, x2222);
  let mut x2241: u32 = 0;
  let mut x2242: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2241, &mut x2242, x2240, x2193, x2224);
  let mut x2243: u32 = 0;
  let mut x2244: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2243, &mut x2244, x2242, x2195, x2226);
  let mut x2245: u32 = 0;
  let mut x2246: u32 = 0;
  fiat_p256_mulx_u32(&mut x2245, &mut x2246, x2227, 0xffffffff);
  let mut x2247: u32 = 0;
  let mut x2248: u32 = 0;
  fiat_p256_mulx_u32(&mut x2247, &mut x2248, x2227, 0xffffffff);
  let mut x2249: u32 = 0;
  let mut x2250: u32 = 0;
  fiat_p256_mulx_u32(&mut x2249, &mut x2250, x2227, 0xffffffff);
  let mut x2251: u32 = 0;
  let mut x2252: u32 = 0;
  fiat_p256_mulx_u32(&mut x2251, &mut x2252, x2227, 0xffffffff);
  let mut x2253: u32 = 0;
  let mut x2254: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2253, &mut x2254, 0x0, x2252, x2249);
  let mut x2255: u32 = 0;
  let mut x2256: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2255, &mut x2256, x2254, x2250, x2247);
  let x2257: u32 = ((x2256 as u32) + x2248);
  let mut x2258: u32 = 0;
  let mut x2259: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2258, &mut x2259, 0x0, x2227, x2251);
  let mut x2260: u32 = 0;
  let mut x2261: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2260, &mut x2261, x2259, x2229, x2253);
  let mut x2262: u32 = 0;
  let mut x2263: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2262, &mut x2263, x2261, x2231, x2255);
  let mut x2264: u32 = 0;
  let mut x2265: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2264, &mut x2265, x2263, x2233, x2257);
  let mut x2266: u32 = 0;
  let mut x2267: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2266, &mut x2267, x2265, x2235, (0x0 as u32));
  let mut x2268: u32 = 0;
  let mut x2269: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2268, &mut x2269, x2267, x2237, (0x0 as u32));
  let mut x2270: u32 = 0;
  let mut x2271: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2270, &mut x2271, x2269, x2239, x2227);
  let mut x2272: u32 = 0;
  let mut x2273: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2272, &mut x2273, x2271, x2241, x2245);
  let mut x2274: u32 = 0;
  let mut x2275: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2274, &mut x2275, x2273, x2243, x2246);
  let x2276: u32 = ((x2275 as u32) + (x2244 as u32));
  let mut x2277: u32 = 0;
  let mut x2278: u32 = 0;
  fiat_p256_mulx_u32(&mut x2277, &mut x2278, x1596, (arg3[7]));
  let mut x2279: u32 = 0;
  let mut x2280: u32 = 0;
  fiat_p256_mulx_u32(&mut x2279, &mut x2280, x1596, (arg3[6]));
  let mut x2281: u32 = 0;
  let mut x2282: u32 = 0;
  fiat_p256_mulx_u32(&mut x2281, &mut x2282, x1596, (arg3[5]));
  let mut x2283: u32 = 0;
  let mut x2284: u32 = 0;
  fiat_p256_mulx_u32(&mut x2283, &mut x2284, x1596, (arg3[4]));
  let mut x2285: u32 = 0;
  let mut x2286: u32 = 0;
  fiat_p256_mulx_u32(&mut x2285, &mut x2286, x1596, (arg3[3]));
  let mut x2287: u32 = 0;
  let mut x2288: u32 = 0;
  fiat_p256_mulx_u32(&mut x2287, &mut x2288, x1596, (arg3[2]));
  let mut x2289: u32 = 0;
  let mut x2290: u32 = 0;
  fiat_p256_mulx_u32(&mut x2289, &mut x2290, x1596, (arg3[1]));
  let mut x2291: u32 = 0;
  let mut x2292: u32 = 0;
  fiat_p256_mulx_u32(&mut x2291, &mut x2292, x1596, (arg3[0]));
  let mut x2293: u32 = 0;
  let mut x2294: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2293, &mut x2294, 0x0, x2292, x2289);
  let mut x2295: u32 = 0;
  let mut x2296: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2295, &mut x2296, x2294, x2290, x2287);
  let mut x2297: u32 = 0;
  let mut x2298: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2297, &mut x2298, x2296, x2288, x2285);
  let mut x2299: u32 = 0;
  let mut x2300: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2299, &mut x2300, x2298, x2286, x2283);
  let mut x2301: u32 = 0;
  let mut x2302: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2301, &mut x2302, x2300, x2284, x2281);
  let mut x2303: u32 = 0;
  let mut x2304: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2303, &mut x2304, x2302, x2282, x2279);
  let mut x2305: u32 = 0;
  let mut x2306: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2305, &mut x2306, x2304, x2280, x2277);
  let x2307: u32 = ((x2306 as u32) + x2278);
  let mut x2308: u32 = 0;
  let mut x2309: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2308, &mut x2309, 0x0, x2260, x2291);
  let mut x2310: u32 = 0;
  let mut x2311: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2310, &mut x2311, x2309, x2262, x2293);
  let mut x2312: u32 = 0;
  let mut x2313: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2312, &mut x2313, x2311, x2264, x2295);
  let mut x2314: u32 = 0;
  let mut x2315: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2314, &mut x2315, x2313, x2266, x2297);
  let mut x2316: u32 = 0;
  let mut x2317: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2316, &mut x2317, x2315, x2268, x2299);
  let mut x2318: u32 = 0;
  let mut x2319: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2318, &mut x2319, x2317, x2270, x2301);
  let mut x2320: u32 = 0;
  let mut x2321: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2320, &mut x2321, x2319, x2272, x2303);
  let mut x2322: u32 = 0;
  let mut x2323: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2322, &mut x2323, x2321, x2274, x2305);
  let mut x2324: u32 = 0;
  let mut x2325: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2324, &mut x2325, x2323, x2276, x2307);
  let mut x2326: u32 = 0;
  let mut x2327: u32 = 0;
  fiat_p256_mulx_u32(&mut x2326, &mut x2327, x2308, 0xffffffff);
  let mut x2328: u32 = 0;
  let mut x2329: u32 = 0;
  fiat_p256_mulx_u32(&mut x2328, &mut x2329, x2308, 0xffffffff);
  let mut x2330: u32 = 0;
  let mut x2331: u32 = 0;
  fiat_p256_mulx_u32(&mut x2330, &mut x2331, x2308, 0xffffffff);
  let mut x2332: u32 = 0;
  let mut x2333: u32 = 0;
  fiat_p256_mulx_u32(&mut x2332, &mut x2333, x2308, 0xffffffff);
  let mut x2334: u32 = 0;
  let mut x2335: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2334, &mut x2335, 0x0, x2333, x2330);
  let mut x2336: u32 = 0;
  let mut x2337: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2336, &mut x2337, x2335, x2331, x2328);
  let x2338: u32 = ((x2337 as u32) + x2329);
  let mut x2339: u32 = 0;
  let mut x2340: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2339, &mut x2340, 0x0, x2308, x2332);
  let mut x2341: u32 = 0;
  let mut x2342: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2341, &mut x2342, x2340, x2310, x2334);
  let mut x2343: u32 = 0;
  let mut x2344: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2343, &mut x2344, x2342, x2312, x2336);
  let mut x2345: u32 = 0;
  let mut x2346: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2345, &mut x2346, x2344, x2314, x2338);
  let mut x2347: u32 = 0;
  let mut x2348: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2347, &mut x2348, x2346, x2316, (0x0 as u32));
  let mut x2349: u32 = 0;
  let mut x2350: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2349, &mut x2350, x2348, x2318, (0x0 as u32));
  let mut x2351: u32 = 0;
  let mut x2352: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2351, &mut x2352, x2350, x2320, x2308);
  let mut x2353: u32 = 0;
  let mut x2354: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2353, &mut x2354, x2352, x2322, x2326);
  let mut x2355: u32 = 0;
  let mut x2356: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2355, &mut x2356, x2354, x2324, x2327);
  let x2357: u32 = ((x2356 as u32) + (x2325 as u32));
  let mut x2358: u32 = 0;
  let mut x2359: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x2358, &mut x2359, 0x0, x2341, 0xffffffff);
  let mut x2360: u32 = 0;
  let mut x2361: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x2360, &mut x2361, x2359, x2343, 0xffffffff);
  let mut x2362: u32 = 0;
  let mut x2363: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x2362, &mut x2363, x2361, x2345, 0xffffffff);
  let mut x2364: u32 = 0;
  let mut x2365: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x2364, &mut x2365, x2363, x2347, (0x0 as u32));
  let mut x2366: u32 = 0;
  let mut x2367: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x2366, &mut x2367, x2365, x2349, (0x0 as u32));
  let mut x2368: u32 = 0;
  let mut x2369: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x2368, &mut x2369, x2367, x2351, (0x0 as u32));
  let mut x2370: u32 = 0;
  let mut x2371: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x2370, &mut x2371, x2369, x2353, (0x1 as u32));
  let mut x2372: u32 = 0;
  let mut x2373: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x2372, &mut x2373, x2371, x2355, 0xffffffff);
  let mut x2374: u32 = 0;
  let mut x2375: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x2374, &mut x2375, x2373, x2357, (0x0 as u32));
  let mut x2376: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x2376, x2375, x2358, x2341);
  let mut x2377: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x2377, x2375, x2360, x2343);
  let mut x2378: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x2378, x2375, x2362, x2345);
  let mut x2379: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x2379, x2375, x2364, x2347);
  let mut x2380: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x2380, x2375, x2366, x2349);
  let mut x2381: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x2381, x2375, x2368, x2351);
  let mut x2382: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x2382, x2375, x2370, x2353);
  let mut x2383: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x2383, x2375, x2372, x2355);
  let mut x2384: u32 = 0;
  let mut x2385: u32 = 0;
  fiat_p256_mulx_u32(&mut x2384, &mut x2385, x1633, (arg4[7]));
  let mut x2386: u32 = 0;
  let mut x2387: u32 = 0;
  fiat_p256_mulx_u32(&mut x2386, &mut x2387, x1633, (arg4[6]));
  let mut x2388: u32 = 0;
  let mut x2389: u32 = 0;
  fiat_p256_mulx_u32(&mut x2388, &mut x2389, x1633, (arg4[5]));
  let mut x2390: u32 = 0;
  let mut x2391: u32 = 0;
  fiat_p256_mulx_u32(&mut x2390, &mut x2391, x1633, (arg4[4]));
  let mut x2392: u32 = 0;
  let mut x2393: u32 = 0;
  fiat_p256_mulx_u32(&mut x2392, &mut x2393, x1633, (arg4[3]));
  let mut x2394: u32 = 0;
  let mut x2395: u32 = 0;
  fiat_p256_mulx_u32(&mut x2394, &mut x2395, x1633, (arg4[2]));
  let mut x2396: u32 = 0;
  let mut x2397: u32 = 0;
  fiat_p256_mulx_u32(&mut x2396, &mut x2397, x1633, (arg4[1]));
  let mut x2398: u32 = 0;
  let mut x2399: u32 = 0;
  fiat_p256_mulx_u32(&mut x2398, &mut x2399, x1633, (arg4[0]));
  let mut x2400: u32 = 0;
  let mut x2401: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2400, &mut x2401, 0x0, x2399, x2396);
  let mut x2402: u32 = 0;
  let mut x2403: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2402, &mut x2403, x2401, x2397, x2394);
  let mut x2404: u32 = 0;
  let mut x2405: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2404, &mut x2405, x2403, x2395, x2392);
  let mut x2406: u32 = 0;
  let mut x2407: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2406, &mut x2407, x2405, x2393, x2390);
  let mut x2408: u32 = 0;
  let mut x2409: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2408, &mut x2409, x2407, x2391, x2388);
  let mut x2410: u32 = 0;
  let mut x2411: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2410, &mut x2411, x2409, x2389, x2386);
  let mut x2412: u32 = 0;
  let mut x2413: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2412, &mut x2413, x2411, x2387, x2384);
  let x2414: u32 = ((x2413 as u32) + x2385);
  let mut x2415: u32 = 0;
  let mut x2416: u32 = 0;
  fiat_p256_mulx_u32(&mut x2415, &mut x2416, x2398, 0xffffffff);
  let mut x2417: u32 = 0;
  let mut x2418: u32 = 0;
  fiat_p256_mulx_u32(&mut x2417, &mut x2418, x2398, 0xffffffff);
  let mut x2419: u32 = 0;
  let mut x2420: u32 = 0;
  fiat_p256_mulx_u32(&mut x2419, &mut x2420, x2398, 0xffffffff);
  let mut x2421: u32 = 0;
  let mut x2422: u32 = 0;
  fiat_p256_mulx_u32(&mut x2421, &mut x2422, x2398, 0xffffffff);
  let mut x2423: u32 = 0;
  let mut x2424: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2423, &mut x2424, 0x0, x2422, x2419);
  let mut x2425: u32 = 0;
  let mut x2426: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2425, &mut x2426, x2424, x2420, x2417);
  let x2427: u32 = ((x2426 as u32) + x2418);
  let mut x2428: u32 = 0;
  let mut x2429: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2428, &mut x2429, 0x0, x2398, x2421);
  let mut x2430: u32 = 0;
  let mut x2431: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2430, &mut x2431, x2429, x2400, x2423);
  let mut x2432: u32 = 0;
  let mut x2433: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2432, &mut x2433, x2431, x2402, x2425);
  let mut x2434: u32 = 0;
  let mut x2435: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2434, &mut x2435, x2433, x2404, x2427);
  let mut x2436: u32 = 0;
  let mut x2437: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2436, &mut x2437, x2435, x2406, (0x0 as u32));
  let mut x2438: u32 = 0;
  let mut x2439: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2438, &mut x2439, x2437, x2408, (0x0 as u32));
  let mut x2440: u32 = 0;
  let mut x2441: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2440, &mut x2441, x2439, x2410, x2398);
  let mut x2442: u32 = 0;
  let mut x2443: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2442, &mut x2443, x2441, x2412, x2415);
  let mut x2444: u32 = 0;
  let mut x2445: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2444, &mut x2445, x2443, x2414, x2416);
  let mut x2446: u32 = 0;
  let mut x2447: u32 = 0;
  fiat_p256_mulx_u32(&mut x2446, &mut x2447, x1634, (arg4[7]));
  let mut x2448: u32 = 0;
  let mut x2449: u32 = 0;
  fiat_p256_mulx_u32(&mut x2448, &mut x2449, x1634, (arg4[6]));
  let mut x2450: u32 = 0;
  let mut x2451: u32 = 0;
  fiat_p256_mulx_u32(&mut x2450, &mut x2451, x1634, (arg4[5]));
  let mut x2452: u32 = 0;
  let mut x2453: u32 = 0;
  fiat_p256_mulx_u32(&mut x2452, &mut x2453, x1634, (arg4[4]));
  let mut x2454: u32 = 0;
  let mut x2455: u32 = 0;
  fiat_p256_mulx_u32(&mut x2454, &mut x2455, x1634, (arg4[3]));
  let mut x2456: u32 = 0;
  let mut x2457: u32 = 0;
  fiat_p256_mulx_u32(&mut x2456, &mut x2457, x1634, (arg4[2]));
  let mut x2458: u32 = 0;
  let mut x2459: u32 = 0;
  fiat_p256_mulx_u32(&mut x2458, &mut x2459, x1634, (arg4[1]));
  let mut x2460: u32 = 0;
  let mut x2461: u32 = 0;
  fiat_p256_mulx_u32(&mut x2460, &mut x2461, x1634, (arg4[0]));
  let mut x2462: u32 = 0;
  let mut x2463: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2462, &mut x2463, 0x0, x2461, x2458);
  let mut x2464: u32 = 0;
  let mut x2465: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2464, &mut x2465, x2463, x2459, x2456);
  let mut x2466: u32 = 0;
  let mut x2467: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2466, &mut x2467, x2465, x2457, x2454);
  let mut x2468: u32 = 0;
  let mut x2469: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2468, &mut x2469, x2467, x2455, x2452);
  let mut x2470: u32 = 0;
  let mut x2471: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2470, &mut x2471, x2469, x2453, x2450);
  let mut x2472: u32 = 0;
  let mut x2473: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2472, &mut x2473, x2471, x2451, x2448);
  let mut x2474: u32 = 0;
  let mut x2475: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2474, &mut x2475, x2473, x2449, x2446);
  let x2476: u32 = ((x2475 as u32) + x2447);
  let mut x2477: u32 = 0;
  let mut x2478: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2477, &mut x2478, 0x0, x2430, x2460);
  let mut x2479: u32 = 0;
  let mut x2480: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2479, &mut x2480, x2478, x2432, x2462);
  let mut x2481: u32 = 0;
  let mut x2482: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2481, &mut x2482, x2480, x2434, x2464);
  let mut x2483: u32 = 0;
  let mut x2484: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2483, &mut x2484, x2482, x2436, x2466);
  let mut x2485: u32 = 0;
  let mut x2486: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2485, &mut x2486, x2484, x2438, x2468);
  let mut x2487: u32 = 0;
  let mut x2488: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2487, &mut x2488, x2486, x2440, x2470);
  let mut x2489: u32 = 0;
  let mut x2490: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2489, &mut x2490, x2488, x2442, x2472);
  let mut x2491: u32 = 0;
  let mut x2492: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2491, &mut x2492, x2490, x2444, x2474);
  let mut x2493: u32 = 0;
  let mut x2494: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2493, &mut x2494, x2492, (x2445 as u32), x2476);
  let mut x2495: u32 = 0;
  let mut x2496: u32 = 0;
  fiat_p256_mulx_u32(&mut x2495, &mut x2496, x2477, 0xffffffff);
  let mut x2497: u32 = 0;
  let mut x2498: u32 = 0;
  fiat_p256_mulx_u32(&mut x2497, &mut x2498, x2477, 0xffffffff);
  let mut x2499: u32 = 0;
  let mut x2500: u32 = 0;
  fiat_p256_mulx_u32(&mut x2499, &mut x2500, x2477, 0xffffffff);
  let mut x2501: u32 = 0;
  let mut x2502: u32 = 0;
  fiat_p256_mulx_u32(&mut x2501, &mut x2502, x2477, 0xffffffff);
  let mut x2503: u32 = 0;
  let mut x2504: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2503, &mut x2504, 0x0, x2502, x2499);
  let mut x2505: u32 = 0;
  let mut x2506: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2505, &mut x2506, x2504, x2500, x2497);
  let x2507: u32 = ((x2506 as u32) + x2498);
  let mut x2508: u32 = 0;
  let mut x2509: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2508, &mut x2509, 0x0, x2477, x2501);
  let mut x2510: u32 = 0;
  let mut x2511: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2510, &mut x2511, x2509, x2479, x2503);
  let mut x2512: u32 = 0;
  let mut x2513: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2512, &mut x2513, x2511, x2481, x2505);
  let mut x2514: u32 = 0;
  let mut x2515: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2514, &mut x2515, x2513, x2483, x2507);
  let mut x2516: u32 = 0;
  let mut x2517: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2516, &mut x2517, x2515, x2485, (0x0 as u32));
  let mut x2518: u32 = 0;
  let mut x2519: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2518, &mut x2519, x2517, x2487, (0x0 as u32));
  let mut x2520: u32 = 0;
  let mut x2521: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2520, &mut x2521, x2519, x2489, x2477);
  let mut x2522: u32 = 0;
  let mut x2523: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2522, &mut x2523, x2521, x2491, x2495);
  let mut x2524: u32 = 0;
  let mut x2525: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2524, &mut x2525, x2523, x2493, x2496);
  let x2526: u32 = ((x2525 as u32) + (x2494 as u32));
  let mut x2527: u32 = 0;
  let mut x2528: u32 = 0;
  fiat_p256_mulx_u32(&mut x2527, &mut x2528, x1635, (arg4[7]));
  let mut x2529: u32 = 0;
  let mut x2530: u32 = 0;
  fiat_p256_mulx_u32(&mut x2529, &mut x2530, x1635, (arg4[6]));
  let mut x2531: u32 = 0;
  let mut x2532: u32 = 0;
  fiat_p256_mulx_u32(&mut x2531, &mut x2532, x1635, (arg4[5]));
  let mut x2533: u32 = 0;
  let mut x2534: u32 = 0;
  fiat_p256_mulx_u32(&mut x2533, &mut x2534, x1635, (arg4[4]));
  let mut x2535: u32 = 0;
  let mut x2536: u32 = 0;
  fiat_p256_mulx_u32(&mut x2535, &mut x2536, x1635, (arg4[3]));
  let mut x2537: u32 = 0;
  let mut x2538: u32 = 0;
  fiat_p256_mulx_u32(&mut x2537, &mut x2538, x1635, (arg4[2]));
  let mut x2539: u32 = 0;
  let mut x2540: u32 = 0;
  fiat_p256_mulx_u32(&mut x2539, &mut x2540, x1635, (arg4[1]));
  let mut x2541: u32 = 0;
  let mut x2542: u32 = 0;
  fiat_p256_mulx_u32(&mut x2541, &mut x2542, x1635, (arg4[0]));
  let mut x2543: u32 = 0;
  let mut x2544: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2543, &mut x2544, 0x0, x2542, x2539);
  let mut x2545: u32 = 0;
  let mut x2546: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2545, &mut x2546, x2544, x2540, x2537);
  let mut x2547: u32 = 0;
  let mut x2548: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2547, &mut x2548, x2546, x2538, x2535);
  let mut x2549: u32 = 0;
  let mut x2550: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2549, &mut x2550, x2548, x2536, x2533);
  let mut x2551: u32 = 0;
  let mut x2552: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2551, &mut x2552, x2550, x2534, x2531);
  let mut x2553: u32 = 0;
  let mut x2554: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2553, &mut x2554, x2552, x2532, x2529);
  let mut x2555: u32 = 0;
  let mut x2556: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2555, &mut x2556, x2554, x2530, x2527);
  let x2557: u32 = ((x2556 as u32) + x2528);
  let mut x2558: u32 = 0;
  let mut x2559: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2558, &mut x2559, 0x0, x2510, x2541);
  let mut x2560: u32 = 0;
  let mut x2561: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2560, &mut x2561, x2559, x2512, x2543);
  let mut x2562: u32 = 0;
  let mut x2563: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2562, &mut x2563, x2561, x2514, x2545);
  let mut x2564: u32 = 0;
  let mut x2565: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2564, &mut x2565, x2563, x2516, x2547);
  let mut x2566: u32 = 0;
  let mut x2567: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2566, &mut x2567, x2565, x2518, x2549);
  let mut x2568: u32 = 0;
  let mut x2569: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2568, &mut x2569, x2567, x2520, x2551);
  let mut x2570: u32 = 0;
  let mut x2571: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2570, &mut x2571, x2569, x2522, x2553);
  let mut x2572: u32 = 0;
  let mut x2573: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2572, &mut x2573, x2571, x2524, x2555);
  let mut x2574: u32 = 0;
  let mut x2575: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2574, &mut x2575, x2573, x2526, x2557);
  let mut x2576: u32 = 0;
  let mut x2577: u32 = 0;
  fiat_p256_mulx_u32(&mut x2576, &mut x2577, x2558, 0xffffffff);
  let mut x2578: u32 = 0;
  let mut x2579: u32 = 0;
  fiat_p256_mulx_u32(&mut x2578, &mut x2579, x2558, 0xffffffff);
  let mut x2580: u32 = 0;
  let mut x2581: u32 = 0;
  fiat_p256_mulx_u32(&mut x2580, &mut x2581, x2558, 0xffffffff);
  let mut x2582: u32 = 0;
  let mut x2583: u32 = 0;
  fiat_p256_mulx_u32(&mut x2582, &mut x2583, x2558, 0xffffffff);
  let mut x2584: u32 = 0;
  let mut x2585: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2584, &mut x2585, 0x0, x2583, x2580);
  let mut x2586: u32 = 0;
  let mut x2587: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2586, &mut x2587, x2585, x2581, x2578);
  let x2588: u32 = ((x2587 as u32) + x2579);
  let mut x2589: u32 = 0;
  let mut x2590: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2589, &mut x2590, 0x0, x2558, x2582);
  let mut x2591: u32 = 0;
  let mut x2592: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2591, &mut x2592, x2590, x2560, x2584);
  let mut x2593: u32 = 0;
  let mut x2594: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2593, &mut x2594, x2592, x2562, x2586);
  let mut x2595: u32 = 0;
  let mut x2596: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2595, &mut x2596, x2594, x2564, x2588);
  let mut x2597: u32 = 0;
  let mut x2598: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2597, &mut x2598, x2596, x2566, (0x0 as u32));
  let mut x2599: u32 = 0;
  let mut x2600: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2599, &mut x2600, x2598, x2568, (0x0 as u32));
  let mut x2601: u32 = 0;
  let mut x2602: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2601, &mut x2602, x2600, x2570, x2558);
  let mut x2603: u32 = 0;
  let mut x2604: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2603, &mut x2604, x2602, x2572, x2576);
  let mut x2605: u32 = 0;
  let mut x2606: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2605, &mut x2606, x2604, x2574, x2577);
  let x2607: u32 = ((x2606 as u32) + (x2575 as u32));
  let mut x2608: u32 = 0;
  let mut x2609: u32 = 0;
  fiat_p256_mulx_u32(&mut x2608, &mut x2609, x1636, (arg4[7]));
  let mut x2610: u32 = 0;
  let mut x2611: u32 = 0;
  fiat_p256_mulx_u32(&mut x2610, &mut x2611, x1636, (arg4[6]));
  let mut x2612: u32 = 0;
  let mut x2613: u32 = 0;
  fiat_p256_mulx_u32(&mut x2612, &mut x2613, x1636, (arg4[5]));
  let mut x2614: u32 = 0;
  let mut x2615: u32 = 0;
  fiat_p256_mulx_u32(&mut x2614, &mut x2615, x1636, (arg4[4]));
  let mut x2616: u32 = 0;
  let mut x2617: u32 = 0;
  fiat_p256_mulx_u32(&mut x2616, &mut x2617, x1636, (arg4[3]));
  let mut x2618: u32 = 0;
  let mut x2619: u32 = 0;
  fiat_p256_mulx_u32(&mut x2618, &mut x2619, x1636, (arg4[2]));
  let mut x2620: u32 = 0;
  let mut x2621: u32 = 0;
  fiat_p256_mulx_u32(&mut x2620, &mut x2621, x1636, (arg4[1]));
  let mut x2622: u32 = 0;
  let mut x2623: u32 = 0;
  fiat_p256_mulx_u32(&mut x2622, &mut x2623, x1636, (arg4[0]));
  let mut x2624: u32 = 0;
  let mut x2625: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2624, &mut x2625, 0x0, x2623, x2620);
  let mut x2626: u32 = 0;
  let mut x2627: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2626, &mut x2627, x2625, x2621, x2618);
  let mut x2628: u32 = 0;
  let mut x2629: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2628, &mut x2629, x2627, x2619, x2616);
  let mut x2630: u32 = 0;
  let mut x2631: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2630, &mut x2631, x2629, x2617, x2614);
  let mut x2632: u32 = 0;
  let mut x2633: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2632, &mut x2633, x2631, x2615, x2612);
  let mut x2634: u32 = 0;
  let mut x2635: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2634, &mut x2635, x2633, x2613, x2610);
  let mut x2636: u32 = 0;
  let mut x2637: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2636, &mut x2637, x2635, x2611, x2608);
  let x2638: u32 = ((x2637 as u32) + x2609);
  let mut x2639: u32 = 0;
  let mut x2640: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2639, &mut x2640, 0x0, x2591, x2622);
  let mut x2641: u32 = 0;
  let mut x2642: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2641, &mut x2642, x2640, x2593, x2624);
  let mut x2643: u32 = 0;
  let mut x2644: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2643, &mut x2644, x2642, x2595, x2626);
  let mut x2645: u32 = 0;
  let mut x2646: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2645, &mut x2646, x2644, x2597, x2628);
  let mut x2647: u32 = 0;
  let mut x2648: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2647, &mut x2648, x2646, x2599, x2630);
  let mut x2649: u32 = 0;
  let mut x2650: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2649, &mut x2650, x2648, x2601, x2632);
  let mut x2651: u32 = 0;
  let mut x2652: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2651, &mut x2652, x2650, x2603, x2634);
  let mut x2653: u32 = 0;
  let mut x2654: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2653, &mut x2654, x2652, x2605, x2636);
  let mut x2655: u32 = 0;
  let mut x2656: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2655, &mut x2656, x2654, x2607, x2638);
  let mut x2657: u32 = 0;
  let mut x2658: u32 = 0;
  fiat_p256_mulx_u32(&mut x2657, &mut x2658, x2639, 0xffffffff);
  let mut x2659: u32 = 0;
  let mut x2660: u32 = 0;
  fiat_p256_mulx_u32(&mut x2659, &mut x2660, x2639, 0xffffffff);
  let mut x2661: u32 = 0;
  let mut x2662: u32 = 0;
  fiat_p256_mulx_u32(&mut x2661, &mut x2662, x2639, 0xffffffff);
  let mut x2663: u32 = 0;
  let mut x2664: u32 = 0;
  fiat_p256_mulx_u32(&mut x2663, &mut x2664, x2639, 0xffffffff);
  let mut x2665: u32 = 0;
  let mut x2666: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2665, &mut x2666, 0x0, x2664, x2661);
  let mut x2667: u32 = 0;
  let mut x2668: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2667, &mut x2668, x2666, x2662, x2659);
  let x2669: u32 = ((x2668 as u32) + x2660);
  let mut x2670: u32 = 0;
  let mut x2671: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2670, &mut x2671, 0x0, x2639, x2663);
  let mut x2672: u32 = 0;
  let mut x2673: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2672, &mut x2673, x2671, x2641, x2665);
  let mut x2674: u32 = 0;
  let mut x2675: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2674, &mut x2675, x2673, x2643, x2667);
  let mut x2676: u32 = 0;
  let mut x2677: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2676, &mut x2677, x2675, x2645, x2669);
  let mut x2678: u32 = 0;
  let mut x2679: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2678, &mut x2679, x2677, x2647, (0x0 as u32));
  let mut x2680: u32 = 0;
  let mut x2681: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2680, &mut x2681, x2679, x2649, (0x0 as u32));
  let mut x2682: u32 = 0;
  let mut x2683: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2682, &mut x2683, x2681, x2651, x2639);
  let mut x2684: u32 = 0;
  let mut x2685: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2684, &mut x2685, x2683, x2653, x2657);
  let mut x2686: u32 = 0;
  let mut x2687: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2686, &mut x2687, x2685, x2655, x2658);
  let x2688: u32 = ((x2687 as u32) + (x2656 as u32));
  let mut x2689: u32 = 0;
  let mut x2690: u32 = 0;
  fiat_p256_mulx_u32(&mut x2689, &mut x2690, x1637, (arg4[7]));
  let mut x2691: u32 = 0;
  let mut x2692: u32 = 0;
  fiat_p256_mulx_u32(&mut x2691, &mut x2692, x1637, (arg4[6]));
  let mut x2693: u32 = 0;
  let mut x2694: u32 = 0;
  fiat_p256_mulx_u32(&mut x2693, &mut x2694, x1637, (arg4[5]));
  let mut x2695: u32 = 0;
  let mut x2696: u32 = 0;
  fiat_p256_mulx_u32(&mut x2695, &mut x2696, x1637, (arg4[4]));
  let mut x2697: u32 = 0;
  let mut x2698: u32 = 0;
  fiat_p256_mulx_u32(&mut x2697, &mut x2698, x1637, (arg4[3]));
  let mut x2699: u32 = 0;
  let mut x2700: u32 = 0;
  fiat_p256_mulx_u32(&mut x2699, &mut x2700, x1637, (arg4[2]));
  let mut x2701: u32 = 0;
  let mut x2702: u32 = 0;
  fiat_p256_mulx_u32(&mut x2701, &mut x2702, x1637, (arg4[1]));
  let mut x2703: u32 = 0;
  let mut x2704: u32 = 0;
  fiat_p256_mulx_u32(&mut x2703, &mut x2704, x1637, (arg4[0]));
  let mut x2705: u32 = 0;
  let mut x2706: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2705, &mut x2706, 0x0, x2704, x2701);
  let mut x2707: u32 = 0;
  let mut x2708: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2707, &mut x2708, x2706, x2702, x2699);
  let mut x2709: u32 = 0;
  let mut x2710: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2709, &mut x2710, x2708, x2700, x2697);
  let mut x2711: u32 = 0;
  let mut x2712: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2711, &mut x2712, x2710, x2698, x2695);
  let mut x2713: u32 = 0;
  let mut x2714: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2713, &mut x2714, x2712, x2696, x2693);
  let mut x2715: u32 = 0;
  let mut x2716: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2715, &mut x2716, x2714, x2694, x2691);
  let mut x2717: u32 = 0;
  let mut x2718: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2717, &mut x2718, x2716, x2692, x2689);
  let x2719: u32 = ((x2718 as u32) + x2690);
  let mut x2720: u32 = 0;
  let mut x2721: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2720, &mut x2721, 0x0, x2672, x2703);
  let mut x2722: u32 = 0;
  let mut x2723: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2722, &mut x2723, x2721, x2674, x2705);
  let mut x2724: u32 = 0;
  let mut x2725: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2724, &mut x2725, x2723, x2676, x2707);
  let mut x2726: u32 = 0;
  let mut x2727: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2726, &mut x2727, x2725, x2678, x2709);
  let mut x2728: u32 = 0;
  let mut x2729: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2728, &mut x2729, x2727, x2680, x2711);
  let mut x2730: u32 = 0;
  let mut x2731: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2730, &mut x2731, x2729, x2682, x2713);
  let mut x2732: u32 = 0;
  let mut x2733: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2732, &mut x2733, x2731, x2684, x2715);
  let mut x2734: u32 = 0;
  let mut x2735: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2734, &mut x2735, x2733, x2686, x2717);
  let mut x2736: u32 = 0;
  let mut x2737: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2736, &mut x2737, x2735, x2688, x2719);
  let mut x2738: u32 = 0;
  let mut x2739: u32 = 0;
  fiat_p256_mulx_u32(&mut x2738, &mut x2739, x2720, 0xffffffff);
  let mut x2740: u32 = 0;
  let mut x2741: u32 = 0;
  fiat_p256_mulx_u32(&mut x2740, &mut x2741, x2720, 0xffffffff);
  let mut x2742: u32 = 0;
  let mut x2743: u32 = 0;
  fiat_p256_mulx_u32(&mut x2742, &mut x2743, x2720, 0xffffffff);
  let mut x2744: u32 = 0;
  let mut x2745: u32 = 0;
  fiat_p256_mulx_u32(&mut x2744, &mut x2745, x2720, 0xffffffff);
  let mut x2746: u32 = 0;
  let mut x2747: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2746, &mut x2747, 0x0, x2745, x2742);
  let mut x2748: u32 = 0;
  let mut x2749: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2748, &mut x2749, x2747, x2743, x2740);
  let x2750: u32 = ((x2749 as u32) + x2741);
  let mut x2751: u32 = 0;
  let mut x2752: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2751, &mut x2752, 0x0, x2720, x2744);
  let mut x2753: u32 = 0;
  let mut x2754: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2753, &mut x2754, x2752, x2722, x2746);
  let mut x2755: u32 = 0;
  let mut x2756: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2755, &mut x2756, x2754, x2724, x2748);
  let mut x2757: u32 = 0;
  let mut x2758: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2757, &mut x2758, x2756, x2726, x2750);
  let mut x2759: u32 = 0;
  let mut x2760: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2759, &mut x2760, x2758, x2728, (0x0 as u32));
  let mut x2761: u32 = 0;
  let mut x2762: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2761, &mut x2762, x2760, x2730, (0x0 as u32));
  let mut x2763: u32 = 0;
  let mut x2764: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2763, &mut x2764, x2762, x2732, x2720);
  let mut x2765: u32 = 0;
  let mut x2766: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2765, &mut x2766, x2764, x2734, x2738);
  let mut x2767: u32 = 0;
  let mut x2768: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2767, &mut x2768, x2766, x2736, x2739);
  let x2769: u32 = ((x2768 as u32) + (x2737 as u32));
  let mut x2770: u32 = 0;
  let mut x2771: u32 = 0;
  fiat_p256_mulx_u32(&mut x2770, &mut x2771, x1638, (arg4[7]));
  let mut x2772: u32 = 0;
  let mut x2773: u32 = 0;
  fiat_p256_mulx_u32(&mut x2772, &mut x2773, x1638, (arg4[6]));
  let mut x2774: u32 = 0;
  let mut x2775: u32 = 0;
  fiat_p256_mulx_u32(&mut x2774, &mut x2775, x1638, (arg4[5]));
  let mut x2776: u32 = 0;
  let mut x2777: u32 = 0;
  fiat_p256_mulx_u32(&mut x2776, &mut x2777, x1638, (arg4[4]));
  let mut x2778: u32 = 0;
  let mut x2779: u32 = 0;
  fiat_p256_mulx_u32(&mut x2778, &mut x2779, x1638, (arg4[3]));
  let mut x2780: u32 = 0;
  let mut x2781: u32 = 0;
  fiat_p256_mulx_u32(&mut x2780, &mut x2781, x1638, (arg4[2]));
  let mut x2782: u32 = 0;
  let mut x2783: u32 = 0;
  fiat_p256_mulx_u32(&mut x2782, &mut x2783, x1638, (arg4[1]));
  let mut x2784: u32 = 0;
  let mut x2785: u32 = 0;
  fiat_p256_mulx_u32(&mut x2784, &mut x2785, x1638, (arg4[0]));
  let mut x2786: u32 = 0;
  let mut x2787: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2786, &mut x2787, 0x0, x2785, x2782);
  let mut x2788: u32 = 0;
  let mut x2789: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2788, &mut x2789, x2787, x2783, x2780);
  let mut x2790: u32 = 0;
  let mut x2791: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2790, &mut x2791, x2789, x2781, x2778);
  let mut x2792: u32 = 0;
  let mut x2793: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2792, &mut x2793, x2791, x2779, x2776);
  let mut x2794: u32 = 0;
  let mut x2795: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2794, &mut x2795, x2793, x2777, x2774);
  let mut x2796: u32 = 0;
  let mut x2797: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2796, &mut x2797, x2795, x2775, x2772);
  let mut x2798: u32 = 0;
  let mut x2799: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2798, &mut x2799, x2797, x2773, x2770);
  let x2800: u32 = ((x2799 as u32) + x2771);
  let mut x2801: u32 = 0;
  let mut x2802: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2801, &mut x2802, 0x0, x2753, x2784);
  let mut x2803: u32 = 0;
  let mut x2804: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2803, &mut x2804, x2802, x2755, x2786);
  let mut x2805: u32 = 0;
  let mut x2806: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2805, &mut x2806, x2804, x2757, x2788);
  let mut x2807: u32 = 0;
  let mut x2808: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2807, &mut x2808, x2806, x2759, x2790);
  let mut x2809: u32 = 0;
  let mut x2810: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2809, &mut x2810, x2808, x2761, x2792);
  let mut x2811: u32 = 0;
  let mut x2812: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2811, &mut x2812, x2810, x2763, x2794);
  let mut x2813: u32 = 0;
  let mut x2814: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2813, &mut x2814, x2812, x2765, x2796);
  let mut x2815: u32 = 0;
  let mut x2816: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2815, &mut x2816, x2814, x2767, x2798);
  let mut x2817: u32 = 0;
  let mut x2818: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2817, &mut x2818, x2816, x2769, x2800);
  let mut x2819: u32 = 0;
  let mut x2820: u32 = 0;
  fiat_p256_mulx_u32(&mut x2819, &mut x2820, x2801, 0xffffffff);
  let mut x2821: u32 = 0;
  let mut x2822: u32 = 0;
  fiat_p256_mulx_u32(&mut x2821, &mut x2822, x2801, 0xffffffff);
  let mut x2823: u32 = 0;
  let mut x2824: u32 = 0;
  fiat_p256_mulx_u32(&mut x2823, &mut x2824, x2801, 0xffffffff);
  let mut x2825: u32 = 0;
  let mut x2826: u32 = 0;
  fiat_p256_mulx_u32(&mut x2825, &mut x2826, x2801, 0xffffffff);
  let mut x2827: u32 = 0;
  let mut x2828: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2827, &mut x2828, 0x0, x2826, x2823);
  let mut x2829: u32 = 0;
  let mut x2830: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2829, &mut x2830, x2828, x2824, x2821);
  let x2831: u32 = ((x2830 as u32) + x2822);
  let mut x2832: u32 = 0;
  let mut x2833: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2832, &mut x2833, 0x0, x2801, x2825);
  let mut x2834: u32 = 0;
  let mut x2835: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2834, &mut x2835, x2833, x2803, x2827);
  let mut x2836: u32 = 0;
  let mut x2837: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2836, &mut x2837, x2835, x2805, x2829);
  let mut x2838: u32 = 0;
  let mut x2839: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2838, &mut x2839, x2837, x2807, x2831);
  let mut x2840: u32 = 0;
  let mut x2841: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2840, &mut x2841, x2839, x2809, (0x0 as u32));
  let mut x2842: u32 = 0;
  let mut x2843: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2842, &mut x2843, x2841, x2811, (0x0 as u32));
  let mut x2844: u32 = 0;
  let mut x2845: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2844, &mut x2845, x2843, x2813, x2801);
  let mut x2846: u32 = 0;
  let mut x2847: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2846, &mut x2847, x2845, x2815, x2819);
  let mut x2848: u32 = 0;
  let mut x2849: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2848, &mut x2849, x2847, x2817, x2820);
  let x2850: u32 = ((x2849 as u32) + (x2818 as u32));
  let mut x2851: u32 = 0;
  let mut x2852: u32 = 0;
  fiat_p256_mulx_u32(&mut x2851, &mut x2852, x1639, (arg4[7]));
  let mut x2853: u32 = 0;
  let mut x2854: u32 = 0;
  fiat_p256_mulx_u32(&mut x2853, &mut x2854, x1639, (arg4[6]));
  let mut x2855: u32 = 0;
  let mut x2856: u32 = 0;
  fiat_p256_mulx_u32(&mut x2855, &mut x2856, x1639, (arg4[5]));
  let mut x2857: u32 = 0;
  let mut x2858: u32 = 0;
  fiat_p256_mulx_u32(&mut x2857, &mut x2858, x1639, (arg4[4]));
  let mut x2859: u32 = 0;
  let mut x2860: u32 = 0;
  fiat_p256_mulx_u32(&mut x2859, &mut x2860, x1639, (arg4[3]));
  let mut x2861: u32 = 0;
  let mut x2862: u32 = 0;
  fiat_p256_mulx_u32(&mut x2861, &mut x2862, x1639, (arg4[2]));
  let mut x2863: u32 = 0;
  let mut x2864: u32 = 0;
  fiat_p256_mulx_u32(&mut x2863, &mut x2864, x1639, (arg4[1]));
  let mut x2865: u32 = 0;
  let mut x2866: u32 = 0;
  fiat_p256_mulx_u32(&mut x2865, &mut x2866, x1639, (arg4[0]));
  let mut x2867: u32 = 0;
  let mut x2868: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2867, &mut x2868, 0x0, x2866, x2863);
  let mut x2869: u32 = 0;
  let mut x2870: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2869, &mut x2870, x2868, x2864, x2861);
  let mut x2871: u32 = 0;
  let mut x2872: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2871, &mut x2872, x2870, x2862, x2859);
  let mut x2873: u32 = 0;
  let mut x2874: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2873, &mut x2874, x2872, x2860, x2857);
  let mut x2875: u32 = 0;
  let mut x2876: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2875, &mut x2876, x2874, x2858, x2855);
  let mut x2877: u32 = 0;
  let mut x2878: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2877, &mut x2878, x2876, x2856, x2853);
  let mut x2879: u32 = 0;
  let mut x2880: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2879, &mut x2880, x2878, x2854, x2851);
  let x2881: u32 = ((x2880 as u32) + x2852);
  let mut x2882: u32 = 0;
  let mut x2883: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2882, &mut x2883, 0x0, x2834, x2865);
  let mut x2884: u32 = 0;
  let mut x2885: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2884, &mut x2885, x2883, x2836, x2867);
  let mut x2886: u32 = 0;
  let mut x2887: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2886, &mut x2887, x2885, x2838, x2869);
  let mut x2888: u32 = 0;
  let mut x2889: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2888, &mut x2889, x2887, x2840, x2871);
  let mut x2890: u32 = 0;
  let mut x2891: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2890, &mut x2891, x2889, x2842, x2873);
  let mut x2892: u32 = 0;
  let mut x2893: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2892, &mut x2893, x2891, x2844, x2875);
  let mut x2894: u32 = 0;
  let mut x2895: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2894, &mut x2895, x2893, x2846, x2877);
  let mut x2896: u32 = 0;
  let mut x2897: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2896, &mut x2897, x2895, x2848, x2879);
  let mut x2898: u32 = 0;
  let mut x2899: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2898, &mut x2899, x2897, x2850, x2881);
  let mut x2900: u32 = 0;
  let mut x2901: u32 = 0;
  fiat_p256_mulx_u32(&mut x2900, &mut x2901, x2882, 0xffffffff);
  let mut x2902: u32 = 0;
  let mut x2903: u32 = 0;
  fiat_p256_mulx_u32(&mut x2902, &mut x2903, x2882, 0xffffffff);
  let mut x2904: u32 = 0;
  let mut x2905: u32 = 0;
  fiat_p256_mulx_u32(&mut x2904, &mut x2905, x2882, 0xffffffff);
  let mut x2906: u32 = 0;
  let mut x2907: u32 = 0;
  fiat_p256_mulx_u32(&mut x2906, &mut x2907, x2882, 0xffffffff);
  let mut x2908: u32 = 0;
  let mut x2909: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2908, &mut x2909, 0x0, x2907, x2904);
  let mut x2910: u32 = 0;
  let mut x2911: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2910, &mut x2911, x2909, x2905, x2902);
  let x2912: u32 = ((x2911 as u32) + x2903);
  let mut x2913: u32 = 0;
  let mut x2914: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2913, &mut x2914, 0x0, x2882, x2906);
  let mut x2915: u32 = 0;
  let mut x2916: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2915, &mut x2916, x2914, x2884, x2908);
  let mut x2917: u32 = 0;
  let mut x2918: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2917, &mut x2918, x2916, x2886, x2910);
  let mut x2919: u32 = 0;
  let mut x2920: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2919, &mut x2920, x2918, x2888, x2912);
  let mut x2921: u32 = 0;
  let mut x2922: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2921, &mut x2922, x2920, x2890, (0x0 as u32));
  let mut x2923: u32 = 0;
  let mut x2924: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2923, &mut x2924, x2922, x2892, (0x0 as u32));
  let mut x2925: u32 = 0;
  let mut x2926: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2925, &mut x2926, x2924, x2894, x2882);
  let mut x2927: u32 = 0;
  let mut x2928: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2927, &mut x2928, x2926, x2896, x2900);
  let mut x2929: u32 = 0;
  let mut x2930: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2929, &mut x2930, x2928, x2898, x2901);
  let x2931: u32 = ((x2930 as u32) + (x2899 as u32));
  let mut x2932: u32 = 0;
  let mut x2933: u32 = 0;
  fiat_p256_mulx_u32(&mut x2932, &mut x2933, x1640, (arg4[7]));
  let mut x2934: u32 = 0;
  let mut x2935: u32 = 0;
  fiat_p256_mulx_u32(&mut x2934, &mut x2935, x1640, (arg4[6]));
  let mut x2936: u32 = 0;
  let mut x2937: u32 = 0;
  fiat_p256_mulx_u32(&mut x2936, &mut x2937, x1640, (arg4[5]));
  let mut x2938: u32 = 0;
  let mut x2939: u32 = 0;
  fiat_p256_mulx_u32(&mut x2938, &mut x2939, x1640, (arg4[4]));
  let mut x2940: u32 = 0;
  let mut x2941: u32 = 0;
  fiat_p256_mulx_u32(&mut x2940, &mut x2941, x1640, (arg4[3]));
  let mut x2942: u32 = 0;
  let mut x2943: u32 = 0;
  fiat_p256_mulx_u32(&mut x2942, &mut x2943, x1640, (arg4[2]));
  let mut x2944: u32 = 0;
  let mut x2945: u32 = 0;
  fiat_p256_mulx_u32(&mut x2944, &mut x2945, x1640, (arg4[1]));
  let mut x2946: u32 = 0;
  let mut x2947: u32 = 0;
  fiat_p256_mulx_u32(&mut x2946, &mut x2947, x1640, (arg4[0]));
  let mut x2948: u32 = 0;
  let mut x2949: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2948, &mut x2949, 0x0, x2947, x2944);
  let mut x2950: u32 = 0;
  let mut x2951: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2950, &mut x2951, x2949, x2945, x2942);
  let mut x2952: u32 = 0;
  let mut x2953: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2952, &mut x2953, x2951, x2943, x2940);
  let mut x2954: u32 = 0;
  let mut x2955: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2954, &mut x2955, x2953, x2941, x2938);
  let mut x2956: u32 = 0;
  let mut x2957: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2956, &mut x2957, x2955, x2939, x2936);
  let mut x2958: u32 = 0;
  let mut x2959: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2958, &mut x2959, x2957, x2937, x2934);
  let mut x2960: u32 = 0;
  let mut x2961: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2960, &mut x2961, x2959, x2935, x2932);
  let x2962: u32 = ((x2961 as u32) + x2933);
  let mut x2963: u32 = 0;
  let mut x2964: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2963, &mut x2964, 0x0, x2915, x2946);
  let mut x2965: u32 = 0;
  let mut x2966: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2965, &mut x2966, x2964, x2917, x2948);
  let mut x2967: u32 = 0;
  let mut x2968: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2967, &mut x2968, x2966, x2919, x2950);
  let mut x2969: u32 = 0;
  let mut x2970: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2969, &mut x2970, x2968, x2921, x2952);
  let mut x2971: u32 = 0;
  let mut x2972: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2971, &mut x2972, x2970, x2923, x2954);
  let mut x2973: u32 = 0;
  let mut x2974: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2973, &mut x2974, x2972, x2925, x2956);
  let mut x2975: u32 = 0;
  let mut x2976: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2975, &mut x2976, x2974, x2927, x2958);
  let mut x2977: u32 = 0;
  let mut x2978: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2977, &mut x2978, x2976, x2929, x2960);
  let mut x2979: u32 = 0;
  let mut x2980: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2979, &mut x2980, x2978, x2931, x2962);
  let mut x2981: u32 = 0;
  let mut x2982: u32 = 0;
  fiat_p256_mulx_u32(&mut x2981, &mut x2982, x2963, 0xffffffff);
  let mut x2983: u32 = 0;
  let mut x2984: u32 = 0;
  fiat_p256_mulx_u32(&mut x2983, &mut x2984, x2963, 0xffffffff);
  let mut x2985: u32 = 0;
  let mut x2986: u32 = 0;
  fiat_p256_mulx_u32(&mut x2985, &mut x2986, x2963, 0xffffffff);
  let mut x2987: u32 = 0;
  let mut x2988: u32 = 0;
  fiat_p256_mulx_u32(&mut x2987, &mut x2988, x2963, 0xffffffff);
  let mut x2989: u32 = 0;
  let mut x2990: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2989, &mut x2990, 0x0, x2988, x2985);
  let mut x2991: u32 = 0;
  let mut x2992: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2991, &mut x2992, x2990, x2986, x2983);
  let x2993: u32 = ((x2992 as u32) + x2984);
  let mut x2994: u32 = 0;
  let mut x2995: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2994, &mut x2995, 0x0, x2963, x2987);
  let mut x2996: u32 = 0;
  let mut x2997: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2996, &mut x2997, x2995, x2965, x2989);
  let mut x2998: u32 = 0;
  let mut x2999: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x2998, &mut x2999, x2997, x2967, x2991);
  let mut x3000: u32 = 0;
  let mut x3001: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3000, &mut x3001, x2999, x2969, x2993);
  let mut x3002: u32 = 0;
  let mut x3003: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3002, &mut x3003, x3001, x2971, (0x0 as u32));
  let mut x3004: u32 = 0;
  let mut x3005: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3004, &mut x3005, x3003, x2973, (0x0 as u32));
  let mut x3006: u32 = 0;
  let mut x3007: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3006, &mut x3007, x3005, x2975, x2963);
  let mut x3008: u32 = 0;
  let mut x3009: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3008, &mut x3009, x3007, x2977, x2981);
  let mut x3010: u32 = 0;
  let mut x3011: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3010, &mut x3011, x3009, x2979, x2982);
  let x3012: u32 = ((x3011 as u32) + (x2980 as u32));
  let mut x3013: u32 = 0;
  let mut x3014: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x3013, &mut x3014, 0x0, x2996, 0xffffffff);
  let mut x3015: u32 = 0;
  let mut x3016: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x3015, &mut x3016, x3014, x2998, 0xffffffff);
  let mut x3017: u32 = 0;
  let mut x3018: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x3017, &mut x3018, x3016, x3000, 0xffffffff);
  let mut x3019: u32 = 0;
  let mut x3020: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x3019, &mut x3020, x3018, x3002, (0x0 as u32));
  let mut x3021: u32 = 0;
  let mut x3022: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x3021, &mut x3022, x3020, x3004, (0x0 as u32));
  let mut x3023: u32 = 0;
  let mut x3024: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x3023, &mut x3024, x3022, x3006, (0x0 as u32));
  let mut x3025: u32 = 0;
  let mut x3026: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x3025, &mut x3026, x3024, x3008, (0x1 as u32));
  let mut x3027: u32 = 0;
  let mut x3028: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x3027, &mut x3028, x3026, x3010, 0xffffffff);
  let mut x3029: u32 = 0;
  let mut x3030: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x3029, &mut x3030, x3028, x3012, (0x0 as u32));
  let mut x3031: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x3031, x3030, x3013, x2996);
  let mut x3032: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x3032, x3030, x3015, x2998);
  let mut x3033: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x3033, x3030, x3017, x3000);
  let mut x3034: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x3034, x3030, x3019, x3002);
  let mut x3035: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x3035, x3030, x3021, x3004);
  let mut x3036: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x3036, x3030, x3023, x3006);
  let mut x3037: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x3037, x3030, x3025, x3008);
  let mut x3038: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x3038, x3030, x3027, x3010);
  let mut x3039: u32 = 0;
  let mut x3040: u32 = 0;
  fiat_p256_mulx_u32(&mut x3039, &mut x3040, x1677, (arg3[7]));
  let mut x3041: u32 = 0;
  let mut x3042: u32 = 0;
  fiat_p256_mulx_u32(&mut x3041, &mut x3042, x1677, (arg3[6]));
  let mut x3043: u32 = 0;
  let mut x3044: u32 = 0;
  fiat_p256_mulx_u32(&mut x3043, &mut x3044, x1677, (arg3[5]));
  let mut x3045: u32 = 0;
  let mut x3046: u32 = 0;
  fiat_p256_mulx_u32(&mut x3045, &mut x3046, x1677, (arg3[4]));
  let mut x3047: u32 = 0;
  let mut x3048: u32 = 0;
  fiat_p256_mulx_u32(&mut x3047, &mut x3048, x1677, (arg3[3]));
  let mut x3049: u32 = 0;
  let mut x3050: u32 = 0;
  fiat_p256_mulx_u32(&mut x3049, &mut x3050, x1677, (arg3[2]));
  let mut x3051: u32 = 0;
  let mut x3052: u32 = 0;
  fiat_p256_mulx_u32(&mut x3051, &mut x3052, x1677, (arg3[1]));
  let mut x3053: u32 = 0;
  let mut x3054: u32 = 0;
  fiat_p256_mulx_u32(&mut x3053, &mut x3054, x1677, (arg3[0]));
  let mut x3055: u32 = 0;
  let mut x3056: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3055, &mut x3056, 0x0, x3054, x3051);
  let mut x3057: u32 = 0;
  let mut x3058: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3057, &mut x3058, x3056, x3052, x3049);
  let mut x3059: u32 = 0;
  let mut x3060: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3059, &mut x3060, x3058, x3050, x3047);
  let mut x3061: u32 = 0;
  let mut x3062: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3061, &mut x3062, x3060, x3048, x3045);
  let mut x3063: u32 = 0;
  let mut x3064: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3063, &mut x3064, x3062, x3046, x3043);
  let mut x3065: u32 = 0;
  let mut x3066: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3065, &mut x3066, x3064, x3044, x3041);
  let mut x3067: u32 = 0;
  let mut x3068: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3067, &mut x3068, x3066, x3042, x3039);
  let x3069: u32 = ((x3068 as u32) + x3040);
  let mut x3070: u32 = 0;
  let mut x3071: u32 = 0;
  fiat_p256_mulx_u32(&mut x3070, &mut x3071, x3053, 0xffffffff);
  let mut x3072: u32 = 0;
  let mut x3073: u32 = 0;
  fiat_p256_mulx_u32(&mut x3072, &mut x3073, x3053, 0xffffffff);
  let mut x3074: u32 = 0;
  let mut x3075: u32 = 0;
  fiat_p256_mulx_u32(&mut x3074, &mut x3075, x3053, 0xffffffff);
  let mut x3076: u32 = 0;
  let mut x3077: u32 = 0;
  fiat_p256_mulx_u32(&mut x3076, &mut x3077, x3053, 0xffffffff);
  let mut x3078: u32 = 0;
  let mut x3079: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3078, &mut x3079, 0x0, x3077, x3074);
  let mut x3080: u32 = 0;
  let mut x3081: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3080, &mut x3081, x3079, x3075, x3072);
  let x3082: u32 = ((x3081 as u32) + x3073);
  let mut x3083: u32 = 0;
  let mut x3084: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3083, &mut x3084, 0x0, x3053, x3076);
  let mut x3085: u32 = 0;
  let mut x3086: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3085, &mut x3086, x3084, x3055, x3078);
  let mut x3087: u32 = 0;
  let mut x3088: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3087, &mut x3088, x3086, x3057, x3080);
  let mut x3089: u32 = 0;
  let mut x3090: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3089, &mut x3090, x3088, x3059, x3082);
  let mut x3091: u32 = 0;
  let mut x3092: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3091, &mut x3092, x3090, x3061, (0x0 as u32));
  let mut x3093: u32 = 0;
  let mut x3094: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3093, &mut x3094, x3092, x3063, (0x0 as u32));
  let mut x3095: u32 = 0;
  let mut x3096: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3095, &mut x3096, x3094, x3065, x3053);
  let mut x3097: u32 = 0;
  let mut x3098: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3097, &mut x3098, x3096, x3067, x3070);
  let mut x3099: u32 = 0;
  let mut x3100: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3099, &mut x3100, x3098, x3069, x3071);
  let mut x3101: u32 = 0;
  let mut x3102: u32 = 0;
  fiat_p256_mulx_u32(&mut x3101, &mut x3102, x1678, (arg3[7]));
  let mut x3103: u32 = 0;
  let mut x3104: u32 = 0;
  fiat_p256_mulx_u32(&mut x3103, &mut x3104, x1678, (arg3[6]));
  let mut x3105: u32 = 0;
  let mut x3106: u32 = 0;
  fiat_p256_mulx_u32(&mut x3105, &mut x3106, x1678, (arg3[5]));
  let mut x3107: u32 = 0;
  let mut x3108: u32 = 0;
  fiat_p256_mulx_u32(&mut x3107, &mut x3108, x1678, (arg3[4]));
  let mut x3109: u32 = 0;
  let mut x3110: u32 = 0;
  fiat_p256_mulx_u32(&mut x3109, &mut x3110, x1678, (arg3[3]));
  let mut x3111: u32 = 0;
  let mut x3112: u32 = 0;
  fiat_p256_mulx_u32(&mut x3111, &mut x3112, x1678, (arg3[2]));
  let mut x3113: u32 = 0;
  let mut x3114: u32 = 0;
  fiat_p256_mulx_u32(&mut x3113, &mut x3114, x1678, (arg3[1]));
  let mut x3115: u32 = 0;
  let mut x3116: u32 = 0;
  fiat_p256_mulx_u32(&mut x3115, &mut x3116, x1678, (arg3[0]));
  let mut x3117: u32 = 0;
  let mut x3118: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3117, &mut x3118, 0x0, x3116, x3113);
  let mut x3119: u32 = 0;
  let mut x3120: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3119, &mut x3120, x3118, x3114, x3111);
  let mut x3121: u32 = 0;
  let mut x3122: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3121, &mut x3122, x3120, x3112, x3109);
  let mut x3123: u32 = 0;
  let mut x3124: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3123, &mut x3124, x3122, x3110, x3107);
  let mut x3125: u32 = 0;
  let mut x3126: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3125, &mut x3126, x3124, x3108, x3105);
  let mut x3127: u32 = 0;
  let mut x3128: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3127, &mut x3128, x3126, x3106, x3103);
  let mut x3129: u32 = 0;
  let mut x3130: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3129, &mut x3130, x3128, x3104, x3101);
  let x3131: u32 = ((x3130 as u32) + x3102);
  let mut x3132: u32 = 0;
  let mut x3133: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3132, &mut x3133, 0x0, x3085, x3115);
  let mut x3134: u32 = 0;
  let mut x3135: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3134, &mut x3135, x3133, x3087, x3117);
  let mut x3136: u32 = 0;
  let mut x3137: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3136, &mut x3137, x3135, x3089, x3119);
  let mut x3138: u32 = 0;
  let mut x3139: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3138, &mut x3139, x3137, x3091, x3121);
  let mut x3140: u32 = 0;
  let mut x3141: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3140, &mut x3141, x3139, x3093, x3123);
  let mut x3142: u32 = 0;
  let mut x3143: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3142, &mut x3143, x3141, x3095, x3125);
  let mut x3144: u32 = 0;
  let mut x3145: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3144, &mut x3145, x3143, x3097, x3127);
  let mut x3146: u32 = 0;
  let mut x3147: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3146, &mut x3147, x3145, x3099, x3129);
  let mut x3148: u32 = 0;
  let mut x3149: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3148, &mut x3149, x3147, (x3100 as u32), x3131);
  let mut x3150: u32 = 0;
  let mut x3151: u32 = 0;
  fiat_p256_mulx_u32(&mut x3150, &mut x3151, x3132, 0xffffffff);
  let mut x3152: u32 = 0;
  let mut x3153: u32 = 0;
  fiat_p256_mulx_u32(&mut x3152, &mut x3153, x3132, 0xffffffff);
  let mut x3154: u32 = 0;
  let mut x3155: u32 = 0;
  fiat_p256_mulx_u32(&mut x3154, &mut x3155, x3132, 0xffffffff);
  let mut x3156: u32 = 0;
  let mut x3157: u32 = 0;
  fiat_p256_mulx_u32(&mut x3156, &mut x3157, x3132, 0xffffffff);
  let mut x3158: u32 = 0;
  let mut x3159: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3158, &mut x3159, 0x0, x3157, x3154);
  let mut x3160: u32 = 0;
  let mut x3161: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3160, &mut x3161, x3159, x3155, x3152);
  let x3162: u32 = ((x3161 as u32) + x3153);
  let mut x3163: u32 = 0;
  let mut x3164: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3163, &mut x3164, 0x0, x3132, x3156);
  let mut x3165: u32 = 0;
  let mut x3166: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3165, &mut x3166, x3164, x3134, x3158);
  let mut x3167: u32 = 0;
  let mut x3168: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3167, &mut x3168, x3166, x3136, x3160);
  let mut x3169: u32 = 0;
  let mut x3170: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3169, &mut x3170, x3168, x3138, x3162);
  let mut x3171: u32 = 0;
  let mut x3172: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3171, &mut x3172, x3170, x3140, (0x0 as u32));
  let mut x3173: u32 = 0;
  let mut x3174: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3173, &mut x3174, x3172, x3142, (0x0 as u32));
  let mut x3175: u32 = 0;
  let mut x3176: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3175, &mut x3176, x3174, x3144, x3132);
  let mut x3177: u32 = 0;
  let mut x3178: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3177, &mut x3178, x3176, x3146, x3150);
  let mut x3179: u32 = 0;
  let mut x3180: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3179, &mut x3180, x3178, x3148, x3151);
  let x3181: u32 = ((x3180 as u32) + (x3149 as u32));
  let mut x3182: u32 = 0;
  let mut x3183: u32 = 0;
  fiat_p256_mulx_u32(&mut x3182, &mut x3183, x1679, (arg3[7]));
  let mut x3184: u32 = 0;
  let mut x3185: u32 = 0;
  fiat_p256_mulx_u32(&mut x3184, &mut x3185, x1679, (arg3[6]));
  let mut x3186: u32 = 0;
  let mut x3187: u32 = 0;
  fiat_p256_mulx_u32(&mut x3186, &mut x3187, x1679, (arg3[5]));
  let mut x3188: u32 = 0;
  let mut x3189: u32 = 0;
  fiat_p256_mulx_u32(&mut x3188, &mut x3189, x1679, (arg3[4]));
  let mut x3190: u32 = 0;
  let mut x3191: u32 = 0;
  fiat_p256_mulx_u32(&mut x3190, &mut x3191, x1679, (arg3[3]));
  let mut x3192: u32 = 0;
  let mut x3193: u32 = 0;
  fiat_p256_mulx_u32(&mut x3192, &mut x3193, x1679, (arg3[2]));
  let mut x3194: u32 = 0;
  let mut x3195: u32 = 0;
  fiat_p256_mulx_u32(&mut x3194, &mut x3195, x1679, (arg3[1]));
  let mut x3196: u32 = 0;
  let mut x3197: u32 = 0;
  fiat_p256_mulx_u32(&mut x3196, &mut x3197, x1679, (arg3[0]));
  let mut x3198: u32 = 0;
  let mut x3199: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3198, &mut x3199, 0x0, x3197, x3194);
  let mut x3200: u32 = 0;
  let mut x3201: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3200, &mut x3201, x3199, x3195, x3192);
  let mut x3202: u32 = 0;
  let mut x3203: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3202, &mut x3203, x3201, x3193, x3190);
  let mut x3204: u32 = 0;
  let mut x3205: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3204, &mut x3205, x3203, x3191, x3188);
  let mut x3206: u32 = 0;
  let mut x3207: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3206, &mut x3207, x3205, x3189, x3186);
  let mut x3208: u32 = 0;
  let mut x3209: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3208, &mut x3209, x3207, x3187, x3184);
  let mut x3210: u32 = 0;
  let mut x3211: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3210, &mut x3211, x3209, x3185, x3182);
  let x3212: u32 = ((x3211 as u32) + x3183);
  let mut x3213: u32 = 0;
  let mut x3214: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3213, &mut x3214, 0x0, x3165, x3196);
  let mut x3215: u32 = 0;
  let mut x3216: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3215, &mut x3216, x3214, x3167, x3198);
  let mut x3217: u32 = 0;
  let mut x3218: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3217, &mut x3218, x3216, x3169, x3200);
  let mut x3219: u32 = 0;
  let mut x3220: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3219, &mut x3220, x3218, x3171, x3202);
  let mut x3221: u32 = 0;
  let mut x3222: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3221, &mut x3222, x3220, x3173, x3204);
  let mut x3223: u32 = 0;
  let mut x3224: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3223, &mut x3224, x3222, x3175, x3206);
  let mut x3225: u32 = 0;
  let mut x3226: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3225, &mut x3226, x3224, x3177, x3208);
  let mut x3227: u32 = 0;
  let mut x3228: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3227, &mut x3228, x3226, x3179, x3210);
  let mut x3229: u32 = 0;
  let mut x3230: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3229, &mut x3230, x3228, x3181, x3212);
  let mut x3231: u32 = 0;
  let mut x3232: u32 = 0;
  fiat_p256_mulx_u32(&mut x3231, &mut x3232, x3213, 0xffffffff);
  let mut x3233: u32 = 0;
  let mut x3234: u32 = 0;
  fiat_p256_mulx_u32(&mut x3233, &mut x3234, x3213, 0xffffffff);
  let mut x3235: u32 = 0;
  let mut x3236: u32 = 0;
  fiat_p256_mulx_u32(&mut x3235, &mut x3236, x3213, 0xffffffff);
  let mut x3237: u32 = 0;
  let mut x3238: u32 = 0;
  fiat_p256_mulx_u32(&mut x3237, &mut x3238, x3213, 0xffffffff);
  let mut x3239: u32 = 0;
  let mut x3240: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3239, &mut x3240, 0x0, x3238, x3235);
  let mut x3241: u32 = 0;
  let mut x3242: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3241, &mut x3242, x3240, x3236, x3233);
  let x3243: u32 = ((x3242 as u32) + x3234);
  let mut x3244: u32 = 0;
  let mut x3245: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3244, &mut x3245, 0x0, x3213, x3237);
  let mut x3246: u32 = 0;
  let mut x3247: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3246, &mut x3247, x3245, x3215, x3239);
  let mut x3248: u32 = 0;
  let mut x3249: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3248, &mut x3249, x3247, x3217, x3241);
  let mut x3250: u32 = 0;
  let mut x3251: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3250, &mut x3251, x3249, x3219, x3243);
  let mut x3252: u32 = 0;
  let mut x3253: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3252, &mut x3253, x3251, x3221, (0x0 as u32));
  let mut x3254: u32 = 0;
  let mut x3255: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3254, &mut x3255, x3253, x3223, (0x0 as u32));
  let mut x3256: u32 = 0;
  let mut x3257: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3256, &mut x3257, x3255, x3225, x3213);
  let mut x3258: u32 = 0;
  let mut x3259: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3258, &mut x3259, x3257, x3227, x3231);
  let mut x3260: u32 = 0;
  let mut x3261: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3260, &mut x3261, x3259, x3229, x3232);
  let x3262: u32 = ((x3261 as u32) + (x3230 as u32));
  let mut x3263: u32 = 0;
  let mut x3264: u32 = 0;
  fiat_p256_mulx_u32(&mut x3263, &mut x3264, x1680, (arg3[7]));
  let mut x3265: u32 = 0;
  let mut x3266: u32 = 0;
  fiat_p256_mulx_u32(&mut x3265, &mut x3266, x1680, (arg3[6]));
  let mut x3267: u32 = 0;
  let mut x3268: u32 = 0;
  fiat_p256_mulx_u32(&mut x3267, &mut x3268, x1680, (arg3[5]));
  let mut x3269: u32 = 0;
  let mut x3270: u32 = 0;
  fiat_p256_mulx_u32(&mut x3269, &mut x3270, x1680, (arg3[4]));
  let mut x3271: u32 = 0;
  let mut x3272: u32 = 0;
  fiat_p256_mulx_u32(&mut x3271, &mut x3272, x1680, (arg3[3]));
  let mut x3273: u32 = 0;
  let mut x3274: u32 = 0;
  fiat_p256_mulx_u32(&mut x3273, &mut x3274, x1680, (arg3[2]));
  let mut x3275: u32 = 0;
  let mut x3276: u32 = 0;
  fiat_p256_mulx_u32(&mut x3275, &mut x3276, x1680, (arg3[1]));
  let mut x3277: u32 = 0;
  let mut x3278: u32 = 0;
  fiat_p256_mulx_u32(&mut x3277, &mut x3278, x1680, (arg3[0]));
  let mut x3279: u32 = 0;
  let mut x3280: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3279, &mut x3280, 0x0, x3278, x3275);
  let mut x3281: u32 = 0;
  let mut x3282: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3281, &mut x3282, x3280, x3276, x3273);
  let mut x3283: u32 = 0;
  let mut x3284: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3283, &mut x3284, x3282, x3274, x3271);
  let mut x3285: u32 = 0;
  let mut x3286: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3285, &mut x3286, x3284, x3272, x3269);
  let mut x3287: u32 = 0;
  let mut x3288: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3287, &mut x3288, x3286, x3270, x3267);
  let mut x3289: u32 = 0;
  let mut x3290: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3289, &mut x3290, x3288, x3268, x3265);
  let mut x3291: u32 = 0;
  let mut x3292: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3291, &mut x3292, x3290, x3266, x3263);
  let x3293: u32 = ((x3292 as u32) + x3264);
  let mut x3294: u32 = 0;
  let mut x3295: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3294, &mut x3295, 0x0, x3246, x3277);
  let mut x3296: u32 = 0;
  let mut x3297: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3296, &mut x3297, x3295, x3248, x3279);
  let mut x3298: u32 = 0;
  let mut x3299: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3298, &mut x3299, x3297, x3250, x3281);
  let mut x3300: u32 = 0;
  let mut x3301: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3300, &mut x3301, x3299, x3252, x3283);
  let mut x3302: u32 = 0;
  let mut x3303: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3302, &mut x3303, x3301, x3254, x3285);
  let mut x3304: u32 = 0;
  let mut x3305: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3304, &mut x3305, x3303, x3256, x3287);
  let mut x3306: u32 = 0;
  let mut x3307: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3306, &mut x3307, x3305, x3258, x3289);
  let mut x3308: u32 = 0;
  let mut x3309: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3308, &mut x3309, x3307, x3260, x3291);
  let mut x3310: u32 = 0;
  let mut x3311: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3310, &mut x3311, x3309, x3262, x3293);
  let mut x3312: u32 = 0;
  let mut x3313: u32 = 0;
  fiat_p256_mulx_u32(&mut x3312, &mut x3313, x3294, 0xffffffff);
  let mut x3314: u32 = 0;
  let mut x3315: u32 = 0;
  fiat_p256_mulx_u32(&mut x3314, &mut x3315, x3294, 0xffffffff);
  let mut x3316: u32 = 0;
  let mut x3317: u32 = 0;
  fiat_p256_mulx_u32(&mut x3316, &mut x3317, x3294, 0xffffffff);
  let mut x3318: u32 = 0;
  let mut x3319: u32 = 0;
  fiat_p256_mulx_u32(&mut x3318, &mut x3319, x3294, 0xffffffff);
  let mut x3320: u32 = 0;
  let mut x3321: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3320, &mut x3321, 0x0, x3319, x3316);
  let mut x3322: u32 = 0;
  let mut x3323: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3322, &mut x3323, x3321, x3317, x3314);
  let x3324: u32 = ((x3323 as u32) + x3315);
  let mut x3325: u32 = 0;
  let mut x3326: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3325, &mut x3326, 0x0, x3294, x3318);
  let mut x3327: u32 = 0;
  let mut x3328: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3327, &mut x3328, x3326, x3296, x3320);
  let mut x3329: u32 = 0;
  let mut x3330: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3329, &mut x3330, x3328, x3298, x3322);
  let mut x3331: u32 = 0;
  let mut x3332: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3331, &mut x3332, x3330, x3300, x3324);
  let mut x3333: u32 = 0;
  let mut x3334: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3333, &mut x3334, x3332, x3302, (0x0 as u32));
  let mut x3335: u32 = 0;
  let mut x3336: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3335, &mut x3336, x3334, x3304, (0x0 as u32));
  let mut x3337: u32 = 0;
  let mut x3338: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3337, &mut x3338, x3336, x3306, x3294);
  let mut x3339: u32 = 0;
  let mut x3340: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3339, &mut x3340, x3338, x3308, x3312);
  let mut x3341: u32 = 0;
  let mut x3342: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3341, &mut x3342, x3340, x3310, x3313);
  let x3343: u32 = ((x3342 as u32) + (x3311 as u32));
  let mut x3344: u32 = 0;
  let mut x3345: u32 = 0;
  fiat_p256_mulx_u32(&mut x3344, &mut x3345, x1681, (arg3[7]));
  let mut x3346: u32 = 0;
  let mut x3347: u32 = 0;
  fiat_p256_mulx_u32(&mut x3346, &mut x3347, x1681, (arg3[6]));
  let mut x3348: u32 = 0;
  let mut x3349: u32 = 0;
  fiat_p256_mulx_u32(&mut x3348, &mut x3349, x1681, (arg3[5]));
  let mut x3350: u32 = 0;
  let mut x3351: u32 = 0;
  fiat_p256_mulx_u32(&mut x3350, &mut x3351, x1681, (arg3[4]));
  let mut x3352: u32 = 0;
  let mut x3353: u32 = 0;
  fiat_p256_mulx_u32(&mut x3352, &mut x3353, x1681, (arg3[3]));
  let mut x3354: u32 = 0;
  let mut x3355: u32 = 0;
  fiat_p256_mulx_u32(&mut x3354, &mut x3355, x1681, (arg3[2]));
  let mut x3356: u32 = 0;
  let mut x3357: u32 = 0;
  fiat_p256_mulx_u32(&mut x3356, &mut x3357, x1681, (arg3[1]));
  let mut x3358: u32 = 0;
  let mut x3359: u32 = 0;
  fiat_p256_mulx_u32(&mut x3358, &mut x3359, x1681, (arg3[0]));
  let mut x3360: u32 = 0;
  let mut x3361: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3360, &mut x3361, 0x0, x3359, x3356);
  let mut x3362: u32 = 0;
  let mut x3363: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3362, &mut x3363, x3361, x3357, x3354);
  let mut x3364: u32 = 0;
  let mut x3365: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3364, &mut x3365, x3363, x3355, x3352);
  let mut x3366: u32 = 0;
  let mut x3367: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3366, &mut x3367, x3365, x3353, x3350);
  let mut x3368: u32 = 0;
  let mut x3369: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3368, &mut x3369, x3367, x3351, x3348);
  let mut x3370: u32 = 0;
  let mut x3371: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3370, &mut x3371, x3369, x3349, x3346);
  let mut x3372: u32 = 0;
  let mut x3373: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3372, &mut x3373, x3371, x3347, x3344);
  let x3374: u32 = ((x3373 as u32) + x3345);
  let mut x3375: u32 = 0;
  let mut x3376: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3375, &mut x3376, 0x0, x3327, x3358);
  let mut x3377: u32 = 0;
  let mut x3378: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3377, &mut x3378, x3376, x3329, x3360);
  let mut x3379: u32 = 0;
  let mut x3380: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3379, &mut x3380, x3378, x3331, x3362);
  let mut x3381: u32 = 0;
  let mut x3382: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3381, &mut x3382, x3380, x3333, x3364);
  let mut x3383: u32 = 0;
  let mut x3384: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3383, &mut x3384, x3382, x3335, x3366);
  let mut x3385: u32 = 0;
  let mut x3386: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3385, &mut x3386, x3384, x3337, x3368);
  let mut x3387: u32 = 0;
  let mut x3388: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3387, &mut x3388, x3386, x3339, x3370);
  let mut x3389: u32 = 0;
  let mut x3390: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3389, &mut x3390, x3388, x3341, x3372);
  let mut x3391: u32 = 0;
  let mut x3392: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3391, &mut x3392, x3390, x3343, x3374);
  let mut x3393: u32 = 0;
  let mut x3394: u32 = 0;
  fiat_p256_mulx_u32(&mut x3393, &mut x3394, x3375, 0xffffffff);
  let mut x3395: u32 = 0;
  let mut x3396: u32 = 0;
  fiat_p256_mulx_u32(&mut x3395, &mut x3396, x3375, 0xffffffff);
  let mut x3397: u32 = 0;
  let mut x3398: u32 = 0;
  fiat_p256_mulx_u32(&mut x3397, &mut x3398, x3375, 0xffffffff);
  let mut x3399: u32 = 0;
  let mut x3400: u32 = 0;
  fiat_p256_mulx_u32(&mut x3399, &mut x3400, x3375, 0xffffffff);
  let mut x3401: u32 = 0;
  let mut x3402: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3401, &mut x3402, 0x0, x3400, x3397);
  let mut x3403: u32 = 0;
  let mut x3404: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3403, &mut x3404, x3402, x3398, x3395);
  let x3405: u32 = ((x3404 as u32) + x3396);
  let mut x3406: u32 = 0;
  let mut x3407: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3406, &mut x3407, 0x0, x3375, x3399);
  let mut x3408: u32 = 0;
  let mut x3409: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3408, &mut x3409, x3407, x3377, x3401);
  let mut x3410: u32 = 0;
  let mut x3411: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3410, &mut x3411, x3409, x3379, x3403);
  let mut x3412: u32 = 0;
  let mut x3413: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3412, &mut x3413, x3411, x3381, x3405);
  let mut x3414: u32 = 0;
  let mut x3415: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3414, &mut x3415, x3413, x3383, (0x0 as u32));
  let mut x3416: u32 = 0;
  let mut x3417: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3416, &mut x3417, x3415, x3385, (0x0 as u32));
  let mut x3418: u32 = 0;
  let mut x3419: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3418, &mut x3419, x3417, x3387, x3375);
  let mut x3420: u32 = 0;
  let mut x3421: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3420, &mut x3421, x3419, x3389, x3393);
  let mut x3422: u32 = 0;
  let mut x3423: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3422, &mut x3423, x3421, x3391, x3394);
  let x3424: u32 = ((x3423 as u32) + (x3392 as u32));
  let mut x3425: u32 = 0;
  let mut x3426: u32 = 0;
  fiat_p256_mulx_u32(&mut x3425, &mut x3426, x1682, (arg3[7]));
  let mut x3427: u32 = 0;
  let mut x3428: u32 = 0;
  fiat_p256_mulx_u32(&mut x3427, &mut x3428, x1682, (arg3[6]));
  let mut x3429: u32 = 0;
  let mut x3430: u32 = 0;
  fiat_p256_mulx_u32(&mut x3429, &mut x3430, x1682, (arg3[5]));
  let mut x3431: u32 = 0;
  let mut x3432: u32 = 0;
  fiat_p256_mulx_u32(&mut x3431, &mut x3432, x1682, (arg3[4]));
  let mut x3433: u32 = 0;
  let mut x3434: u32 = 0;
  fiat_p256_mulx_u32(&mut x3433, &mut x3434, x1682, (arg3[3]));
  let mut x3435: u32 = 0;
  let mut x3436: u32 = 0;
  fiat_p256_mulx_u32(&mut x3435, &mut x3436, x1682, (arg3[2]));
  let mut x3437: u32 = 0;
  let mut x3438: u32 = 0;
  fiat_p256_mulx_u32(&mut x3437, &mut x3438, x1682, (arg3[1]));
  let mut x3439: u32 = 0;
  let mut x3440: u32 = 0;
  fiat_p256_mulx_u32(&mut x3439, &mut x3440, x1682, (arg3[0]));
  let mut x3441: u32 = 0;
  let mut x3442: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3441, &mut x3442, 0x0, x3440, x3437);
  let mut x3443: u32 = 0;
  let mut x3444: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3443, &mut x3444, x3442, x3438, x3435);
  let mut x3445: u32 = 0;
  let mut x3446: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3445, &mut x3446, x3444, x3436, x3433);
  let mut x3447: u32 = 0;
  let mut x3448: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3447, &mut x3448, x3446, x3434, x3431);
  let mut x3449: u32 = 0;
  let mut x3450: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3449, &mut x3450, x3448, x3432, x3429);
  let mut x3451: u32 = 0;
  let mut x3452: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3451, &mut x3452, x3450, x3430, x3427);
  let mut x3453: u32 = 0;
  let mut x3454: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3453, &mut x3454, x3452, x3428, x3425);
  let x3455: u32 = ((x3454 as u32) + x3426);
  let mut x3456: u32 = 0;
  let mut x3457: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3456, &mut x3457, 0x0, x3408, x3439);
  let mut x3458: u32 = 0;
  let mut x3459: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3458, &mut x3459, x3457, x3410, x3441);
  let mut x3460: u32 = 0;
  let mut x3461: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3460, &mut x3461, x3459, x3412, x3443);
  let mut x3462: u32 = 0;
  let mut x3463: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3462, &mut x3463, x3461, x3414, x3445);
  let mut x3464: u32 = 0;
  let mut x3465: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3464, &mut x3465, x3463, x3416, x3447);
  let mut x3466: u32 = 0;
  let mut x3467: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3466, &mut x3467, x3465, x3418, x3449);
  let mut x3468: u32 = 0;
  let mut x3469: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3468, &mut x3469, x3467, x3420, x3451);
  let mut x3470: u32 = 0;
  let mut x3471: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3470, &mut x3471, x3469, x3422, x3453);
  let mut x3472: u32 = 0;
  let mut x3473: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3472, &mut x3473, x3471, x3424, x3455);
  let mut x3474: u32 = 0;
  let mut x3475: u32 = 0;
  fiat_p256_mulx_u32(&mut x3474, &mut x3475, x3456, 0xffffffff);
  let mut x3476: u32 = 0;
  let mut x3477: u32 = 0;
  fiat_p256_mulx_u32(&mut x3476, &mut x3477, x3456, 0xffffffff);
  let mut x3478: u32 = 0;
  let mut x3479: u32 = 0;
  fiat_p256_mulx_u32(&mut x3478, &mut x3479, x3456, 0xffffffff);
  let mut x3480: u32 = 0;
  let mut x3481: u32 = 0;
  fiat_p256_mulx_u32(&mut x3480, &mut x3481, x3456, 0xffffffff);
  let mut x3482: u32 = 0;
  let mut x3483: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3482, &mut x3483, 0x0, x3481, x3478);
  let mut x3484: u32 = 0;
  let mut x3485: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3484, &mut x3485, x3483, x3479, x3476);
  let x3486: u32 = ((x3485 as u32) + x3477);
  let mut x3487: u32 = 0;
  let mut x3488: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3487, &mut x3488, 0x0, x3456, x3480);
  let mut x3489: u32 = 0;
  let mut x3490: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3489, &mut x3490, x3488, x3458, x3482);
  let mut x3491: u32 = 0;
  let mut x3492: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3491, &mut x3492, x3490, x3460, x3484);
  let mut x3493: u32 = 0;
  let mut x3494: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3493, &mut x3494, x3492, x3462, x3486);
  let mut x3495: u32 = 0;
  let mut x3496: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3495, &mut x3496, x3494, x3464, (0x0 as u32));
  let mut x3497: u32 = 0;
  let mut x3498: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3497, &mut x3498, x3496, x3466, (0x0 as u32));
  let mut x3499: u32 = 0;
  let mut x3500: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3499, &mut x3500, x3498, x3468, x3456);
  let mut x3501: u32 = 0;
  let mut x3502: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3501, &mut x3502, x3500, x3470, x3474);
  let mut x3503: u32 = 0;
  let mut x3504: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3503, &mut x3504, x3502, x3472, x3475);
  let x3505: u32 = ((x3504 as u32) + (x3473 as u32));
  let mut x3506: u32 = 0;
  let mut x3507: u32 = 0;
  fiat_p256_mulx_u32(&mut x3506, &mut x3507, x1683, (arg3[7]));
  let mut x3508: u32 = 0;
  let mut x3509: u32 = 0;
  fiat_p256_mulx_u32(&mut x3508, &mut x3509, x1683, (arg3[6]));
  let mut x3510: u32 = 0;
  let mut x3511: u32 = 0;
  fiat_p256_mulx_u32(&mut x3510, &mut x3511, x1683, (arg3[5]));
  let mut x3512: u32 = 0;
  let mut x3513: u32 = 0;
  fiat_p256_mulx_u32(&mut x3512, &mut x3513, x1683, (arg3[4]));
  let mut x3514: u32 = 0;
  let mut x3515: u32 = 0;
  fiat_p256_mulx_u32(&mut x3514, &mut x3515, x1683, (arg3[3]));
  let mut x3516: u32 = 0;
  let mut x3517: u32 = 0;
  fiat_p256_mulx_u32(&mut x3516, &mut x3517, x1683, (arg3[2]));
  let mut x3518: u32 = 0;
  let mut x3519: u32 = 0;
  fiat_p256_mulx_u32(&mut x3518, &mut x3519, x1683, (arg3[1]));
  let mut x3520: u32 = 0;
  let mut x3521: u32 = 0;
  fiat_p256_mulx_u32(&mut x3520, &mut x3521, x1683, (arg3[0]));
  let mut x3522: u32 = 0;
  let mut x3523: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3522, &mut x3523, 0x0, x3521, x3518);
  let mut x3524: u32 = 0;
  let mut x3525: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3524, &mut x3525, x3523, x3519, x3516);
  let mut x3526: u32 = 0;
  let mut x3527: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3526, &mut x3527, x3525, x3517, x3514);
  let mut x3528: u32 = 0;
  let mut x3529: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3528, &mut x3529, x3527, x3515, x3512);
  let mut x3530: u32 = 0;
  let mut x3531: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3530, &mut x3531, x3529, x3513, x3510);
  let mut x3532: u32 = 0;
  let mut x3533: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3532, &mut x3533, x3531, x3511, x3508);
  let mut x3534: u32 = 0;
  let mut x3535: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3534, &mut x3535, x3533, x3509, x3506);
  let x3536: u32 = ((x3535 as u32) + x3507);
  let mut x3537: u32 = 0;
  let mut x3538: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3537, &mut x3538, 0x0, x3489, x3520);
  let mut x3539: u32 = 0;
  let mut x3540: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3539, &mut x3540, x3538, x3491, x3522);
  let mut x3541: u32 = 0;
  let mut x3542: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3541, &mut x3542, x3540, x3493, x3524);
  let mut x3543: u32 = 0;
  let mut x3544: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3543, &mut x3544, x3542, x3495, x3526);
  let mut x3545: u32 = 0;
  let mut x3546: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3545, &mut x3546, x3544, x3497, x3528);
  let mut x3547: u32 = 0;
  let mut x3548: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3547, &mut x3548, x3546, x3499, x3530);
  let mut x3549: u32 = 0;
  let mut x3550: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3549, &mut x3550, x3548, x3501, x3532);
  let mut x3551: u32 = 0;
  let mut x3552: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3551, &mut x3552, x3550, x3503, x3534);
  let mut x3553: u32 = 0;
  let mut x3554: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3553, &mut x3554, x3552, x3505, x3536);
  let mut x3555: u32 = 0;
  let mut x3556: u32 = 0;
  fiat_p256_mulx_u32(&mut x3555, &mut x3556, x3537, 0xffffffff);
  let mut x3557: u32 = 0;
  let mut x3558: u32 = 0;
  fiat_p256_mulx_u32(&mut x3557, &mut x3558, x3537, 0xffffffff);
  let mut x3559: u32 = 0;
  let mut x3560: u32 = 0;
  fiat_p256_mulx_u32(&mut x3559, &mut x3560, x3537, 0xffffffff);
  let mut x3561: u32 = 0;
  let mut x3562: u32 = 0;
  fiat_p256_mulx_u32(&mut x3561, &mut x3562, x3537, 0xffffffff);
  let mut x3563: u32 = 0;
  let mut x3564: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3563, &mut x3564, 0x0, x3562, x3559);
  let mut x3565: u32 = 0;
  let mut x3566: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3565, &mut x3566, x3564, x3560, x3557);
  let x3567: u32 = ((x3566 as u32) + x3558);
  let mut x3568: u32 = 0;
  let mut x3569: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3568, &mut x3569, 0x0, x3537, x3561);
  let mut x3570: u32 = 0;
  let mut x3571: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3570, &mut x3571, x3569, x3539, x3563);
  let mut x3572: u32 = 0;
  let mut x3573: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3572, &mut x3573, x3571, x3541, x3565);
  let mut x3574: u32 = 0;
  let mut x3575: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3574, &mut x3575, x3573, x3543, x3567);
  let mut x3576: u32 = 0;
  let mut x3577: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3576, &mut x3577, x3575, x3545, (0x0 as u32));
  let mut x3578: u32 = 0;
  let mut x3579: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3578, &mut x3579, x3577, x3547, (0x0 as u32));
  let mut x3580: u32 = 0;
  let mut x3581: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3580, &mut x3581, x3579, x3549, x3537);
  let mut x3582: u32 = 0;
  let mut x3583: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3582, &mut x3583, x3581, x3551, x3555);
  let mut x3584: u32 = 0;
  let mut x3585: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3584, &mut x3585, x3583, x3553, x3556);
  let x3586: u32 = ((x3585 as u32) + (x3554 as u32));
  let mut x3587: u32 = 0;
  let mut x3588: u32 = 0;
  fiat_p256_mulx_u32(&mut x3587, &mut x3588, x1684, (arg3[7]));
  let mut x3589: u32 = 0;
  let mut x3590: u32 = 0;
  fiat_p256_mulx_u32(&mut x3589, &mut x3590, x1684, (arg3[6]));
  let mut x3591: u32 = 0;
  let mut x3592: u32 = 0;
  fiat_p256_mulx_u32(&mut x3591, &mut x3592, x1684, (arg3[5]));
  let mut x3593: u32 = 0;
  let mut x3594: u32 = 0;
  fiat_p256_mulx_u32(&mut x3593, &mut x3594, x1684, (arg3[4]));
  let mut x3595: u32 = 0;
  let mut x3596: u32 = 0;
  fiat_p256_mulx_u32(&mut x3595, &mut x3596, x1684, (arg3[3]));
  let mut x3597: u32 = 0;
  let mut x3598: u32 = 0;
  fiat_p256_mulx_u32(&mut x3597, &mut x3598, x1684, (arg3[2]));
  let mut x3599: u32 = 0;
  let mut x3600: u32 = 0;
  fiat_p256_mulx_u32(&mut x3599, &mut x3600, x1684, (arg3[1]));
  let mut x3601: u32 = 0;
  let mut x3602: u32 = 0;
  fiat_p256_mulx_u32(&mut x3601, &mut x3602, x1684, (arg3[0]));
  let mut x3603: u32 = 0;
  let mut x3604: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3603, &mut x3604, 0x0, x3602, x3599);
  let mut x3605: u32 = 0;
  let mut x3606: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3605, &mut x3606, x3604, x3600, x3597);
  let mut x3607: u32 = 0;
  let mut x3608: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3607, &mut x3608, x3606, x3598, x3595);
  let mut x3609: u32 = 0;
  let mut x3610: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3609, &mut x3610, x3608, x3596, x3593);
  let mut x3611: u32 = 0;
  let mut x3612: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3611, &mut x3612, x3610, x3594, x3591);
  let mut x3613: u32 = 0;
  let mut x3614: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3613, &mut x3614, x3612, x3592, x3589);
  let mut x3615: u32 = 0;
  let mut x3616: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3615, &mut x3616, x3614, x3590, x3587);
  let x3617: u32 = ((x3616 as u32) + x3588);
  let mut x3618: u32 = 0;
  let mut x3619: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3618, &mut x3619, 0x0, x3570, x3601);
  let mut x3620: u32 = 0;
  let mut x3621: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3620, &mut x3621, x3619, x3572, x3603);
  let mut x3622: u32 = 0;
  let mut x3623: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3622, &mut x3623, x3621, x3574, x3605);
  let mut x3624: u32 = 0;
  let mut x3625: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3624, &mut x3625, x3623, x3576, x3607);
  let mut x3626: u32 = 0;
  let mut x3627: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3626, &mut x3627, x3625, x3578, x3609);
  let mut x3628: u32 = 0;
  let mut x3629: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3628, &mut x3629, x3627, x3580, x3611);
  let mut x3630: u32 = 0;
  let mut x3631: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3630, &mut x3631, x3629, x3582, x3613);
  let mut x3632: u32 = 0;
  let mut x3633: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3632, &mut x3633, x3631, x3584, x3615);
  let mut x3634: u32 = 0;
  let mut x3635: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3634, &mut x3635, x3633, x3586, x3617);
  let mut x3636: u32 = 0;
  let mut x3637: u32 = 0;
  fiat_p256_mulx_u32(&mut x3636, &mut x3637, x3618, 0xffffffff);
  let mut x3638: u32 = 0;
  let mut x3639: u32 = 0;
  fiat_p256_mulx_u32(&mut x3638, &mut x3639, x3618, 0xffffffff);
  let mut x3640: u32 = 0;
  let mut x3641: u32 = 0;
  fiat_p256_mulx_u32(&mut x3640, &mut x3641, x3618, 0xffffffff);
  let mut x3642: u32 = 0;
  let mut x3643: u32 = 0;
  fiat_p256_mulx_u32(&mut x3642, &mut x3643, x3618, 0xffffffff);
  let mut x3644: u32 = 0;
  let mut x3645: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3644, &mut x3645, 0x0, x3643, x3640);
  let mut x3646: u32 = 0;
  let mut x3647: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3646, &mut x3647, x3645, x3641, x3638);
  let x3648: u32 = ((x3647 as u32) + x3639);
  let mut x3649: u32 = 0;
  let mut x3650: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3649, &mut x3650, 0x0, x3618, x3642);
  let mut x3651: u32 = 0;
  let mut x3652: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3651, &mut x3652, x3650, x3620, x3644);
  let mut x3653: u32 = 0;
  let mut x3654: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3653, &mut x3654, x3652, x3622, x3646);
  let mut x3655: u32 = 0;
  let mut x3656: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3655, &mut x3656, x3654, x3624, x3648);
  let mut x3657: u32 = 0;
  let mut x3658: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3657, &mut x3658, x3656, x3626, (0x0 as u32));
  let mut x3659: u32 = 0;
  let mut x3660: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3659, &mut x3660, x3658, x3628, (0x0 as u32));
  let mut x3661: u32 = 0;
  let mut x3662: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3661, &mut x3662, x3660, x3630, x3618);
  let mut x3663: u32 = 0;
  let mut x3664: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3663, &mut x3664, x3662, x3632, x3636);
  let mut x3665: u32 = 0;
  let mut x3666: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3665, &mut x3666, x3664, x3634, x3637);
  let x3667: u32 = ((x3666 as u32) + (x3635 as u32));
  let mut x3668: u32 = 0;
  let mut x3669: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x3668, &mut x3669, 0x0, x3651, 0xffffffff);
  let mut x3670: u32 = 0;
  let mut x3671: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x3670, &mut x3671, x3669, x3653, 0xffffffff);
  let mut x3672: u32 = 0;
  let mut x3673: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x3672, &mut x3673, x3671, x3655, 0xffffffff);
  let mut x3674: u32 = 0;
  let mut x3675: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x3674, &mut x3675, x3673, x3657, (0x0 as u32));
  let mut x3676: u32 = 0;
  let mut x3677: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x3676, &mut x3677, x3675, x3659, (0x0 as u32));
  let mut x3678: u32 = 0;
  let mut x3679: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x3678, &mut x3679, x3677, x3661, (0x0 as u32));
  let mut x3680: u32 = 0;
  let mut x3681: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x3680, &mut x3681, x3679, x3663, (0x1 as u32));
  let mut x3682: u32 = 0;
  let mut x3683: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x3682, &mut x3683, x3681, x3665, 0xffffffff);
  let mut x3684: u32 = 0;
  let mut x3685: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x3684, &mut x3685, x3683, x3667, (0x0 as u32));
  let mut x3686: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x3686, x3685, x3668, x3651);
  let mut x3687: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x3687, x3685, x3670, x3653);
  let mut x3688: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x3688, x3685, x3672, x3655);
  let mut x3689: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x3689, x3685, x3674, x3657);
  let mut x3690: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x3690, x3685, x3676, x3659);
  let mut x3691: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x3691, x3685, x3678, x3661);
  let mut x3692: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x3692, x3685, x3680, x3663);
  let mut x3693: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x3693, x3685, x3682, x3665);
  let mut x3694: u32 = 0;
  let mut x3695: u32 = 0;
  fiat_p256_mulx_u32(&mut x3694, &mut x3695, x1721, (arg4[7]));
  let mut x3696: u32 = 0;
  let mut x3697: u32 = 0;
  fiat_p256_mulx_u32(&mut x3696, &mut x3697, x1721, (arg4[6]));
  let mut x3698: u32 = 0;
  let mut x3699: u32 = 0;
  fiat_p256_mulx_u32(&mut x3698, &mut x3699, x1721, (arg4[5]));
  let mut x3700: u32 = 0;
  let mut x3701: u32 = 0;
  fiat_p256_mulx_u32(&mut x3700, &mut x3701, x1721, (arg4[4]));
  let mut x3702: u32 = 0;
  let mut x3703: u32 = 0;
  fiat_p256_mulx_u32(&mut x3702, &mut x3703, x1721, (arg4[3]));
  let mut x3704: u32 = 0;
  let mut x3705: u32 = 0;
  fiat_p256_mulx_u32(&mut x3704, &mut x3705, x1721, (arg4[2]));
  let mut x3706: u32 = 0;
  let mut x3707: u32 = 0;
  fiat_p256_mulx_u32(&mut x3706, &mut x3707, x1721, (arg4[1]));
  let mut x3708: u32 = 0;
  let mut x3709: u32 = 0;
  fiat_p256_mulx_u32(&mut x3708, &mut x3709, x1721, (arg4[0]));
  let mut x3710: u32 = 0;
  let mut x3711: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3710, &mut x3711, 0x0, x3709, x3706);
  let mut x3712: u32 = 0;
  let mut x3713: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3712, &mut x3713, x3711, x3707, x3704);
  let mut x3714: u32 = 0;
  let mut x3715: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3714, &mut x3715, x3713, x3705, x3702);
  let mut x3716: u32 = 0;
  let mut x3717: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3716, &mut x3717, x3715, x3703, x3700);
  let mut x3718: u32 = 0;
  let mut x3719: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3718, &mut x3719, x3717, x3701, x3698);
  let mut x3720: u32 = 0;
  let mut x3721: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3720, &mut x3721, x3719, x3699, x3696);
  let mut x3722: u32 = 0;
  let mut x3723: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3722, &mut x3723, x3721, x3697, x3694);
  let x3724: u32 = ((x3723 as u32) + x3695);
  let mut x3725: u32 = 0;
  let mut x3726: u32 = 0;
  fiat_p256_mulx_u32(&mut x3725, &mut x3726, x3708, 0xffffffff);
  let mut x3727: u32 = 0;
  let mut x3728: u32 = 0;
  fiat_p256_mulx_u32(&mut x3727, &mut x3728, x3708, 0xffffffff);
  let mut x3729: u32 = 0;
  let mut x3730: u32 = 0;
  fiat_p256_mulx_u32(&mut x3729, &mut x3730, x3708, 0xffffffff);
  let mut x3731: u32 = 0;
  let mut x3732: u32 = 0;
  fiat_p256_mulx_u32(&mut x3731, &mut x3732, x3708, 0xffffffff);
  let mut x3733: u32 = 0;
  let mut x3734: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3733, &mut x3734, 0x0, x3732, x3729);
  let mut x3735: u32 = 0;
  let mut x3736: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3735, &mut x3736, x3734, x3730, x3727);
  let x3737: u32 = ((x3736 as u32) + x3728);
  let mut x3738: u32 = 0;
  let mut x3739: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3738, &mut x3739, 0x0, x3708, x3731);
  let mut x3740: u32 = 0;
  let mut x3741: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3740, &mut x3741, x3739, x3710, x3733);
  let mut x3742: u32 = 0;
  let mut x3743: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3742, &mut x3743, x3741, x3712, x3735);
  let mut x3744: u32 = 0;
  let mut x3745: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3744, &mut x3745, x3743, x3714, x3737);
  let mut x3746: u32 = 0;
  let mut x3747: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3746, &mut x3747, x3745, x3716, (0x0 as u32));
  let mut x3748: u32 = 0;
  let mut x3749: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3748, &mut x3749, x3747, x3718, (0x0 as u32));
  let mut x3750: u32 = 0;
  let mut x3751: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3750, &mut x3751, x3749, x3720, x3708);
  let mut x3752: u32 = 0;
  let mut x3753: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3752, &mut x3753, x3751, x3722, x3725);
  let mut x3754: u32 = 0;
  let mut x3755: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3754, &mut x3755, x3753, x3724, x3726);
  let mut x3756: u32 = 0;
  let mut x3757: u32 = 0;
  fiat_p256_mulx_u32(&mut x3756, &mut x3757, x1722, (arg4[7]));
  let mut x3758: u32 = 0;
  let mut x3759: u32 = 0;
  fiat_p256_mulx_u32(&mut x3758, &mut x3759, x1722, (arg4[6]));
  let mut x3760: u32 = 0;
  let mut x3761: u32 = 0;
  fiat_p256_mulx_u32(&mut x3760, &mut x3761, x1722, (arg4[5]));
  let mut x3762: u32 = 0;
  let mut x3763: u32 = 0;
  fiat_p256_mulx_u32(&mut x3762, &mut x3763, x1722, (arg4[4]));
  let mut x3764: u32 = 0;
  let mut x3765: u32 = 0;
  fiat_p256_mulx_u32(&mut x3764, &mut x3765, x1722, (arg4[3]));
  let mut x3766: u32 = 0;
  let mut x3767: u32 = 0;
  fiat_p256_mulx_u32(&mut x3766, &mut x3767, x1722, (arg4[2]));
  let mut x3768: u32 = 0;
  let mut x3769: u32 = 0;
  fiat_p256_mulx_u32(&mut x3768, &mut x3769, x1722, (arg4[1]));
  let mut x3770: u32 = 0;
  let mut x3771: u32 = 0;
  fiat_p256_mulx_u32(&mut x3770, &mut x3771, x1722, (arg4[0]));
  let mut x3772: u32 = 0;
  let mut x3773: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3772, &mut x3773, 0x0, x3771, x3768);
  let mut x3774: u32 = 0;
  let mut x3775: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3774, &mut x3775, x3773, x3769, x3766);
  let mut x3776: u32 = 0;
  let mut x3777: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3776, &mut x3777, x3775, x3767, x3764);
  let mut x3778: u32 = 0;
  let mut x3779: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3778, &mut x3779, x3777, x3765, x3762);
  let mut x3780: u32 = 0;
  let mut x3781: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3780, &mut x3781, x3779, x3763, x3760);
  let mut x3782: u32 = 0;
  let mut x3783: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3782, &mut x3783, x3781, x3761, x3758);
  let mut x3784: u32 = 0;
  let mut x3785: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3784, &mut x3785, x3783, x3759, x3756);
  let x3786: u32 = ((x3785 as u32) + x3757);
  let mut x3787: u32 = 0;
  let mut x3788: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3787, &mut x3788, 0x0, x3740, x3770);
  let mut x3789: u32 = 0;
  let mut x3790: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3789, &mut x3790, x3788, x3742, x3772);
  let mut x3791: u32 = 0;
  let mut x3792: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3791, &mut x3792, x3790, x3744, x3774);
  let mut x3793: u32 = 0;
  let mut x3794: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3793, &mut x3794, x3792, x3746, x3776);
  let mut x3795: u32 = 0;
  let mut x3796: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3795, &mut x3796, x3794, x3748, x3778);
  let mut x3797: u32 = 0;
  let mut x3798: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3797, &mut x3798, x3796, x3750, x3780);
  let mut x3799: u32 = 0;
  let mut x3800: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3799, &mut x3800, x3798, x3752, x3782);
  let mut x3801: u32 = 0;
  let mut x3802: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3801, &mut x3802, x3800, x3754, x3784);
  let mut x3803: u32 = 0;
  let mut x3804: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3803, &mut x3804, x3802, (x3755 as u32), x3786);
  let mut x3805: u32 = 0;
  let mut x3806: u32 = 0;
  fiat_p256_mulx_u32(&mut x3805, &mut x3806, x3787, 0xffffffff);
  let mut x3807: u32 = 0;
  let mut x3808: u32 = 0;
  fiat_p256_mulx_u32(&mut x3807, &mut x3808, x3787, 0xffffffff);
  let mut x3809: u32 = 0;
  let mut x3810: u32 = 0;
  fiat_p256_mulx_u32(&mut x3809, &mut x3810, x3787, 0xffffffff);
  let mut x3811: u32 = 0;
  let mut x3812: u32 = 0;
  fiat_p256_mulx_u32(&mut x3811, &mut x3812, x3787, 0xffffffff);
  let mut x3813: u32 = 0;
  let mut x3814: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3813, &mut x3814, 0x0, x3812, x3809);
  let mut x3815: u32 = 0;
  let mut x3816: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3815, &mut x3816, x3814, x3810, x3807);
  let x3817: u32 = ((x3816 as u32) + x3808);
  let mut x3818: u32 = 0;
  let mut x3819: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3818, &mut x3819, 0x0, x3787, x3811);
  let mut x3820: u32 = 0;
  let mut x3821: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3820, &mut x3821, x3819, x3789, x3813);
  let mut x3822: u32 = 0;
  let mut x3823: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3822, &mut x3823, x3821, x3791, x3815);
  let mut x3824: u32 = 0;
  let mut x3825: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3824, &mut x3825, x3823, x3793, x3817);
  let mut x3826: u32 = 0;
  let mut x3827: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3826, &mut x3827, x3825, x3795, (0x0 as u32));
  let mut x3828: u32 = 0;
  let mut x3829: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3828, &mut x3829, x3827, x3797, (0x0 as u32));
  let mut x3830: u32 = 0;
  let mut x3831: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3830, &mut x3831, x3829, x3799, x3787);
  let mut x3832: u32 = 0;
  let mut x3833: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3832, &mut x3833, x3831, x3801, x3805);
  let mut x3834: u32 = 0;
  let mut x3835: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3834, &mut x3835, x3833, x3803, x3806);
  let x3836: u32 = ((x3835 as u32) + (x3804 as u32));
  let mut x3837: u32 = 0;
  let mut x3838: u32 = 0;
  fiat_p256_mulx_u32(&mut x3837, &mut x3838, x1723, (arg4[7]));
  let mut x3839: u32 = 0;
  let mut x3840: u32 = 0;
  fiat_p256_mulx_u32(&mut x3839, &mut x3840, x1723, (arg4[6]));
  let mut x3841: u32 = 0;
  let mut x3842: u32 = 0;
  fiat_p256_mulx_u32(&mut x3841, &mut x3842, x1723, (arg4[5]));
  let mut x3843: u32 = 0;
  let mut x3844: u32 = 0;
  fiat_p256_mulx_u32(&mut x3843, &mut x3844, x1723, (arg4[4]));
  let mut x3845: u32 = 0;
  let mut x3846: u32 = 0;
  fiat_p256_mulx_u32(&mut x3845, &mut x3846, x1723, (arg4[3]));
  let mut x3847: u32 = 0;
  let mut x3848: u32 = 0;
  fiat_p256_mulx_u32(&mut x3847, &mut x3848, x1723, (arg4[2]));
  let mut x3849: u32 = 0;
  let mut x3850: u32 = 0;
  fiat_p256_mulx_u32(&mut x3849, &mut x3850, x1723, (arg4[1]));
  let mut x3851: u32 = 0;
  let mut x3852: u32 = 0;
  fiat_p256_mulx_u32(&mut x3851, &mut x3852, x1723, (arg4[0]));
  let mut x3853: u32 = 0;
  let mut x3854: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3853, &mut x3854, 0x0, x3852, x3849);
  let mut x3855: u32 = 0;
  let mut x3856: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3855, &mut x3856, x3854, x3850, x3847);
  let mut x3857: u32 = 0;
  let mut x3858: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3857, &mut x3858, x3856, x3848, x3845);
  let mut x3859: u32 = 0;
  let mut x3860: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3859, &mut x3860, x3858, x3846, x3843);
  let mut x3861: u32 = 0;
  let mut x3862: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3861, &mut x3862, x3860, x3844, x3841);
  let mut x3863: u32 = 0;
  let mut x3864: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3863, &mut x3864, x3862, x3842, x3839);
  let mut x3865: u32 = 0;
  let mut x3866: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3865, &mut x3866, x3864, x3840, x3837);
  let x3867: u32 = ((x3866 as u32) + x3838);
  let mut x3868: u32 = 0;
  let mut x3869: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3868, &mut x3869, 0x0, x3820, x3851);
  let mut x3870: u32 = 0;
  let mut x3871: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3870, &mut x3871, x3869, x3822, x3853);
  let mut x3872: u32 = 0;
  let mut x3873: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3872, &mut x3873, x3871, x3824, x3855);
  let mut x3874: u32 = 0;
  let mut x3875: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3874, &mut x3875, x3873, x3826, x3857);
  let mut x3876: u32 = 0;
  let mut x3877: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3876, &mut x3877, x3875, x3828, x3859);
  let mut x3878: u32 = 0;
  let mut x3879: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3878, &mut x3879, x3877, x3830, x3861);
  let mut x3880: u32 = 0;
  let mut x3881: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3880, &mut x3881, x3879, x3832, x3863);
  let mut x3882: u32 = 0;
  let mut x3883: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3882, &mut x3883, x3881, x3834, x3865);
  let mut x3884: u32 = 0;
  let mut x3885: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3884, &mut x3885, x3883, x3836, x3867);
  let mut x3886: u32 = 0;
  let mut x3887: u32 = 0;
  fiat_p256_mulx_u32(&mut x3886, &mut x3887, x3868, 0xffffffff);
  let mut x3888: u32 = 0;
  let mut x3889: u32 = 0;
  fiat_p256_mulx_u32(&mut x3888, &mut x3889, x3868, 0xffffffff);
  let mut x3890: u32 = 0;
  let mut x3891: u32 = 0;
  fiat_p256_mulx_u32(&mut x3890, &mut x3891, x3868, 0xffffffff);
  let mut x3892: u32 = 0;
  let mut x3893: u32 = 0;
  fiat_p256_mulx_u32(&mut x3892, &mut x3893, x3868, 0xffffffff);
  let mut x3894: u32 = 0;
  let mut x3895: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3894, &mut x3895, 0x0, x3893, x3890);
  let mut x3896: u32 = 0;
  let mut x3897: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3896, &mut x3897, x3895, x3891, x3888);
  let x3898: u32 = ((x3897 as u32) + x3889);
  let mut x3899: u32 = 0;
  let mut x3900: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3899, &mut x3900, 0x0, x3868, x3892);
  let mut x3901: u32 = 0;
  let mut x3902: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3901, &mut x3902, x3900, x3870, x3894);
  let mut x3903: u32 = 0;
  let mut x3904: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3903, &mut x3904, x3902, x3872, x3896);
  let mut x3905: u32 = 0;
  let mut x3906: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3905, &mut x3906, x3904, x3874, x3898);
  let mut x3907: u32 = 0;
  let mut x3908: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3907, &mut x3908, x3906, x3876, (0x0 as u32));
  let mut x3909: u32 = 0;
  let mut x3910: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3909, &mut x3910, x3908, x3878, (0x0 as u32));
  let mut x3911: u32 = 0;
  let mut x3912: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3911, &mut x3912, x3910, x3880, x3868);
  let mut x3913: u32 = 0;
  let mut x3914: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3913, &mut x3914, x3912, x3882, x3886);
  let mut x3915: u32 = 0;
  let mut x3916: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3915, &mut x3916, x3914, x3884, x3887);
  let x3917: u32 = ((x3916 as u32) + (x3885 as u32));
  let mut x3918: u32 = 0;
  let mut x3919: u32 = 0;
  fiat_p256_mulx_u32(&mut x3918, &mut x3919, x1724, (arg4[7]));
  let mut x3920: u32 = 0;
  let mut x3921: u32 = 0;
  fiat_p256_mulx_u32(&mut x3920, &mut x3921, x1724, (arg4[6]));
  let mut x3922: u32 = 0;
  let mut x3923: u32 = 0;
  fiat_p256_mulx_u32(&mut x3922, &mut x3923, x1724, (arg4[5]));
  let mut x3924: u32 = 0;
  let mut x3925: u32 = 0;
  fiat_p256_mulx_u32(&mut x3924, &mut x3925, x1724, (arg4[4]));
  let mut x3926: u32 = 0;
  let mut x3927: u32 = 0;
  fiat_p256_mulx_u32(&mut x3926, &mut x3927, x1724, (arg4[3]));
  let mut x3928: u32 = 0;
  let mut x3929: u32 = 0;
  fiat_p256_mulx_u32(&mut x3928, &mut x3929, x1724, (arg4[2]));
  let mut x3930: u32 = 0;
  let mut x3931: u32 = 0;
  fiat_p256_mulx_u32(&mut x3930, &mut x3931, x1724, (arg4[1]));
  let mut x3932: u32 = 0;
  let mut x3933: u32 = 0;
  fiat_p256_mulx_u32(&mut x3932, &mut x3933, x1724, (arg4[0]));
  let mut x3934: u32 = 0;
  let mut x3935: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3934, &mut x3935, 0x0, x3933, x3930);
  let mut x3936: u32 = 0;
  let mut x3937: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3936, &mut x3937, x3935, x3931, x3928);
  let mut x3938: u32 = 0;
  let mut x3939: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3938, &mut x3939, x3937, x3929, x3926);
  let mut x3940: u32 = 0;
  let mut x3941: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3940, &mut x3941, x3939, x3927, x3924);
  let mut x3942: u32 = 0;
  let mut x3943: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3942, &mut x3943, x3941, x3925, x3922);
  let mut x3944: u32 = 0;
  let mut x3945: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3944, &mut x3945, x3943, x3923, x3920);
  let mut x3946: u32 = 0;
  let mut x3947: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3946, &mut x3947, x3945, x3921, x3918);
  let x3948: u32 = ((x3947 as u32) + x3919);
  let mut x3949: u32 = 0;
  let mut x3950: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3949, &mut x3950, 0x0, x3901, x3932);
  let mut x3951: u32 = 0;
  let mut x3952: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3951, &mut x3952, x3950, x3903, x3934);
  let mut x3953: u32 = 0;
  let mut x3954: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3953, &mut x3954, x3952, x3905, x3936);
  let mut x3955: u32 = 0;
  let mut x3956: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3955, &mut x3956, x3954, x3907, x3938);
  let mut x3957: u32 = 0;
  let mut x3958: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3957, &mut x3958, x3956, x3909, x3940);
  let mut x3959: u32 = 0;
  let mut x3960: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3959, &mut x3960, x3958, x3911, x3942);
  let mut x3961: u32 = 0;
  let mut x3962: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3961, &mut x3962, x3960, x3913, x3944);
  let mut x3963: u32 = 0;
  let mut x3964: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3963, &mut x3964, x3962, x3915, x3946);
  let mut x3965: u32 = 0;
  let mut x3966: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3965, &mut x3966, x3964, x3917, x3948);
  let mut x3967: u32 = 0;
  let mut x3968: u32 = 0;
  fiat_p256_mulx_u32(&mut x3967, &mut x3968, x3949, 0xffffffff);
  let mut x3969: u32 = 0;
  let mut x3970: u32 = 0;
  fiat_p256_mulx_u32(&mut x3969, &mut x3970, x3949, 0xffffffff);
  let mut x3971: u32 = 0;
  let mut x3972: u32 = 0;
  fiat_p256_mulx_u32(&mut x3971, &mut x3972, x3949, 0xffffffff);
  let mut x3973: u32 = 0;
  let mut x3974: u32 = 0;
  fiat_p256_mulx_u32(&mut x3973, &mut x3974, x3949, 0xffffffff);
  let mut x3975: u32 = 0;
  let mut x3976: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3975, &mut x3976, 0x0, x3974, x3971);
  let mut x3977: u32 = 0;
  let mut x3978: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3977, &mut x3978, x3976, x3972, x3969);
  let x3979: u32 = ((x3978 as u32) + x3970);
  let mut x3980: u32 = 0;
  let mut x3981: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3980, &mut x3981, 0x0, x3949, x3973);
  let mut x3982: u32 = 0;
  let mut x3983: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3982, &mut x3983, x3981, x3951, x3975);
  let mut x3984: u32 = 0;
  let mut x3985: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3984, &mut x3985, x3983, x3953, x3977);
  let mut x3986: u32 = 0;
  let mut x3987: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3986, &mut x3987, x3985, x3955, x3979);
  let mut x3988: u32 = 0;
  let mut x3989: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3988, &mut x3989, x3987, x3957, (0x0 as u32));
  let mut x3990: u32 = 0;
  let mut x3991: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3990, &mut x3991, x3989, x3959, (0x0 as u32));
  let mut x3992: u32 = 0;
  let mut x3993: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3992, &mut x3993, x3991, x3961, x3949);
  let mut x3994: u32 = 0;
  let mut x3995: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3994, &mut x3995, x3993, x3963, x3967);
  let mut x3996: u32 = 0;
  let mut x3997: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x3996, &mut x3997, x3995, x3965, x3968);
  let x3998: u32 = ((x3997 as u32) + (x3966 as u32));
  let mut x3999: u32 = 0;
  let mut x4000: u32 = 0;
  fiat_p256_mulx_u32(&mut x3999, &mut x4000, x1725, (arg4[7]));
  let mut x4001: u32 = 0;
  let mut x4002: u32 = 0;
  fiat_p256_mulx_u32(&mut x4001, &mut x4002, x1725, (arg4[6]));
  let mut x4003: u32 = 0;
  let mut x4004: u32 = 0;
  fiat_p256_mulx_u32(&mut x4003, &mut x4004, x1725, (arg4[5]));
  let mut x4005: u32 = 0;
  let mut x4006: u32 = 0;
  fiat_p256_mulx_u32(&mut x4005, &mut x4006, x1725, (arg4[4]));
  let mut x4007: u32 = 0;
  let mut x4008: u32 = 0;
  fiat_p256_mulx_u32(&mut x4007, &mut x4008, x1725, (arg4[3]));
  let mut x4009: u32 = 0;
  let mut x4010: u32 = 0;
  fiat_p256_mulx_u32(&mut x4009, &mut x4010, x1725, (arg4[2]));
  let mut x4011: u32 = 0;
  let mut x4012: u32 = 0;
  fiat_p256_mulx_u32(&mut x4011, &mut x4012, x1725, (arg4[1]));
  let mut x4013: u32 = 0;
  let mut x4014: u32 = 0;
  fiat_p256_mulx_u32(&mut x4013, &mut x4014, x1725, (arg4[0]));
  let mut x4015: u32 = 0;
  let mut x4016: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4015, &mut x4016, 0x0, x4014, x4011);
  let mut x4017: u32 = 0;
  let mut x4018: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4017, &mut x4018, x4016, x4012, x4009);
  let mut x4019: u32 = 0;
  let mut x4020: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4019, &mut x4020, x4018, x4010, x4007);
  let mut x4021: u32 = 0;
  let mut x4022: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4021, &mut x4022, x4020, x4008, x4005);
  let mut x4023: u32 = 0;
  let mut x4024: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4023, &mut x4024, x4022, x4006, x4003);
  let mut x4025: u32 = 0;
  let mut x4026: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4025, &mut x4026, x4024, x4004, x4001);
  let mut x4027: u32 = 0;
  let mut x4028: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4027, &mut x4028, x4026, x4002, x3999);
  let x4029: u32 = ((x4028 as u32) + x4000);
  let mut x4030: u32 = 0;
  let mut x4031: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4030, &mut x4031, 0x0, x3982, x4013);
  let mut x4032: u32 = 0;
  let mut x4033: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4032, &mut x4033, x4031, x3984, x4015);
  let mut x4034: u32 = 0;
  let mut x4035: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4034, &mut x4035, x4033, x3986, x4017);
  let mut x4036: u32 = 0;
  let mut x4037: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4036, &mut x4037, x4035, x3988, x4019);
  let mut x4038: u32 = 0;
  let mut x4039: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4038, &mut x4039, x4037, x3990, x4021);
  let mut x4040: u32 = 0;
  let mut x4041: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4040, &mut x4041, x4039, x3992, x4023);
  let mut x4042: u32 = 0;
  let mut x4043: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4042, &mut x4043, x4041, x3994, x4025);
  let mut x4044: u32 = 0;
  let mut x4045: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4044, &mut x4045, x4043, x3996, x4027);
  let mut x4046: u32 = 0;
  let mut x4047: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4046, &mut x4047, x4045, x3998, x4029);
  let mut x4048: u32 = 0;
  let mut x4049: u32 = 0;
  fiat_p256_mulx_u32(&mut x4048, &mut x4049, x4030, 0xffffffff);
  let mut x4050: u32 = 0;
  let mut x4051: u32 = 0;
  fiat_p256_mulx_u32(&mut x4050, &mut x4051, x4030, 0xffffffff);
  let mut x4052: u32 = 0;
  let mut x4053: u32 = 0;
  fiat_p256_mulx_u32(&mut x4052, &mut x4053, x4030, 0xffffffff);
  let mut x4054: u32 = 0;
  let mut x4055: u32 = 0;
  fiat_p256_mulx_u32(&mut x4054, &mut x4055, x4030, 0xffffffff);
  let mut x4056: u32 = 0;
  let mut x4057: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4056, &mut x4057, 0x0, x4055, x4052);
  let mut x4058: u32 = 0;
  let mut x4059: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4058, &mut x4059, x4057, x4053, x4050);
  let x4060: u32 = ((x4059 as u32) + x4051);
  let mut x4061: u32 = 0;
  let mut x4062: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4061, &mut x4062, 0x0, x4030, x4054);
  let mut x4063: u32 = 0;
  let mut x4064: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4063, &mut x4064, x4062, x4032, x4056);
  let mut x4065: u32 = 0;
  let mut x4066: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4065, &mut x4066, x4064, x4034, x4058);
  let mut x4067: u32 = 0;
  let mut x4068: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4067, &mut x4068, x4066, x4036, x4060);
  let mut x4069: u32 = 0;
  let mut x4070: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4069, &mut x4070, x4068, x4038, (0x0 as u32));
  let mut x4071: u32 = 0;
  let mut x4072: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4071, &mut x4072, x4070, x4040, (0x0 as u32));
  let mut x4073: u32 = 0;
  let mut x4074: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4073, &mut x4074, x4072, x4042, x4030);
  let mut x4075: u32 = 0;
  let mut x4076: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4075, &mut x4076, x4074, x4044, x4048);
  let mut x4077: u32 = 0;
  let mut x4078: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4077, &mut x4078, x4076, x4046, x4049);
  let x4079: u32 = ((x4078 as u32) + (x4047 as u32));
  let mut x4080: u32 = 0;
  let mut x4081: u32 = 0;
  fiat_p256_mulx_u32(&mut x4080, &mut x4081, x1726, (arg4[7]));
  let mut x4082: u32 = 0;
  let mut x4083: u32 = 0;
  fiat_p256_mulx_u32(&mut x4082, &mut x4083, x1726, (arg4[6]));
  let mut x4084: u32 = 0;
  let mut x4085: u32 = 0;
  fiat_p256_mulx_u32(&mut x4084, &mut x4085, x1726, (arg4[5]));
  let mut x4086: u32 = 0;
  let mut x4087: u32 = 0;
  fiat_p256_mulx_u32(&mut x4086, &mut x4087, x1726, (arg4[4]));
  let mut x4088: u32 = 0;
  let mut x4089: u32 = 0;
  fiat_p256_mulx_u32(&mut x4088, &mut x4089, x1726, (arg4[3]));
  let mut x4090: u32 = 0;
  let mut x4091: u32 = 0;
  fiat_p256_mulx_u32(&mut x4090, &mut x4091, x1726, (arg4[2]));
  let mut x4092: u32 = 0;
  let mut x4093: u32 = 0;
  fiat_p256_mulx_u32(&mut x4092, &mut x4093, x1726, (arg4[1]));
  let mut x4094: u32 = 0;
  let mut x4095: u32 = 0;
  fiat_p256_mulx_u32(&mut x4094, &mut x4095, x1726, (arg4[0]));
  let mut x4096: u32 = 0;
  let mut x4097: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4096, &mut x4097, 0x0, x4095, x4092);
  let mut x4098: u32 = 0;
  let mut x4099: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4098, &mut x4099, x4097, x4093, x4090);
  let mut x4100: u32 = 0;
  let mut x4101: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4100, &mut x4101, x4099, x4091, x4088);
  let mut x4102: u32 = 0;
  let mut x4103: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4102, &mut x4103, x4101, x4089, x4086);
  let mut x4104: u32 = 0;
  let mut x4105: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4104, &mut x4105, x4103, x4087, x4084);
  let mut x4106: u32 = 0;
  let mut x4107: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4106, &mut x4107, x4105, x4085, x4082);
  let mut x4108: u32 = 0;
  let mut x4109: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4108, &mut x4109, x4107, x4083, x4080);
  let x4110: u32 = ((x4109 as u32) + x4081);
  let mut x4111: u32 = 0;
  let mut x4112: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4111, &mut x4112, 0x0, x4063, x4094);
  let mut x4113: u32 = 0;
  let mut x4114: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4113, &mut x4114, x4112, x4065, x4096);
  let mut x4115: u32 = 0;
  let mut x4116: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4115, &mut x4116, x4114, x4067, x4098);
  let mut x4117: u32 = 0;
  let mut x4118: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4117, &mut x4118, x4116, x4069, x4100);
  let mut x4119: u32 = 0;
  let mut x4120: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4119, &mut x4120, x4118, x4071, x4102);
  let mut x4121: u32 = 0;
  let mut x4122: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4121, &mut x4122, x4120, x4073, x4104);
  let mut x4123: u32 = 0;
  let mut x4124: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4123, &mut x4124, x4122, x4075, x4106);
  let mut x4125: u32 = 0;
  let mut x4126: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4125, &mut x4126, x4124, x4077, x4108);
  let mut x4127: u32 = 0;
  let mut x4128: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4127, &mut x4128, x4126, x4079, x4110);
  let mut x4129: u32 = 0;
  let mut x4130: u32 = 0;
  fiat_p256_mulx_u32(&mut x4129, &mut x4130, x4111, 0xffffffff);
  let mut x4131: u32 = 0;
  let mut x4132: u32 = 0;
  fiat_p256_mulx_u32(&mut x4131, &mut x4132, x4111, 0xffffffff);
  let mut x4133: u32 = 0;
  let mut x4134: u32 = 0;
  fiat_p256_mulx_u32(&mut x4133, &mut x4134, x4111, 0xffffffff);
  let mut x4135: u32 = 0;
  let mut x4136: u32 = 0;
  fiat_p256_mulx_u32(&mut x4135, &mut x4136, x4111, 0xffffffff);
  let mut x4137: u32 = 0;
  let mut x4138: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4137, &mut x4138, 0x0, x4136, x4133);
  let mut x4139: u32 = 0;
  let mut x4140: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4139, &mut x4140, x4138, x4134, x4131);
  let x4141: u32 = ((x4140 as u32) + x4132);
  let mut x4142: u32 = 0;
  let mut x4143: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4142, &mut x4143, 0x0, x4111, x4135);
  let mut x4144: u32 = 0;
  let mut x4145: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4144, &mut x4145, x4143, x4113, x4137);
  let mut x4146: u32 = 0;
  let mut x4147: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4146, &mut x4147, x4145, x4115, x4139);
  let mut x4148: u32 = 0;
  let mut x4149: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4148, &mut x4149, x4147, x4117, x4141);
  let mut x4150: u32 = 0;
  let mut x4151: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4150, &mut x4151, x4149, x4119, (0x0 as u32));
  let mut x4152: u32 = 0;
  let mut x4153: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4152, &mut x4153, x4151, x4121, (0x0 as u32));
  let mut x4154: u32 = 0;
  let mut x4155: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4154, &mut x4155, x4153, x4123, x4111);
  let mut x4156: u32 = 0;
  let mut x4157: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4156, &mut x4157, x4155, x4125, x4129);
  let mut x4158: u32 = 0;
  let mut x4159: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4158, &mut x4159, x4157, x4127, x4130);
  let x4160: u32 = ((x4159 as u32) + (x4128 as u32));
  let mut x4161: u32 = 0;
  let mut x4162: u32 = 0;
  fiat_p256_mulx_u32(&mut x4161, &mut x4162, x1727, (arg4[7]));
  let mut x4163: u32 = 0;
  let mut x4164: u32 = 0;
  fiat_p256_mulx_u32(&mut x4163, &mut x4164, x1727, (arg4[6]));
  let mut x4165: u32 = 0;
  let mut x4166: u32 = 0;
  fiat_p256_mulx_u32(&mut x4165, &mut x4166, x1727, (arg4[5]));
  let mut x4167: u32 = 0;
  let mut x4168: u32 = 0;
  fiat_p256_mulx_u32(&mut x4167, &mut x4168, x1727, (arg4[4]));
  let mut x4169: u32 = 0;
  let mut x4170: u32 = 0;
  fiat_p256_mulx_u32(&mut x4169, &mut x4170, x1727, (arg4[3]));
  let mut x4171: u32 = 0;
  let mut x4172: u32 = 0;
  fiat_p256_mulx_u32(&mut x4171, &mut x4172, x1727, (arg4[2]));
  let mut x4173: u32 = 0;
  let mut x4174: u32 = 0;
  fiat_p256_mulx_u32(&mut x4173, &mut x4174, x1727, (arg4[1]));
  let mut x4175: u32 = 0;
  let mut x4176: u32 = 0;
  fiat_p256_mulx_u32(&mut x4175, &mut x4176, x1727, (arg4[0]));
  let mut x4177: u32 = 0;
  let mut x4178: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4177, &mut x4178, 0x0, x4176, x4173);
  let mut x4179: u32 = 0;
  let mut x4180: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4179, &mut x4180, x4178, x4174, x4171);
  let mut x4181: u32 = 0;
  let mut x4182: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4181, &mut x4182, x4180, x4172, x4169);
  let mut x4183: u32 = 0;
  let mut x4184: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4183, &mut x4184, x4182, x4170, x4167);
  let mut x4185: u32 = 0;
  let mut x4186: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4185, &mut x4186, x4184, x4168, x4165);
  let mut x4187: u32 = 0;
  let mut x4188: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4187, &mut x4188, x4186, x4166, x4163);
  let mut x4189: u32 = 0;
  let mut x4190: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4189, &mut x4190, x4188, x4164, x4161);
  let x4191: u32 = ((x4190 as u32) + x4162);
  let mut x4192: u32 = 0;
  let mut x4193: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4192, &mut x4193, 0x0, x4144, x4175);
  let mut x4194: u32 = 0;
  let mut x4195: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4194, &mut x4195, x4193, x4146, x4177);
  let mut x4196: u32 = 0;
  let mut x4197: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4196, &mut x4197, x4195, x4148, x4179);
  let mut x4198: u32 = 0;
  let mut x4199: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4198, &mut x4199, x4197, x4150, x4181);
  let mut x4200: u32 = 0;
  let mut x4201: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4200, &mut x4201, x4199, x4152, x4183);
  let mut x4202: u32 = 0;
  let mut x4203: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4202, &mut x4203, x4201, x4154, x4185);
  let mut x4204: u32 = 0;
  let mut x4205: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4204, &mut x4205, x4203, x4156, x4187);
  let mut x4206: u32 = 0;
  let mut x4207: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4206, &mut x4207, x4205, x4158, x4189);
  let mut x4208: u32 = 0;
  let mut x4209: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4208, &mut x4209, x4207, x4160, x4191);
  let mut x4210: u32 = 0;
  let mut x4211: u32 = 0;
  fiat_p256_mulx_u32(&mut x4210, &mut x4211, x4192, 0xffffffff);
  let mut x4212: u32 = 0;
  let mut x4213: u32 = 0;
  fiat_p256_mulx_u32(&mut x4212, &mut x4213, x4192, 0xffffffff);
  let mut x4214: u32 = 0;
  let mut x4215: u32 = 0;
  fiat_p256_mulx_u32(&mut x4214, &mut x4215, x4192, 0xffffffff);
  let mut x4216: u32 = 0;
  let mut x4217: u32 = 0;
  fiat_p256_mulx_u32(&mut x4216, &mut x4217, x4192, 0xffffffff);
  let mut x4218: u32 = 0;
  let mut x4219: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4218, &mut x4219, 0x0, x4217, x4214);
  let mut x4220: u32 = 0;
  let mut x4221: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4220, &mut x4221, x4219, x4215, x4212);
  let x4222: u32 = ((x4221 as u32) + x4213);
  let mut x4223: u32 = 0;
  let mut x4224: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4223, &mut x4224, 0x0, x4192, x4216);
  let mut x4225: u32 = 0;
  let mut x4226: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4225, &mut x4226, x4224, x4194, x4218);
  let mut x4227: u32 = 0;
  let mut x4228: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4227, &mut x4228, x4226, x4196, x4220);
  let mut x4229: u32 = 0;
  let mut x4230: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4229, &mut x4230, x4228, x4198, x4222);
  let mut x4231: u32 = 0;
  let mut x4232: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4231, &mut x4232, x4230, x4200, (0x0 as u32));
  let mut x4233: u32 = 0;
  let mut x4234: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4233, &mut x4234, x4232, x4202, (0x0 as u32));
  let mut x4235: u32 = 0;
  let mut x4236: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4235, &mut x4236, x4234, x4204, x4192);
  let mut x4237: u32 = 0;
  let mut x4238: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4237, &mut x4238, x4236, x4206, x4210);
  let mut x4239: u32 = 0;
  let mut x4240: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4239, &mut x4240, x4238, x4208, x4211);
  let x4241: u32 = ((x4240 as u32) + (x4209 as u32));
  let mut x4242: u32 = 0;
  let mut x4243: u32 = 0;
  fiat_p256_mulx_u32(&mut x4242, &mut x4243, x1728, (arg4[7]));
  let mut x4244: u32 = 0;
  let mut x4245: u32 = 0;
  fiat_p256_mulx_u32(&mut x4244, &mut x4245, x1728, (arg4[6]));
  let mut x4246: u32 = 0;
  let mut x4247: u32 = 0;
  fiat_p256_mulx_u32(&mut x4246, &mut x4247, x1728, (arg4[5]));
  let mut x4248: u32 = 0;
  let mut x4249: u32 = 0;
  fiat_p256_mulx_u32(&mut x4248, &mut x4249, x1728, (arg4[4]));
  let mut x4250: u32 = 0;
  let mut x4251: u32 = 0;
  fiat_p256_mulx_u32(&mut x4250, &mut x4251, x1728, (arg4[3]));
  let mut x4252: u32 = 0;
  let mut x4253: u32 = 0;
  fiat_p256_mulx_u32(&mut x4252, &mut x4253, x1728, (arg4[2]));
  let mut x4254: u32 = 0;
  let mut x4255: u32 = 0;
  fiat_p256_mulx_u32(&mut x4254, &mut x4255, x1728, (arg4[1]));
  let mut x4256: u32 = 0;
  let mut x4257: u32 = 0;
  fiat_p256_mulx_u32(&mut x4256, &mut x4257, x1728, (arg4[0]));
  let mut x4258: u32 = 0;
  let mut x4259: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4258, &mut x4259, 0x0, x4257, x4254);
  let mut x4260: u32 = 0;
  let mut x4261: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4260, &mut x4261, x4259, x4255, x4252);
  let mut x4262: u32 = 0;
  let mut x4263: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4262, &mut x4263, x4261, x4253, x4250);
  let mut x4264: u32 = 0;
  let mut x4265: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4264, &mut x4265, x4263, x4251, x4248);
  let mut x4266: u32 = 0;
  let mut x4267: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4266, &mut x4267, x4265, x4249, x4246);
  let mut x4268: u32 = 0;
  let mut x4269: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4268, &mut x4269, x4267, x4247, x4244);
  let mut x4270: u32 = 0;
  let mut x4271: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4270, &mut x4271, x4269, x4245, x4242);
  let x4272: u32 = ((x4271 as u32) + x4243);
  let mut x4273: u32 = 0;
  let mut x4274: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4273, &mut x4274, 0x0, x4225, x4256);
  let mut x4275: u32 = 0;
  let mut x4276: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4275, &mut x4276, x4274, x4227, x4258);
  let mut x4277: u32 = 0;
  let mut x4278: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4277, &mut x4278, x4276, x4229, x4260);
  let mut x4279: u32 = 0;
  let mut x4280: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4279, &mut x4280, x4278, x4231, x4262);
  let mut x4281: u32 = 0;
  let mut x4282: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4281, &mut x4282, x4280, x4233, x4264);
  let mut x4283: u32 = 0;
  let mut x4284: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4283, &mut x4284, x4282, x4235, x4266);
  let mut x4285: u32 = 0;
  let mut x4286: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4285, &mut x4286, x4284, x4237, x4268);
  let mut x4287: u32 = 0;
  let mut x4288: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4287, &mut x4288, x4286, x4239, x4270);
  let mut x4289: u32 = 0;
  let mut x4290: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4289, &mut x4290, x4288, x4241, x4272);
  let mut x4291: u32 = 0;
  let mut x4292: u32 = 0;
  fiat_p256_mulx_u32(&mut x4291, &mut x4292, x4273, 0xffffffff);
  let mut x4293: u32 = 0;
  let mut x4294: u32 = 0;
  fiat_p256_mulx_u32(&mut x4293, &mut x4294, x4273, 0xffffffff);
  let mut x4295: u32 = 0;
  let mut x4296: u32 = 0;
  fiat_p256_mulx_u32(&mut x4295, &mut x4296, x4273, 0xffffffff);
  let mut x4297: u32 = 0;
  let mut x4298: u32 = 0;
  fiat_p256_mulx_u32(&mut x4297, &mut x4298, x4273, 0xffffffff);
  let mut x4299: u32 = 0;
  let mut x4300: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4299, &mut x4300, 0x0, x4298, x4295);
  let mut x4301: u32 = 0;
  let mut x4302: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4301, &mut x4302, x4300, x4296, x4293);
  let x4303: u32 = ((x4302 as u32) + x4294);
  let mut x4304: u32 = 0;
  let mut x4305: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4304, &mut x4305, 0x0, x4273, x4297);
  let mut x4306: u32 = 0;
  let mut x4307: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4306, &mut x4307, x4305, x4275, x4299);
  let mut x4308: u32 = 0;
  let mut x4309: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4308, &mut x4309, x4307, x4277, x4301);
  let mut x4310: u32 = 0;
  let mut x4311: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4310, &mut x4311, x4309, x4279, x4303);
  let mut x4312: u32 = 0;
  let mut x4313: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4312, &mut x4313, x4311, x4281, (0x0 as u32));
  let mut x4314: u32 = 0;
  let mut x4315: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4314, &mut x4315, x4313, x4283, (0x0 as u32));
  let mut x4316: u32 = 0;
  let mut x4317: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4316, &mut x4317, x4315, x4285, x4273);
  let mut x4318: u32 = 0;
  let mut x4319: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4318, &mut x4319, x4317, x4287, x4291);
  let mut x4320: u32 = 0;
  let mut x4321: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4320, &mut x4321, x4319, x4289, x4292);
  let x4322: u32 = ((x4321 as u32) + (x4290 as u32));
  let mut x4323: u32 = 0;
  let mut x4324: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x4323, &mut x4324, 0x0, x4306, 0xffffffff);
  let mut x4325: u32 = 0;
  let mut x4326: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x4325, &mut x4326, x4324, x4308, 0xffffffff);
  let mut x4327: u32 = 0;
  let mut x4328: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x4327, &mut x4328, x4326, x4310, 0xffffffff);
  let mut x4329: u32 = 0;
  let mut x4330: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x4329, &mut x4330, x4328, x4312, (0x0 as u32));
  let mut x4331: u32 = 0;
  let mut x4332: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x4331, &mut x4332, x4330, x4314, (0x0 as u32));
  let mut x4333: u32 = 0;
  let mut x4334: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x4333, &mut x4334, x4332, x4316, (0x0 as u32));
  let mut x4335: u32 = 0;
  let mut x4336: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x4335, &mut x4336, x4334, x4318, (0x1 as u32));
  let mut x4337: u32 = 0;
  let mut x4338: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x4337, &mut x4338, x4336, x4320, 0xffffffff);
  let mut x4339: u32 = 0;
  let mut x4340: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x4339, &mut x4340, x4338, x4322, (0x0 as u32));
  let mut x4341: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x4341, x4340, x4323, x4306);
  let mut x4342: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x4342, x4340, x4325, x4308);
  let mut x4343: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x4343, x4340, x4327, x4310);
  let mut x4344: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x4344, x4340, x4329, x4312);
  let mut x4345: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x4345, x4340, x4331, x4314);
  let mut x4346: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x4346, x4340, x4333, x4316);
  let mut x4347: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x4347, x4340, x4335, x4318);
  let mut x4348: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x4348, x4340, x4337, x4320);
  let mut x4349: u32 = 0;
  let mut x4350: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4349, &mut x4350, 0x0, x2376, x3031);
  let mut x4351: u32 = 0;
  let mut x4352: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4351, &mut x4352, x4350, x2377, x3032);
  let mut x4353: u32 = 0;
  let mut x4354: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4353, &mut x4354, x4352, x2378, x3033);
  let mut x4355: u32 = 0;
  let mut x4356: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4355, &mut x4356, x4354, x2379, x3034);
  let mut x4357: u32 = 0;
  let mut x4358: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4357, &mut x4358, x4356, x2380, x3035);
  let mut x4359: u32 = 0;
  let mut x4360: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4359, &mut x4360, x4358, x2381, x3036);
  let mut x4361: u32 = 0;
  let mut x4362: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4361, &mut x4362, x4360, x2382, x3037);
  let mut x4363: u32 = 0;
  let mut x4364: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4363, &mut x4364, x4362, x2383, x3038);
  let mut x4365: u32 = 0;
  let mut x4366: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x4365, &mut x4366, 0x0, x4349, 0xffffffff);
  let mut x4367: u32 = 0;
  let mut x4368: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x4367, &mut x4368, x4366, x4351, 0xffffffff);
  let mut x4369: u32 = 0;
  let mut x4370: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x4369, &mut x4370, x4368, x4353, 0xffffffff);
  let mut x4371: u32 = 0;
  let mut x4372: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x4371, &mut x4372, x4370, x4355, (0x0 as u32));
  let mut x4373: u32 = 0;
  let mut x4374: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x4373, &mut x4374, x4372, x4357, (0x0 as u32));
  let mut x4375: u32 = 0;
  let mut x4376: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x4375, &mut x4376, x4374, x4359, (0x0 as u32));
  let mut x4377: u32 = 0;
  let mut x4378: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x4377, &mut x4378, x4376, x4361, (0x1 as u32));
  let mut x4379: u32 = 0;
  let mut x4380: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x4379, &mut x4380, x4378, x4363, 0xffffffff);
  let mut x4381: u32 = 0;
  let mut x4382: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x4381, &mut x4382, x4380, (x4364 as u32), (0x0 as u32));
  let mut x4383: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x4383, x4382, x4365, x4349);
  let mut x4384: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x4384, x4382, x4367, x4351);
  let mut x4385: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x4385, x4382, x4369, x4353);
  let mut x4386: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x4386, x4382, x4371, x4355);
  let mut x4387: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x4387, x4382, x4373, x4357);
  let mut x4388: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x4388, x4382, x4375, x4359);
  let mut x4389: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x4389, x4382, x4377, x4361);
  let mut x4390: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x4390, x4382, x4379, x4363);
  let mut x4391: u32 = 0;
  let mut x4392: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4391, &mut x4392, 0x0, x3686, x4341);
  let mut x4393: u32 = 0;
  let mut x4394: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4393, &mut x4394, x4392, x3687, x4342);
  let mut x4395: u32 = 0;
  let mut x4396: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4395, &mut x4396, x4394, x3688, x4343);
  let mut x4397: u32 = 0;
  let mut x4398: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4397, &mut x4398, x4396, x3689, x4344);
  let mut x4399: u32 = 0;
  let mut x4400: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4399, &mut x4400, x4398, x3690, x4345);
  let mut x4401: u32 = 0;
  let mut x4402: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4401, &mut x4402, x4400, x3691, x4346);
  let mut x4403: u32 = 0;
  let mut x4404: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4403, &mut x4404, x4402, x3692, x4347);
  let mut x4405: u32 = 0;
  let mut x4406: fiat_p256_u1 = 0;
  fiat_p256_addcarryx_u32(&mut x4405, &mut x4406, x4404, x3693, x4348);
  let mut x4407: u32 = 0;
  let mut x4408: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x4407, &mut x4408, 0x0, x4391, 0xffffffff);
  let mut x4409: u32 = 0;
  let mut x4410: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x4409, &mut x4410, x4408, x4393, 0xffffffff);
  let mut x4411: u32 = 0;
  let mut x4412: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x4411, &mut x4412, x4410, x4395, 0xffffffff);
  let mut x4413: u32 = 0;
  let mut x4414: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x4413, &mut x4414, x4412, x4397, (0x0 as u32));
  let mut x4415: u32 = 0;
  let mut x4416: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x4415, &mut x4416, x4414, x4399, (0x0 as u32));
  let mut x4417: u32 = 0;
  let mut x4418: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x4417, &mut x4418, x4416, x4401, (0x0 as u32));
  let mut x4419: u32 = 0;
  let mut x4420: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x4419, &mut x4420, x4418, x4403, (0x1 as u32));
  let mut x4421: u32 = 0;
  let mut x4422: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x4421, &mut x4422, x4420, x4405, 0xffffffff);
  let mut x4423: u32 = 0;
  let mut x4424: fiat_p256_u1 = 0;
  fiat_p256_subborrowx_u32(&mut x4423, &mut x4424, x4422, (x4406 as u32), (0x0 as u32));
  let mut x4425: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x4425, x4424, x4407, x4391);
  let mut x4426: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x4426, x4424, x4409, x4393);
  let mut x4427: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x4427, x4424, x4411, x4395);
  let mut x4428: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x4428, x4424, x4413, x4397);
  let mut x4429: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x4429, x4424, x4415, x4399);
  let mut x4430: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x4430, x4424, x4417, x4401);
  let mut x4431: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x4431, x4424, x4419, x4403);
  let mut x4432: u32 = 0;
  fiat_p256_cmovznz_u32(&mut x4432, x4424, x4421, x4405);
  out1[0] = x1535;
  out1[1] = x1536;
  out1[2] = x1537;
  out1[3] = x1538;
  out1[4] = x1539;
  out1[5] = x1540;
  out1[6] = x1541;
  out1[7] = x1542;
  out1[8] = x1543;
  out2[0] = x1544;
  out2[1] = x1545;
  out2[2] = x1546;
  out2[3] = x1547;
  out2[4] = x1548;
  out2[5] = x1549;
  out2[6] = x1550;
  out2[7] = x1551;
  out2[8] = x1552;
  out3[0] = x4383;
  out3[1] = x4384;
  out3[2] = x4385;
  out3[3] = x4386;
  out3[4] = x4387;
  out3[5] = x4388;
  out3[6] = x4389;
  out3[7] = x4390;
  out4[0] = x4425;
  out4[1] = x4426;
  out4[2] = x4427;
  out4[3] = x4428;
  out4[4] = x4429;
  out4[5] = x4430;
  out4[6] = x4431;
  out4[7] = x4432;
}

