// Code generated by Fiat Cryptography. DO NOT EDIT.
//
// Autogenerated: 'src/ExtractionOCaml/word_by_word_montgomery' --lang Go --relax-primitive-carry-to-bitwidth 32,64 --cmovznz-by-mul --internal-static --package-case flatcase --public-function-case UpperCamelCase --private-function-case camelCase --public-type-case UpperCamelCase --private-type-case camelCase --no-prefix-fiat --doc-newline-in-typedef-bounds --doc-prepend-header 'Code generated by Fiat Cryptography. DO NOT EDIT.' --doc-text-before-function-name '' --doc-text-before-type-name '' --package-name p224 '' 32 '2^224 - 2^96 + 1' mul square add sub opp from_montgomery to_montgomery nonzero selectznz to_bytes from_bytes one msat sat_from_bytes divstep divstep_precomp jumpdivstep_precomp outer_loop_body
//
// curve description (via package name): p224
//
// machine_wordsize = 32 (from "32")
//
// requested operations: mul, square, add, sub, opp, from_montgomery, to_montgomery, nonzero, selectznz, to_bytes, from_bytes, one, msat, sat_from_bytes, divstep, divstep_precomp, jumpdivstep_precomp, outer_loop_body
//
// m = 0xffffffffffffffffffffffffffffffff000000000000000000000001 (from "2^224 - 2^96 + 1")
//
//
//
// NOTE: In addition to the bounds specified above each function, all
//
//   functions synthesized for this Montgomery arithmetic require the
//
//   input to be strictly less than the prime modulus (m), and also
//
//   require the input to be in the unique saturated representation.
//
//   All functions also ensure that these two properties are true of
//
//   return values.
//
//
//
// Computed values:
//
//   eval z = z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160) + (z[6] << 192)
//
//   bytes_eval z = z[0] + (z[1] << 8) + (z[2] << 16) + (z[3] << 24) + (z[4] << 32) + (z[5] << 40) + (z[6] << 48) + (z[7] << 56) + (z[8] << 64) + (z[9] << 72) + (z[10] << 80) + (z[11] << 88) + (z[12] << 96) + (z[13] << 104) + (z[14] << 112) + (z[15] << 120) + (z[16] << 128) + (z[17] << 136) + (z[18] << 144) + (z[19] << 152) + (z[20] << 160) + (z[21] << 168) + (z[22] << 176) + (z[23] << 184) + (z[24] << 192) + (z[25] << 200) + (z[26] << 208) + (z[27] << 216)
//
//   twos_complement_eval z = if (z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160) + (z[6] << 192)) & (2^224-1) < 2^223 then (z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160) + (z[6] << 192)) & (2^224-1) else ((z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160) + (z[6] << 192)) & (2^224-1)) - 2^224
package p224

import "math/bits"

type uint1 uint64 // We use uint64 instead of a more narrow type for performance reasons; see https://github.com/mit-plv/fiat-crypto/pull/1006#issuecomment-892625927
type int1 int64 // We use uint64 instead of a more narrow type for performance reasons; see https://github.com/mit-plv/fiat-crypto/pull/1006#issuecomment-892625927

// MontgomeryDomainFieldElement is a field element in the Montgomery domain.
//
// Bounds:
//
//   [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
type MontgomeryDomainFieldElement [7]uint32

// NonMontgomeryDomainFieldElement is a field element NOT in the Montgomery domain.
//
// Bounds:
//
//   [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
type NonMontgomeryDomainFieldElement [7]uint32

// cmovznzU32 is a single-word conditional move.
//
// Postconditions:
//   out1 = (if arg1 = 0 then arg2 else arg3)
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [0x0 ~> 0xffffffff]
//   arg3: [0x0 ~> 0xffffffff]
// Output Bounds:
//   out1: [0x0 ~> 0xffffffff]
func cmovznzU32(out1 *uint32, arg1 uint1, arg2 uint32, arg3 uint32) {
	x1 := (uint32(arg1) * 0xffffffff)
	x2 := ((x1 & arg3) | ((^x1) & arg2))
	*out1 = x2
}

// cmovznzU1 is a single-word conditional move.
//
// Postconditions:
//   out1 = (if arg1 = 0 then arg2 else arg3)
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [0x0 ~> 0x1]
//   arg3: [0x0 ~> 0x1]
// Output Bounds:
//   out1: [0x0 ~> 0x1]
func cmovznzU1(out1 *uint1, arg1 uint1, arg2 uint1, arg3 uint1) {
	x1 := ((arg1 & arg3) | ((^arg1) & arg2))
	*out1 = x1
}

// Mul multiplies two field elements in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
//   0 ≤ eval arg2 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m
//   0 ≤ eval out1 < m
//
func Mul(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement, arg2 *MontgomeryDomainFieldElement) {
	x1 := arg1[1]
	x2 := arg1[2]
	x3 := arg1[3]
	x4 := arg1[4]
	x5 := arg1[5]
	x6 := arg1[6]
	x7 := arg1[0]
	var x8 uint32
	var x9 uint32
	x9, x8 = bits.Mul32(x7, arg2[6])
	var x10 uint32
	var x11 uint32
	x11, x10 = bits.Mul32(x7, arg2[5])
	var x12 uint32
	var x13 uint32
	x13, x12 = bits.Mul32(x7, arg2[4])
	var x14 uint32
	var x15 uint32
	x15, x14 = bits.Mul32(x7, arg2[3])
	var x16 uint32
	var x17 uint32
	x17, x16 = bits.Mul32(x7, arg2[2])
	var x18 uint32
	var x19 uint32
	x19, x18 = bits.Mul32(x7, arg2[1])
	var x20 uint32
	var x21 uint32
	x21, x20 = bits.Mul32(x7, arg2[0])
	var x22 uint32
	var x23 uint32
	x22, x23 = bits.Add32(x21, x18, uint32(0x0))
	var x24 uint32
	var x25 uint32
	x24, x25 = bits.Add32(x19, x16, uint32(uint1(x23)))
	var x26 uint32
	var x27 uint32
	x26, x27 = bits.Add32(x17, x14, uint32(uint1(x25)))
	var x28 uint32
	var x29 uint32
	x28, x29 = bits.Add32(x15, x12, uint32(uint1(x27)))
	var x30 uint32
	var x31 uint32
	x30, x31 = bits.Add32(x13, x10, uint32(uint1(x29)))
	var x32 uint32
	var x33 uint32
	x32, x33 = bits.Add32(x11, x8, uint32(uint1(x31)))
	x34 := (uint32(uint1(x33)) + x9)
	var x35 uint32
	_, x35 = bits.Mul32(x20, 0xffffffff)
	var x37 uint32
	var x38 uint32
	x38, x37 = bits.Mul32(x35, 0xffffffff)
	var x39 uint32
	var x40 uint32
	x40, x39 = bits.Mul32(x35, 0xffffffff)
	var x41 uint32
	var x42 uint32
	x42, x41 = bits.Mul32(x35, 0xffffffff)
	var x43 uint32
	var x44 uint32
	x44, x43 = bits.Mul32(x35, 0xffffffff)
	var x45 uint32
	var x46 uint32
	x45, x46 = bits.Add32(x44, x41, uint32(0x0))
	var x47 uint32
	var x48 uint32
	x47, x48 = bits.Add32(x42, x39, uint32(uint1(x46)))
	var x49 uint32
	var x50 uint32
	x49, x50 = bits.Add32(x40, x37, uint32(uint1(x48)))
	x51 := (uint32(uint1(x50)) + x38)
	var x53 uint32
	_, x53 = bits.Add32(x20, x35, uint32(0x0))
	var x54 uint32
	var x55 uint32
	x54, x55 = bits.Add32(x22, uint32(0x0), uint32(uint1(x53)))
	var x56 uint32
	var x57 uint32
	x56, x57 = bits.Add32(x24, uint32(0x0), uint32(uint1(x55)))
	var x58 uint32
	var x59 uint32
	x58, x59 = bits.Add32(x26, x43, uint32(uint1(x57)))
	var x60 uint32
	var x61 uint32
	x60, x61 = bits.Add32(x28, x45, uint32(uint1(x59)))
	var x62 uint32
	var x63 uint32
	x62, x63 = bits.Add32(x30, x47, uint32(uint1(x61)))
	var x64 uint32
	var x65 uint32
	x64, x65 = bits.Add32(x32, x49, uint32(uint1(x63)))
	var x66 uint32
	var x67 uint32
	x66, x67 = bits.Add32(x34, x51, uint32(uint1(x65)))
	var x68 uint32
	var x69 uint32
	x69, x68 = bits.Mul32(x1, arg2[6])
	var x70 uint32
	var x71 uint32
	x71, x70 = bits.Mul32(x1, arg2[5])
	var x72 uint32
	var x73 uint32
	x73, x72 = bits.Mul32(x1, arg2[4])
	var x74 uint32
	var x75 uint32
	x75, x74 = bits.Mul32(x1, arg2[3])
	var x76 uint32
	var x77 uint32
	x77, x76 = bits.Mul32(x1, arg2[2])
	var x78 uint32
	var x79 uint32
	x79, x78 = bits.Mul32(x1, arg2[1])
	var x80 uint32
	var x81 uint32
	x81, x80 = bits.Mul32(x1, arg2[0])
	var x82 uint32
	var x83 uint32
	x82, x83 = bits.Add32(x81, x78, uint32(0x0))
	var x84 uint32
	var x85 uint32
	x84, x85 = bits.Add32(x79, x76, uint32(uint1(x83)))
	var x86 uint32
	var x87 uint32
	x86, x87 = bits.Add32(x77, x74, uint32(uint1(x85)))
	var x88 uint32
	var x89 uint32
	x88, x89 = bits.Add32(x75, x72, uint32(uint1(x87)))
	var x90 uint32
	var x91 uint32
	x90, x91 = bits.Add32(x73, x70, uint32(uint1(x89)))
	var x92 uint32
	var x93 uint32
	x92, x93 = bits.Add32(x71, x68, uint32(uint1(x91)))
	x94 := (uint32(uint1(x93)) + x69)
	var x95 uint32
	var x96 uint32
	x95, x96 = bits.Add32(x54, x80, uint32(0x0))
	var x97 uint32
	var x98 uint32
	x97, x98 = bits.Add32(x56, x82, uint32(uint1(x96)))
	var x99 uint32
	var x100 uint32
	x99, x100 = bits.Add32(x58, x84, uint32(uint1(x98)))
	var x101 uint32
	var x102 uint32
	x101, x102 = bits.Add32(x60, x86, uint32(uint1(x100)))
	var x103 uint32
	var x104 uint32
	x103, x104 = bits.Add32(x62, x88, uint32(uint1(x102)))
	var x105 uint32
	var x106 uint32
	x105, x106 = bits.Add32(x64, x90, uint32(uint1(x104)))
	var x107 uint32
	var x108 uint32
	x107, x108 = bits.Add32(x66, x92, uint32(uint1(x106)))
	var x109 uint32
	var x110 uint32
	x109, x110 = bits.Add32(uint32(uint1(x67)), x94, uint32(uint1(x108)))
	var x111 uint32
	_, x111 = bits.Mul32(x95, 0xffffffff)
	var x113 uint32
	var x114 uint32
	x114, x113 = bits.Mul32(x111, 0xffffffff)
	var x115 uint32
	var x116 uint32
	x116, x115 = bits.Mul32(x111, 0xffffffff)
	var x117 uint32
	var x118 uint32
	x118, x117 = bits.Mul32(x111, 0xffffffff)
	var x119 uint32
	var x120 uint32
	x120, x119 = bits.Mul32(x111, 0xffffffff)
	var x121 uint32
	var x122 uint32
	x121, x122 = bits.Add32(x120, x117, uint32(0x0))
	var x123 uint32
	var x124 uint32
	x123, x124 = bits.Add32(x118, x115, uint32(uint1(x122)))
	var x125 uint32
	var x126 uint32
	x125, x126 = bits.Add32(x116, x113, uint32(uint1(x124)))
	x127 := (uint32(uint1(x126)) + x114)
	var x129 uint32
	_, x129 = bits.Add32(x95, x111, uint32(0x0))
	var x130 uint32
	var x131 uint32
	x130, x131 = bits.Add32(x97, uint32(0x0), uint32(uint1(x129)))
	var x132 uint32
	var x133 uint32
	x132, x133 = bits.Add32(x99, uint32(0x0), uint32(uint1(x131)))
	var x134 uint32
	var x135 uint32
	x134, x135 = bits.Add32(x101, x119, uint32(uint1(x133)))
	var x136 uint32
	var x137 uint32
	x136, x137 = bits.Add32(x103, x121, uint32(uint1(x135)))
	var x138 uint32
	var x139 uint32
	x138, x139 = bits.Add32(x105, x123, uint32(uint1(x137)))
	var x140 uint32
	var x141 uint32
	x140, x141 = bits.Add32(x107, x125, uint32(uint1(x139)))
	var x142 uint32
	var x143 uint32
	x142, x143 = bits.Add32(x109, x127, uint32(uint1(x141)))
	x144 := (uint32(uint1(x143)) + uint32(uint1(x110)))
	var x145 uint32
	var x146 uint32
	x146, x145 = bits.Mul32(x2, arg2[6])
	var x147 uint32
	var x148 uint32
	x148, x147 = bits.Mul32(x2, arg2[5])
	var x149 uint32
	var x150 uint32
	x150, x149 = bits.Mul32(x2, arg2[4])
	var x151 uint32
	var x152 uint32
	x152, x151 = bits.Mul32(x2, arg2[3])
	var x153 uint32
	var x154 uint32
	x154, x153 = bits.Mul32(x2, arg2[2])
	var x155 uint32
	var x156 uint32
	x156, x155 = bits.Mul32(x2, arg2[1])
	var x157 uint32
	var x158 uint32
	x158, x157 = bits.Mul32(x2, arg2[0])
	var x159 uint32
	var x160 uint32
	x159, x160 = bits.Add32(x158, x155, uint32(0x0))
	var x161 uint32
	var x162 uint32
	x161, x162 = bits.Add32(x156, x153, uint32(uint1(x160)))
	var x163 uint32
	var x164 uint32
	x163, x164 = bits.Add32(x154, x151, uint32(uint1(x162)))
	var x165 uint32
	var x166 uint32
	x165, x166 = bits.Add32(x152, x149, uint32(uint1(x164)))
	var x167 uint32
	var x168 uint32
	x167, x168 = bits.Add32(x150, x147, uint32(uint1(x166)))
	var x169 uint32
	var x170 uint32
	x169, x170 = bits.Add32(x148, x145, uint32(uint1(x168)))
	x171 := (uint32(uint1(x170)) + x146)
	var x172 uint32
	var x173 uint32
	x172, x173 = bits.Add32(x130, x157, uint32(0x0))
	var x174 uint32
	var x175 uint32
	x174, x175 = bits.Add32(x132, x159, uint32(uint1(x173)))
	var x176 uint32
	var x177 uint32
	x176, x177 = bits.Add32(x134, x161, uint32(uint1(x175)))
	var x178 uint32
	var x179 uint32
	x178, x179 = bits.Add32(x136, x163, uint32(uint1(x177)))
	var x180 uint32
	var x181 uint32
	x180, x181 = bits.Add32(x138, x165, uint32(uint1(x179)))
	var x182 uint32
	var x183 uint32
	x182, x183 = bits.Add32(x140, x167, uint32(uint1(x181)))
	var x184 uint32
	var x185 uint32
	x184, x185 = bits.Add32(x142, x169, uint32(uint1(x183)))
	var x186 uint32
	var x187 uint32
	x186, x187 = bits.Add32(x144, x171, uint32(uint1(x185)))
	var x188 uint32
	_, x188 = bits.Mul32(x172, 0xffffffff)
	var x190 uint32
	var x191 uint32
	x191, x190 = bits.Mul32(x188, 0xffffffff)
	var x192 uint32
	var x193 uint32
	x193, x192 = bits.Mul32(x188, 0xffffffff)
	var x194 uint32
	var x195 uint32
	x195, x194 = bits.Mul32(x188, 0xffffffff)
	var x196 uint32
	var x197 uint32
	x197, x196 = bits.Mul32(x188, 0xffffffff)
	var x198 uint32
	var x199 uint32
	x198, x199 = bits.Add32(x197, x194, uint32(0x0))
	var x200 uint32
	var x201 uint32
	x200, x201 = bits.Add32(x195, x192, uint32(uint1(x199)))
	var x202 uint32
	var x203 uint32
	x202, x203 = bits.Add32(x193, x190, uint32(uint1(x201)))
	x204 := (uint32(uint1(x203)) + x191)
	var x206 uint32
	_, x206 = bits.Add32(x172, x188, uint32(0x0))
	var x207 uint32
	var x208 uint32
	x207, x208 = bits.Add32(x174, uint32(0x0), uint32(uint1(x206)))
	var x209 uint32
	var x210 uint32
	x209, x210 = bits.Add32(x176, uint32(0x0), uint32(uint1(x208)))
	var x211 uint32
	var x212 uint32
	x211, x212 = bits.Add32(x178, x196, uint32(uint1(x210)))
	var x213 uint32
	var x214 uint32
	x213, x214 = bits.Add32(x180, x198, uint32(uint1(x212)))
	var x215 uint32
	var x216 uint32
	x215, x216 = bits.Add32(x182, x200, uint32(uint1(x214)))
	var x217 uint32
	var x218 uint32
	x217, x218 = bits.Add32(x184, x202, uint32(uint1(x216)))
	var x219 uint32
	var x220 uint32
	x219, x220 = bits.Add32(x186, x204, uint32(uint1(x218)))
	x221 := (uint32(uint1(x220)) + uint32(uint1(x187)))
	var x222 uint32
	var x223 uint32
	x223, x222 = bits.Mul32(x3, arg2[6])
	var x224 uint32
	var x225 uint32
	x225, x224 = bits.Mul32(x3, arg2[5])
	var x226 uint32
	var x227 uint32
	x227, x226 = bits.Mul32(x3, arg2[4])
	var x228 uint32
	var x229 uint32
	x229, x228 = bits.Mul32(x3, arg2[3])
	var x230 uint32
	var x231 uint32
	x231, x230 = bits.Mul32(x3, arg2[2])
	var x232 uint32
	var x233 uint32
	x233, x232 = bits.Mul32(x3, arg2[1])
	var x234 uint32
	var x235 uint32
	x235, x234 = bits.Mul32(x3, arg2[0])
	var x236 uint32
	var x237 uint32
	x236, x237 = bits.Add32(x235, x232, uint32(0x0))
	var x238 uint32
	var x239 uint32
	x238, x239 = bits.Add32(x233, x230, uint32(uint1(x237)))
	var x240 uint32
	var x241 uint32
	x240, x241 = bits.Add32(x231, x228, uint32(uint1(x239)))
	var x242 uint32
	var x243 uint32
	x242, x243 = bits.Add32(x229, x226, uint32(uint1(x241)))
	var x244 uint32
	var x245 uint32
	x244, x245 = bits.Add32(x227, x224, uint32(uint1(x243)))
	var x246 uint32
	var x247 uint32
	x246, x247 = bits.Add32(x225, x222, uint32(uint1(x245)))
	x248 := (uint32(uint1(x247)) + x223)
	var x249 uint32
	var x250 uint32
	x249, x250 = bits.Add32(x207, x234, uint32(0x0))
	var x251 uint32
	var x252 uint32
	x251, x252 = bits.Add32(x209, x236, uint32(uint1(x250)))
	var x253 uint32
	var x254 uint32
	x253, x254 = bits.Add32(x211, x238, uint32(uint1(x252)))
	var x255 uint32
	var x256 uint32
	x255, x256 = bits.Add32(x213, x240, uint32(uint1(x254)))
	var x257 uint32
	var x258 uint32
	x257, x258 = bits.Add32(x215, x242, uint32(uint1(x256)))
	var x259 uint32
	var x260 uint32
	x259, x260 = bits.Add32(x217, x244, uint32(uint1(x258)))
	var x261 uint32
	var x262 uint32
	x261, x262 = bits.Add32(x219, x246, uint32(uint1(x260)))
	var x263 uint32
	var x264 uint32
	x263, x264 = bits.Add32(x221, x248, uint32(uint1(x262)))
	var x265 uint32
	_, x265 = bits.Mul32(x249, 0xffffffff)
	var x267 uint32
	var x268 uint32
	x268, x267 = bits.Mul32(x265, 0xffffffff)
	var x269 uint32
	var x270 uint32
	x270, x269 = bits.Mul32(x265, 0xffffffff)
	var x271 uint32
	var x272 uint32
	x272, x271 = bits.Mul32(x265, 0xffffffff)
	var x273 uint32
	var x274 uint32
	x274, x273 = bits.Mul32(x265, 0xffffffff)
	var x275 uint32
	var x276 uint32
	x275, x276 = bits.Add32(x274, x271, uint32(0x0))
	var x277 uint32
	var x278 uint32
	x277, x278 = bits.Add32(x272, x269, uint32(uint1(x276)))
	var x279 uint32
	var x280 uint32
	x279, x280 = bits.Add32(x270, x267, uint32(uint1(x278)))
	x281 := (uint32(uint1(x280)) + x268)
	var x283 uint32
	_, x283 = bits.Add32(x249, x265, uint32(0x0))
	var x284 uint32
	var x285 uint32
	x284, x285 = bits.Add32(x251, uint32(0x0), uint32(uint1(x283)))
	var x286 uint32
	var x287 uint32
	x286, x287 = bits.Add32(x253, uint32(0x0), uint32(uint1(x285)))
	var x288 uint32
	var x289 uint32
	x288, x289 = bits.Add32(x255, x273, uint32(uint1(x287)))
	var x290 uint32
	var x291 uint32
	x290, x291 = bits.Add32(x257, x275, uint32(uint1(x289)))
	var x292 uint32
	var x293 uint32
	x292, x293 = bits.Add32(x259, x277, uint32(uint1(x291)))
	var x294 uint32
	var x295 uint32
	x294, x295 = bits.Add32(x261, x279, uint32(uint1(x293)))
	var x296 uint32
	var x297 uint32
	x296, x297 = bits.Add32(x263, x281, uint32(uint1(x295)))
	x298 := (uint32(uint1(x297)) + uint32(uint1(x264)))
	var x299 uint32
	var x300 uint32
	x300, x299 = bits.Mul32(x4, arg2[6])
	var x301 uint32
	var x302 uint32
	x302, x301 = bits.Mul32(x4, arg2[5])
	var x303 uint32
	var x304 uint32
	x304, x303 = bits.Mul32(x4, arg2[4])
	var x305 uint32
	var x306 uint32
	x306, x305 = bits.Mul32(x4, arg2[3])
	var x307 uint32
	var x308 uint32
	x308, x307 = bits.Mul32(x4, arg2[2])
	var x309 uint32
	var x310 uint32
	x310, x309 = bits.Mul32(x4, arg2[1])
	var x311 uint32
	var x312 uint32
	x312, x311 = bits.Mul32(x4, arg2[0])
	var x313 uint32
	var x314 uint32
	x313, x314 = bits.Add32(x312, x309, uint32(0x0))
	var x315 uint32
	var x316 uint32
	x315, x316 = bits.Add32(x310, x307, uint32(uint1(x314)))
	var x317 uint32
	var x318 uint32
	x317, x318 = bits.Add32(x308, x305, uint32(uint1(x316)))
	var x319 uint32
	var x320 uint32
	x319, x320 = bits.Add32(x306, x303, uint32(uint1(x318)))
	var x321 uint32
	var x322 uint32
	x321, x322 = bits.Add32(x304, x301, uint32(uint1(x320)))
	var x323 uint32
	var x324 uint32
	x323, x324 = bits.Add32(x302, x299, uint32(uint1(x322)))
	x325 := (uint32(uint1(x324)) + x300)
	var x326 uint32
	var x327 uint32
	x326, x327 = bits.Add32(x284, x311, uint32(0x0))
	var x328 uint32
	var x329 uint32
	x328, x329 = bits.Add32(x286, x313, uint32(uint1(x327)))
	var x330 uint32
	var x331 uint32
	x330, x331 = bits.Add32(x288, x315, uint32(uint1(x329)))
	var x332 uint32
	var x333 uint32
	x332, x333 = bits.Add32(x290, x317, uint32(uint1(x331)))
	var x334 uint32
	var x335 uint32
	x334, x335 = bits.Add32(x292, x319, uint32(uint1(x333)))
	var x336 uint32
	var x337 uint32
	x336, x337 = bits.Add32(x294, x321, uint32(uint1(x335)))
	var x338 uint32
	var x339 uint32
	x338, x339 = bits.Add32(x296, x323, uint32(uint1(x337)))
	var x340 uint32
	var x341 uint32
	x340, x341 = bits.Add32(x298, x325, uint32(uint1(x339)))
	var x342 uint32
	_, x342 = bits.Mul32(x326, 0xffffffff)
	var x344 uint32
	var x345 uint32
	x345, x344 = bits.Mul32(x342, 0xffffffff)
	var x346 uint32
	var x347 uint32
	x347, x346 = bits.Mul32(x342, 0xffffffff)
	var x348 uint32
	var x349 uint32
	x349, x348 = bits.Mul32(x342, 0xffffffff)
	var x350 uint32
	var x351 uint32
	x351, x350 = bits.Mul32(x342, 0xffffffff)
	var x352 uint32
	var x353 uint32
	x352, x353 = bits.Add32(x351, x348, uint32(0x0))
	var x354 uint32
	var x355 uint32
	x354, x355 = bits.Add32(x349, x346, uint32(uint1(x353)))
	var x356 uint32
	var x357 uint32
	x356, x357 = bits.Add32(x347, x344, uint32(uint1(x355)))
	x358 := (uint32(uint1(x357)) + x345)
	var x360 uint32
	_, x360 = bits.Add32(x326, x342, uint32(0x0))
	var x361 uint32
	var x362 uint32
	x361, x362 = bits.Add32(x328, uint32(0x0), uint32(uint1(x360)))
	var x363 uint32
	var x364 uint32
	x363, x364 = bits.Add32(x330, uint32(0x0), uint32(uint1(x362)))
	var x365 uint32
	var x366 uint32
	x365, x366 = bits.Add32(x332, x350, uint32(uint1(x364)))
	var x367 uint32
	var x368 uint32
	x367, x368 = bits.Add32(x334, x352, uint32(uint1(x366)))
	var x369 uint32
	var x370 uint32
	x369, x370 = bits.Add32(x336, x354, uint32(uint1(x368)))
	var x371 uint32
	var x372 uint32
	x371, x372 = bits.Add32(x338, x356, uint32(uint1(x370)))
	var x373 uint32
	var x374 uint32
	x373, x374 = bits.Add32(x340, x358, uint32(uint1(x372)))
	x375 := (uint32(uint1(x374)) + uint32(uint1(x341)))
	var x376 uint32
	var x377 uint32
	x377, x376 = bits.Mul32(x5, arg2[6])
	var x378 uint32
	var x379 uint32
	x379, x378 = bits.Mul32(x5, arg2[5])
	var x380 uint32
	var x381 uint32
	x381, x380 = bits.Mul32(x5, arg2[4])
	var x382 uint32
	var x383 uint32
	x383, x382 = bits.Mul32(x5, arg2[3])
	var x384 uint32
	var x385 uint32
	x385, x384 = bits.Mul32(x5, arg2[2])
	var x386 uint32
	var x387 uint32
	x387, x386 = bits.Mul32(x5, arg2[1])
	var x388 uint32
	var x389 uint32
	x389, x388 = bits.Mul32(x5, arg2[0])
	var x390 uint32
	var x391 uint32
	x390, x391 = bits.Add32(x389, x386, uint32(0x0))
	var x392 uint32
	var x393 uint32
	x392, x393 = bits.Add32(x387, x384, uint32(uint1(x391)))
	var x394 uint32
	var x395 uint32
	x394, x395 = bits.Add32(x385, x382, uint32(uint1(x393)))
	var x396 uint32
	var x397 uint32
	x396, x397 = bits.Add32(x383, x380, uint32(uint1(x395)))
	var x398 uint32
	var x399 uint32
	x398, x399 = bits.Add32(x381, x378, uint32(uint1(x397)))
	var x400 uint32
	var x401 uint32
	x400, x401 = bits.Add32(x379, x376, uint32(uint1(x399)))
	x402 := (uint32(uint1(x401)) + x377)
	var x403 uint32
	var x404 uint32
	x403, x404 = bits.Add32(x361, x388, uint32(0x0))
	var x405 uint32
	var x406 uint32
	x405, x406 = bits.Add32(x363, x390, uint32(uint1(x404)))
	var x407 uint32
	var x408 uint32
	x407, x408 = bits.Add32(x365, x392, uint32(uint1(x406)))
	var x409 uint32
	var x410 uint32
	x409, x410 = bits.Add32(x367, x394, uint32(uint1(x408)))
	var x411 uint32
	var x412 uint32
	x411, x412 = bits.Add32(x369, x396, uint32(uint1(x410)))
	var x413 uint32
	var x414 uint32
	x413, x414 = bits.Add32(x371, x398, uint32(uint1(x412)))
	var x415 uint32
	var x416 uint32
	x415, x416 = bits.Add32(x373, x400, uint32(uint1(x414)))
	var x417 uint32
	var x418 uint32
	x417, x418 = bits.Add32(x375, x402, uint32(uint1(x416)))
	var x419 uint32
	_, x419 = bits.Mul32(x403, 0xffffffff)
	var x421 uint32
	var x422 uint32
	x422, x421 = bits.Mul32(x419, 0xffffffff)
	var x423 uint32
	var x424 uint32
	x424, x423 = bits.Mul32(x419, 0xffffffff)
	var x425 uint32
	var x426 uint32
	x426, x425 = bits.Mul32(x419, 0xffffffff)
	var x427 uint32
	var x428 uint32
	x428, x427 = bits.Mul32(x419, 0xffffffff)
	var x429 uint32
	var x430 uint32
	x429, x430 = bits.Add32(x428, x425, uint32(0x0))
	var x431 uint32
	var x432 uint32
	x431, x432 = bits.Add32(x426, x423, uint32(uint1(x430)))
	var x433 uint32
	var x434 uint32
	x433, x434 = bits.Add32(x424, x421, uint32(uint1(x432)))
	x435 := (uint32(uint1(x434)) + x422)
	var x437 uint32
	_, x437 = bits.Add32(x403, x419, uint32(0x0))
	var x438 uint32
	var x439 uint32
	x438, x439 = bits.Add32(x405, uint32(0x0), uint32(uint1(x437)))
	var x440 uint32
	var x441 uint32
	x440, x441 = bits.Add32(x407, uint32(0x0), uint32(uint1(x439)))
	var x442 uint32
	var x443 uint32
	x442, x443 = bits.Add32(x409, x427, uint32(uint1(x441)))
	var x444 uint32
	var x445 uint32
	x444, x445 = bits.Add32(x411, x429, uint32(uint1(x443)))
	var x446 uint32
	var x447 uint32
	x446, x447 = bits.Add32(x413, x431, uint32(uint1(x445)))
	var x448 uint32
	var x449 uint32
	x448, x449 = bits.Add32(x415, x433, uint32(uint1(x447)))
	var x450 uint32
	var x451 uint32
	x450, x451 = bits.Add32(x417, x435, uint32(uint1(x449)))
	x452 := (uint32(uint1(x451)) + uint32(uint1(x418)))
	var x453 uint32
	var x454 uint32
	x454, x453 = bits.Mul32(x6, arg2[6])
	var x455 uint32
	var x456 uint32
	x456, x455 = bits.Mul32(x6, arg2[5])
	var x457 uint32
	var x458 uint32
	x458, x457 = bits.Mul32(x6, arg2[4])
	var x459 uint32
	var x460 uint32
	x460, x459 = bits.Mul32(x6, arg2[3])
	var x461 uint32
	var x462 uint32
	x462, x461 = bits.Mul32(x6, arg2[2])
	var x463 uint32
	var x464 uint32
	x464, x463 = bits.Mul32(x6, arg2[1])
	var x465 uint32
	var x466 uint32
	x466, x465 = bits.Mul32(x6, arg2[0])
	var x467 uint32
	var x468 uint32
	x467, x468 = bits.Add32(x466, x463, uint32(0x0))
	var x469 uint32
	var x470 uint32
	x469, x470 = bits.Add32(x464, x461, uint32(uint1(x468)))
	var x471 uint32
	var x472 uint32
	x471, x472 = bits.Add32(x462, x459, uint32(uint1(x470)))
	var x473 uint32
	var x474 uint32
	x473, x474 = bits.Add32(x460, x457, uint32(uint1(x472)))
	var x475 uint32
	var x476 uint32
	x475, x476 = bits.Add32(x458, x455, uint32(uint1(x474)))
	var x477 uint32
	var x478 uint32
	x477, x478 = bits.Add32(x456, x453, uint32(uint1(x476)))
	x479 := (uint32(uint1(x478)) + x454)
	var x480 uint32
	var x481 uint32
	x480, x481 = bits.Add32(x438, x465, uint32(0x0))
	var x482 uint32
	var x483 uint32
	x482, x483 = bits.Add32(x440, x467, uint32(uint1(x481)))
	var x484 uint32
	var x485 uint32
	x484, x485 = bits.Add32(x442, x469, uint32(uint1(x483)))
	var x486 uint32
	var x487 uint32
	x486, x487 = bits.Add32(x444, x471, uint32(uint1(x485)))
	var x488 uint32
	var x489 uint32
	x488, x489 = bits.Add32(x446, x473, uint32(uint1(x487)))
	var x490 uint32
	var x491 uint32
	x490, x491 = bits.Add32(x448, x475, uint32(uint1(x489)))
	var x492 uint32
	var x493 uint32
	x492, x493 = bits.Add32(x450, x477, uint32(uint1(x491)))
	var x494 uint32
	var x495 uint32
	x494, x495 = bits.Add32(x452, x479, uint32(uint1(x493)))
	var x496 uint32
	_, x496 = bits.Mul32(x480, 0xffffffff)
	var x498 uint32
	var x499 uint32
	x499, x498 = bits.Mul32(x496, 0xffffffff)
	var x500 uint32
	var x501 uint32
	x501, x500 = bits.Mul32(x496, 0xffffffff)
	var x502 uint32
	var x503 uint32
	x503, x502 = bits.Mul32(x496, 0xffffffff)
	var x504 uint32
	var x505 uint32
	x505, x504 = bits.Mul32(x496, 0xffffffff)
	var x506 uint32
	var x507 uint32
	x506, x507 = bits.Add32(x505, x502, uint32(0x0))
	var x508 uint32
	var x509 uint32
	x508, x509 = bits.Add32(x503, x500, uint32(uint1(x507)))
	var x510 uint32
	var x511 uint32
	x510, x511 = bits.Add32(x501, x498, uint32(uint1(x509)))
	x512 := (uint32(uint1(x511)) + x499)
	var x514 uint32
	_, x514 = bits.Add32(x480, x496, uint32(0x0))
	var x515 uint32
	var x516 uint32
	x515, x516 = bits.Add32(x482, uint32(0x0), uint32(uint1(x514)))
	var x517 uint32
	var x518 uint32
	x517, x518 = bits.Add32(x484, uint32(0x0), uint32(uint1(x516)))
	var x519 uint32
	var x520 uint32
	x519, x520 = bits.Add32(x486, x504, uint32(uint1(x518)))
	var x521 uint32
	var x522 uint32
	x521, x522 = bits.Add32(x488, x506, uint32(uint1(x520)))
	var x523 uint32
	var x524 uint32
	x523, x524 = bits.Add32(x490, x508, uint32(uint1(x522)))
	var x525 uint32
	var x526 uint32
	x525, x526 = bits.Add32(x492, x510, uint32(uint1(x524)))
	var x527 uint32
	var x528 uint32
	x527, x528 = bits.Add32(x494, x512, uint32(uint1(x526)))
	x529 := (uint32(uint1(x528)) + uint32(uint1(x495)))
	var x530 uint32
	var x531 uint32
	x530, x531 = bits.Sub32(x515, uint32(0x1), uint32(0x0))
	var x532 uint32
	var x533 uint32
	x532, x533 = bits.Sub32(x517, uint32(0x0), uint32(uint1(x531)))
	var x534 uint32
	var x535 uint32
	x534, x535 = bits.Sub32(x519, uint32(0x0), uint32(uint1(x533)))
	var x536 uint32
	var x537 uint32
	x536, x537 = bits.Sub32(x521, 0xffffffff, uint32(uint1(x535)))
	var x538 uint32
	var x539 uint32
	x538, x539 = bits.Sub32(x523, 0xffffffff, uint32(uint1(x537)))
	var x540 uint32
	var x541 uint32
	x540, x541 = bits.Sub32(x525, 0xffffffff, uint32(uint1(x539)))
	var x542 uint32
	var x543 uint32
	x542, x543 = bits.Sub32(x527, 0xffffffff, uint32(uint1(x541)))
	var x545 uint32
	_, x545 = bits.Sub32(x529, uint32(0x0), uint32(uint1(x543)))
	var x546 uint32
	cmovznzU32(&x546, uint1(x545), x530, x515)
	var x547 uint32
	cmovznzU32(&x547, uint1(x545), x532, x517)
	var x548 uint32
	cmovznzU32(&x548, uint1(x545), x534, x519)
	var x549 uint32
	cmovznzU32(&x549, uint1(x545), x536, x521)
	var x550 uint32
	cmovznzU32(&x550, uint1(x545), x538, x523)
	var x551 uint32
	cmovznzU32(&x551, uint1(x545), x540, x525)
	var x552 uint32
	cmovznzU32(&x552, uint1(x545), x542, x527)
	out1[0] = x546
	out1[1] = x547
	out1[2] = x548
	out1[3] = x549
	out1[4] = x550
	out1[5] = x551
	out1[6] = x552
}

// Square squares a field element in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m
//   0 ≤ eval out1 < m
//
func Square(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement) {
	x1 := arg1[1]
	x2 := arg1[2]
	x3 := arg1[3]
	x4 := arg1[4]
	x5 := arg1[5]
	x6 := arg1[6]
	x7 := arg1[0]
	var x8 uint32
	var x9 uint32
	x9, x8 = bits.Mul32(x7, arg1[6])
	var x10 uint32
	var x11 uint32
	x11, x10 = bits.Mul32(x7, arg1[5])
	var x12 uint32
	var x13 uint32
	x13, x12 = bits.Mul32(x7, arg1[4])
	var x14 uint32
	var x15 uint32
	x15, x14 = bits.Mul32(x7, arg1[3])
	var x16 uint32
	var x17 uint32
	x17, x16 = bits.Mul32(x7, arg1[2])
	var x18 uint32
	var x19 uint32
	x19, x18 = bits.Mul32(x7, arg1[1])
	var x20 uint32
	var x21 uint32
	x21, x20 = bits.Mul32(x7, arg1[0])
	var x22 uint32
	var x23 uint32
	x22, x23 = bits.Add32(x21, x18, uint32(0x0))
	var x24 uint32
	var x25 uint32
	x24, x25 = bits.Add32(x19, x16, uint32(uint1(x23)))
	var x26 uint32
	var x27 uint32
	x26, x27 = bits.Add32(x17, x14, uint32(uint1(x25)))
	var x28 uint32
	var x29 uint32
	x28, x29 = bits.Add32(x15, x12, uint32(uint1(x27)))
	var x30 uint32
	var x31 uint32
	x30, x31 = bits.Add32(x13, x10, uint32(uint1(x29)))
	var x32 uint32
	var x33 uint32
	x32, x33 = bits.Add32(x11, x8, uint32(uint1(x31)))
	x34 := (uint32(uint1(x33)) + x9)
	var x35 uint32
	_, x35 = bits.Mul32(x20, 0xffffffff)
	var x37 uint32
	var x38 uint32
	x38, x37 = bits.Mul32(x35, 0xffffffff)
	var x39 uint32
	var x40 uint32
	x40, x39 = bits.Mul32(x35, 0xffffffff)
	var x41 uint32
	var x42 uint32
	x42, x41 = bits.Mul32(x35, 0xffffffff)
	var x43 uint32
	var x44 uint32
	x44, x43 = bits.Mul32(x35, 0xffffffff)
	var x45 uint32
	var x46 uint32
	x45, x46 = bits.Add32(x44, x41, uint32(0x0))
	var x47 uint32
	var x48 uint32
	x47, x48 = bits.Add32(x42, x39, uint32(uint1(x46)))
	var x49 uint32
	var x50 uint32
	x49, x50 = bits.Add32(x40, x37, uint32(uint1(x48)))
	x51 := (uint32(uint1(x50)) + x38)
	var x53 uint32
	_, x53 = bits.Add32(x20, x35, uint32(0x0))
	var x54 uint32
	var x55 uint32
	x54, x55 = bits.Add32(x22, uint32(0x0), uint32(uint1(x53)))
	var x56 uint32
	var x57 uint32
	x56, x57 = bits.Add32(x24, uint32(0x0), uint32(uint1(x55)))
	var x58 uint32
	var x59 uint32
	x58, x59 = bits.Add32(x26, x43, uint32(uint1(x57)))
	var x60 uint32
	var x61 uint32
	x60, x61 = bits.Add32(x28, x45, uint32(uint1(x59)))
	var x62 uint32
	var x63 uint32
	x62, x63 = bits.Add32(x30, x47, uint32(uint1(x61)))
	var x64 uint32
	var x65 uint32
	x64, x65 = bits.Add32(x32, x49, uint32(uint1(x63)))
	var x66 uint32
	var x67 uint32
	x66, x67 = bits.Add32(x34, x51, uint32(uint1(x65)))
	var x68 uint32
	var x69 uint32
	x69, x68 = bits.Mul32(x1, arg1[6])
	var x70 uint32
	var x71 uint32
	x71, x70 = bits.Mul32(x1, arg1[5])
	var x72 uint32
	var x73 uint32
	x73, x72 = bits.Mul32(x1, arg1[4])
	var x74 uint32
	var x75 uint32
	x75, x74 = bits.Mul32(x1, arg1[3])
	var x76 uint32
	var x77 uint32
	x77, x76 = bits.Mul32(x1, arg1[2])
	var x78 uint32
	var x79 uint32
	x79, x78 = bits.Mul32(x1, arg1[1])
	var x80 uint32
	var x81 uint32
	x81, x80 = bits.Mul32(x1, arg1[0])
	var x82 uint32
	var x83 uint32
	x82, x83 = bits.Add32(x81, x78, uint32(0x0))
	var x84 uint32
	var x85 uint32
	x84, x85 = bits.Add32(x79, x76, uint32(uint1(x83)))
	var x86 uint32
	var x87 uint32
	x86, x87 = bits.Add32(x77, x74, uint32(uint1(x85)))
	var x88 uint32
	var x89 uint32
	x88, x89 = bits.Add32(x75, x72, uint32(uint1(x87)))
	var x90 uint32
	var x91 uint32
	x90, x91 = bits.Add32(x73, x70, uint32(uint1(x89)))
	var x92 uint32
	var x93 uint32
	x92, x93 = bits.Add32(x71, x68, uint32(uint1(x91)))
	x94 := (uint32(uint1(x93)) + x69)
	var x95 uint32
	var x96 uint32
	x95, x96 = bits.Add32(x54, x80, uint32(0x0))
	var x97 uint32
	var x98 uint32
	x97, x98 = bits.Add32(x56, x82, uint32(uint1(x96)))
	var x99 uint32
	var x100 uint32
	x99, x100 = bits.Add32(x58, x84, uint32(uint1(x98)))
	var x101 uint32
	var x102 uint32
	x101, x102 = bits.Add32(x60, x86, uint32(uint1(x100)))
	var x103 uint32
	var x104 uint32
	x103, x104 = bits.Add32(x62, x88, uint32(uint1(x102)))
	var x105 uint32
	var x106 uint32
	x105, x106 = bits.Add32(x64, x90, uint32(uint1(x104)))
	var x107 uint32
	var x108 uint32
	x107, x108 = bits.Add32(x66, x92, uint32(uint1(x106)))
	var x109 uint32
	var x110 uint32
	x109, x110 = bits.Add32(uint32(uint1(x67)), x94, uint32(uint1(x108)))
	var x111 uint32
	_, x111 = bits.Mul32(x95, 0xffffffff)
	var x113 uint32
	var x114 uint32
	x114, x113 = bits.Mul32(x111, 0xffffffff)
	var x115 uint32
	var x116 uint32
	x116, x115 = bits.Mul32(x111, 0xffffffff)
	var x117 uint32
	var x118 uint32
	x118, x117 = bits.Mul32(x111, 0xffffffff)
	var x119 uint32
	var x120 uint32
	x120, x119 = bits.Mul32(x111, 0xffffffff)
	var x121 uint32
	var x122 uint32
	x121, x122 = bits.Add32(x120, x117, uint32(0x0))
	var x123 uint32
	var x124 uint32
	x123, x124 = bits.Add32(x118, x115, uint32(uint1(x122)))
	var x125 uint32
	var x126 uint32
	x125, x126 = bits.Add32(x116, x113, uint32(uint1(x124)))
	x127 := (uint32(uint1(x126)) + x114)
	var x129 uint32
	_, x129 = bits.Add32(x95, x111, uint32(0x0))
	var x130 uint32
	var x131 uint32
	x130, x131 = bits.Add32(x97, uint32(0x0), uint32(uint1(x129)))
	var x132 uint32
	var x133 uint32
	x132, x133 = bits.Add32(x99, uint32(0x0), uint32(uint1(x131)))
	var x134 uint32
	var x135 uint32
	x134, x135 = bits.Add32(x101, x119, uint32(uint1(x133)))
	var x136 uint32
	var x137 uint32
	x136, x137 = bits.Add32(x103, x121, uint32(uint1(x135)))
	var x138 uint32
	var x139 uint32
	x138, x139 = bits.Add32(x105, x123, uint32(uint1(x137)))
	var x140 uint32
	var x141 uint32
	x140, x141 = bits.Add32(x107, x125, uint32(uint1(x139)))
	var x142 uint32
	var x143 uint32
	x142, x143 = bits.Add32(x109, x127, uint32(uint1(x141)))
	x144 := (uint32(uint1(x143)) + uint32(uint1(x110)))
	var x145 uint32
	var x146 uint32
	x146, x145 = bits.Mul32(x2, arg1[6])
	var x147 uint32
	var x148 uint32
	x148, x147 = bits.Mul32(x2, arg1[5])
	var x149 uint32
	var x150 uint32
	x150, x149 = bits.Mul32(x2, arg1[4])
	var x151 uint32
	var x152 uint32
	x152, x151 = bits.Mul32(x2, arg1[3])
	var x153 uint32
	var x154 uint32
	x154, x153 = bits.Mul32(x2, arg1[2])
	var x155 uint32
	var x156 uint32
	x156, x155 = bits.Mul32(x2, arg1[1])
	var x157 uint32
	var x158 uint32
	x158, x157 = bits.Mul32(x2, arg1[0])
	var x159 uint32
	var x160 uint32
	x159, x160 = bits.Add32(x158, x155, uint32(0x0))
	var x161 uint32
	var x162 uint32
	x161, x162 = bits.Add32(x156, x153, uint32(uint1(x160)))
	var x163 uint32
	var x164 uint32
	x163, x164 = bits.Add32(x154, x151, uint32(uint1(x162)))
	var x165 uint32
	var x166 uint32
	x165, x166 = bits.Add32(x152, x149, uint32(uint1(x164)))
	var x167 uint32
	var x168 uint32
	x167, x168 = bits.Add32(x150, x147, uint32(uint1(x166)))
	var x169 uint32
	var x170 uint32
	x169, x170 = bits.Add32(x148, x145, uint32(uint1(x168)))
	x171 := (uint32(uint1(x170)) + x146)
	var x172 uint32
	var x173 uint32
	x172, x173 = bits.Add32(x130, x157, uint32(0x0))
	var x174 uint32
	var x175 uint32
	x174, x175 = bits.Add32(x132, x159, uint32(uint1(x173)))
	var x176 uint32
	var x177 uint32
	x176, x177 = bits.Add32(x134, x161, uint32(uint1(x175)))
	var x178 uint32
	var x179 uint32
	x178, x179 = bits.Add32(x136, x163, uint32(uint1(x177)))
	var x180 uint32
	var x181 uint32
	x180, x181 = bits.Add32(x138, x165, uint32(uint1(x179)))
	var x182 uint32
	var x183 uint32
	x182, x183 = bits.Add32(x140, x167, uint32(uint1(x181)))
	var x184 uint32
	var x185 uint32
	x184, x185 = bits.Add32(x142, x169, uint32(uint1(x183)))
	var x186 uint32
	var x187 uint32
	x186, x187 = bits.Add32(x144, x171, uint32(uint1(x185)))
	var x188 uint32
	_, x188 = bits.Mul32(x172, 0xffffffff)
	var x190 uint32
	var x191 uint32
	x191, x190 = bits.Mul32(x188, 0xffffffff)
	var x192 uint32
	var x193 uint32
	x193, x192 = bits.Mul32(x188, 0xffffffff)
	var x194 uint32
	var x195 uint32
	x195, x194 = bits.Mul32(x188, 0xffffffff)
	var x196 uint32
	var x197 uint32
	x197, x196 = bits.Mul32(x188, 0xffffffff)
	var x198 uint32
	var x199 uint32
	x198, x199 = bits.Add32(x197, x194, uint32(0x0))
	var x200 uint32
	var x201 uint32
	x200, x201 = bits.Add32(x195, x192, uint32(uint1(x199)))
	var x202 uint32
	var x203 uint32
	x202, x203 = bits.Add32(x193, x190, uint32(uint1(x201)))
	x204 := (uint32(uint1(x203)) + x191)
	var x206 uint32
	_, x206 = bits.Add32(x172, x188, uint32(0x0))
	var x207 uint32
	var x208 uint32
	x207, x208 = bits.Add32(x174, uint32(0x0), uint32(uint1(x206)))
	var x209 uint32
	var x210 uint32
	x209, x210 = bits.Add32(x176, uint32(0x0), uint32(uint1(x208)))
	var x211 uint32
	var x212 uint32
	x211, x212 = bits.Add32(x178, x196, uint32(uint1(x210)))
	var x213 uint32
	var x214 uint32
	x213, x214 = bits.Add32(x180, x198, uint32(uint1(x212)))
	var x215 uint32
	var x216 uint32
	x215, x216 = bits.Add32(x182, x200, uint32(uint1(x214)))
	var x217 uint32
	var x218 uint32
	x217, x218 = bits.Add32(x184, x202, uint32(uint1(x216)))
	var x219 uint32
	var x220 uint32
	x219, x220 = bits.Add32(x186, x204, uint32(uint1(x218)))
	x221 := (uint32(uint1(x220)) + uint32(uint1(x187)))
	var x222 uint32
	var x223 uint32
	x223, x222 = bits.Mul32(x3, arg1[6])
	var x224 uint32
	var x225 uint32
	x225, x224 = bits.Mul32(x3, arg1[5])
	var x226 uint32
	var x227 uint32
	x227, x226 = bits.Mul32(x3, arg1[4])
	var x228 uint32
	var x229 uint32
	x229, x228 = bits.Mul32(x3, arg1[3])
	var x230 uint32
	var x231 uint32
	x231, x230 = bits.Mul32(x3, arg1[2])
	var x232 uint32
	var x233 uint32
	x233, x232 = bits.Mul32(x3, arg1[1])
	var x234 uint32
	var x235 uint32
	x235, x234 = bits.Mul32(x3, arg1[0])
	var x236 uint32
	var x237 uint32
	x236, x237 = bits.Add32(x235, x232, uint32(0x0))
	var x238 uint32
	var x239 uint32
	x238, x239 = bits.Add32(x233, x230, uint32(uint1(x237)))
	var x240 uint32
	var x241 uint32
	x240, x241 = bits.Add32(x231, x228, uint32(uint1(x239)))
	var x242 uint32
	var x243 uint32
	x242, x243 = bits.Add32(x229, x226, uint32(uint1(x241)))
	var x244 uint32
	var x245 uint32
	x244, x245 = bits.Add32(x227, x224, uint32(uint1(x243)))
	var x246 uint32
	var x247 uint32
	x246, x247 = bits.Add32(x225, x222, uint32(uint1(x245)))
	x248 := (uint32(uint1(x247)) + x223)
	var x249 uint32
	var x250 uint32
	x249, x250 = bits.Add32(x207, x234, uint32(0x0))
	var x251 uint32
	var x252 uint32
	x251, x252 = bits.Add32(x209, x236, uint32(uint1(x250)))
	var x253 uint32
	var x254 uint32
	x253, x254 = bits.Add32(x211, x238, uint32(uint1(x252)))
	var x255 uint32
	var x256 uint32
	x255, x256 = bits.Add32(x213, x240, uint32(uint1(x254)))
	var x257 uint32
	var x258 uint32
	x257, x258 = bits.Add32(x215, x242, uint32(uint1(x256)))
	var x259 uint32
	var x260 uint32
	x259, x260 = bits.Add32(x217, x244, uint32(uint1(x258)))
	var x261 uint32
	var x262 uint32
	x261, x262 = bits.Add32(x219, x246, uint32(uint1(x260)))
	var x263 uint32
	var x264 uint32
	x263, x264 = bits.Add32(x221, x248, uint32(uint1(x262)))
	var x265 uint32
	_, x265 = bits.Mul32(x249, 0xffffffff)
	var x267 uint32
	var x268 uint32
	x268, x267 = bits.Mul32(x265, 0xffffffff)
	var x269 uint32
	var x270 uint32
	x270, x269 = bits.Mul32(x265, 0xffffffff)
	var x271 uint32
	var x272 uint32
	x272, x271 = bits.Mul32(x265, 0xffffffff)
	var x273 uint32
	var x274 uint32
	x274, x273 = bits.Mul32(x265, 0xffffffff)
	var x275 uint32
	var x276 uint32
	x275, x276 = bits.Add32(x274, x271, uint32(0x0))
	var x277 uint32
	var x278 uint32
	x277, x278 = bits.Add32(x272, x269, uint32(uint1(x276)))
	var x279 uint32
	var x280 uint32
	x279, x280 = bits.Add32(x270, x267, uint32(uint1(x278)))
	x281 := (uint32(uint1(x280)) + x268)
	var x283 uint32
	_, x283 = bits.Add32(x249, x265, uint32(0x0))
	var x284 uint32
	var x285 uint32
	x284, x285 = bits.Add32(x251, uint32(0x0), uint32(uint1(x283)))
	var x286 uint32
	var x287 uint32
	x286, x287 = bits.Add32(x253, uint32(0x0), uint32(uint1(x285)))
	var x288 uint32
	var x289 uint32
	x288, x289 = bits.Add32(x255, x273, uint32(uint1(x287)))
	var x290 uint32
	var x291 uint32
	x290, x291 = bits.Add32(x257, x275, uint32(uint1(x289)))
	var x292 uint32
	var x293 uint32
	x292, x293 = bits.Add32(x259, x277, uint32(uint1(x291)))
	var x294 uint32
	var x295 uint32
	x294, x295 = bits.Add32(x261, x279, uint32(uint1(x293)))
	var x296 uint32
	var x297 uint32
	x296, x297 = bits.Add32(x263, x281, uint32(uint1(x295)))
	x298 := (uint32(uint1(x297)) + uint32(uint1(x264)))
	var x299 uint32
	var x300 uint32
	x300, x299 = bits.Mul32(x4, arg1[6])
	var x301 uint32
	var x302 uint32
	x302, x301 = bits.Mul32(x4, arg1[5])
	var x303 uint32
	var x304 uint32
	x304, x303 = bits.Mul32(x4, arg1[4])
	var x305 uint32
	var x306 uint32
	x306, x305 = bits.Mul32(x4, arg1[3])
	var x307 uint32
	var x308 uint32
	x308, x307 = bits.Mul32(x4, arg1[2])
	var x309 uint32
	var x310 uint32
	x310, x309 = bits.Mul32(x4, arg1[1])
	var x311 uint32
	var x312 uint32
	x312, x311 = bits.Mul32(x4, arg1[0])
	var x313 uint32
	var x314 uint32
	x313, x314 = bits.Add32(x312, x309, uint32(0x0))
	var x315 uint32
	var x316 uint32
	x315, x316 = bits.Add32(x310, x307, uint32(uint1(x314)))
	var x317 uint32
	var x318 uint32
	x317, x318 = bits.Add32(x308, x305, uint32(uint1(x316)))
	var x319 uint32
	var x320 uint32
	x319, x320 = bits.Add32(x306, x303, uint32(uint1(x318)))
	var x321 uint32
	var x322 uint32
	x321, x322 = bits.Add32(x304, x301, uint32(uint1(x320)))
	var x323 uint32
	var x324 uint32
	x323, x324 = bits.Add32(x302, x299, uint32(uint1(x322)))
	x325 := (uint32(uint1(x324)) + x300)
	var x326 uint32
	var x327 uint32
	x326, x327 = bits.Add32(x284, x311, uint32(0x0))
	var x328 uint32
	var x329 uint32
	x328, x329 = bits.Add32(x286, x313, uint32(uint1(x327)))
	var x330 uint32
	var x331 uint32
	x330, x331 = bits.Add32(x288, x315, uint32(uint1(x329)))
	var x332 uint32
	var x333 uint32
	x332, x333 = bits.Add32(x290, x317, uint32(uint1(x331)))
	var x334 uint32
	var x335 uint32
	x334, x335 = bits.Add32(x292, x319, uint32(uint1(x333)))
	var x336 uint32
	var x337 uint32
	x336, x337 = bits.Add32(x294, x321, uint32(uint1(x335)))
	var x338 uint32
	var x339 uint32
	x338, x339 = bits.Add32(x296, x323, uint32(uint1(x337)))
	var x340 uint32
	var x341 uint32
	x340, x341 = bits.Add32(x298, x325, uint32(uint1(x339)))
	var x342 uint32
	_, x342 = bits.Mul32(x326, 0xffffffff)
	var x344 uint32
	var x345 uint32
	x345, x344 = bits.Mul32(x342, 0xffffffff)
	var x346 uint32
	var x347 uint32
	x347, x346 = bits.Mul32(x342, 0xffffffff)
	var x348 uint32
	var x349 uint32
	x349, x348 = bits.Mul32(x342, 0xffffffff)
	var x350 uint32
	var x351 uint32
	x351, x350 = bits.Mul32(x342, 0xffffffff)
	var x352 uint32
	var x353 uint32
	x352, x353 = bits.Add32(x351, x348, uint32(0x0))
	var x354 uint32
	var x355 uint32
	x354, x355 = bits.Add32(x349, x346, uint32(uint1(x353)))
	var x356 uint32
	var x357 uint32
	x356, x357 = bits.Add32(x347, x344, uint32(uint1(x355)))
	x358 := (uint32(uint1(x357)) + x345)
	var x360 uint32
	_, x360 = bits.Add32(x326, x342, uint32(0x0))
	var x361 uint32
	var x362 uint32
	x361, x362 = bits.Add32(x328, uint32(0x0), uint32(uint1(x360)))
	var x363 uint32
	var x364 uint32
	x363, x364 = bits.Add32(x330, uint32(0x0), uint32(uint1(x362)))
	var x365 uint32
	var x366 uint32
	x365, x366 = bits.Add32(x332, x350, uint32(uint1(x364)))
	var x367 uint32
	var x368 uint32
	x367, x368 = bits.Add32(x334, x352, uint32(uint1(x366)))
	var x369 uint32
	var x370 uint32
	x369, x370 = bits.Add32(x336, x354, uint32(uint1(x368)))
	var x371 uint32
	var x372 uint32
	x371, x372 = bits.Add32(x338, x356, uint32(uint1(x370)))
	var x373 uint32
	var x374 uint32
	x373, x374 = bits.Add32(x340, x358, uint32(uint1(x372)))
	x375 := (uint32(uint1(x374)) + uint32(uint1(x341)))
	var x376 uint32
	var x377 uint32
	x377, x376 = bits.Mul32(x5, arg1[6])
	var x378 uint32
	var x379 uint32
	x379, x378 = bits.Mul32(x5, arg1[5])
	var x380 uint32
	var x381 uint32
	x381, x380 = bits.Mul32(x5, arg1[4])
	var x382 uint32
	var x383 uint32
	x383, x382 = bits.Mul32(x5, arg1[3])
	var x384 uint32
	var x385 uint32
	x385, x384 = bits.Mul32(x5, arg1[2])
	var x386 uint32
	var x387 uint32
	x387, x386 = bits.Mul32(x5, arg1[1])
	var x388 uint32
	var x389 uint32
	x389, x388 = bits.Mul32(x5, arg1[0])
	var x390 uint32
	var x391 uint32
	x390, x391 = bits.Add32(x389, x386, uint32(0x0))
	var x392 uint32
	var x393 uint32
	x392, x393 = bits.Add32(x387, x384, uint32(uint1(x391)))
	var x394 uint32
	var x395 uint32
	x394, x395 = bits.Add32(x385, x382, uint32(uint1(x393)))
	var x396 uint32
	var x397 uint32
	x396, x397 = bits.Add32(x383, x380, uint32(uint1(x395)))
	var x398 uint32
	var x399 uint32
	x398, x399 = bits.Add32(x381, x378, uint32(uint1(x397)))
	var x400 uint32
	var x401 uint32
	x400, x401 = bits.Add32(x379, x376, uint32(uint1(x399)))
	x402 := (uint32(uint1(x401)) + x377)
	var x403 uint32
	var x404 uint32
	x403, x404 = bits.Add32(x361, x388, uint32(0x0))
	var x405 uint32
	var x406 uint32
	x405, x406 = bits.Add32(x363, x390, uint32(uint1(x404)))
	var x407 uint32
	var x408 uint32
	x407, x408 = bits.Add32(x365, x392, uint32(uint1(x406)))
	var x409 uint32
	var x410 uint32
	x409, x410 = bits.Add32(x367, x394, uint32(uint1(x408)))
	var x411 uint32
	var x412 uint32
	x411, x412 = bits.Add32(x369, x396, uint32(uint1(x410)))
	var x413 uint32
	var x414 uint32
	x413, x414 = bits.Add32(x371, x398, uint32(uint1(x412)))
	var x415 uint32
	var x416 uint32
	x415, x416 = bits.Add32(x373, x400, uint32(uint1(x414)))
	var x417 uint32
	var x418 uint32
	x417, x418 = bits.Add32(x375, x402, uint32(uint1(x416)))
	var x419 uint32
	_, x419 = bits.Mul32(x403, 0xffffffff)
	var x421 uint32
	var x422 uint32
	x422, x421 = bits.Mul32(x419, 0xffffffff)
	var x423 uint32
	var x424 uint32
	x424, x423 = bits.Mul32(x419, 0xffffffff)
	var x425 uint32
	var x426 uint32
	x426, x425 = bits.Mul32(x419, 0xffffffff)
	var x427 uint32
	var x428 uint32
	x428, x427 = bits.Mul32(x419, 0xffffffff)
	var x429 uint32
	var x430 uint32
	x429, x430 = bits.Add32(x428, x425, uint32(0x0))
	var x431 uint32
	var x432 uint32
	x431, x432 = bits.Add32(x426, x423, uint32(uint1(x430)))
	var x433 uint32
	var x434 uint32
	x433, x434 = bits.Add32(x424, x421, uint32(uint1(x432)))
	x435 := (uint32(uint1(x434)) + x422)
	var x437 uint32
	_, x437 = bits.Add32(x403, x419, uint32(0x0))
	var x438 uint32
	var x439 uint32
	x438, x439 = bits.Add32(x405, uint32(0x0), uint32(uint1(x437)))
	var x440 uint32
	var x441 uint32
	x440, x441 = bits.Add32(x407, uint32(0x0), uint32(uint1(x439)))
	var x442 uint32
	var x443 uint32
	x442, x443 = bits.Add32(x409, x427, uint32(uint1(x441)))
	var x444 uint32
	var x445 uint32
	x444, x445 = bits.Add32(x411, x429, uint32(uint1(x443)))
	var x446 uint32
	var x447 uint32
	x446, x447 = bits.Add32(x413, x431, uint32(uint1(x445)))
	var x448 uint32
	var x449 uint32
	x448, x449 = bits.Add32(x415, x433, uint32(uint1(x447)))
	var x450 uint32
	var x451 uint32
	x450, x451 = bits.Add32(x417, x435, uint32(uint1(x449)))
	x452 := (uint32(uint1(x451)) + uint32(uint1(x418)))
	var x453 uint32
	var x454 uint32
	x454, x453 = bits.Mul32(x6, arg1[6])
	var x455 uint32
	var x456 uint32
	x456, x455 = bits.Mul32(x6, arg1[5])
	var x457 uint32
	var x458 uint32
	x458, x457 = bits.Mul32(x6, arg1[4])
	var x459 uint32
	var x460 uint32
	x460, x459 = bits.Mul32(x6, arg1[3])
	var x461 uint32
	var x462 uint32
	x462, x461 = bits.Mul32(x6, arg1[2])
	var x463 uint32
	var x464 uint32
	x464, x463 = bits.Mul32(x6, arg1[1])
	var x465 uint32
	var x466 uint32
	x466, x465 = bits.Mul32(x6, arg1[0])
	var x467 uint32
	var x468 uint32
	x467, x468 = bits.Add32(x466, x463, uint32(0x0))
	var x469 uint32
	var x470 uint32
	x469, x470 = bits.Add32(x464, x461, uint32(uint1(x468)))
	var x471 uint32
	var x472 uint32
	x471, x472 = bits.Add32(x462, x459, uint32(uint1(x470)))
	var x473 uint32
	var x474 uint32
	x473, x474 = bits.Add32(x460, x457, uint32(uint1(x472)))
	var x475 uint32
	var x476 uint32
	x475, x476 = bits.Add32(x458, x455, uint32(uint1(x474)))
	var x477 uint32
	var x478 uint32
	x477, x478 = bits.Add32(x456, x453, uint32(uint1(x476)))
	x479 := (uint32(uint1(x478)) + x454)
	var x480 uint32
	var x481 uint32
	x480, x481 = bits.Add32(x438, x465, uint32(0x0))
	var x482 uint32
	var x483 uint32
	x482, x483 = bits.Add32(x440, x467, uint32(uint1(x481)))
	var x484 uint32
	var x485 uint32
	x484, x485 = bits.Add32(x442, x469, uint32(uint1(x483)))
	var x486 uint32
	var x487 uint32
	x486, x487 = bits.Add32(x444, x471, uint32(uint1(x485)))
	var x488 uint32
	var x489 uint32
	x488, x489 = bits.Add32(x446, x473, uint32(uint1(x487)))
	var x490 uint32
	var x491 uint32
	x490, x491 = bits.Add32(x448, x475, uint32(uint1(x489)))
	var x492 uint32
	var x493 uint32
	x492, x493 = bits.Add32(x450, x477, uint32(uint1(x491)))
	var x494 uint32
	var x495 uint32
	x494, x495 = bits.Add32(x452, x479, uint32(uint1(x493)))
	var x496 uint32
	_, x496 = bits.Mul32(x480, 0xffffffff)
	var x498 uint32
	var x499 uint32
	x499, x498 = bits.Mul32(x496, 0xffffffff)
	var x500 uint32
	var x501 uint32
	x501, x500 = bits.Mul32(x496, 0xffffffff)
	var x502 uint32
	var x503 uint32
	x503, x502 = bits.Mul32(x496, 0xffffffff)
	var x504 uint32
	var x505 uint32
	x505, x504 = bits.Mul32(x496, 0xffffffff)
	var x506 uint32
	var x507 uint32
	x506, x507 = bits.Add32(x505, x502, uint32(0x0))
	var x508 uint32
	var x509 uint32
	x508, x509 = bits.Add32(x503, x500, uint32(uint1(x507)))
	var x510 uint32
	var x511 uint32
	x510, x511 = bits.Add32(x501, x498, uint32(uint1(x509)))
	x512 := (uint32(uint1(x511)) + x499)
	var x514 uint32
	_, x514 = bits.Add32(x480, x496, uint32(0x0))
	var x515 uint32
	var x516 uint32
	x515, x516 = bits.Add32(x482, uint32(0x0), uint32(uint1(x514)))
	var x517 uint32
	var x518 uint32
	x517, x518 = bits.Add32(x484, uint32(0x0), uint32(uint1(x516)))
	var x519 uint32
	var x520 uint32
	x519, x520 = bits.Add32(x486, x504, uint32(uint1(x518)))
	var x521 uint32
	var x522 uint32
	x521, x522 = bits.Add32(x488, x506, uint32(uint1(x520)))
	var x523 uint32
	var x524 uint32
	x523, x524 = bits.Add32(x490, x508, uint32(uint1(x522)))
	var x525 uint32
	var x526 uint32
	x525, x526 = bits.Add32(x492, x510, uint32(uint1(x524)))
	var x527 uint32
	var x528 uint32
	x527, x528 = bits.Add32(x494, x512, uint32(uint1(x526)))
	x529 := (uint32(uint1(x528)) + uint32(uint1(x495)))
	var x530 uint32
	var x531 uint32
	x530, x531 = bits.Sub32(x515, uint32(0x1), uint32(0x0))
	var x532 uint32
	var x533 uint32
	x532, x533 = bits.Sub32(x517, uint32(0x0), uint32(uint1(x531)))
	var x534 uint32
	var x535 uint32
	x534, x535 = bits.Sub32(x519, uint32(0x0), uint32(uint1(x533)))
	var x536 uint32
	var x537 uint32
	x536, x537 = bits.Sub32(x521, 0xffffffff, uint32(uint1(x535)))
	var x538 uint32
	var x539 uint32
	x538, x539 = bits.Sub32(x523, 0xffffffff, uint32(uint1(x537)))
	var x540 uint32
	var x541 uint32
	x540, x541 = bits.Sub32(x525, 0xffffffff, uint32(uint1(x539)))
	var x542 uint32
	var x543 uint32
	x542, x543 = bits.Sub32(x527, 0xffffffff, uint32(uint1(x541)))
	var x545 uint32
	_, x545 = bits.Sub32(x529, uint32(0x0), uint32(uint1(x543)))
	var x546 uint32
	cmovznzU32(&x546, uint1(x545), x530, x515)
	var x547 uint32
	cmovznzU32(&x547, uint1(x545), x532, x517)
	var x548 uint32
	cmovznzU32(&x548, uint1(x545), x534, x519)
	var x549 uint32
	cmovznzU32(&x549, uint1(x545), x536, x521)
	var x550 uint32
	cmovznzU32(&x550, uint1(x545), x538, x523)
	var x551 uint32
	cmovznzU32(&x551, uint1(x545), x540, x525)
	var x552 uint32
	cmovznzU32(&x552, uint1(x545), x542, x527)
	out1[0] = x546
	out1[1] = x547
	out1[2] = x548
	out1[3] = x549
	out1[4] = x550
	out1[5] = x551
	out1[6] = x552
}

// Add adds two field elements in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
//   0 ≤ eval arg2 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m
//   0 ≤ eval out1 < m
//
func Add(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement, arg2 *MontgomeryDomainFieldElement) {
	var x1 uint32
	var x2 uint32
	x1, x2 = bits.Add32(arg1[0], arg2[0], uint32(0x0))
	var x3 uint32
	var x4 uint32
	x3, x4 = bits.Add32(arg1[1], arg2[1], uint32(uint1(x2)))
	var x5 uint32
	var x6 uint32
	x5, x6 = bits.Add32(arg1[2], arg2[2], uint32(uint1(x4)))
	var x7 uint32
	var x8 uint32
	x7, x8 = bits.Add32(arg1[3], arg2[3], uint32(uint1(x6)))
	var x9 uint32
	var x10 uint32
	x9, x10 = bits.Add32(arg1[4], arg2[4], uint32(uint1(x8)))
	var x11 uint32
	var x12 uint32
	x11, x12 = bits.Add32(arg1[5], arg2[5], uint32(uint1(x10)))
	var x13 uint32
	var x14 uint32
	x13, x14 = bits.Add32(arg1[6], arg2[6], uint32(uint1(x12)))
	var x15 uint32
	var x16 uint32
	x15, x16 = bits.Sub32(x1, uint32(0x1), uint32(0x0))
	var x17 uint32
	var x18 uint32
	x17, x18 = bits.Sub32(x3, uint32(0x0), uint32(uint1(x16)))
	var x19 uint32
	var x20 uint32
	x19, x20 = bits.Sub32(x5, uint32(0x0), uint32(uint1(x18)))
	var x21 uint32
	var x22 uint32
	x21, x22 = bits.Sub32(x7, 0xffffffff, uint32(uint1(x20)))
	var x23 uint32
	var x24 uint32
	x23, x24 = bits.Sub32(x9, 0xffffffff, uint32(uint1(x22)))
	var x25 uint32
	var x26 uint32
	x25, x26 = bits.Sub32(x11, 0xffffffff, uint32(uint1(x24)))
	var x27 uint32
	var x28 uint32
	x27, x28 = bits.Sub32(x13, 0xffffffff, uint32(uint1(x26)))
	var x30 uint32
	_, x30 = bits.Sub32(uint32(uint1(x14)), uint32(0x0), uint32(uint1(x28)))
	var x31 uint32
	cmovznzU32(&x31, uint1(x30), x15, x1)
	var x32 uint32
	cmovznzU32(&x32, uint1(x30), x17, x3)
	var x33 uint32
	cmovznzU32(&x33, uint1(x30), x19, x5)
	var x34 uint32
	cmovznzU32(&x34, uint1(x30), x21, x7)
	var x35 uint32
	cmovznzU32(&x35, uint1(x30), x23, x9)
	var x36 uint32
	cmovznzU32(&x36, uint1(x30), x25, x11)
	var x37 uint32
	cmovznzU32(&x37, uint1(x30), x27, x13)
	out1[0] = x31
	out1[1] = x32
	out1[2] = x33
	out1[3] = x34
	out1[4] = x35
	out1[5] = x36
	out1[6] = x37
}

// Sub subtracts two field elements in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
//   0 ≤ eval arg2 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m
//   0 ≤ eval out1 < m
//
func Sub(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement, arg2 *MontgomeryDomainFieldElement) {
	var x1 uint32
	var x2 uint32
	x1, x2 = bits.Sub32(arg1[0], arg2[0], uint32(0x0))
	var x3 uint32
	var x4 uint32
	x3, x4 = bits.Sub32(arg1[1], arg2[1], uint32(uint1(x2)))
	var x5 uint32
	var x6 uint32
	x5, x6 = bits.Sub32(arg1[2], arg2[2], uint32(uint1(x4)))
	var x7 uint32
	var x8 uint32
	x7, x8 = bits.Sub32(arg1[3], arg2[3], uint32(uint1(x6)))
	var x9 uint32
	var x10 uint32
	x9, x10 = bits.Sub32(arg1[4], arg2[4], uint32(uint1(x8)))
	var x11 uint32
	var x12 uint32
	x11, x12 = bits.Sub32(arg1[5], arg2[5], uint32(uint1(x10)))
	var x13 uint32
	var x14 uint32
	x13, x14 = bits.Sub32(arg1[6], arg2[6], uint32(uint1(x12)))
	var x15 uint32
	cmovznzU32(&x15, uint1(x14), uint32(0x0), 0xffffffff)
	var x16 uint32
	var x17 uint32
	x16, x17 = bits.Add32(x1, uint32((uint1(x15) & 0x1)), uint32(0x0))
	var x18 uint32
	var x19 uint32
	x18, x19 = bits.Add32(x3, uint32(0x0), uint32(uint1(x17)))
	var x20 uint32
	var x21 uint32
	x20, x21 = bits.Add32(x5, uint32(0x0), uint32(uint1(x19)))
	var x22 uint32
	var x23 uint32
	x22, x23 = bits.Add32(x7, x15, uint32(uint1(x21)))
	var x24 uint32
	var x25 uint32
	x24, x25 = bits.Add32(x9, x15, uint32(uint1(x23)))
	var x26 uint32
	var x27 uint32
	x26, x27 = bits.Add32(x11, x15, uint32(uint1(x25)))
	var x28 uint32
	x28, _ = bits.Add32(x13, x15, uint32(uint1(x27)))
	out1[0] = x16
	out1[1] = x18
	out1[2] = x20
	out1[3] = x22
	out1[4] = x24
	out1[5] = x26
	out1[6] = x28
}

// Opp negates a field element in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m
//   0 ≤ eval out1 < m
//
func Opp(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement) {
	var x1 uint32
	var x2 uint32
	x1, x2 = bits.Sub32(uint32(0x0), arg1[0], uint32(0x0))
	var x3 uint32
	var x4 uint32
	x3, x4 = bits.Sub32(uint32(0x0), arg1[1], uint32(uint1(x2)))
	var x5 uint32
	var x6 uint32
	x5, x6 = bits.Sub32(uint32(0x0), arg1[2], uint32(uint1(x4)))
	var x7 uint32
	var x8 uint32
	x7, x8 = bits.Sub32(uint32(0x0), arg1[3], uint32(uint1(x6)))
	var x9 uint32
	var x10 uint32
	x9, x10 = bits.Sub32(uint32(0x0), arg1[4], uint32(uint1(x8)))
	var x11 uint32
	var x12 uint32
	x11, x12 = bits.Sub32(uint32(0x0), arg1[5], uint32(uint1(x10)))
	var x13 uint32
	var x14 uint32
	x13, x14 = bits.Sub32(uint32(0x0), arg1[6], uint32(uint1(x12)))
	var x15 uint32
	cmovznzU32(&x15, uint1(x14), uint32(0x0), 0xffffffff)
	var x16 uint32
	var x17 uint32
	x16, x17 = bits.Add32(x1, uint32((uint1(x15) & 0x1)), uint32(0x0))
	var x18 uint32
	var x19 uint32
	x18, x19 = bits.Add32(x3, uint32(0x0), uint32(uint1(x17)))
	var x20 uint32
	var x21 uint32
	x20, x21 = bits.Add32(x5, uint32(0x0), uint32(uint1(x19)))
	var x22 uint32
	var x23 uint32
	x22, x23 = bits.Add32(x7, x15, uint32(uint1(x21)))
	var x24 uint32
	var x25 uint32
	x24, x25 = bits.Add32(x9, x15, uint32(uint1(x23)))
	var x26 uint32
	var x27 uint32
	x26, x27 = bits.Add32(x11, x15, uint32(uint1(x25)))
	var x28 uint32
	x28, _ = bits.Add32(x13, x15, uint32(uint1(x27)))
	out1[0] = x16
	out1[1] = x18
	out1[2] = x20
	out1[3] = x22
	out1[4] = x24
	out1[5] = x26
	out1[6] = x28
}

// FromMontgomery translates a field element out of the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   eval out1 mod m = (eval arg1 * ((2^32)⁻¹ mod m)^7) mod m
//   0 ≤ eval out1 < m
//
func FromMontgomery(out1 *NonMontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement) {
	x1 := arg1[0]
	var x2 uint32
	_, x2 = bits.Mul32(x1, 0xffffffff)
	var x4 uint32
	var x5 uint32
	x5, x4 = bits.Mul32(x2, 0xffffffff)
	var x6 uint32
	var x7 uint32
	x7, x6 = bits.Mul32(x2, 0xffffffff)
	var x8 uint32
	var x9 uint32
	x9, x8 = bits.Mul32(x2, 0xffffffff)
	var x10 uint32
	var x11 uint32
	x11, x10 = bits.Mul32(x2, 0xffffffff)
	var x12 uint32
	var x13 uint32
	x12, x13 = bits.Add32(x11, x8, uint32(0x0))
	var x14 uint32
	var x15 uint32
	x14, x15 = bits.Add32(x9, x6, uint32(uint1(x13)))
	var x16 uint32
	var x17 uint32
	x16, x17 = bits.Add32(x7, x4, uint32(uint1(x15)))
	var x19 uint32
	_, x19 = bits.Add32(x1, x2, uint32(0x0))
	var x20 uint32
	var x21 uint32
	x20, x21 = bits.Add32(uint32(uint1(x19)), arg1[1], uint32(0x0))
	var x22 uint32
	_, x22 = bits.Mul32(x20, 0xffffffff)
	var x24 uint32
	var x25 uint32
	x25, x24 = bits.Mul32(x22, 0xffffffff)
	var x26 uint32
	var x27 uint32
	x27, x26 = bits.Mul32(x22, 0xffffffff)
	var x28 uint32
	var x29 uint32
	x29, x28 = bits.Mul32(x22, 0xffffffff)
	var x30 uint32
	var x31 uint32
	x31, x30 = bits.Mul32(x22, 0xffffffff)
	var x32 uint32
	var x33 uint32
	x32, x33 = bits.Add32(x31, x28, uint32(0x0))
	var x34 uint32
	var x35 uint32
	x34, x35 = bits.Add32(x29, x26, uint32(uint1(x33)))
	var x36 uint32
	var x37 uint32
	x36, x37 = bits.Add32(x27, x24, uint32(uint1(x35)))
	var x38 uint32
	var x39 uint32
	x38, x39 = bits.Add32(x12, x30, uint32(0x0))
	var x40 uint32
	var x41 uint32
	x40, x41 = bits.Add32(x14, x32, uint32(uint1(x39)))
	var x42 uint32
	var x43 uint32
	x42, x43 = bits.Add32(x16, x34, uint32(uint1(x41)))
	var x44 uint32
	var x45 uint32
	x44, x45 = bits.Add32((uint32(uint1(x17)) + x5), x36, uint32(uint1(x43)))
	var x46 uint32
	var x47 uint32
	x46, x47 = bits.Add32(uint32(0x0), (uint32(uint1(x37)) + x25), uint32(uint1(x45)))
	var x49 uint32
	_, x49 = bits.Add32(x20, x22, uint32(0x0))
	var x50 uint32
	var x51 uint32
	x50, x51 = bits.Add32((uint32(uint1(x49)) + uint32(uint1(x21))), arg1[2], uint32(0x0))
	var x52 uint32
	var x53 uint32
	x52, x53 = bits.Add32(x10, uint32(0x0), uint32(uint1(x51)))
	var x54 uint32
	var x55 uint32
	x54, x55 = bits.Add32(x38, uint32(0x0), uint32(uint1(x53)))
	var x56 uint32
	var x57 uint32
	x56, x57 = bits.Add32(x40, uint32(0x0), uint32(uint1(x55)))
	var x58 uint32
	var x59 uint32
	x58, x59 = bits.Add32(x42, uint32(0x0), uint32(uint1(x57)))
	var x60 uint32
	var x61 uint32
	x60, x61 = bits.Add32(x44, uint32(0x0), uint32(uint1(x59)))
	var x62 uint32
	var x63 uint32
	x62, x63 = bits.Add32(x46, uint32(0x0), uint32(uint1(x61)))
	var x64 uint32
	_, x64 = bits.Mul32(x50, 0xffffffff)
	var x66 uint32
	var x67 uint32
	x67, x66 = bits.Mul32(x64, 0xffffffff)
	var x68 uint32
	var x69 uint32
	x69, x68 = bits.Mul32(x64, 0xffffffff)
	var x70 uint32
	var x71 uint32
	x71, x70 = bits.Mul32(x64, 0xffffffff)
	var x72 uint32
	var x73 uint32
	x73, x72 = bits.Mul32(x64, 0xffffffff)
	var x74 uint32
	var x75 uint32
	x74, x75 = bits.Add32(x73, x70, uint32(0x0))
	var x76 uint32
	var x77 uint32
	x76, x77 = bits.Add32(x71, x68, uint32(uint1(x75)))
	var x78 uint32
	var x79 uint32
	x78, x79 = bits.Add32(x69, x66, uint32(uint1(x77)))
	var x81 uint32
	_, x81 = bits.Add32(x50, x64, uint32(0x0))
	var x82 uint32
	var x83 uint32
	x82, x83 = bits.Add32(x52, uint32(0x0), uint32(uint1(x81)))
	var x84 uint32
	var x85 uint32
	x84, x85 = bits.Add32(x54, uint32(0x0), uint32(uint1(x83)))
	var x86 uint32
	var x87 uint32
	x86, x87 = bits.Add32(x56, x72, uint32(uint1(x85)))
	var x88 uint32
	var x89 uint32
	x88, x89 = bits.Add32(x58, x74, uint32(uint1(x87)))
	var x90 uint32
	var x91 uint32
	x90, x91 = bits.Add32(x60, x76, uint32(uint1(x89)))
	var x92 uint32
	var x93 uint32
	x92, x93 = bits.Add32(x62, x78, uint32(uint1(x91)))
	var x94 uint32
	var x95 uint32
	x94, x95 = bits.Add32((uint32(uint1(x63)) + uint32(uint1(x47))), (uint32(uint1(x79)) + x67), uint32(uint1(x93)))
	var x96 uint32
	var x97 uint32
	x96, x97 = bits.Add32(x82, arg1[3], uint32(0x0))
	var x98 uint32
	var x99 uint32
	x98, x99 = bits.Add32(x84, uint32(0x0), uint32(uint1(x97)))
	var x100 uint32
	var x101 uint32
	x100, x101 = bits.Add32(x86, uint32(0x0), uint32(uint1(x99)))
	var x102 uint32
	var x103 uint32
	x102, x103 = bits.Add32(x88, uint32(0x0), uint32(uint1(x101)))
	var x104 uint32
	var x105 uint32
	x104, x105 = bits.Add32(x90, uint32(0x0), uint32(uint1(x103)))
	var x106 uint32
	var x107 uint32
	x106, x107 = bits.Add32(x92, uint32(0x0), uint32(uint1(x105)))
	var x108 uint32
	var x109 uint32
	x108, x109 = bits.Add32(x94, uint32(0x0), uint32(uint1(x107)))
	var x110 uint32
	_, x110 = bits.Mul32(x96, 0xffffffff)
	var x112 uint32
	var x113 uint32
	x113, x112 = bits.Mul32(x110, 0xffffffff)
	var x114 uint32
	var x115 uint32
	x115, x114 = bits.Mul32(x110, 0xffffffff)
	var x116 uint32
	var x117 uint32
	x117, x116 = bits.Mul32(x110, 0xffffffff)
	var x118 uint32
	var x119 uint32
	x119, x118 = bits.Mul32(x110, 0xffffffff)
	var x120 uint32
	var x121 uint32
	x120, x121 = bits.Add32(x119, x116, uint32(0x0))
	var x122 uint32
	var x123 uint32
	x122, x123 = bits.Add32(x117, x114, uint32(uint1(x121)))
	var x124 uint32
	var x125 uint32
	x124, x125 = bits.Add32(x115, x112, uint32(uint1(x123)))
	var x127 uint32
	_, x127 = bits.Add32(x96, x110, uint32(0x0))
	var x128 uint32
	var x129 uint32
	x128, x129 = bits.Add32(x98, uint32(0x0), uint32(uint1(x127)))
	var x130 uint32
	var x131 uint32
	x130, x131 = bits.Add32(x100, uint32(0x0), uint32(uint1(x129)))
	var x132 uint32
	var x133 uint32
	x132, x133 = bits.Add32(x102, x118, uint32(uint1(x131)))
	var x134 uint32
	var x135 uint32
	x134, x135 = bits.Add32(x104, x120, uint32(uint1(x133)))
	var x136 uint32
	var x137 uint32
	x136, x137 = bits.Add32(x106, x122, uint32(uint1(x135)))
	var x138 uint32
	var x139 uint32
	x138, x139 = bits.Add32(x108, x124, uint32(uint1(x137)))
	var x140 uint32
	var x141 uint32
	x140, x141 = bits.Add32((uint32(uint1(x109)) + uint32(uint1(x95))), (uint32(uint1(x125)) + x113), uint32(uint1(x139)))
	var x142 uint32
	var x143 uint32
	x142, x143 = bits.Add32(x128, arg1[4], uint32(0x0))
	var x144 uint32
	var x145 uint32
	x144, x145 = bits.Add32(x130, uint32(0x0), uint32(uint1(x143)))
	var x146 uint32
	var x147 uint32
	x146, x147 = bits.Add32(x132, uint32(0x0), uint32(uint1(x145)))
	var x148 uint32
	var x149 uint32
	x148, x149 = bits.Add32(x134, uint32(0x0), uint32(uint1(x147)))
	var x150 uint32
	var x151 uint32
	x150, x151 = bits.Add32(x136, uint32(0x0), uint32(uint1(x149)))
	var x152 uint32
	var x153 uint32
	x152, x153 = bits.Add32(x138, uint32(0x0), uint32(uint1(x151)))
	var x154 uint32
	var x155 uint32
	x154, x155 = bits.Add32(x140, uint32(0x0), uint32(uint1(x153)))
	var x156 uint32
	_, x156 = bits.Mul32(x142, 0xffffffff)
	var x158 uint32
	var x159 uint32
	x159, x158 = bits.Mul32(x156, 0xffffffff)
	var x160 uint32
	var x161 uint32
	x161, x160 = bits.Mul32(x156, 0xffffffff)
	var x162 uint32
	var x163 uint32
	x163, x162 = bits.Mul32(x156, 0xffffffff)
	var x164 uint32
	var x165 uint32
	x165, x164 = bits.Mul32(x156, 0xffffffff)
	var x166 uint32
	var x167 uint32
	x166, x167 = bits.Add32(x165, x162, uint32(0x0))
	var x168 uint32
	var x169 uint32
	x168, x169 = bits.Add32(x163, x160, uint32(uint1(x167)))
	var x170 uint32
	var x171 uint32
	x170, x171 = bits.Add32(x161, x158, uint32(uint1(x169)))
	var x173 uint32
	_, x173 = bits.Add32(x142, x156, uint32(0x0))
	var x174 uint32
	var x175 uint32
	x174, x175 = bits.Add32(x144, uint32(0x0), uint32(uint1(x173)))
	var x176 uint32
	var x177 uint32
	x176, x177 = bits.Add32(x146, uint32(0x0), uint32(uint1(x175)))
	var x178 uint32
	var x179 uint32
	x178, x179 = bits.Add32(x148, x164, uint32(uint1(x177)))
	var x180 uint32
	var x181 uint32
	x180, x181 = bits.Add32(x150, x166, uint32(uint1(x179)))
	var x182 uint32
	var x183 uint32
	x182, x183 = bits.Add32(x152, x168, uint32(uint1(x181)))
	var x184 uint32
	var x185 uint32
	x184, x185 = bits.Add32(x154, x170, uint32(uint1(x183)))
	var x186 uint32
	var x187 uint32
	x186, x187 = bits.Add32((uint32(uint1(x155)) + uint32(uint1(x141))), (uint32(uint1(x171)) + x159), uint32(uint1(x185)))
	var x188 uint32
	var x189 uint32
	x188, x189 = bits.Add32(x174, arg1[5], uint32(0x0))
	var x190 uint32
	var x191 uint32
	x190, x191 = bits.Add32(x176, uint32(0x0), uint32(uint1(x189)))
	var x192 uint32
	var x193 uint32
	x192, x193 = bits.Add32(x178, uint32(0x0), uint32(uint1(x191)))
	var x194 uint32
	var x195 uint32
	x194, x195 = bits.Add32(x180, uint32(0x0), uint32(uint1(x193)))
	var x196 uint32
	var x197 uint32
	x196, x197 = bits.Add32(x182, uint32(0x0), uint32(uint1(x195)))
	var x198 uint32
	var x199 uint32
	x198, x199 = bits.Add32(x184, uint32(0x0), uint32(uint1(x197)))
	var x200 uint32
	var x201 uint32
	x200, x201 = bits.Add32(x186, uint32(0x0), uint32(uint1(x199)))
	var x202 uint32
	_, x202 = bits.Mul32(x188, 0xffffffff)
	var x204 uint32
	var x205 uint32
	x205, x204 = bits.Mul32(x202, 0xffffffff)
	var x206 uint32
	var x207 uint32
	x207, x206 = bits.Mul32(x202, 0xffffffff)
	var x208 uint32
	var x209 uint32
	x209, x208 = bits.Mul32(x202, 0xffffffff)
	var x210 uint32
	var x211 uint32
	x211, x210 = bits.Mul32(x202, 0xffffffff)
	var x212 uint32
	var x213 uint32
	x212, x213 = bits.Add32(x211, x208, uint32(0x0))
	var x214 uint32
	var x215 uint32
	x214, x215 = bits.Add32(x209, x206, uint32(uint1(x213)))
	var x216 uint32
	var x217 uint32
	x216, x217 = bits.Add32(x207, x204, uint32(uint1(x215)))
	var x219 uint32
	_, x219 = bits.Add32(x188, x202, uint32(0x0))
	var x220 uint32
	var x221 uint32
	x220, x221 = bits.Add32(x190, uint32(0x0), uint32(uint1(x219)))
	var x222 uint32
	var x223 uint32
	x222, x223 = bits.Add32(x192, uint32(0x0), uint32(uint1(x221)))
	var x224 uint32
	var x225 uint32
	x224, x225 = bits.Add32(x194, x210, uint32(uint1(x223)))
	var x226 uint32
	var x227 uint32
	x226, x227 = bits.Add32(x196, x212, uint32(uint1(x225)))
	var x228 uint32
	var x229 uint32
	x228, x229 = bits.Add32(x198, x214, uint32(uint1(x227)))
	var x230 uint32
	var x231 uint32
	x230, x231 = bits.Add32(x200, x216, uint32(uint1(x229)))
	var x232 uint32
	var x233 uint32
	x232, x233 = bits.Add32((uint32(uint1(x201)) + uint32(uint1(x187))), (uint32(uint1(x217)) + x205), uint32(uint1(x231)))
	var x234 uint32
	var x235 uint32
	x234, x235 = bits.Add32(x220, arg1[6], uint32(0x0))
	var x236 uint32
	var x237 uint32
	x236, x237 = bits.Add32(x222, uint32(0x0), uint32(uint1(x235)))
	var x238 uint32
	var x239 uint32
	x238, x239 = bits.Add32(x224, uint32(0x0), uint32(uint1(x237)))
	var x240 uint32
	var x241 uint32
	x240, x241 = bits.Add32(x226, uint32(0x0), uint32(uint1(x239)))
	var x242 uint32
	var x243 uint32
	x242, x243 = bits.Add32(x228, uint32(0x0), uint32(uint1(x241)))
	var x244 uint32
	var x245 uint32
	x244, x245 = bits.Add32(x230, uint32(0x0), uint32(uint1(x243)))
	var x246 uint32
	var x247 uint32
	x246, x247 = bits.Add32(x232, uint32(0x0), uint32(uint1(x245)))
	var x248 uint32
	_, x248 = bits.Mul32(x234, 0xffffffff)
	var x250 uint32
	var x251 uint32
	x251, x250 = bits.Mul32(x248, 0xffffffff)
	var x252 uint32
	var x253 uint32
	x253, x252 = bits.Mul32(x248, 0xffffffff)
	var x254 uint32
	var x255 uint32
	x255, x254 = bits.Mul32(x248, 0xffffffff)
	var x256 uint32
	var x257 uint32
	x257, x256 = bits.Mul32(x248, 0xffffffff)
	var x258 uint32
	var x259 uint32
	x258, x259 = bits.Add32(x257, x254, uint32(0x0))
	var x260 uint32
	var x261 uint32
	x260, x261 = bits.Add32(x255, x252, uint32(uint1(x259)))
	var x262 uint32
	var x263 uint32
	x262, x263 = bits.Add32(x253, x250, uint32(uint1(x261)))
	var x265 uint32
	_, x265 = bits.Add32(x234, x248, uint32(0x0))
	var x266 uint32
	var x267 uint32
	x266, x267 = bits.Add32(x236, uint32(0x0), uint32(uint1(x265)))
	var x268 uint32
	var x269 uint32
	x268, x269 = bits.Add32(x238, uint32(0x0), uint32(uint1(x267)))
	var x270 uint32
	var x271 uint32
	x270, x271 = bits.Add32(x240, x256, uint32(uint1(x269)))
	var x272 uint32
	var x273 uint32
	x272, x273 = bits.Add32(x242, x258, uint32(uint1(x271)))
	var x274 uint32
	var x275 uint32
	x274, x275 = bits.Add32(x244, x260, uint32(uint1(x273)))
	var x276 uint32
	var x277 uint32
	x276, x277 = bits.Add32(x246, x262, uint32(uint1(x275)))
	var x278 uint32
	var x279 uint32
	x278, x279 = bits.Add32((uint32(uint1(x247)) + uint32(uint1(x233))), (uint32(uint1(x263)) + x251), uint32(uint1(x277)))
	var x280 uint32
	var x281 uint32
	x280, x281 = bits.Sub32(x266, uint32(0x1), uint32(0x0))
	var x282 uint32
	var x283 uint32
	x282, x283 = bits.Sub32(x268, uint32(0x0), uint32(uint1(x281)))
	var x284 uint32
	var x285 uint32
	x284, x285 = bits.Sub32(x270, uint32(0x0), uint32(uint1(x283)))
	var x286 uint32
	var x287 uint32
	x286, x287 = bits.Sub32(x272, 0xffffffff, uint32(uint1(x285)))
	var x288 uint32
	var x289 uint32
	x288, x289 = bits.Sub32(x274, 0xffffffff, uint32(uint1(x287)))
	var x290 uint32
	var x291 uint32
	x290, x291 = bits.Sub32(x276, 0xffffffff, uint32(uint1(x289)))
	var x292 uint32
	var x293 uint32
	x292, x293 = bits.Sub32(x278, 0xffffffff, uint32(uint1(x291)))
	var x295 uint32
	_, x295 = bits.Sub32(uint32(uint1(x279)), uint32(0x0), uint32(uint1(x293)))
	var x296 uint32
	cmovznzU32(&x296, uint1(x295), x280, x266)
	var x297 uint32
	cmovznzU32(&x297, uint1(x295), x282, x268)
	var x298 uint32
	cmovznzU32(&x298, uint1(x295), x284, x270)
	var x299 uint32
	cmovznzU32(&x299, uint1(x295), x286, x272)
	var x300 uint32
	cmovznzU32(&x300, uint1(x295), x288, x274)
	var x301 uint32
	cmovznzU32(&x301, uint1(x295), x290, x276)
	var x302 uint32
	cmovznzU32(&x302, uint1(x295), x292, x278)
	out1[0] = x296
	out1[1] = x297
	out1[2] = x298
	out1[3] = x299
	out1[4] = x300
	out1[5] = x301
	out1[6] = x302
}

// ToMontgomery translates a field element into the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = eval arg1 mod m
//   0 ≤ eval out1 < m
//
func ToMontgomery(out1 *MontgomeryDomainFieldElement, arg1 *NonMontgomeryDomainFieldElement) {
	x1 := arg1[1]
	x2 := arg1[2]
	x3 := arg1[3]
	x4 := arg1[4]
	x5 := arg1[5]
	x6 := arg1[6]
	x7 := arg1[0]
	var x8 uint32
	var x9 uint32
	x9, x8 = bits.Mul32(x7, 0xffffffff)
	var x10 uint32
	var x11 uint32
	x11, x10 = bits.Mul32(x7, 0xffffffff)
	var x12 uint32
	var x13 uint32
	x13, x12 = bits.Mul32(x7, 0xfffffffe)
	var x14 uint32
	var x15 uint32
	x14, x15 = bits.Add32(x13, x10, uint32(0x0))
	var x16 uint32
	var x17 uint32
	x16, x17 = bits.Add32(x11, x8, uint32(uint1(x15)))
	var x18 uint32
	_, x18 = bits.Mul32(x7, 0xffffffff)
	var x20 uint32
	var x21 uint32
	x21, x20 = bits.Mul32(x18, 0xffffffff)
	var x22 uint32
	var x23 uint32
	x23, x22 = bits.Mul32(x18, 0xffffffff)
	var x24 uint32
	var x25 uint32
	x25, x24 = bits.Mul32(x18, 0xffffffff)
	var x26 uint32
	var x27 uint32
	x27, x26 = bits.Mul32(x18, 0xffffffff)
	var x28 uint32
	var x29 uint32
	x28, x29 = bits.Add32(x27, x24, uint32(0x0))
	var x30 uint32
	var x31 uint32
	x30, x31 = bits.Add32(x25, x22, uint32(uint1(x29)))
	var x32 uint32
	var x33 uint32
	x32, x33 = bits.Add32(x23, x20, uint32(uint1(x31)))
	var x34 uint32
	var x35 uint32
	x34, x35 = bits.Add32(x12, x26, uint32(0x0))
	var x36 uint32
	var x37 uint32
	x36, x37 = bits.Add32(x14, x28, uint32(uint1(x35)))
	var x38 uint32
	var x39 uint32
	x38, x39 = bits.Add32(x16, x30, uint32(uint1(x37)))
	var x40 uint32
	var x41 uint32
	x40, x41 = bits.Add32((uint32(uint1(x17)) + x9), x32, uint32(uint1(x39)))
	var x42 uint32
	var x43 uint32
	x42, x43 = bits.Add32(uint32(0x0), (uint32(uint1(x33)) + x21), uint32(uint1(x41)))
	var x44 uint32
	var x45 uint32
	x45, x44 = bits.Mul32(x1, 0xffffffff)
	var x46 uint32
	var x47 uint32
	x47, x46 = bits.Mul32(x1, 0xffffffff)
	var x48 uint32
	var x49 uint32
	x49, x48 = bits.Mul32(x1, 0xfffffffe)
	var x50 uint32
	var x51 uint32
	x50, x51 = bits.Add32(x49, x46, uint32(0x0))
	var x52 uint32
	var x53 uint32
	x52, x53 = bits.Add32(x47, x44, uint32(uint1(x51)))
	var x55 uint32
	_, x55 = bits.Add32(x7, x18, uint32(0x0))
	var x56 uint32
	var x57 uint32
	x56, x57 = bits.Add32(uint32(uint1(x55)), x1, uint32(0x0))
	var x58 uint32
	var x59 uint32
	x58, x59 = bits.Add32(x36, x48, uint32(0x0))
	var x60 uint32
	var x61 uint32
	x60, x61 = bits.Add32(x38, x50, uint32(uint1(x59)))
	var x62 uint32
	var x63 uint32
	x62, x63 = bits.Add32(x40, x52, uint32(uint1(x61)))
	var x64 uint32
	var x65 uint32
	x64, x65 = bits.Add32(x42, (uint32(uint1(x53)) + x45), uint32(uint1(x63)))
	var x66 uint32
	_, x66 = bits.Mul32(x56, 0xffffffff)
	var x68 uint32
	var x69 uint32
	x69, x68 = bits.Mul32(x66, 0xffffffff)
	var x70 uint32
	var x71 uint32
	x71, x70 = bits.Mul32(x66, 0xffffffff)
	var x72 uint32
	var x73 uint32
	x73, x72 = bits.Mul32(x66, 0xffffffff)
	var x74 uint32
	var x75 uint32
	x75, x74 = bits.Mul32(x66, 0xffffffff)
	var x76 uint32
	var x77 uint32
	x76, x77 = bits.Add32(x75, x72, uint32(0x0))
	var x78 uint32
	var x79 uint32
	x78, x79 = bits.Add32(x73, x70, uint32(uint1(x77)))
	var x80 uint32
	var x81 uint32
	x80, x81 = bits.Add32(x71, x68, uint32(uint1(x79)))
	var x82 uint32
	var x83 uint32
	x82, x83 = bits.Add32(x58, x74, uint32(0x0))
	var x84 uint32
	var x85 uint32
	x84, x85 = bits.Add32(x60, x76, uint32(uint1(x83)))
	var x86 uint32
	var x87 uint32
	x86, x87 = bits.Add32(x62, x78, uint32(uint1(x85)))
	var x88 uint32
	var x89 uint32
	x88, x89 = bits.Add32(x64, x80, uint32(uint1(x87)))
	var x90 uint32
	var x91 uint32
	x90, x91 = bits.Add32((uint32(uint1(x65)) + uint32(uint1(x43))), (uint32(uint1(x81)) + x69), uint32(uint1(x89)))
	var x92 uint32
	var x93 uint32
	x93, x92 = bits.Mul32(x2, 0xffffffff)
	var x94 uint32
	var x95 uint32
	x95, x94 = bits.Mul32(x2, 0xffffffff)
	var x96 uint32
	var x97 uint32
	x97, x96 = bits.Mul32(x2, 0xfffffffe)
	var x98 uint32
	var x99 uint32
	x98, x99 = bits.Add32(x97, x94, uint32(0x0))
	var x100 uint32
	var x101 uint32
	x100, x101 = bits.Add32(x95, x92, uint32(uint1(x99)))
	var x103 uint32
	_, x103 = bits.Add32(x56, x66, uint32(0x0))
	var x104 uint32
	var x105 uint32
	x104, x105 = bits.Add32((uint32(uint1(x103)) + uint32(uint1(x57))), x2, uint32(0x0))
	var x106 uint32
	var x107 uint32
	x106, x107 = bits.Add32(x34, uint32(0x0), uint32(uint1(x105)))
	var x108 uint32
	var x109 uint32
	x108, x109 = bits.Add32(x82, uint32(0x0), uint32(uint1(x107)))
	var x110 uint32
	var x111 uint32
	x110, x111 = bits.Add32(x84, x96, uint32(uint1(x109)))
	var x112 uint32
	var x113 uint32
	x112, x113 = bits.Add32(x86, x98, uint32(uint1(x111)))
	var x114 uint32
	var x115 uint32
	x114, x115 = bits.Add32(x88, x100, uint32(uint1(x113)))
	var x116 uint32
	var x117 uint32
	x116, x117 = bits.Add32(x90, (uint32(uint1(x101)) + x93), uint32(uint1(x115)))
	var x118 uint32
	_, x118 = bits.Mul32(x104, 0xffffffff)
	var x120 uint32
	var x121 uint32
	x121, x120 = bits.Mul32(x118, 0xffffffff)
	var x122 uint32
	var x123 uint32
	x123, x122 = bits.Mul32(x118, 0xffffffff)
	var x124 uint32
	var x125 uint32
	x125, x124 = bits.Mul32(x118, 0xffffffff)
	var x126 uint32
	var x127 uint32
	x127, x126 = bits.Mul32(x118, 0xffffffff)
	var x128 uint32
	var x129 uint32
	x128, x129 = bits.Add32(x127, x124, uint32(0x0))
	var x130 uint32
	var x131 uint32
	x130, x131 = bits.Add32(x125, x122, uint32(uint1(x129)))
	var x132 uint32
	var x133 uint32
	x132, x133 = bits.Add32(x123, x120, uint32(uint1(x131)))
	var x135 uint32
	_, x135 = bits.Add32(x104, x118, uint32(0x0))
	var x136 uint32
	var x137 uint32
	x136, x137 = bits.Add32(x106, uint32(0x0), uint32(uint1(x135)))
	var x138 uint32
	var x139 uint32
	x138, x139 = bits.Add32(x108, uint32(0x0), uint32(uint1(x137)))
	var x140 uint32
	var x141 uint32
	x140, x141 = bits.Add32(x110, x126, uint32(uint1(x139)))
	var x142 uint32
	var x143 uint32
	x142, x143 = bits.Add32(x112, x128, uint32(uint1(x141)))
	var x144 uint32
	var x145 uint32
	x144, x145 = bits.Add32(x114, x130, uint32(uint1(x143)))
	var x146 uint32
	var x147 uint32
	x146, x147 = bits.Add32(x116, x132, uint32(uint1(x145)))
	var x148 uint32
	var x149 uint32
	x148, x149 = bits.Add32((uint32(uint1(x117)) + uint32(uint1(x91))), (uint32(uint1(x133)) + x121), uint32(uint1(x147)))
	var x150 uint32
	var x151 uint32
	x151, x150 = bits.Mul32(x3, 0xffffffff)
	var x152 uint32
	var x153 uint32
	x153, x152 = bits.Mul32(x3, 0xffffffff)
	var x154 uint32
	var x155 uint32
	x155, x154 = bits.Mul32(x3, 0xfffffffe)
	var x156 uint32
	var x157 uint32
	x156, x157 = bits.Add32(x155, x152, uint32(0x0))
	var x158 uint32
	var x159 uint32
	x158, x159 = bits.Add32(x153, x150, uint32(uint1(x157)))
	var x160 uint32
	var x161 uint32
	x160, x161 = bits.Add32(x136, x3, uint32(0x0))
	var x162 uint32
	var x163 uint32
	x162, x163 = bits.Add32(x138, uint32(0x0), uint32(uint1(x161)))
	var x164 uint32
	var x165 uint32
	x164, x165 = bits.Add32(x140, uint32(0x0), uint32(uint1(x163)))
	var x166 uint32
	var x167 uint32
	x166, x167 = bits.Add32(x142, x154, uint32(uint1(x165)))
	var x168 uint32
	var x169 uint32
	x168, x169 = bits.Add32(x144, x156, uint32(uint1(x167)))
	var x170 uint32
	var x171 uint32
	x170, x171 = bits.Add32(x146, x158, uint32(uint1(x169)))
	var x172 uint32
	var x173 uint32
	x172, x173 = bits.Add32(x148, (uint32(uint1(x159)) + x151), uint32(uint1(x171)))
	var x174 uint32
	_, x174 = bits.Mul32(x160, 0xffffffff)
	var x176 uint32
	var x177 uint32
	x177, x176 = bits.Mul32(x174, 0xffffffff)
	var x178 uint32
	var x179 uint32
	x179, x178 = bits.Mul32(x174, 0xffffffff)
	var x180 uint32
	var x181 uint32
	x181, x180 = bits.Mul32(x174, 0xffffffff)
	var x182 uint32
	var x183 uint32
	x183, x182 = bits.Mul32(x174, 0xffffffff)
	var x184 uint32
	var x185 uint32
	x184, x185 = bits.Add32(x183, x180, uint32(0x0))
	var x186 uint32
	var x187 uint32
	x186, x187 = bits.Add32(x181, x178, uint32(uint1(x185)))
	var x188 uint32
	var x189 uint32
	x188, x189 = bits.Add32(x179, x176, uint32(uint1(x187)))
	var x191 uint32
	_, x191 = bits.Add32(x160, x174, uint32(0x0))
	var x192 uint32
	var x193 uint32
	x192, x193 = bits.Add32(x162, uint32(0x0), uint32(uint1(x191)))
	var x194 uint32
	var x195 uint32
	x194, x195 = bits.Add32(x164, uint32(0x0), uint32(uint1(x193)))
	var x196 uint32
	var x197 uint32
	x196, x197 = bits.Add32(x166, x182, uint32(uint1(x195)))
	var x198 uint32
	var x199 uint32
	x198, x199 = bits.Add32(x168, x184, uint32(uint1(x197)))
	var x200 uint32
	var x201 uint32
	x200, x201 = bits.Add32(x170, x186, uint32(uint1(x199)))
	var x202 uint32
	var x203 uint32
	x202, x203 = bits.Add32(x172, x188, uint32(uint1(x201)))
	var x204 uint32
	var x205 uint32
	x204, x205 = bits.Add32((uint32(uint1(x173)) + uint32(uint1(x149))), (uint32(uint1(x189)) + x177), uint32(uint1(x203)))
	var x206 uint32
	var x207 uint32
	x207, x206 = bits.Mul32(x4, 0xffffffff)
	var x208 uint32
	var x209 uint32
	x209, x208 = bits.Mul32(x4, 0xffffffff)
	var x210 uint32
	var x211 uint32
	x211, x210 = bits.Mul32(x4, 0xfffffffe)
	var x212 uint32
	var x213 uint32
	x212, x213 = bits.Add32(x211, x208, uint32(0x0))
	var x214 uint32
	var x215 uint32
	x214, x215 = bits.Add32(x209, x206, uint32(uint1(x213)))
	var x216 uint32
	var x217 uint32
	x216, x217 = bits.Add32(x192, x4, uint32(0x0))
	var x218 uint32
	var x219 uint32
	x218, x219 = bits.Add32(x194, uint32(0x0), uint32(uint1(x217)))
	var x220 uint32
	var x221 uint32
	x220, x221 = bits.Add32(x196, uint32(0x0), uint32(uint1(x219)))
	var x222 uint32
	var x223 uint32
	x222, x223 = bits.Add32(x198, x210, uint32(uint1(x221)))
	var x224 uint32
	var x225 uint32
	x224, x225 = bits.Add32(x200, x212, uint32(uint1(x223)))
	var x226 uint32
	var x227 uint32
	x226, x227 = bits.Add32(x202, x214, uint32(uint1(x225)))
	var x228 uint32
	var x229 uint32
	x228, x229 = bits.Add32(x204, (uint32(uint1(x215)) + x207), uint32(uint1(x227)))
	var x230 uint32
	_, x230 = bits.Mul32(x216, 0xffffffff)
	var x232 uint32
	var x233 uint32
	x233, x232 = bits.Mul32(x230, 0xffffffff)
	var x234 uint32
	var x235 uint32
	x235, x234 = bits.Mul32(x230, 0xffffffff)
	var x236 uint32
	var x237 uint32
	x237, x236 = bits.Mul32(x230, 0xffffffff)
	var x238 uint32
	var x239 uint32
	x239, x238 = bits.Mul32(x230, 0xffffffff)
	var x240 uint32
	var x241 uint32
	x240, x241 = bits.Add32(x239, x236, uint32(0x0))
	var x242 uint32
	var x243 uint32
	x242, x243 = bits.Add32(x237, x234, uint32(uint1(x241)))
	var x244 uint32
	var x245 uint32
	x244, x245 = bits.Add32(x235, x232, uint32(uint1(x243)))
	var x247 uint32
	_, x247 = bits.Add32(x216, x230, uint32(0x0))
	var x248 uint32
	var x249 uint32
	x248, x249 = bits.Add32(x218, uint32(0x0), uint32(uint1(x247)))
	var x250 uint32
	var x251 uint32
	x250, x251 = bits.Add32(x220, uint32(0x0), uint32(uint1(x249)))
	var x252 uint32
	var x253 uint32
	x252, x253 = bits.Add32(x222, x238, uint32(uint1(x251)))
	var x254 uint32
	var x255 uint32
	x254, x255 = bits.Add32(x224, x240, uint32(uint1(x253)))
	var x256 uint32
	var x257 uint32
	x256, x257 = bits.Add32(x226, x242, uint32(uint1(x255)))
	var x258 uint32
	var x259 uint32
	x258, x259 = bits.Add32(x228, x244, uint32(uint1(x257)))
	var x260 uint32
	var x261 uint32
	x260, x261 = bits.Add32((uint32(uint1(x229)) + uint32(uint1(x205))), (uint32(uint1(x245)) + x233), uint32(uint1(x259)))
	var x262 uint32
	var x263 uint32
	x263, x262 = bits.Mul32(x5, 0xffffffff)
	var x264 uint32
	var x265 uint32
	x265, x264 = bits.Mul32(x5, 0xffffffff)
	var x266 uint32
	var x267 uint32
	x267, x266 = bits.Mul32(x5, 0xfffffffe)
	var x268 uint32
	var x269 uint32
	x268, x269 = bits.Add32(x267, x264, uint32(0x0))
	var x270 uint32
	var x271 uint32
	x270, x271 = bits.Add32(x265, x262, uint32(uint1(x269)))
	var x272 uint32
	var x273 uint32
	x272, x273 = bits.Add32(x248, x5, uint32(0x0))
	var x274 uint32
	var x275 uint32
	x274, x275 = bits.Add32(x250, uint32(0x0), uint32(uint1(x273)))
	var x276 uint32
	var x277 uint32
	x276, x277 = bits.Add32(x252, uint32(0x0), uint32(uint1(x275)))
	var x278 uint32
	var x279 uint32
	x278, x279 = bits.Add32(x254, x266, uint32(uint1(x277)))
	var x280 uint32
	var x281 uint32
	x280, x281 = bits.Add32(x256, x268, uint32(uint1(x279)))
	var x282 uint32
	var x283 uint32
	x282, x283 = bits.Add32(x258, x270, uint32(uint1(x281)))
	var x284 uint32
	var x285 uint32
	x284, x285 = bits.Add32(x260, (uint32(uint1(x271)) + x263), uint32(uint1(x283)))
	var x286 uint32
	_, x286 = bits.Mul32(x272, 0xffffffff)
	var x288 uint32
	var x289 uint32
	x289, x288 = bits.Mul32(x286, 0xffffffff)
	var x290 uint32
	var x291 uint32
	x291, x290 = bits.Mul32(x286, 0xffffffff)
	var x292 uint32
	var x293 uint32
	x293, x292 = bits.Mul32(x286, 0xffffffff)
	var x294 uint32
	var x295 uint32
	x295, x294 = bits.Mul32(x286, 0xffffffff)
	var x296 uint32
	var x297 uint32
	x296, x297 = bits.Add32(x295, x292, uint32(0x0))
	var x298 uint32
	var x299 uint32
	x298, x299 = bits.Add32(x293, x290, uint32(uint1(x297)))
	var x300 uint32
	var x301 uint32
	x300, x301 = bits.Add32(x291, x288, uint32(uint1(x299)))
	var x303 uint32
	_, x303 = bits.Add32(x272, x286, uint32(0x0))
	var x304 uint32
	var x305 uint32
	x304, x305 = bits.Add32(x274, uint32(0x0), uint32(uint1(x303)))
	var x306 uint32
	var x307 uint32
	x306, x307 = bits.Add32(x276, uint32(0x0), uint32(uint1(x305)))
	var x308 uint32
	var x309 uint32
	x308, x309 = bits.Add32(x278, x294, uint32(uint1(x307)))
	var x310 uint32
	var x311 uint32
	x310, x311 = bits.Add32(x280, x296, uint32(uint1(x309)))
	var x312 uint32
	var x313 uint32
	x312, x313 = bits.Add32(x282, x298, uint32(uint1(x311)))
	var x314 uint32
	var x315 uint32
	x314, x315 = bits.Add32(x284, x300, uint32(uint1(x313)))
	var x316 uint32
	var x317 uint32
	x316, x317 = bits.Add32((uint32(uint1(x285)) + uint32(uint1(x261))), (uint32(uint1(x301)) + x289), uint32(uint1(x315)))
	var x318 uint32
	var x319 uint32
	x319, x318 = bits.Mul32(x6, 0xffffffff)
	var x320 uint32
	var x321 uint32
	x321, x320 = bits.Mul32(x6, 0xffffffff)
	var x322 uint32
	var x323 uint32
	x323, x322 = bits.Mul32(x6, 0xfffffffe)
	var x324 uint32
	var x325 uint32
	x324, x325 = bits.Add32(x323, x320, uint32(0x0))
	var x326 uint32
	var x327 uint32
	x326, x327 = bits.Add32(x321, x318, uint32(uint1(x325)))
	var x328 uint32
	var x329 uint32
	x328, x329 = bits.Add32(x304, x6, uint32(0x0))
	var x330 uint32
	var x331 uint32
	x330, x331 = bits.Add32(x306, uint32(0x0), uint32(uint1(x329)))
	var x332 uint32
	var x333 uint32
	x332, x333 = bits.Add32(x308, uint32(0x0), uint32(uint1(x331)))
	var x334 uint32
	var x335 uint32
	x334, x335 = bits.Add32(x310, x322, uint32(uint1(x333)))
	var x336 uint32
	var x337 uint32
	x336, x337 = bits.Add32(x312, x324, uint32(uint1(x335)))
	var x338 uint32
	var x339 uint32
	x338, x339 = bits.Add32(x314, x326, uint32(uint1(x337)))
	var x340 uint32
	var x341 uint32
	x340, x341 = bits.Add32(x316, (uint32(uint1(x327)) + x319), uint32(uint1(x339)))
	var x342 uint32
	_, x342 = bits.Mul32(x328, 0xffffffff)
	var x344 uint32
	var x345 uint32
	x345, x344 = bits.Mul32(x342, 0xffffffff)
	var x346 uint32
	var x347 uint32
	x347, x346 = bits.Mul32(x342, 0xffffffff)
	var x348 uint32
	var x349 uint32
	x349, x348 = bits.Mul32(x342, 0xffffffff)
	var x350 uint32
	var x351 uint32
	x351, x350 = bits.Mul32(x342, 0xffffffff)
	var x352 uint32
	var x353 uint32
	x352, x353 = bits.Add32(x351, x348, uint32(0x0))
	var x354 uint32
	var x355 uint32
	x354, x355 = bits.Add32(x349, x346, uint32(uint1(x353)))
	var x356 uint32
	var x357 uint32
	x356, x357 = bits.Add32(x347, x344, uint32(uint1(x355)))
	var x359 uint32
	_, x359 = bits.Add32(x328, x342, uint32(0x0))
	var x360 uint32
	var x361 uint32
	x360, x361 = bits.Add32(x330, uint32(0x0), uint32(uint1(x359)))
	var x362 uint32
	var x363 uint32
	x362, x363 = bits.Add32(x332, uint32(0x0), uint32(uint1(x361)))
	var x364 uint32
	var x365 uint32
	x364, x365 = bits.Add32(x334, x350, uint32(uint1(x363)))
	var x366 uint32
	var x367 uint32
	x366, x367 = bits.Add32(x336, x352, uint32(uint1(x365)))
	var x368 uint32
	var x369 uint32
	x368, x369 = bits.Add32(x338, x354, uint32(uint1(x367)))
	var x370 uint32
	var x371 uint32
	x370, x371 = bits.Add32(x340, x356, uint32(uint1(x369)))
	var x372 uint32
	var x373 uint32
	x372, x373 = bits.Add32((uint32(uint1(x341)) + uint32(uint1(x317))), (uint32(uint1(x357)) + x345), uint32(uint1(x371)))
	var x374 uint32
	var x375 uint32
	x374, x375 = bits.Sub32(x360, uint32(0x1), uint32(0x0))
	var x376 uint32
	var x377 uint32
	x376, x377 = bits.Sub32(x362, uint32(0x0), uint32(uint1(x375)))
	var x378 uint32
	var x379 uint32
	x378, x379 = bits.Sub32(x364, uint32(0x0), uint32(uint1(x377)))
	var x380 uint32
	var x381 uint32
	x380, x381 = bits.Sub32(x366, 0xffffffff, uint32(uint1(x379)))
	var x382 uint32
	var x383 uint32
	x382, x383 = bits.Sub32(x368, 0xffffffff, uint32(uint1(x381)))
	var x384 uint32
	var x385 uint32
	x384, x385 = bits.Sub32(x370, 0xffffffff, uint32(uint1(x383)))
	var x386 uint32
	var x387 uint32
	x386, x387 = bits.Sub32(x372, 0xffffffff, uint32(uint1(x385)))
	var x389 uint32
	_, x389 = bits.Sub32(uint32(uint1(x373)), uint32(0x0), uint32(uint1(x387)))
	var x390 uint32
	cmovznzU32(&x390, uint1(x389), x374, x360)
	var x391 uint32
	cmovznzU32(&x391, uint1(x389), x376, x362)
	var x392 uint32
	cmovznzU32(&x392, uint1(x389), x378, x364)
	var x393 uint32
	cmovznzU32(&x393, uint1(x389), x380, x366)
	var x394 uint32
	cmovznzU32(&x394, uint1(x389), x382, x368)
	var x395 uint32
	cmovznzU32(&x395, uint1(x389), x384, x370)
	var x396 uint32
	cmovznzU32(&x396, uint1(x389), x386, x372)
	out1[0] = x390
	out1[1] = x391
	out1[2] = x392
	out1[3] = x393
	out1[4] = x394
	out1[5] = x395
	out1[6] = x396
}

// Nonzero outputs a single non-zero word if the input is non-zero and zero otherwise.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [0x0 ~> 0xffffffff]
func Nonzero(out1 *uint32, arg1 *[7]uint32) {
	x1 := (arg1[0] | (arg1[1] | (arg1[2] | (arg1[3] | (arg1[4] | (arg1[5] | arg1[6]))))))
	*out1 = x1
}

// Selectznz is a multi-limb conditional select.
//
// Postconditions:
//   eval out1 = (if arg1 = 0 then eval arg2 else eval arg3)
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func Selectznz(out1 *[7]uint32, arg1 uint1, arg2 *[7]uint32, arg3 *[7]uint32) {
	var x1 uint32
	cmovznzU32(&x1, arg1, arg2[0], arg3[0])
	var x2 uint32
	cmovznzU32(&x2, arg1, arg2[1], arg3[1])
	var x3 uint32
	cmovznzU32(&x3, arg1, arg2[2], arg3[2])
	var x4 uint32
	cmovznzU32(&x4, arg1, arg2[3], arg3[3])
	var x5 uint32
	cmovznzU32(&x5, arg1, arg2[4], arg3[4])
	var x6 uint32
	cmovznzU32(&x6, arg1, arg2[5], arg3[5])
	var x7 uint32
	cmovznzU32(&x7, arg1, arg2[6], arg3[6])
	out1[0] = x1
	out1[1] = x2
	out1[2] = x3
	out1[3] = x4
	out1[4] = x5
	out1[5] = x6
	out1[6] = x7
}

// ToBytes serializes a field element NOT in the Montgomery domain to bytes in little-endian order.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..27]
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
func ToBytes(out1 *[28]uint8, arg1 *[7]uint32) {
	x1 := arg1[6]
	x2 := arg1[5]
	x3 := arg1[4]
	x4 := arg1[3]
	x5 := arg1[2]
	x6 := arg1[1]
	x7 := arg1[0]
	x8 := (uint8(x7) & 0xff)
	x9 := (x7 >> 8)
	x10 := (uint8(x9) & 0xff)
	x11 := (x9 >> 8)
	x12 := (uint8(x11) & 0xff)
	x13 := uint8((x11 >> 8))
	x14 := (uint8(x6) & 0xff)
	x15 := (x6 >> 8)
	x16 := (uint8(x15) & 0xff)
	x17 := (x15 >> 8)
	x18 := (uint8(x17) & 0xff)
	x19 := uint8((x17 >> 8))
	x20 := (uint8(x5) & 0xff)
	x21 := (x5 >> 8)
	x22 := (uint8(x21) & 0xff)
	x23 := (x21 >> 8)
	x24 := (uint8(x23) & 0xff)
	x25 := uint8((x23 >> 8))
	x26 := (uint8(x4) & 0xff)
	x27 := (x4 >> 8)
	x28 := (uint8(x27) & 0xff)
	x29 := (x27 >> 8)
	x30 := (uint8(x29) & 0xff)
	x31 := uint8((x29 >> 8))
	x32 := (uint8(x3) & 0xff)
	x33 := (x3 >> 8)
	x34 := (uint8(x33) & 0xff)
	x35 := (x33 >> 8)
	x36 := (uint8(x35) & 0xff)
	x37 := uint8((x35 >> 8))
	x38 := (uint8(x2) & 0xff)
	x39 := (x2 >> 8)
	x40 := (uint8(x39) & 0xff)
	x41 := (x39 >> 8)
	x42 := (uint8(x41) & 0xff)
	x43 := uint8((x41 >> 8))
	x44 := (uint8(x1) & 0xff)
	x45 := (x1 >> 8)
	x46 := (uint8(x45) & 0xff)
	x47 := (x45 >> 8)
	x48 := (uint8(x47) & 0xff)
	x49 := uint8((x47 >> 8))
	out1[0] = x8
	out1[1] = x10
	out1[2] = x12
	out1[3] = x13
	out1[4] = x14
	out1[5] = x16
	out1[6] = x18
	out1[7] = x19
	out1[8] = x20
	out1[9] = x22
	out1[10] = x24
	out1[11] = x25
	out1[12] = x26
	out1[13] = x28
	out1[14] = x30
	out1[15] = x31
	out1[16] = x32
	out1[17] = x34
	out1[18] = x36
	out1[19] = x37
	out1[20] = x38
	out1[21] = x40
	out1[22] = x42
	out1[23] = x43
	out1[24] = x44
	out1[25] = x46
	out1[26] = x48
	out1[27] = x49
}

// FromBytes deserializes a field element NOT in the Montgomery domain from bytes in little-endian order.
//
// Preconditions:
//   0 ≤ bytes_eval arg1 < m
// Postconditions:
//   eval out1 mod m = bytes_eval arg1 mod m
//   0 ≤ eval out1 < m
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func FromBytes(out1 *[7]uint32, arg1 *[28]uint8) {
	x1 := (uint32(arg1[27]) << 24)
	x2 := (uint32(arg1[26]) << 16)
	x3 := (uint32(arg1[25]) << 8)
	x4 := arg1[24]
	x5 := (uint32(arg1[23]) << 24)
	x6 := (uint32(arg1[22]) << 16)
	x7 := (uint32(arg1[21]) << 8)
	x8 := arg1[20]
	x9 := (uint32(arg1[19]) << 24)
	x10 := (uint32(arg1[18]) << 16)
	x11 := (uint32(arg1[17]) << 8)
	x12 := arg1[16]
	x13 := (uint32(arg1[15]) << 24)
	x14 := (uint32(arg1[14]) << 16)
	x15 := (uint32(arg1[13]) << 8)
	x16 := arg1[12]
	x17 := (uint32(arg1[11]) << 24)
	x18 := (uint32(arg1[10]) << 16)
	x19 := (uint32(arg1[9]) << 8)
	x20 := arg1[8]
	x21 := (uint32(arg1[7]) << 24)
	x22 := (uint32(arg1[6]) << 16)
	x23 := (uint32(arg1[5]) << 8)
	x24 := arg1[4]
	x25 := (uint32(arg1[3]) << 24)
	x26 := (uint32(arg1[2]) << 16)
	x27 := (uint32(arg1[1]) << 8)
	x28 := arg1[0]
	x29 := (x27 + uint32(x28))
	x30 := (x26 + x29)
	x31 := (x25 + x30)
	x32 := (x23 + uint32(x24))
	x33 := (x22 + x32)
	x34 := (x21 + x33)
	x35 := (x19 + uint32(x20))
	x36 := (x18 + x35)
	x37 := (x17 + x36)
	x38 := (x15 + uint32(x16))
	x39 := (x14 + x38)
	x40 := (x13 + x39)
	x41 := (x11 + uint32(x12))
	x42 := (x10 + x41)
	x43 := (x9 + x42)
	x44 := (x7 + uint32(x8))
	x45 := (x6 + x44)
	x46 := (x5 + x45)
	x47 := (x3 + uint32(x4))
	x48 := (x2 + x47)
	x49 := (x1 + x48)
	out1[0] = x31
	out1[1] = x34
	out1[2] = x37
	out1[3] = x40
	out1[4] = x43
	out1[5] = x46
	out1[6] = x49
}

// SetOne returns the field element one in the Montgomery domain.
//
// Postconditions:
//   eval (from_montgomery out1) mod m = 1 mod m
//   0 ≤ eval out1 < m
//
func SetOne(out1 *MontgomeryDomainFieldElement) {
	out1[0] = 0xffffffff
	out1[1] = 0xffffffff
	out1[2] = 0xffffffff
	out1[3] = uint32(0x0)
	out1[4] = uint32(0x0)
	out1[5] = uint32(0x0)
	out1[6] = uint32(0x0)
}

// Msat returns the saturated representation of the prime modulus.
//
// Postconditions:
//   twos_complement_eval out1 = m
//   0 ≤ eval out1 < m
//
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func Msat(out1 *[8]uint32) {
	out1[0] = uint32(0x1)
	out1[1] = uint32(0x0)
	out1[2] = uint32(0x0)
	out1[3] = 0xffffffff
	out1[4] = 0xffffffff
	out1[5] = 0xffffffff
	out1[6] = 0xffffffff
	out1[7] = uint32(0x0)
}

// The function SatFromBytes deserializes a field element NOT in the Montgomery domain from bytes in little-endian order.
//
// Postconditions:
//   0 ≤ eval arg1 < m
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func SatFromBytes(out1 *[8]uint32, arg1 *[28]uint8) {
	x1 := (uint32(arg1[27]) << 24)
	x2 := (uint32(arg1[26]) << 16)
	x3 := (uint32(arg1[25]) << 8)
	x4 := arg1[24]
	x5 := (uint32(arg1[23]) << 24)
	x6 := (uint32(arg1[22]) << 16)
	x7 := (uint32(arg1[21]) << 8)
	x8 := arg1[20]
	x9 := (uint32(arg1[19]) << 24)
	x10 := (uint32(arg1[18]) << 16)
	x11 := (uint32(arg1[17]) << 8)
	x12 := arg1[16]
	x13 := (uint32(arg1[15]) << 24)
	x14 := (uint32(arg1[14]) << 16)
	x15 := (uint32(arg1[13]) << 8)
	x16 := arg1[12]
	x17 := (uint32(arg1[11]) << 24)
	x18 := (uint32(arg1[10]) << 16)
	x19 := (uint32(arg1[9]) << 8)
	x20 := arg1[8]
	x21 := (uint32(arg1[7]) << 24)
	x22 := (uint32(arg1[6]) << 16)
	x23 := (uint32(arg1[5]) << 8)
	x24 := arg1[4]
	x25 := (uint32(arg1[3]) << 24)
	x26 := (uint32(arg1[2]) << 16)
	x27 := (uint32(arg1[1]) << 8)
	x28 := arg1[0]
	x29 := (x27 + uint32(x28))
	x30 := (x26 + x29)
	x31 := (x25 + x30)
	x32 := (x23 + uint32(x24))
	x33 := (x22 + x32)
	x34 := (x21 + x33)
	x35 := (x19 + uint32(x20))
	x36 := (x18 + x35)
	x37 := (x17 + x36)
	x38 := (x15 + uint32(x16))
	x39 := (x14 + x38)
	x40 := (x13 + x39)
	x41 := (x11 + uint32(x12))
	x42 := (x10 + x41)
	x43 := (x9 + x42)
	x44 := (x7 + uint32(x8))
	x45 := (x6 + x44)
	x46 := (x5 + x45)
	x47 := (x3 + uint32(x4))
	x48 := (x2 + x47)
	x49 := (x1 + x48)
	out1[0] = x31
	out1[1] = x34
	out1[2] = x37
	out1[3] = x40
	out1[4] = x43
	out1[5] = x46
	out1[6] = x49
	out1[7] = uint32(0x0)
}

// Divstep computes a divstep.
//
// Preconditions:
//   0 ≤ eval arg4 < m
//   0 ≤ eval arg5 < m
// Postconditions:
//   out1 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then 1 - arg1 else 1 + arg1)
//   twos_complement_eval out2 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then twos_complement_eval arg3 else twos_complement_eval arg2)
//   twos_complement_eval out3 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then ⌊(twos_complement_eval arg3 - twos_complement_eval arg2) / 2⌋ else ⌊(twos_complement_eval arg3 + (twos_complement_eval arg3 mod 2) * twos_complement_eval arg2) / 2⌋)
//   eval (from_montgomery out4) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (2 * eval (from_montgomery arg5)) mod m else (2 * eval (from_montgomery arg4)) mod m)
//   eval (from_montgomery out5) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (eval (from_montgomery arg4) - eval (from_montgomery arg4)) mod m else (eval (from_montgomery arg5) + (twos_complement_eval arg3 mod 2) * eval (from_montgomery arg4)) mod m)
//   0 ≤ eval out5 < m
//   0 ≤ eval out4 < m
//   0 ≤ eval out2 < m
//   0 ≤ eval out3 < m
//
// Input Bounds:
//   arg1: [0x0 ~> 0xffffffff]
//   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg5: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [0x0 ~> 0xffffffff]
//   out2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   out3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   out4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   out5: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func Divstep(out1 *uint32, out2 *[8]uint32, out3 *[8]uint32, out4 *[7]uint32, out5 *[7]uint32, arg1 uint32, arg2 *[8]uint32, arg3 *[8]uint32, arg4 *[7]uint32, arg5 *[7]uint32) {
	var x1 uint32
	x1, _ = bits.Add32((^arg1), uint32(0x1), uint32(0x0))
	x3 := (uint1((x1 >> 31)) & (uint1(arg3[0]) & 0x1))
	var x4 uint32
	x4, _ = bits.Add32((^arg1), uint32(0x1), uint32(0x0))
	var x6 uint32
	cmovznzU32(&x6, x3, arg1, x4)
	var x7 uint32
	cmovznzU32(&x7, x3, arg2[0], arg3[0])
	var x8 uint32
	cmovznzU32(&x8, x3, arg2[1], arg3[1])
	var x9 uint32
	cmovznzU32(&x9, x3, arg2[2], arg3[2])
	var x10 uint32
	cmovznzU32(&x10, x3, arg2[3], arg3[3])
	var x11 uint32
	cmovznzU32(&x11, x3, arg2[4], arg3[4])
	var x12 uint32
	cmovznzU32(&x12, x3, arg2[5], arg3[5])
	var x13 uint32
	cmovznzU32(&x13, x3, arg2[6], arg3[6])
	var x14 uint32
	cmovznzU32(&x14, x3, arg2[7], arg3[7])
	var x15 uint32
	var x16 uint32
	x15, x16 = bits.Add32(uint32(0x1), (^arg2[0]), uint32(0x0))
	var x17 uint32
	var x18 uint32
	x17, x18 = bits.Add32(uint32(0x0), (^arg2[1]), uint32(uint1(x16)))
	var x19 uint32
	var x20 uint32
	x19, x20 = bits.Add32(uint32(0x0), (^arg2[2]), uint32(uint1(x18)))
	var x21 uint32
	var x22 uint32
	x21, x22 = bits.Add32(uint32(0x0), (^arg2[3]), uint32(uint1(x20)))
	var x23 uint32
	var x24 uint32
	x23, x24 = bits.Add32(uint32(0x0), (^arg2[4]), uint32(uint1(x22)))
	var x25 uint32
	var x26 uint32
	x25, x26 = bits.Add32(uint32(0x0), (^arg2[5]), uint32(uint1(x24)))
	var x27 uint32
	var x28 uint32
	x27, x28 = bits.Add32(uint32(0x0), (^arg2[6]), uint32(uint1(x26)))
	var x29 uint32
	x29, _ = bits.Add32(uint32(0x0), (^arg2[7]), uint32(uint1(x28)))
	var x31 uint32
	cmovznzU32(&x31, x3, arg3[0], x15)
	var x32 uint32
	cmovznzU32(&x32, x3, arg3[1], x17)
	var x33 uint32
	cmovznzU32(&x33, x3, arg3[2], x19)
	var x34 uint32
	cmovznzU32(&x34, x3, arg3[3], x21)
	var x35 uint32
	cmovznzU32(&x35, x3, arg3[4], x23)
	var x36 uint32
	cmovznzU32(&x36, x3, arg3[5], x25)
	var x37 uint32
	cmovznzU32(&x37, x3, arg3[6], x27)
	var x38 uint32
	cmovznzU32(&x38, x3, arg3[7], x29)
	var x39 uint32
	cmovznzU32(&x39, x3, arg4[0], arg5[0])
	var x40 uint32
	cmovznzU32(&x40, x3, arg4[1], arg5[1])
	var x41 uint32
	cmovznzU32(&x41, x3, arg4[2], arg5[2])
	var x42 uint32
	cmovznzU32(&x42, x3, arg4[3], arg5[3])
	var x43 uint32
	cmovznzU32(&x43, x3, arg4[4], arg5[4])
	var x44 uint32
	cmovznzU32(&x44, x3, arg4[5], arg5[5])
	var x45 uint32
	cmovznzU32(&x45, x3, arg4[6], arg5[6])
	var x46 uint32
	var x47 uint32
	x46, x47 = bits.Add32(x39, x39, uint32(0x0))
	var x48 uint32
	var x49 uint32
	x48, x49 = bits.Add32(x40, x40, uint32(uint1(x47)))
	var x50 uint32
	var x51 uint32
	x50, x51 = bits.Add32(x41, x41, uint32(uint1(x49)))
	var x52 uint32
	var x53 uint32
	x52, x53 = bits.Add32(x42, x42, uint32(uint1(x51)))
	var x54 uint32
	var x55 uint32
	x54, x55 = bits.Add32(x43, x43, uint32(uint1(x53)))
	var x56 uint32
	var x57 uint32
	x56, x57 = bits.Add32(x44, x44, uint32(uint1(x55)))
	var x58 uint32
	var x59 uint32
	x58, x59 = bits.Add32(x45, x45, uint32(uint1(x57)))
	var x60 uint32
	var x61 uint32
	x60, x61 = bits.Sub32(x46, uint32(0x1), uint32(0x0))
	var x62 uint32
	var x63 uint32
	x62, x63 = bits.Sub32(x48, uint32(0x0), uint32(uint1(x61)))
	var x64 uint32
	var x65 uint32
	x64, x65 = bits.Sub32(x50, uint32(0x0), uint32(uint1(x63)))
	var x66 uint32
	var x67 uint32
	x66, x67 = bits.Sub32(x52, 0xffffffff, uint32(uint1(x65)))
	var x68 uint32
	var x69 uint32
	x68, x69 = bits.Sub32(x54, 0xffffffff, uint32(uint1(x67)))
	var x70 uint32
	var x71 uint32
	x70, x71 = bits.Sub32(x56, 0xffffffff, uint32(uint1(x69)))
	var x72 uint32
	var x73 uint32
	x72, x73 = bits.Sub32(x58, 0xffffffff, uint32(uint1(x71)))
	var x75 uint32
	_, x75 = bits.Sub32(uint32(uint1(x59)), uint32(0x0), uint32(uint1(x73)))
	x76 := arg4[6]
	x77 := arg4[5]
	x78 := arg4[4]
	x79 := arg4[3]
	x80 := arg4[2]
	x81 := arg4[1]
	x82 := arg4[0]
	var x83 uint32
	var x84 uint32
	x83, x84 = bits.Sub32(uint32(0x0), x82, uint32(0x0))
	var x85 uint32
	var x86 uint32
	x85, x86 = bits.Sub32(uint32(0x0), x81, uint32(uint1(x84)))
	var x87 uint32
	var x88 uint32
	x87, x88 = bits.Sub32(uint32(0x0), x80, uint32(uint1(x86)))
	var x89 uint32
	var x90 uint32
	x89, x90 = bits.Sub32(uint32(0x0), x79, uint32(uint1(x88)))
	var x91 uint32
	var x92 uint32
	x91, x92 = bits.Sub32(uint32(0x0), x78, uint32(uint1(x90)))
	var x93 uint32
	var x94 uint32
	x93, x94 = bits.Sub32(uint32(0x0), x77, uint32(uint1(x92)))
	var x95 uint32
	var x96 uint32
	x95, x96 = bits.Sub32(uint32(0x0), x76, uint32(uint1(x94)))
	var x97 uint32
	cmovznzU32(&x97, uint1(x96), uint32(0x0), 0xffffffff)
	var x98 uint32
	var x99 uint32
	x98, x99 = bits.Add32(x83, uint32((uint1(x97) & 0x1)), uint32(0x0))
	var x100 uint32
	var x101 uint32
	x100, x101 = bits.Add32(x85, uint32(0x0), uint32(uint1(x99)))
	var x102 uint32
	var x103 uint32
	x102, x103 = bits.Add32(x87, uint32(0x0), uint32(uint1(x101)))
	var x104 uint32
	var x105 uint32
	x104, x105 = bits.Add32(x89, x97, uint32(uint1(x103)))
	var x106 uint32
	var x107 uint32
	x106, x107 = bits.Add32(x91, x97, uint32(uint1(x105)))
	var x108 uint32
	var x109 uint32
	x108, x109 = bits.Add32(x93, x97, uint32(uint1(x107)))
	var x110 uint32
	x110, _ = bits.Add32(x95, x97, uint32(uint1(x109)))
	var x112 uint32
	cmovznzU32(&x112, x3, arg5[0], x98)
	var x113 uint32
	cmovznzU32(&x113, x3, arg5[1], x100)
	var x114 uint32
	cmovznzU32(&x114, x3, arg5[2], x102)
	var x115 uint32
	cmovznzU32(&x115, x3, arg5[3], x104)
	var x116 uint32
	cmovznzU32(&x116, x3, arg5[4], x106)
	var x117 uint32
	cmovznzU32(&x117, x3, arg5[5], x108)
	var x118 uint32
	cmovznzU32(&x118, x3, arg5[6], x110)
	x119 := (uint1(x31) & 0x1)
	var x120 uint32
	cmovznzU32(&x120, x119, uint32(0x0), x7)
	var x121 uint32
	cmovznzU32(&x121, x119, uint32(0x0), x8)
	var x122 uint32
	cmovznzU32(&x122, x119, uint32(0x0), x9)
	var x123 uint32
	cmovznzU32(&x123, x119, uint32(0x0), x10)
	var x124 uint32
	cmovznzU32(&x124, x119, uint32(0x0), x11)
	var x125 uint32
	cmovznzU32(&x125, x119, uint32(0x0), x12)
	var x126 uint32
	cmovznzU32(&x126, x119, uint32(0x0), x13)
	var x127 uint32
	cmovznzU32(&x127, x119, uint32(0x0), x14)
	var x128 uint32
	var x129 uint32
	x128, x129 = bits.Add32(x31, x120, uint32(0x0))
	var x130 uint32
	var x131 uint32
	x130, x131 = bits.Add32(x32, x121, uint32(uint1(x129)))
	var x132 uint32
	var x133 uint32
	x132, x133 = bits.Add32(x33, x122, uint32(uint1(x131)))
	var x134 uint32
	var x135 uint32
	x134, x135 = bits.Add32(x34, x123, uint32(uint1(x133)))
	var x136 uint32
	var x137 uint32
	x136, x137 = bits.Add32(x35, x124, uint32(uint1(x135)))
	var x138 uint32
	var x139 uint32
	x138, x139 = bits.Add32(x36, x125, uint32(uint1(x137)))
	var x140 uint32
	var x141 uint32
	x140, x141 = bits.Add32(x37, x126, uint32(uint1(x139)))
	var x142 uint32
	x142, _ = bits.Add32(x38, x127, uint32(uint1(x141)))
	var x144 uint32
	cmovznzU32(&x144, x119, uint32(0x0), x39)
	var x145 uint32
	cmovznzU32(&x145, x119, uint32(0x0), x40)
	var x146 uint32
	cmovznzU32(&x146, x119, uint32(0x0), x41)
	var x147 uint32
	cmovznzU32(&x147, x119, uint32(0x0), x42)
	var x148 uint32
	cmovznzU32(&x148, x119, uint32(0x0), x43)
	var x149 uint32
	cmovznzU32(&x149, x119, uint32(0x0), x44)
	var x150 uint32
	cmovznzU32(&x150, x119, uint32(0x0), x45)
	var x151 uint32
	var x152 uint32
	x151, x152 = bits.Add32(x112, x144, uint32(0x0))
	var x153 uint32
	var x154 uint32
	x153, x154 = bits.Add32(x113, x145, uint32(uint1(x152)))
	var x155 uint32
	var x156 uint32
	x155, x156 = bits.Add32(x114, x146, uint32(uint1(x154)))
	var x157 uint32
	var x158 uint32
	x157, x158 = bits.Add32(x115, x147, uint32(uint1(x156)))
	var x159 uint32
	var x160 uint32
	x159, x160 = bits.Add32(x116, x148, uint32(uint1(x158)))
	var x161 uint32
	var x162 uint32
	x161, x162 = bits.Add32(x117, x149, uint32(uint1(x160)))
	var x163 uint32
	var x164 uint32
	x163, x164 = bits.Add32(x118, x150, uint32(uint1(x162)))
	var x165 uint32
	var x166 uint32
	x165, x166 = bits.Sub32(x151, uint32(0x1), uint32(0x0))
	var x167 uint32
	var x168 uint32
	x167, x168 = bits.Sub32(x153, uint32(0x0), uint32(uint1(x166)))
	var x169 uint32
	var x170 uint32
	x169, x170 = bits.Sub32(x155, uint32(0x0), uint32(uint1(x168)))
	var x171 uint32
	var x172 uint32
	x171, x172 = bits.Sub32(x157, 0xffffffff, uint32(uint1(x170)))
	var x173 uint32
	var x174 uint32
	x173, x174 = bits.Sub32(x159, 0xffffffff, uint32(uint1(x172)))
	var x175 uint32
	var x176 uint32
	x175, x176 = bits.Sub32(x161, 0xffffffff, uint32(uint1(x174)))
	var x177 uint32
	var x178 uint32
	x177, x178 = bits.Sub32(x163, 0xffffffff, uint32(uint1(x176)))
	var x180 uint32
	_, x180 = bits.Sub32(uint32(uint1(x164)), uint32(0x0), uint32(uint1(x178)))
	var x181 uint32
	x181, _ = bits.Add32(x6, uint32(0x1), uint32(0x0))
	x183 := ((x128 >> 1) | ((x130 << 31) & 0xffffffff))
	x184 := ((x130 >> 1) | ((x132 << 31) & 0xffffffff))
	x185 := ((x132 >> 1) | ((x134 << 31) & 0xffffffff))
	x186 := ((x134 >> 1) | ((x136 << 31) & 0xffffffff))
	x187 := ((x136 >> 1) | ((x138 << 31) & 0xffffffff))
	x188 := ((x138 >> 1) | ((x140 << 31) & 0xffffffff))
	x189 := ((x140 >> 1) | ((x142 << 31) & 0xffffffff))
	x190 := ((x142 & 0x80000000) | (x142 >> 1))
	var x191 uint32
	cmovznzU32(&x191, uint1(x75), x60, x46)
	var x192 uint32
	cmovznzU32(&x192, uint1(x75), x62, x48)
	var x193 uint32
	cmovznzU32(&x193, uint1(x75), x64, x50)
	var x194 uint32
	cmovznzU32(&x194, uint1(x75), x66, x52)
	var x195 uint32
	cmovznzU32(&x195, uint1(x75), x68, x54)
	var x196 uint32
	cmovznzU32(&x196, uint1(x75), x70, x56)
	var x197 uint32
	cmovznzU32(&x197, uint1(x75), x72, x58)
	var x198 uint32
	cmovznzU32(&x198, uint1(x180), x165, x151)
	var x199 uint32
	cmovznzU32(&x199, uint1(x180), x167, x153)
	var x200 uint32
	cmovznzU32(&x200, uint1(x180), x169, x155)
	var x201 uint32
	cmovznzU32(&x201, uint1(x180), x171, x157)
	var x202 uint32
	cmovznzU32(&x202, uint1(x180), x173, x159)
	var x203 uint32
	cmovznzU32(&x203, uint1(x180), x175, x161)
	var x204 uint32
	cmovznzU32(&x204, uint1(x180), x177, x163)
	*out1 = x181
	out2[0] = x7
	out2[1] = x8
	out2[2] = x9
	out2[3] = x10
	out2[4] = x11
	out2[5] = x12
	out2[6] = x13
	out2[7] = x14
	out3[0] = x183
	out3[1] = x184
	out3[2] = x185
	out3[3] = x186
	out3[4] = x187
	out3[5] = x188
	out3[6] = x189
	out3[7] = x190
	out4[0] = x191
	out4[1] = x192
	out4[2] = x193
	out4[3] = x194
	out4[4] = x195
	out4[5] = x196
	out4[6] = x197
	out5[0] = x198
	out5[1] = x199
	out5[2] = x200
	out5[3] = x201
	out5[4] = x202
	out5[5] = x203
	out5[6] = x204
}

// DivstepPrecomp returns the precomputed value for Bernstein-Yang-inversion (in montgomery form).
//
// Postconditions:
//   eval (from_montgomery out1) = ⌊(m - 1) / 2⌋^(if ⌊log2 m⌋ + 1 < 46 then ⌊(49 * (⌊log2 m⌋ + 1) + 80) / 17⌋ else ⌊(49 * (⌊log2 m⌋ + 1) + 57) / 17⌋)
//   0 ≤ eval out1 < m
//
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func DivstepPrecomp(out1 *[7]uint32) {
	out1[0] = 0x800000
	out1[1] = 0x800000
	out1[2] = 0xfe000000
	out1[3] = 0xffffff
	out1[4] = uint32(0x0)
	out1[5] = 0xff800000
	out1[6] = 0x17fffff
}

// The function JumpdivstepPrecomp returns the precomputed value for the jump-version of Bernstein-Yang-inversion (in montgomery form).
//
// Postconditions:
//   eval (from_montgomery out1) = ⌊(m - 1) / 2⌋^(if ⌊log2 m⌋ + 1 < 46 then ⌊(49 * (⌊log2 m⌋ + 1) + 80) / 17⌋ else ⌊(49 * (⌊log2 m⌋ + 1) + 57) / 17⌋)
//   0 ≤ eval out1 < m
//
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func JumpdivstepPrecomp(out1 *[7]uint32) {
	out1[0] = 0x6da4c010
	out1[1] = 0xbbc76ff2
	out1[2] = 0x841ea00b
	out1[3] = 0xe698dfe5
	out1[4] = 0x3de75016
	out1[5] = 0x79cbafec
	out1[6] = 0x5f4cf011
}

// The function OuterLoopBody computes the body of the outer loop in BY-inversion (jumpdivstep version).
//
// Postconditions:
//   0 ≤ eval arg1 < m
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   out2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   out3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   out4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func OuterLoopBody(out1 *[8]uint32, out2 *[8]uint32, out3 *[7]uint32, out4 *[7]uint32, arg1 *[8]uint32, arg2 *[8]uint32, arg3 *[7]uint32, arg4 *[7]uint32) {
	var x1 uint32
	cmovznzU32(&x1, (uint1(arg2[0]) & 0x1), uint32(0x1), 0xffffffff)
	var x2 uint32
	cmovznzU32(&x2, (uint1(arg2[0]) & 0x1), arg1[0], arg2[0])
	var x3 uint32
	cmovznzU32(&x3, (uint1(arg2[0]) & 0x1), arg2[0], (uint32((uint64((^arg1[0])) + uint64(0x1))) & 0xffffffff))
	var x4 uint1
	cmovznzU1(&x4, (uint1(arg2[0]) & 0x1), 0x1, 0x0)
	var x5 uint1
	cmovznzU1(&x5, (uint1(arg2[0]) & 0x1), 0x0, 0x1)
	var x6 uint32
	cmovznzU32(&x6, (uint1(arg2[0]) & 0x1), uint32(0x0), 0xffffffff)
	var x7 uint1
	cmovznzU1(&x7, (uint1(arg2[0]) & 0x1), 0x1, 0x0)
	var x8 uint32
	cmovznzU32(&x8, (uint1(x3) & 0x1), uint32(0x0), x2)
	var x9 uint1
	cmovznzU1(&x9, (uint1(x3) & 0x1), 0x0, x4)
	var x10 uint1
	cmovznzU1(&x10, (uint1(x3) & 0x1), 0x0, x5)
	x11 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x1))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x12 uint32
	cmovznzU32(&x12, (uint1((x11 >> 31)) & (uint1((((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x1))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x1))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x13 uint32
	cmovznzU32(&x13, (uint1((x11 >> 31)) & (uint1((((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) >> 1))) & 0x1)), x2, (((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) >> 1)))
	var x14 uint32
	cmovznzU32(&x14, (uint1((x11 >> 31)) & (uint1((((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) >> 1)), (uint32((uint64((^x2)) + uint64(0x1))) & 0xffffffff))
	var x15 uint32
	cmovznzU32(&x15, (uint1((x11 >> 31)) & (uint1((((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) >> 1))) & 0x1)), (uint32(x4) + uint32(x4)), (uint32((uint64(x6) + uint64(x9))) & 0xffffffff))
	var x16 uint32
	cmovznzU32(&x16, (uint1((x11 >> 31)) & (uint1((((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) >> 1))) & 0x1)), (uint32(x5) + uint32(x5)), (uint32(x7) + uint32(x10)))
	var x17 uint32
	cmovznzU32(&x17, (uint1((x11 >> 31)) & (uint1((((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x6) + uint64(x9))) & 0xffffffff), (uint32((uint64((^(uint32(x4) + uint32(x4)))) + uint64(0x1))) & 0xffffffff))
	var x18 uint32
	cmovznzU32(&x18, (uint1((x11 >> 31)) & (uint1((((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) >> 1))) & 0x1)), (uint32(x7) + uint32(x10)), (uint32((uint64((^(uint32(x5) + uint32(x5)))) + uint64(0x1))) & 0xffffffff))
	var x19 uint32
	cmovznzU32(&x19, (uint1(x14) & 0x1), uint32(0x0), x13)
	var x20 uint32
	cmovznzU32(&x20, (uint1(x14) & 0x1), uint32(0x0), x15)
	var x21 uint32
	cmovznzU32(&x21, (uint1(x14) & 0x1), uint32(0x0), x16)
	x22 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x12))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x23 uint32
	cmovznzU32(&x23, (uint1((x22 >> 31)) & (uint1((((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x12))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x12))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x24 uint32
	cmovznzU32(&x24, (uint1((x22 >> 31)) & (uint1((((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) >> 1))) & 0x1)), x13, (((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) >> 1)))
	var x25 uint32
	cmovznzU32(&x25, (uint1((x22 >> 31)) & (uint1((((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) >> 1)), (uint32((uint64((^x13)) + uint64(0x1))) & 0xffffffff))
	var x26 uint32
	cmovznzU32(&x26, (uint1((x22 >> 31)) & (uint1((((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x15) + uint64(x15))) & 0xffffffff), (uint32((uint64(x17) + uint64(x20))) & 0xffffffff))
	var x27 uint32
	cmovznzU32(&x27, (uint1((x22 >> 31)) & (uint1((((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) >> 1))) & 0x1)), (x16 + x16), (uint32((uint64(x18) + uint64(x21))) & 0xffffffff))
	var x28 uint32
	cmovznzU32(&x28, (uint1((x22 >> 31)) & (uint1((((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x17) + uint64(x20))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x15) + uint64(x15))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x29 uint32
	cmovznzU32(&x29, (uint1((x22 >> 31)) & (uint1((((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x18) + uint64(x21))) & 0xffffffff), (uint32((uint64((^(x16 + x16))) + uint64(0x1))) & 0xffffffff))
	var x30 uint32
	cmovznzU32(&x30, (uint1(x25) & 0x1), uint32(0x0), x24)
	var x31 uint32
	cmovznzU32(&x31, (uint1(x25) & 0x1), uint32(0x0), x26)
	var x32 uint32
	cmovznzU32(&x32, (uint1(x25) & 0x1), uint32(0x0), x27)
	x33 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x23))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x34 uint32
	cmovznzU32(&x34, (uint1((x33 >> 31)) & (uint1((((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x23))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x23))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x35 uint32
	cmovznzU32(&x35, (uint1((x33 >> 31)) & (uint1((((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) >> 1))) & 0x1)), x24, (((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) >> 1)))
	var x36 uint32
	cmovznzU32(&x36, (uint1((x33 >> 31)) & (uint1((((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) >> 1)), (uint32((uint64((^x24)) + uint64(0x1))) & 0xffffffff))
	var x37 uint32
	cmovznzU32(&x37, (uint1((x33 >> 31)) & (uint1((((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x26) + uint64(x26))) & 0xffffffff), (uint32((uint64(x28) + uint64(x31))) & 0xffffffff))
	var x38 uint32
	cmovznzU32(&x38, (uint1((x33 >> 31)) & (uint1((((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x27) + uint64(x27))) & 0xffffffff), (uint32((uint64(x29) + uint64(x32))) & 0xffffffff))
	var x39 uint32
	cmovznzU32(&x39, (uint1((x33 >> 31)) & (uint1((((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x28) + uint64(x31))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x26) + uint64(x26))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x40 uint32
	cmovznzU32(&x40, (uint1((x33 >> 31)) & (uint1((((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x29) + uint64(x32))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x27) + uint64(x27))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x41 uint32
	cmovznzU32(&x41, (uint1(x36) & 0x1), uint32(0x0), x35)
	var x42 uint32
	cmovznzU32(&x42, (uint1(x36) & 0x1), uint32(0x0), x37)
	var x43 uint32
	cmovznzU32(&x43, (uint1(x36) & 0x1), uint32(0x0), x38)
	x44 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x34))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x45 uint32
	cmovznzU32(&x45, (uint1((x44 >> 31)) & (uint1((((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x34))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x34))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x46 uint32
	cmovznzU32(&x46, (uint1((x44 >> 31)) & (uint1((((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) >> 1))) & 0x1)), x35, (((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) >> 1)))
	var x47 uint32
	cmovznzU32(&x47, (uint1((x44 >> 31)) & (uint1((((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) >> 1)), (uint32((uint64((^x35)) + uint64(0x1))) & 0xffffffff))
	var x48 uint32
	cmovznzU32(&x48, (uint1((x44 >> 31)) & (uint1((((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x37) + uint64(x37))) & 0xffffffff), (uint32((uint64(x39) + uint64(x42))) & 0xffffffff))
	var x49 uint32
	cmovznzU32(&x49, (uint1((x44 >> 31)) & (uint1((((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x38) + uint64(x38))) & 0xffffffff), (uint32((uint64(x40) + uint64(x43))) & 0xffffffff))
	var x50 uint32
	cmovznzU32(&x50, (uint1((x44 >> 31)) & (uint1((((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x39) + uint64(x42))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x37) + uint64(x37))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x51 uint32
	cmovznzU32(&x51, (uint1((x44 >> 31)) & (uint1((((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x40) + uint64(x43))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x38) + uint64(x38))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x52 uint32
	cmovznzU32(&x52, (uint1(x47) & 0x1), uint32(0x0), x46)
	var x53 uint32
	cmovznzU32(&x53, (uint1(x47) & 0x1), uint32(0x0), x48)
	var x54 uint32
	cmovznzU32(&x54, (uint1(x47) & 0x1), uint32(0x0), x49)
	x55 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x45))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x56 uint32
	cmovznzU32(&x56, (uint1((x55 >> 31)) & (uint1((((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x45))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x45))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x57 uint32
	cmovznzU32(&x57, (uint1((x55 >> 31)) & (uint1((((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) >> 1))) & 0x1)), x46, (((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) >> 1)))
	var x58 uint32
	cmovznzU32(&x58, (uint1((x55 >> 31)) & (uint1((((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) >> 1)), (uint32((uint64((^x46)) + uint64(0x1))) & 0xffffffff))
	var x59 uint32
	cmovznzU32(&x59, (uint1((x55 >> 31)) & (uint1((((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x48) + uint64(x48))) & 0xffffffff), (uint32((uint64(x50) + uint64(x53))) & 0xffffffff))
	var x60 uint32
	cmovznzU32(&x60, (uint1((x55 >> 31)) & (uint1((((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x49) + uint64(x49))) & 0xffffffff), (uint32((uint64(x51) + uint64(x54))) & 0xffffffff))
	var x61 uint32
	cmovznzU32(&x61, (uint1((x55 >> 31)) & (uint1((((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x50) + uint64(x53))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x48) + uint64(x48))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x62 uint32
	cmovznzU32(&x62, (uint1((x55 >> 31)) & (uint1((((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x51) + uint64(x54))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x49) + uint64(x49))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x63 uint32
	cmovznzU32(&x63, (uint1(x58) & 0x1), uint32(0x0), x57)
	var x64 uint32
	cmovznzU32(&x64, (uint1(x58) & 0x1), uint32(0x0), x59)
	var x65 uint32
	cmovznzU32(&x65, (uint1(x58) & 0x1), uint32(0x0), x60)
	x66 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x56))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x67 uint32
	cmovznzU32(&x67, (uint1((x66 >> 31)) & (uint1((((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x56))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x56))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x68 uint32
	cmovznzU32(&x68, (uint1((x66 >> 31)) & (uint1((((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) >> 1))) & 0x1)), x57, (((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) >> 1)))
	var x69 uint32
	cmovznzU32(&x69, (uint1((x66 >> 31)) & (uint1((((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) >> 1)), (uint32((uint64((^x57)) + uint64(0x1))) & 0xffffffff))
	var x70 uint32
	cmovznzU32(&x70, (uint1((x66 >> 31)) & (uint1((((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x59) + uint64(x59))) & 0xffffffff), (uint32((uint64(x61) + uint64(x64))) & 0xffffffff))
	var x71 uint32
	cmovznzU32(&x71, (uint1((x66 >> 31)) & (uint1((((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x60) + uint64(x60))) & 0xffffffff), (uint32((uint64(x62) + uint64(x65))) & 0xffffffff))
	var x72 uint32
	cmovznzU32(&x72, (uint1((x66 >> 31)) & (uint1((((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x61) + uint64(x64))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x59) + uint64(x59))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x73 uint32
	cmovznzU32(&x73, (uint1((x66 >> 31)) & (uint1((((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x62) + uint64(x65))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x60) + uint64(x60))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x74 uint32
	cmovznzU32(&x74, (uint1(x69) & 0x1), uint32(0x0), x68)
	var x75 uint32
	cmovznzU32(&x75, (uint1(x69) & 0x1), uint32(0x0), x70)
	var x76 uint32
	cmovznzU32(&x76, (uint1(x69) & 0x1), uint32(0x0), x71)
	x77 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x67))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x78 uint32
	cmovznzU32(&x78, (uint1((x77 >> 31)) & (uint1((((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x67))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x67))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x79 uint32
	cmovznzU32(&x79, (uint1((x77 >> 31)) & (uint1((((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) >> 1))) & 0x1)), x68, (((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) >> 1)))
	var x80 uint32
	cmovznzU32(&x80, (uint1((x77 >> 31)) & (uint1((((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) >> 1)), (uint32((uint64((^x68)) + uint64(0x1))) & 0xffffffff))
	var x81 uint32
	cmovznzU32(&x81, (uint1((x77 >> 31)) & (uint1((((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x70) + uint64(x70))) & 0xffffffff), (uint32((uint64(x72) + uint64(x75))) & 0xffffffff))
	var x82 uint32
	cmovznzU32(&x82, (uint1((x77 >> 31)) & (uint1((((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x71) + uint64(x71))) & 0xffffffff), (uint32((uint64(x73) + uint64(x76))) & 0xffffffff))
	var x83 uint32
	cmovznzU32(&x83, (uint1((x77 >> 31)) & (uint1((((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x72) + uint64(x75))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x70) + uint64(x70))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x84 uint32
	cmovznzU32(&x84, (uint1((x77 >> 31)) & (uint1((((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x73) + uint64(x76))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x71) + uint64(x71))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x85 uint32
	cmovznzU32(&x85, (uint1(x80) & 0x1), uint32(0x0), x79)
	var x86 uint32
	cmovznzU32(&x86, (uint1(x80) & 0x1), uint32(0x0), x81)
	var x87 uint32
	cmovznzU32(&x87, (uint1(x80) & 0x1), uint32(0x0), x82)
	x88 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x78))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x89 uint32
	cmovznzU32(&x89, (uint1((x88 >> 31)) & (uint1((((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x78))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x78))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x90 uint32
	cmovznzU32(&x90, (uint1((x88 >> 31)) & (uint1((((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) >> 1))) & 0x1)), x79, (((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) >> 1)))
	var x91 uint32
	cmovznzU32(&x91, (uint1((x88 >> 31)) & (uint1((((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) >> 1)), (uint32((uint64((^x79)) + uint64(0x1))) & 0xffffffff))
	var x92 uint32
	cmovznzU32(&x92, (uint1((x88 >> 31)) & (uint1((((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x81) + uint64(x81))) & 0xffffffff), (uint32((uint64(x83) + uint64(x86))) & 0xffffffff))
	var x93 uint32
	cmovznzU32(&x93, (uint1((x88 >> 31)) & (uint1((((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x82) + uint64(x82))) & 0xffffffff), (uint32((uint64(x84) + uint64(x87))) & 0xffffffff))
	var x94 uint32
	cmovznzU32(&x94, (uint1((x88 >> 31)) & (uint1((((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x83) + uint64(x86))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x81) + uint64(x81))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x95 uint32
	cmovznzU32(&x95, (uint1((x88 >> 31)) & (uint1((((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x84) + uint64(x87))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x82) + uint64(x82))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x96 uint32
	cmovznzU32(&x96, (uint1(x91) & 0x1), uint32(0x0), x90)
	var x97 uint32
	cmovznzU32(&x97, (uint1(x91) & 0x1), uint32(0x0), x92)
	var x98 uint32
	cmovznzU32(&x98, (uint1(x91) & 0x1), uint32(0x0), x93)
	x99 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x89))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x100 uint32
	cmovznzU32(&x100, (uint1((x99 >> 31)) & (uint1((((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x89))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x89))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x101 uint32
	cmovznzU32(&x101, (uint1((x99 >> 31)) & (uint1((((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) >> 1))) & 0x1)), x90, (((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) >> 1)))
	var x102 uint32
	cmovznzU32(&x102, (uint1((x99 >> 31)) & (uint1((((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) >> 1)), (uint32((uint64((^x90)) + uint64(0x1))) & 0xffffffff))
	var x103 uint32
	cmovznzU32(&x103, (uint1((x99 >> 31)) & (uint1((((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x92) + uint64(x92))) & 0xffffffff), (uint32((uint64(x94) + uint64(x97))) & 0xffffffff))
	var x104 uint32
	cmovznzU32(&x104, (uint1((x99 >> 31)) & (uint1((((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x93) + uint64(x93))) & 0xffffffff), (uint32((uint64(x95) + uint64(x98))) & 0xffffffff))
	var x105 uint32
	cmovznzU32(&x105, (uint1((x99 >> 31)) & (uint1((((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x94) + uint64(x97))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x92) + uint64(x92))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x106 uint32
	cmovznzU32(&x106, (uint1((x99 >> 31)) & (uint1((((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x95) + uint64(x98))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x93) + uint64(x93))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x107 uint32
	cmovznzU32(&x107, (uint1(x102) & 0x1), uint32(0x0), x101)
	var x108 uint32
	cmovznzU32(&x108, (uint1(x102) & 0x1), uint32(0x0), x103)
	var x109 uint32
	cmovznzU32(&x109, (uint1(x102) & 0x1), uint32(0x0), x104)
	x110 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x100))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x111 uint32
	cmovznzU32(&x111, (uint1((x110 >> 31)) & (uint1((((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x100))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x100))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x112 uint32
	cmovznzU32(&x112, (uint1((x110 >> 31)) & (uint1((((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) >> 1))) & 0x1)), x101, (((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) >> 1)))
	var x113 uint32
	cmovznzU32(&x113, (uint1((x110 >> 31)) & (uint1((((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) >> 1)), (uint32((uint64((^x101)) + uint64(0x1))) & 0xffffffff))
	var x114 uint32
	cmovznzU32(&x114, (uint1((x110 >> 31)) & (uint1((((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x103) + uint64(x103))) & 0xffffffff), (uint32((uint64(x105) + uint64(x108))) & 0xffffffff))
	var x115 uint32
	cmovznzU32(&x115, (uint1((x110 >> 31)) & (uint1((((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x104) + uint64(x104))) & 0xffffffff), (uint32((uint64(x106) + uint64(x109))) & 0xffffffff))
	var x116 uint32
	cmovznzU32(&x116, (uint1((x110 >> 31)) & (uint1((((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x105) + uint64(x108))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x103) + uint64(x103))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x117 uint32
	cmovznzU32(&x117, (uint1((x110 >> 31)) & (uint1((((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x106) + uint64(x109))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x104) + uint64(x104))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x118 uint32
	cmovznzU32(&x118, (uint1(x113) & 0x1), uint32(0x0), x112)
	var x119 uint32
	cmovznzU32(&x119, (uint1(x113) & 0x1), uint32(0x0), x114)
	var x120 uint32
	cmovznzU32(&x120, (uint1(x113) & 0x1), uint32(0x0), x115)
	x121 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x111))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x122 uint32
	cmovznzU32(&x122, (uint1((x121 >> 31)) & (uint1((((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x111))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x111))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x123 uint32
	cmovznzU32(&x123, (uint1((x121 >> 31)) & (uint1((((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) >> 1))) & 0x1)), x112, (((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) >> 1)))
	var x124 uint32
	cmovznzU32(&x124, (uint1((x121 >> 31)) & (uint1((((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) >> 1)), (uint32((uint64((^x112)) + uint64(0x1))) & 0xffffffff))
	var x125 uint32
	cmovznzU32(&x125, (uint1((x121 >> 31)) & (uint1((((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x114) + uint64(x114))) & 0xffffffff), (uint32((uint64(x116) + uint64(x119))) & 0xffffffff))
	var x126 uint32
	cmovznzU32(&x126, (uint1((x121 >> 31)) & (uint1((((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x115) + uint64(x115))) & 0xffffffff), (uint32((uint64(x117) + uint64(x120))) & 0xffffffff))
	var x127 uint32
	cmovznzU32(&x127, (uint1((x121 >> 31)) & (uint1((((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x116) + uint64(x119))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x114) + uint64(x114))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x128 uint32
	cmovznzU32(&x128, (uint1((x121 >> 31)) & (uint1((((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x117) + uint64(x120))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x115) + uint64(x115))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x129 uint32
	cmovznzU32(&x129, (uint1(x124) & 0x1), uint32(0x0), x123)
	var x130 uint32
	cmovznzU32(&x130, (uint1(x124) & 0x1), uint32(0x0), x125)
	var x131 uint32
	cmovznzU32(&x131, (uint1(x124) & 0x1), uint32(0x0), x126)
	x132 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x122))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x133 uint32
	cmovznzU32(&x133, (uint1((x132 >> 31)) & (uint1((((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x122))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x122))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x134 uint32
	cmovznzU32(&x134, (uint1((x132 >> 31)) & (uint1((((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) >> 1))) & 0x1)), x123, (((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) >> 1)))
	var x135 uint32
	cmovznzU32(&x135, (uint1((x132 >> 31)) & (uint1((((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) >> 1)), (uint32((uint64((^x123)) + uint64(0x1))) & 0xffffffff))
	var x136 uint32
	cmovznzU32(&x136, (uint1((x132 >> 31)) & (uint1((((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x125) + uint64(x125))) & 0xffffffff), (uint32((uint64(x127) + uint64(x130))) & 0xffffffff))
	var x137 uint32
	cmovznzU32(&x137, (uint1((x132 >> 31)) & (uint1((((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x126) + uint64(x126))) & 0xffffffff), (uint32((uint64(x128) + uint64(x131))) & 0xffffffff))
	var x138 uint32
	cmovznzU32(&x138, (uint1((x132 >> 31)) & (uint1((((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x127) + uint64(x130))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x125) + uint64(x125))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x139 uint32
	cmovznzU32(&x139, (uint1((x132 >> 31)) & (uint1((((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x128) + uint64(x131))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x126) + uint64(x126))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x140 uint32
	cmovznzU32(&x140, (uint1(x135) & 0x1), uint32(0x0), x134)
	var x141 uint32
	cmovznzU32(&x141, (uint1(x135) & 0x1), uint32(0x0), x136)
	var x142 uint32
	cmovznzU32(&x142, (uint1(x135) & 0x1), uint32(0x0), x137)
	x143 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x133))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x144 uint32
	cmovznzU32(&x144, (uint1((x143 >> 31)) & (uint1((((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x133))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x133))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x145 uint32
	cmovznzU32(&x145, (uint1((x143 >> 31)) & (uint1((((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) >> 1))) & 0x1)), x134, (((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) >> 1)))
	var x146 uint32
	cmovznzU32(&x146, (uint1((x143 >> 31)) & (uint1((((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) >> 1)), (uint32((uint64((^x134)) + uint64(0x1))) & 0xffffffff))
	var x147 uint32
	cmovznzU32(&x147, (uint1((x143 >> 31)) & (uint1((((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x136) + uint64(x136))) & 0xffffffff), (uint32((uint64(x138) + uint64(x141))) & 0xffffffff))
	var x148 uint32
	cmovznzU32(&x148, (uint1((x143 >> 31)) & (uint1((((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x137) + uint64(x137))) & 0xffffffff), (uint32((uint64(x139) + uint64(x142))) & 0xffffffff))
	var x149 uint32
	cmovznzU32(&x149, (uint1((x143 >> 31)) & (uint1((((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x138) + uint64(x141))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x136) + uint64(x136))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x150 uint32
	cmovznzU32(&x150, (uint1((x143 >> 31)) & (uint1((((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x139) + uint64(x142))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x137) + uint64(x137))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x151 uint32
	cmovznzU32(&x151, (uint1(x146) & 0x1), uint32(0x0), x145)
	var x152 uint32
	cmovznzU32(&x152, (uint1(x146) & 0x1), uint32(0x0), x147)
	var x153 uint32
	cmovznzU32(&x153, (uint1(x146) & 0x1), uint32(0x0), x148)
	x154 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x144))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x155 uint32
	cmovznzU32(&x155, (uint1((x154 >> 31)) & (uint1((((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x144))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x144))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x156 uint32
	cmovznzU32(&x156, (uint1((x154 >> 31)) & (uint1((((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) >> 1))) & 0x1)), x145, (((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) >> 1)))
	var x157 uint32
	cmovznzU32(&x157, (uint1((x154 >> 31)) & (uint1((((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) >> 1)), (uint32((uint64((^x145)) + uint64(0x1))) & 0xffffffff))
	var x158 uint32
	cmovznzU32(&x158, (uint1((x154 >> 31)) & (uint1((((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x147) + uint64(x147))) & 0xffffffff), (uint32((uint64(x149) + uint64(x152))) & 0xffffffff))
	var x159 uint32
	cmovznzU32(&x159, (uint1((x154 >> 31)) & (uint1((((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x148) + uint64(x148))) & 0xffffffff), (uint32((uint64(x150) + uint64(x153))) & 0xffffffff))
	var x160 uint32
	cmovznzU32(&x160, (uint1((x154 >> 31)) & (uint1((((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x149) + uint64(x152))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x147) + uint64(x147))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x161 uint32
	cmovznzU32(&x161, (uint1((x154 >> 31)) & (uint1((((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x150) + uint64(x153))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x148) + uint64(x148))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x162 uint32
	cmovznzU32(&x162, (uint1(x157) & 0x1), uint32(0x0), x156)
	var x163 uint32
	cmovznzU32(&x163, (uint1(x157) & 0x1), uint32(0x0), x158)
	var x164 uint32
	cmovznzU32(&x164, (uint1(x157) & 0x1), uint32(0x0), x159)
	x165 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x155))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x166 uint32
	cmovznzU32(&x166, (uint1((x165 >> 31)) & (uint1((((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x155))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x155))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x167 uint32
	cmovznzU32(&x167, (uint1((x165 >> 31)) & (uint1((((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) >> 1))) & 0x1)), x156, (((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) >> 1)))
	var x168 uint32
	cmovznzU32(&x168, (uint1((x165 >> 31)) & (uint1((((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) >> 1)), (uint32((uint64((^x156)) + uint64(0x1))) & 0xffffffff))
	var x169 uint32
	cmovznzU32(&x169, (uint1((x165 >> 31)) & (uint1((((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x158) + uint64(x158))) & 0xffffffff), (uint32((uint64(x160) + uint64(x163))) & 0xffffffff))
	var x170 uint32
	cmovznzU32(&x170, (uint1((x165 >> 31)) & (uint1((((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x159) + uint64(x159))) & 0xffffffff), (uint32((uint64(x161) + uint64(x164))) & 0xffffffff))
	var x171 uint32
	cmovznzU32(&x171, (uint1((x165 >> 31)) & (uint1((((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x160) + uint64(x163))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x158) + uint64(x158))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x172 uint32
	cmovznzU32(&x172, (uint1((x165 >> 31)) & (uint1((((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x161) + uint64(x164))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x159) + uint64(x159))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x173 uint32
	cmovznzU32(&x173, (uint1(x168) & 0x1), uint32(0x0), x167)
	var x174 uint32
	cmovznzU32(&x174, (uint1(x168) & 0x1), uint32(0x0), x169)
	var x175 uint32
	cmovznzU32(&x175, (uint1(x168) & 0x1), uint32(0x0), x170)
	x176 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x166))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x177 uint32
	cmovznzU32(&x177, (uint1((x176 >> 31)) & (uint1((((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x166))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x166))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x178 uint32
	cmovznzU32(&x178, (uint1((x176 >> 31)) & (uint1((((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) >> 1))) & 0x1)), x167, (((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) >> 1)))
	var x179 uint32
	cmovznzU32(&x179, (uint1((x176 >> 31)) & (uint1((((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) >> 1)), (uint32((uint64((^x167)) + uint64(0x1))) & 0xffffffff))
	var x180 uint32
	cmovznzU32(&x180, (uint1((x176 >> 31)) & (uint1((((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x169) + uint64(x169))) & 0xffffffff), (uint32((uint64(x171) + uint64(x174))) & 0xffffffff))
	var x181 uint32
	cmovznzU32(&x181, (uint1((x176 >> 31)) & (uint1((((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x170) + uint64(x170))) & 0xffffffff), (uint32((uint64(x172) + uint64(x175))) & 0xffffffff))
	var x182 uint32
	cmovznzU32(&x182, (uint1((x176 >> 31)) & (uint1((((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x171) + uint64(x174))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x169) + uint64(x169))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x183 uint32
	cmovznzU32(&x183, (uint1((x176 >> 31)) & (uint1((((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x172) + uint64(x175))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x170) + uint64(x170))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x184 uint32
	cmovznzU32(&x184, (uint1(x179) & 0x1), uint32(0x0), x178)
	var x185 uint32
	cmovznzU32(&x185, (uint1(x179) & 0x1), uint32(0x0), x180)
	var x186 uint32
	cmovznzU32(&x186, (uint1(x179) & 0x1), uint32(0x0), x181)
	x187 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x177))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x188 uint32
	cmovznzU32(&x188, (uint1((x187 >> 31)) & (uint1((((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x177))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x177))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x189 uint32
	cmovznzU32(&x189, (uint1((x187 >> 31)) & (uint1((((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) >> 1))) & 0x1)), x178, (((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) >> 1)))
	var x190 uint32
	cmovznzU32(&x190, (uint1((x187 >> 31)) & (uint1((((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) >> 1)), (uint32((uint64((^x178)) + uint64(0x1))) & 0xffffffff))
	var x191 uint32
	cmovznzU32(&x191, (uint1((x187 >> 31)) & (uint1((((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x180) + uint64(x180))) & 0xffffffff), (uint32((uint64(x182) + uint64(x185))) & 0xffffffff))
	var x192 uint32
	cmovznzU32(&x192, (uint1((x187 >> 31)) & (uint1((((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x181) + uint64(x181))) & 0xffffffff), (uint32((uint64(x183) + uint64(x186))) & 0xffffffff))
	var x193 uint32
	cmovznzU32(&x193, (uint1((x187 >> 31)) & (uint1((((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x182) + uint64(x185))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x180) + uint64(x180))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x194 uint32
	cmovznzU32(&x194, (uint1((x187 >> 31)) & (uint1((((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x183) + uint64(x186))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x181) + uint64(x181))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x195 uint32
	cmovznzU32(&x195, (uint1(x190) & 0x1), uint32(0x0), x189)
	var x196 uint32
	cmovznzU32(&x196, (uint1(x190) & 0x1), uint32(0x0), x191)
	var x197 uint32
	cmovznzU32(&x197, (uint1(x190) & 0x1), uint32(0x0), x192)
	x198 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x188))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x199 uint32
	cmovznzU32(&x199, (uint1((x198 >> 31)) & (uint1((((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x188))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x188))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x200 uint32
	cmovznzU32(&x200, (uint1((x198 >> 31)) & (uint1((((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) >> 1))) & 0x1)), x189, (((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) >> 1)))
	var x201 uint32
	cmovznzU32(&x201, (uint1((x198 >> 31)) & (uint1((((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) >> 1)), (uint32((uint64((^x189)) + uint64(0x1))) & 0xffffffff))
	var x202 uint32
	cmovznzU32(&x202, (uint1((x198 >> 31)) & (uint1((((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x191) + uint64(x191))) & 0xffffffff), (uint32((uint64(x193) + uint64(x196))) & 0xffffffff))
	var x203 uint32
	cmovznzU32(&x203, (uint1((x198 >> 31)) & (uint1((((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x192) + uint64(x192))) & 0xffffffff), (uint32((uint64(x194) + uint64(x197))) & 0xffffffff))
	var x204 uint32
	cmovznzU32(&x204, (uint1((x198 >> 31)) & (uint1((((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x193) + uint64(x196))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x191) + uint64(x191))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x205 uint32
	cmovznzU32(&x205, (uint1((x198 >> 31)) & (uint1((((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x194) + uint64(x197))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x192) + uint64(x192))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x206 uint32
	cmovznzU32(&x206, (uint1(x201) & 0x1), uint32(0x0), x200)
	var x207 uint32
	cmovznzU32(&x207, (uint1(x201) & 0x1), uint32(0x0), x202)
	var x208 uint32
	cmovznzU32(&x208, (uint1(x201) & 0x1), uint32(0x0), x203)
	x209 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x199))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x210 uint32
	cmovznzU32(&x210, (uint1((x209 >> 31)) & (uint1((((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x199))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x199))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x211 uint32
	cmovznzU32(&x211, (uint1((x209 >> 31)) & (uint1((((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) >> 1))) & 0x1)), x200, (((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) >> 1)))
	var x212 uint32
	cmovznzU32(&x212, (uint1((x209 >> 31)) & (uint1((((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) >> 1)), (uint32((uint64((^x200)) + uint64(0x1))) & 0xffffffff))
	var x213 uint32
	cmovznzU32(&x213, (uint1((x209 >> 31)) & (uint1((((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x202) + uint64(x202))) & 0xffffffff), (uint32((uint64(x204) + uint64(x207))) & 0xffffffff))
	var x214 uint32
	cmovznzU32(&x214, (uint1((x209 >> 31)) & (uint1((((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x203) + uint64(x203))) & 0xffffffff), (uint32((uint64(x205) + uint64(x208))) & 0xffffffff))
	var x215 uint32
	cmovznzU32(&x215, (uint1((x209 >> 31)) & (uint1((((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x204) + uint64(x207))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x202) + uint64(x202))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x216 uint32
	cmovznzU32(&x216, (uint1((x209 >> 31)) & (uint1((((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x205) + uint64(x208))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x203) + uint64(x203))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x217 uint32
	cmovznzU32(&x217, (uint1(x212) & 0x1), uint32(0x0), x211)
	var x218 uint32
	cmovznzU32(&x218, (uint1(x212) & 0x1), uint32(0x0), x213)
	var x219 uint32
	cmovznzU32(&x219, (uint1(x212) & 0x1), uint32(0x0), x214)
	x220 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x210))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x221 uint32
	cmovznzU32(&x221, (uint1((x220 >> 31)) & (uint1((((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x210))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x210))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x222 uint32
	cmovznzU32(&x222, (uint1((x220 >> 31)) & (uint1((((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) >> 1))) & 0x1)), x211, (((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) >> 1)))
	var x223 uint32
	cmovznzU32(&x223, (uint1((x220 >> 31)) & (uint1((((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) >> 1)), (uint32((uint64((^x211)) + uint64(0x1))) & 0xffffffff))
	var x224 uint32
	cmovznzU32(&x224, (uint1((x220 >> 31)) & (uint1((((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x213) + uint64(x213))) & 0xffffffff), (uint32((uint64(x215) + uint64(x218))) & 0xffffffff))
	var x225 uint32
	cmovznzU32(&x225, (uint1((x220 >> 31)) & (uint1((((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x214) + uint64(x214))) & 0xffffffff), (uint32((uint64(x216) + uint64(x219))) & 0xffffffff))
	var x226 uint32
	cmovznzU32(&x226, (uint1((x220 >> 31)) & (uint1((((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x215) + uint64(x218))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x213) + uint64(x213))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x227 uint32
	cmovznzU32(&x227, (uint1((x220 >> 31)) & (uint1((((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x216) + uint64(x219))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x214) + uint64(x214))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x228 uint32
	cmovznzU32(&x228, (uint1(x223) & 0x1), uint32(0x0), x222)
	var x229 uint32
	cmovznzU32(&x229, (uint1(x223) & 0x1), uint32(0x0), x224)
	var x230 uint32
	cmovznzU32(&x230, (uint1(x223) & 0x1), uint32(0x0), x225)
	x231 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x221))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x232 uint32
	cmovznzU32(&x232, (uint1((x231 >> 31)) & (uint1((((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x221))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x221))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x233 uint32
	cmovznzU32(&x233, (uint1((x231 >> 31)) & (uint1((((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) >> 1))) & 0x1)), x222, (((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) >> 1)))
	var x234 uint32
	cmovznzU32(&x234, (uint1((x231 >> 31)) & (uint1((((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) >> 1)), (uint32((uint64((^x222)) + uint64(0x1))) & 0xffffffff))
	var x235 uint32
	cmovznzU32(&x235, (uint1((x231 >> 31)) & (uint1((((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x224) + uint64(x224))) & 0xffffffff), (uint32((uint64(x226) + uint64(x229))) & 0xffffffff))
	var x236 uint32
	cmovznzU32(&x236, (uint1((x231 >> 31)) & (uint1((((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x225) + uint64(x225))) & 0xffffffff), (uint32((uint64(x227) + uint64(x230))) & 0xffffffff))
	var x237 uint32
	cmovznzU32(&x237, (uint1((x231 >> 31)) & (uint1((((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x226) + uint64(x229))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x224) + uint64(x224))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x238 uint32
	cmovznzU32(&x238, (uint1((x231 >> 31)) & (uint1((((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x227) + uint64(x230))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x225) + uint64(x225))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x239 uint32
	cmovznzU32(&x239, (uint1(x234) & 0x1), uint32(0x0), x233)
	var x240 uint32
	cmovznzU32(&x240, (uint1(x234) & 0x1), uint32(0x0), x235)
	var x241 uint32
	cmovznzU32(&x241, (uint1(x234) & 0x1), uint32(0x0), x236)
	x242 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x232))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x243 uint32
	cmovznzU32(&x243, (uint1((x242 >> 31)) & (uint1((((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x232))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x232))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x244 uint32
	cmovznzU32(&x244, (uint1((x242 >> 31)) & (uint1((((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) >> 1))) & 0x1)), x233, (((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) >> 1)))
	var x245 uint32
	cmovznzU32(&x245, (uint1((x242 >> 31)) & (uint1((((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) >> 1)), (uint32((uint64((^x233)) + uint64(0x1))) & 0xffffffff))
	var x246 uint32
	cmovznzU32(&x246, (uint1((x242 >> 31)) & (uint1((((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x235) + uint64(x235))) & 0xffffffff), (uint32((uint64(x237) + uint64(x240))) & 0xffffffff))
	var x247 uint32
	cmovznzU32(&x247, (uint1((x242 >> 31)) & (uint1((((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x236) + uint64(x236))) & 0xffffffff), (uint32((uint64(x238) + uint64(x241))) & 0xffffffff))
	var x248 uint32
	cmovznzU32(&x248, (uint1((x242 >> 31)) & (uint1((((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x237) + uint64(x240))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x235) + uint64(x235))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x249 uint32
	cmovznzU32(&x249, (uint1((x242 >> 31)) & (uint1((((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x238) + uint64(x241))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x236) + uint64(x236))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x250 uint32
	cmovznzU32(&x250, (uint1(x245) & 0x1), uint32(0x0), x244)
	var x251 uint32
	cmovznzU32(&x251, (uint1(x245) & 0x1), uint32(0x0), x246)
	var x252 uint32
	cmovznzU32(&x252, (uint1(x245) & 0x1), uint32(0x0), x247)
	x253 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x243))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x254 uint32
	cmovznzU32(&x254, (uint1((x253 >> 31)) & (uint1((((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x243))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x243))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x255 uint32
	cmovznzU32(&x255, (uint1((x253 >> 31)) & (uint1((((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) >> 1))) & 0x1)), x244, (((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) >> 1)))
	var x256 uint32
	cmovznzU32(&x256, (uint1((x253 >> 31)) & (uint1((((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) >> 1)), (uint32((uint64((^x244)) + uint64(0x1))) & 0xffffffff))
	var x257 uint32
	cmovznzU32(&x257, (uint1((x253 >> 31)) & (uint1((((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x246) + uint64(x246))) & 0xffffffff), (uint32((uint64(x248) + uint64(x251))) & 0xffffffff))
	var x258 uint32
	cmovznzU32(&x258, (uint1((x253 >> 31)) & (uint1((((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x247) + uint64(x247))) & 0xffffffff), (uint32((uint64(x249) + uint64(x252))) & 0xffffffff))
	var x259 uint32
	cmovznzU32(&x259, (uint1((x253 >> 31)) & (uint1((((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x248) + uint64(x251))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x246) + uint64(x246))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x260 uint32
	cmovznzU32(&x260, (uint1((x253 >> 31)) & (uint1((((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x249) + uint64(x252))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x247) + uint64(x247))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x261 uint32
	cmovznzU32(&x261, (uint1(x256) & 0x1), uint32(0x0), x255)
	var x262 uint32
	cmovznzU32(&x262, (uint1(x256) & 0x1), uint32(0x0), x257)
	var x263 uint32
	cmovznzU32(&x263, (uint1(x256) & 0x1), uint32(0x0), x258)
	x264 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x254))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x265 uint32
	cmovznzU32(&x265, (uint1((x264 >> 31)) & (uint1((((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x254))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x254))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x266 uint32
	cmovznzU32(&x266, (uint1((x264 >> 31)) & (uint1((((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) >> 1))) & 0x1)), x255, (((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) >> 1)))
	var x267 uint32
	cmovznzU32(&x267, (uint1((x264 >> 31)) & (uint1((((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) >> 1)), (uint32((uint64((^x255)) + uint64(0x1))) & 0xffffffff))
	var x268 uint32
	cmovznzU32(&x268, (uint1((x264 >> 31)) & (uint1((((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x257) + uint64(x257))) & 0xffffffff), (uint32((uint64(x259) + uint64(x262))) & 0xffffffff))
	var x269 uint32
	cmovznzU32(&x269, (uint1((x264 >> 31)) & (uint1((((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x258) + uint64(x258))) & 0xffffffff), (uint32((uint64(x260) + uint64(x263))) & 0xffffffff))
	var x270 uint32
	cmovznzU32(&x270, (uint1((x264 >> 31)) & (uint1((((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x259) + uint64(x262))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x257) + uint64(x257))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x271 uint32
	cmovznzU32(&x271, (uint1((x264 >> 31)) & (uint1((((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x260) + uint64(x263))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x258) + uint64(x258))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x272 uint32
	cmovznzU32(&x272, (uint1(x267) & 0x1), uint32(0x0), x266)
	var x273 uint32
	cmovznzU32(&x273, (uint1(x267) & 0x1), uint32(0x0), x268)
	var x274 uint32
	cmovznzU32(&x274, (uint1(x267) & 0x1), uint32(0x0), x269)
	x275 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x265))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x276 uint32
	cmovznzU32(&x276, (uint1((x275 >> 31)) & (uint1((((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x265))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x265))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x277 uint32
	cmovznzU32(&x277, (uint1((x275 >> 31)) & (uint1((((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) >> 1))) & 0x1)), x266, (((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) >> 1)))
	var x278 uint32
	cmovznzU32(&x278, (uint1((x275 >> 31)) & (uint1((((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) >> 1)), (uint32((uint64((^x266)) + uint64(0x1))) & 0xffffffff))
	var x279 uint32
	cmovznzU32(&x279, (uint1((x275 >> 31)) & (uint1((((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x268) + uint64(x268))) & 0xffffffff), (uint32((uint64(x270) + uint64(x273))) & 0xffffffff))
	var x280 uint32
	cmovznzU32(&x280, (uint1((x275 >> 31)) & (uint1((((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x269) + uint64(x269))) & 0xffffffff), (uint32((uint64(x271) + uint64(x274))) & 0xffffffff))
	var x281 uint32
	cmovznzU32(&x281, (uint1((x275 >> 31)) & (uint1((((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x270) + uint64(x273))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x268) + uint64(x268))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x282 uint32
	cmovznzU32(&x282, (uint1((x275 >> 31)) & (uint1((((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x271) + uint64(x274))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x269) + uint64(x269))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x283 uint32
	cmovznzU32(&x283, (uint1(x278) & 0x1), uint32(0x0), x277)
	var x284 uint32
	cmovznzU32(&x284, (uint1(x278) & 0x1), uint32(0x0), x279)
	var x285 uint32
	cmovznzU32(&x285, (uint1(x278) & 0x1), uint32(0x0), x280)
	x286 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x276))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x287 uint32
	cmovznzU32(&x287, (uint1((x286 >> 31)) & (uint1((((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x276))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x276))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x288 uint32
	cmovznzU32(&x288, (uint1((x286 >> 31)) & (uint1((((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) >> 1))) & 0x1)), x277, (((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) >> 1)))
	var x289 uint32
	cmovznzU32(&x289, (uint1((x286 >> 31)) & (uint1((((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) >> 1)), (uint32((uint64((^x277)) + uint64(0x1))) & 0xffffffff))
	var x290 uint32
	cmovznzU32(&x290, (uint1((x286 >> 31)) & (uint1((((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x279) + uint64(x279))) & 0xffffffff), (uint32((uint64(x281) + uint64(x284))) & 0xffffffff))
	var x291 uint32
	cmovznzU32(&x291, (uint1((x286 >> 31)) & (uint1((((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x280) + uint64(x280))) & 0xffffffff), (uint32((uint64(x282) + uint64(x285))) & 0xffffffff))
	var x292 uint32
	cmovznzU32(&x292, (uint1((x286 >> 31)) & (uint1((((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x281) + uint64(x284))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x279) + uint64(x279))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x293 uint32
	cmovznzU32(&x293, (uint1((x286 >> 31)) & (uint1((((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x282) + uint64(x285))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x280) + uint64(x280))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x294 uint32
	cmovznzU32(&x294, (uint1(x289) & 0x1), uint32(0x0), x288)
	var x295 uint32
	cmovznzU32(&x295, (uint1(x289) & 0x1), uint32(0x0), x290)
	var x296 uint32
	cmovznzU32(&x296, (uint1(x289) & 0x1), uint32(0x0), x291)
	x297 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x287))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x298 uint32
	cmovznzU32(&x298, (uint1((x297 >> 31)) & (uint1((((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x287))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x287))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x299 uint32
	cmovznzU32(&x299, (uint1((x297 >> 31)) & (uint1((((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) >> 1))) & 0x1)), x288, (((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) >> 1)))
	var x300 uint32
	cmovznzU32(&x300, (uint1((x297 >> 31)) & (uint1((((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) >> 1)), (uint32((uint64((^x288)) + uint64(0x1))) & 0xffffffff))
	var x301 uint32
	cmovznzU32(&x301, (uint1((x297 >> 31)) & (uint1((((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x290) + uint64(x290))) & 0xffffffff), (uint32((uint64(x292) + uint64(x295))) & 0xffffffff))
	var x302 uint32
	cmovznzU32(&x302, (uint1((x297 >> 31)) & (uint1((((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x291) + uint64(x291))) & 0xffffffff), (uint32((uint64(x293) + uint64(x296))) & 0xffffffff))
	var x303 uint32
	cmovznzU32(&x303, (uint1((x297 >> 31)) & (uint1((((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x292) + uint64(x295))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x290) + uint64(x290))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x304 uint32
	cmovznzU32(&x304, (uint1((x297 >> 31)) & (uint1((((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x293) + uint64(x296))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x291) + uint64(x291))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x305 uint32
	cmovznzU32(&x305, (uint1(x300) & 0x1), uint32(0x0), x299)
	var x306 uint32
	cmovznzU32(&x306, (uint1(x300) & 0x1), uint32(0x0), x301)
	var x307 uint32
	cmovznzU32(&x307, (uint1(x300) & 0x1), uint32(0x0), x302)
	x308 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x298))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x309 uint32
	cmovznzU32(&x309, (uint1((x308 >> 31)) & (uint1((((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x298))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x298))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x310 uint32
	cmovznzU32(&x310, (uint1((x308 >> 31)) & (uint1((((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) >> 1))) & 0x1)), x299, (((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) >> 1)))
	var x311 uint32
	cmovznzU32(&x311, (uint1((x308 >> 31)) & (uint1((((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) >> 1)), (uint32((uint64((^x299)) + uint64(0x1))) & 0xffffffff))
	var x312 uint32
	cmovznzU32(&x312, (uint1((x308 >> 31)) & (uint1((((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x301) + uint64(x301))) & 0xffffffff), (uint32((uint64(x303) + uint64(x306))) & 0xffffffff))
	var x313 uint32
	cmovznzU32(&x313, (uint1((x308 >> 31)) & (uint1((((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x302) + uint64(x302))) & 0xffffffff), (uint32((uint64(x304) + uint64(x307))) & 0xffffffff))
	var x314 uint32
	cmovznzU32(&x314, (uint1((x308 >> 31)) & (uint1((((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x303) + uint64(x306))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x301) + uint64(x301))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x315 uint32
	cmovznzU32(&x315, (uint1((x308 >> 31)) & (uint1((((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x304) + uint64(x307))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x302) + uint64(x302))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x316 uint32
	cmovznzU32(&x316, (uint1(x311) & 0x1), uint32(0x0), x310)
	var x317 uint32
	cmovznzU32(&x317, (uint1(x311) & 0x1), uint32(0x0), x312)
	var x318 uint32
	cmovznzU32(&x318, (uint1(x311) & 0x1), uint32(0x0), x313)
	x319 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x309))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x320 uint32
	cmovznzU32(&x320, (uint1((x319 >> 31)) & (uint1((((uint32((uint64(x311) + uint64(x316))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x311) + uint64(x316))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x311) + uint64(x316))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x311) + uint64(x316))) & 0xffffffff) >> 1)), (uint32((uint64((^x310)) + uint64(0x1))) & 0xffffffff))
	var x321 uint32
	cmovznzU32(&x321, (uint1((x319 >> 31)) & (uint1((((uint32((uint64(x311) + uint64(x316))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x311) + uint64(x316))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x312) + uint64(x312))) & 0xffffffff), (uint32((uint64(x314) + uint64(x317))) & 0xffffffff))
	var x322 uint32
	cmovznzU32(&x322, (uint1((x319 >> 31)) & (uint1((((uint32((uint64(x311) + uint64(x316))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x311) + uint64(x316))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x313) + uint64(x313))) & 0xffffffff), (uint32((uint64(x315) + uint64(x318))) & 0xffffffff))
	var x323 uint32
	cmovznzU32(&x323, (uint1((x319 >> 31)) & (uint1((((uint32((uint64(x311) + uint64(x316))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x311) + uint64(x316))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x314) + uint64(x317))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x312) + uint64(x312))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x324 uint32
	cmovznzU32(&x324, (uint1((x319 >> 31)) & (uint1((((uint32((uint64(x311) + uint64(x316))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x311) + uint64(x316))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x315) + uint64(x318))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x313) + uint64(x313))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x325 uint32
	cmovznzU32(&x325, (uint1(x320) & 0x1), uint32(0x0), x321)
	var x326 uint32
	cmovznzU32(&x326, (uint1(x320) & 0x1), uint32(0x0), x322)
	var x327 uint32
	cmovznzU32(&x327, uint1((arg1[7] >> 31)), uint32(0x0), 0xffffffff)
	var x328 uint32
	cmovznzU32(&x328, uint1(((uint32((uint64(x321) + uint64(x321))) & 0xffffffff) >> 31)), uint32(0x0), 0xffffffff)
	var x329 uint32
	_, x329 = bits.Mul32(x328, arg1[0])
	var x331 uint32
	_, x331 = bits.Mul32(x328, arg1[1])
	var x333 uint32
	var x334 uint32
	x334, x333 = bits.Mul32(x328, arg1[0])
	var x335 uint32
	_, x335 = bits.Mul32(x328, arg1[2])
	var x337 uint32
	var x338 uint32
	x338, x337 = bits.Mul32(x328, arg1[1])
	var x339 uint32
	var x340 uint32
	x340, x339 = bits.Mul32(x328, arg1[0])
	var x341 uint32
	_, x341 = bits.Mul32(x328, arg1[3])
	var x343 uint32
	var x344 uint32
	x344, x343 = bits.Mul32(x328, arg1[2])
	var x345 uint32
	var x346 uint32
	x346, x345 = bits.Mul32(x328, arg1[1])
	var x347 uint32
	var x348 uint32
	x348, x347 = bits.Mul32(x328, arg1[0])
	var x349 uint32
	_, x349 = bits.Mul32(x328, arg1[4])
	var x351 uint32
	var x352 uint32
	x352, x351 = bits.Mul32(x328, arg1[3])
	var x353 uint32
	var x354 uint32
	x354, x353 = bits.Mul32(x328, arg1[2])
	var x355 uint32
	var x356 uint32
	x356, x355 = bits.Mul32(x328, arg1[1])
	var x357 uint32
	var x358 uint32
	x358, x357 = bits.Mul32(x328, arg1[0])
	var x359 uint32
	_, x359 = bits.Mul32(x328, arg1[5])
	var x361 uint32
	var x362 uint32
	x362, x361 = bits.Mul32(x328, arg1[4])
	var x363 uint32
	var x364 uint32
	x364, x363 = bits.Mul32(x328, arg1[3])
	var x365 uint32
	var x366 uint32
	x366, x365 = bits.Mul32(x328, arg1[2])
	var x367 uint32
	var x368 uint32
	x368, x367 = bits.Mul32(x328, arg1[1])
	var x369 uint32
	var x370 uint32
	x370, x369 = bits.Mul32(x328, arg1[0])
	var x371 uint32
	_, x371 = bits.Mul32(x328, arg1[6])
	var x373 uint32
	var x374 uint32
	x374, x373 = bits.Mul32(x328, arg1[5])
	var x375 uint32
	var x376 uint32
	x376, x375 = bits.Mul32(x328, arg1[4])
	var x377 uint32
	var x378 uint32
	x378, x377 = bits.Mul32(x328, arg1[3])
	var x379 uint32
	var x380 uint32
	x380, x379 = bits.Mul32(x328, arg1[2])
	var x381 uint32
	var x382 uint32
	x382, x381 = bits.Mul32(x328, arg1[1])
	var x383 uint32
	var x384 uint32
	x384, x383 = bits.Mul32(x328, arg1[0])
	var x385 uint32
	_, x385 = bits.Mul32(x328, arg1[7])
	var x387 uint32
	var x388 uint32
	x388, x387 = bits.Mul32(x328, arg1[6])
	var x389 uint32
	var x390 uint32
	x390, x389 = bits.Mul32(x328, arg1[5])
	var x391 uint32
	var x392 uint32
	x392, x391 = bits.Mul32(x328, arg1[4])
	var x393 uint32
	var x394 uint32
	x394, x393 = bits.Mul32(x328, arg1[3])
	var x395 uint32
	var x396 uint32
	x396, x395 = bits.Mul32(x328, arg1[2])
	var x397 uint32
	var x398 uint32
	x398, x397 = bits.Mul32(x328, arg1[1])
	var x399 uint32
	var x400 uint32
	x400, x399 = bits.Mul32(x328, arg1[0])
	var x401 uint32
	_, x401 = bits.Mul32((uint32((uint64(x321) + uint64(x321))) & 0xffffffff), x327)
	var x403 uint32
	var x404 uint32
	x404, x403 = bits.Mul32((uint32((uint64(x321) + uint64(x321))) & 0xffffffff), arg1[7])
	var x405 uint32
	var x406 uint32
	x406, x405 = bits.Mul32((uint32((uint64(x321) + uint64(x321))) & 0xffffffff), arg1[6])
	var x407 uint32
	var x408 uint32
	x408, x407 = bits.Mul32((uint32((uint64(x321) + uint64(x321))) & 0xffffffff), arg1[5])
	var x409 uint32
	var x410 uint32
	x410, x409 = bits.Mul32((uint32((uint64(x321) + uint64(x321))) & 0xffffffff), arg1[4])
	var x411 uint32
	var x412 uint32
	x412, x411 = bits.Mul32((uint32((uint64(x321) + uint64(x321))) & 0xffffffff), arg1[3])
	var x413 uint32
	var x414 uint32
	x414, x413 = bits.Mul32((uint32((uint64(x321) + uint64(x321))) & 0xffffffff), arg1[2])
	var x415 uint32
	var x416 uint32
	x416, x415 = bits.Mul32((uint32((uint64(x321) + uint64(x321))) & 0xffffffff), arg1[1])
	var x417 uint32
	var x418 uint32
	x418, x417 = bits.Mul32((uint32((uint64(x321) + uint64(x321))) & 0xffffffff), arg1[0])
	var x419 uint32
	x419, _ = bits.Add32(x404, x329, uint32(0x0))
	var x421 uint32
	x421, _ = bits.Add32(x419, x331, uint32(0x0))
	var x423 uint32
	var x424 uint32
	x423, x424 = bits.Add32(x406, x333, uint32(0x0))
	var x425 uint32
	x425, _ = bits.Add32(x421, x334, uint32(uint1(x424)))
	var x427 uint32
	var x428 uint32
	x427, x428 = bits.Add32(x423, x337, uint32(0x0))
	var x429 uint32
	x429, _ = bits.Add32(x425, x335, uint32(uint1(x428)))
	var x431 uint32
	var x432 uint32
	x431, x432 = bits.Add32(x408, x339, uint32(0x0))
	var x433 uint32
	var x434 uint32
	x433, x434 = bits.Add32(x427, x340, uint32(uint1(x432)))
	var x435 uint32
	x435, _ = bits.Add32(x429, x338, uint32(uint1(x434)))
	var x437 uint32
	var x438 uint32
	x437, x438 = bits.Add32(x431, x345, uint32(0x0))
	var x439 uint32
	var x440 uint32
	x439, x440 = bits.Add32(x433, x343, uint32(uint1(x438)))
	var x441 uint32
	x441, _ = bits.Add32(x435, x341, uint32(uint1(x440)))
	var x443 uint32
	var x444 uint32
	x443, x444 = bits.Add32(x410, x347, uint32(0x0))
	var x445 uint32
	var x446 uint32
	x445, x446 = bits.Add32(x437, x348, uint32(uint1(x444)))
	var x447 uint32
	var x448 uint32
	x447, x448 = bits.Add32(x439, x346, uint32(uint1(x446)))
	var x449 uint32
	x449, _ = bits.Add32(x441, x344, uint32(uint1(x448)))
	var x451 uint32
	var x452 uint32
	x451, x452 = bits.Add32(x443, x355, uint32(0x0))
	var x453 uint32
	var x454 uint32
	x453, x454 = bits.Add32(x445, x353, uint32(uint1(x452)))
	var x455 uint32
	var x456 uint32
	x455, x456 = bits.Add32(x447, x351, uint32(uint1(x454)))
	var x457 uint32
	x457, _ = bits.Add32(x449, x349, uint32(uint1(x456)))
	var x459 uint32
	var x460 uint32
	x459, x460 = bits.Add32(x412, x357, uint32(0x0))
	var x461 uint32
	var x462 uint32
	x461, x462 = bits.Add32(x451, x358, uint32(uint1(x460)))
	var x463 uint32
	var x464 uint32
	x463, x464 = bits.Add32(x453, x356, uint32(uint1(x462)))
	var x465 uint32
	var x466 uint32
	x465, x466 = bits.Add32(x455, x354, uint32(uint1(x464)))
	var x467 uint32
	x467, _ = bits.Add32(x457, x352, uint32(uint1(x466)))
	var x469 uint32
	var x470 uint32
	x469, x470 = bits.Add32(x459, x367, uint32(0x0))
	var x471 uint32
	var x472 uint32
	x471, x472 = bits.Add32(x461, x365, uint32(uint1(x470)))
	var x473 uint32
	var x474 uint32
	x473, x474 = bits.Add32(x463, x363, uint32(uint1(x472)))
	var x475 uint32
	var x476 uint32
	x475, x476 = bits.Add32(x465, x361, uint32(uint1(x474)))
	var x477 uint32
	x477, _ = bits.Add32(x467, x359, uint32(uint1(x476)))
	var x479 uint32
	var x480 uint32
	x479, x480 = bits.Add32(x414, x369, uint32(0x0))
	var x481 uint32
	var x482 uint32
	x481, x482 = bits.Add32(x469, x370, uint32(uint1(x480)))
	var x483 uint32
	var x484 uint32
	x483, x484 = bits.Add32(x471, x368, uint32(uint1(x482)))
	var x485 uint32
	var x486 uint32
	x485, x486 = bits.Add32(x473, x366, uint32(uint1(x484)))
	var x487 uint32
	var x488 uint32
	x487, x488 = bits.Add32(x475, x364, uint32(uint1(x486)))
	var x489 uint32
	x489, _ = bits.Add32(x477, x362, uint32(uint1(x488)))
	var x491 uint32
	var x492 uint32
	x491, x492 = bits.Add32(x479, x381, uint32(0x0))
	var x493 uint32
	var x494 uint32
	x493, x494 = bits.Add32(x481, x379, uint32(uint1(x492)))
	var x495 uint32
	var x496 uint32
	x495, x496 = bits.Add32(x483, x377, uint32(uint1(x494)))
	var x497 uint32
	var x498 uint32
	x497, x498 = bits.Add32(x485, x375, uint32(uint1(x496)))
	var x499 uint32
	var x500 uint32
	x499, x500 = bits.Add32(x487, x373, uint32(uint1(x498)))
	var x501 uint32
	x501, _ = bits.Add32(x489, x371, uint32(uint1(x500)))
	var x503 uint32
	var x504 uint32
	x503, x504 = bits.Add32(x416, x383, uint32(0x0))
	var x505 uint32
	var x506 uint32
	x505, x506 = bits.Add32(x491, x384, uint32(uint1(x504)))
	var x507 uint32
	var x508 uint32
	x507, x508 = bits.Add32(x493, x382, uint32(uint1(x506)))
	var x509 uint32
	var x510 uint32
	x509, x510 = bits.Add32(x495, x380, uint32(uint1(x508)))
	var x511 uint32
	var x512 uint32
	x511, x512 = bits.Add32(x497, x378, uint32(uint1(x510)))
	var x513 uint32
	var x514 uint32
	x513, x514 = bits.Add32(x499, x376, uint32(uint1(x512)))
	var x515 uint32
	x515, _ = bits.Add32(x501, x374, uint32(uint1(x514)))
	var x517 uint32
	var x518 uint32
	x517, x518 = bits.Add32(x503, x397, uint32(0x0))
	var x519 uint32
	var x520 uint32
	x519, x520 = bits.Add32(x505, x395, uint32(uint1(x518)))
	var x521 uint32
	var x522 uint32
	x521, x522 = bits.Add32(x507, x393, uint32(uint1(x520)))
	var x523 uint32
	var x524 uint32
	x523, x524 = bits.Add32(x509, x391, uint32(uint1(x522)))
	var x525 uint32
	var x526 uint32
	x525, x526 = bits.Add32(x511, x389, uint32(uint1(x524)))
	var x527 uint32
	var x528 uint32
	x527, x528 = bits.Add32(x513, x387, uint32(uint1(x526)))
	var x529 uint32
	x529, _ = bits.Add32(x515, x385, uint32(uint1(x528)))
	var x531 uint32
	var x532 uint32
	x531, x532 = bits.Add32(x418, x399, uint32(0x0))
	var x533 uint32
	var x534 uint32
	x533, x534 = bits.Add32(x517, x400, uint32(uint1(x532)))
	var x535 uint32
	var x536 uint32
	x535, x536 = bits.Add32(x519, x398, uint32(uint1(x534)))
	var x537 uint32
	var x538 uint32
	x537, x538 = bits.Add32(x521, x396, uint32(uint1(x536)))
	var x539 uint32
	var x540 uint32
	x539, x540 = bits.Add32(x523, x394, uint32(uint1(x538)))
	var x541 uint32
	var x542 uint32
	x541, x542 = bits.Add32(x525, x392, uint32(uint1(x540)))
	var x543 uint32
	var x544 uint32
	x543, x544 = bits.Add32(x527, x390, uint32(uint1(x542)))
	var x545 uint32
	x545, _ = bits.Add32(x529, x388, uint32(uint1(x544)))
	var x547 uint32
	var x548 uint32
	x547, x548 = bits.Add32(x531, x415, uint32(0x0))
	var x549 uint32
	var x550 uint32
	x549, x550 = bits.Add32(x533, x413, uint32(uint1(x548)))
	var x551 uint32
	var x552 uint32
	x551, x552 = bits.Add32(x535, x411, uint32(uint1(x550)))
	var x553 uint32
	var x554 uint32
	x553, x554 = bits.Add32(x537, x409, uint32(uint1(x552)))
	var x555 uint32
	var x556 uint32
	x555, x556 = bits.Add32(x539, x407, uint32(uint1(x554)))
	var x557 uint32
	var x558 uint32
	x557, x558 = bits.Add32(x541, x405, uint32(uint1(x556)))
	var x559 uint32
	var x560 uint32
	x559, x560 = bits.Add32(x543, x403, uint32(uint1(x558)))
	var x561 uint32
	x561, _ = bits.Add32(x545, x401, uint32(uint1(x560)))
	var x563 uint32
	cmovznzU32(&x563, uint1((arg2[7] >> 31)), uint32(0x0), 0xffffffff)
	var x564 uint32
	cmovznzU32(&x564, uint1(((uint32((uint64(x322) + uint64(x322))) & 0xffffffff) >> 31)), uint32(0x0), 0xffffffff)
	var x565 uint32
	_, x565 = bits.Mul32(x564, arg2[0])
	var x567 uint32
	_, x567 = bits.Mul32(x564, arg2[1])
	var x569 uint32
	var x570 uint32
	x570, x569 = bits.Mul32(x564, arg2[0])
	var x571 uint32
	_, x571 = bits.Mul32(x564, arg2[2])
	var x573 uint32
	var x574 uint32
	x574, x573 = bits.Mul32(x564, arg2[1])
	var x575 uint32
	var x576 uint32
	x576, x575 = bits.Mul32(x564, arg2[0])
	var x577 uint32
	_, x577 = bits.Mul32(x564, arg2[3])
	var x579 uint32
	var x580 uint32
	x580, x579 = bits.Mul32(x564, arg2[2])
	var x581 uint32
	var x582 uint32
	x582, x581 = bits.Mul32(x564, arg2[1])
	var x583 uint32
	var x584 uint32
	x584, x583 = bits.Mul32(x564, arg2[0])
	var x585 uint32
	_, x585 = bits.Mul32(x564, arg2[4])
	var x587 uint32
	var x588 uint32
	x588, x587 = bits.Mul32(x564, arg2[3])
	var x589 uint32
	var x590 uint32
	x590, x589 = bits.Mul32(x564, arg2[2])
	var x591 uint32
	var x592 uint32
	x592, x591 = bits.Mul32(x564, arg2[1])
	var x593 uint32
	var x594 uint32
	x594, x593 = bits.Mul32(x564, arg2[0])
	var x595 uint32
	_, x595 = bits.Mul32(x564, arg2[5])
	var x597 uint32
	var x598 uint32
	x598, x597 = bits.Mul32(x564, arg2[4])
	var x599 uint32
	var x600 uint32
	x600, x599 = bits.Mul32(x564, arg2[3])
	var x601 uint32
	var x602 uint32
	x602, x601 = bits.Mul32(x564, arg2[2])
	var x603 uint32
	var x604 uint32
	x604, x603 = bits.Mul32(x564, arg2[1])
	var x605 uint32
	var x606 uint32
	x606, x605 = bits.Mul32(x564, arg2[0])
	var x607 uint32
	_, x607 = bits.Mul32(x564, arg2[6])
	var x609 uint32
	var x610 uint32
	x610, x609 = bits.Mul32(x564, arg2[5])
	var x611 uint32
	var x612 uint32
	x612, x611 = bits.Mul32(x564, arg2[4])
	var x613 uint32
	var x614 uint32
	x614, x613 = bits.Mul32(x564, arg2[3])
	var x615 uint32
	var x616 uint32
	x616, x615 = bits.Mul32(x564, arg2[2])
	var x617 uint32
	var x618 uint32
	x618, x617 = bits.Mul32(x564, arg2[1])
	var x619 uint32
	var x620 uint32
	x620, x619 = bits.Mul32(x564, arg2[0])
	var x621 uint32
	_, x621 = bits.Mul32(x564, arg2[7])
	var x623 uint32
	var x624 uint32
	x624, x623 = bits.Mul32(x564, arg2[6])
	var x625 uint32
	var x626 uint32
	x626, x625 = bits.Mul32(x564, arg2[5])
	var x627 uint32
	var x628 uint32
	x628, x627 = bits.Mul32(x564, arg2[4])
	var x629 uint32
	var x630 uint32
	x630, x629 = bits.Mul32(x564, arg2[3])
	var x631 uint32
	var x632 uint32
	x632, x631 = bits.Mul32(x564, arg2[2])
	var x633 uint32
	var x634 uint32
	x634, x633 = bits.Mul32(x564, arg2[1])
	var x635 uint32
	var x636 uint32
	x636, x635 = bits.Mul32(x564, arg2[0])
	var x637 uint32
	_, x637 = bits.Mul32((uint32((uint64(x322) + uint64(x322))) & 0xffffffff), x563)
	var x639 uint32
	var x640 uint32
	x640, x639 = bits.Mul32((uint32((uint64(x322) + uint64(x322))) & 0xffffffff), arg2[7])
	var x641 uint32
	var x642 uint32
	x642, x641 = bits.Mul32((uint32((uint64(x322) + uint64(x322))) & 0xffffffff), arg2[6])
	var x643 uint32
	var x644 uint32
	x644, x643 = bits.Mul32((uint32((uint64(x322) + uint64(x322))) & 0xffffffff), arg2[5])
	var x645 uint32
	var x646 uint32
	x646, x645 = bits.Mul32((uint32((uint64(x322) + uint64(x322))) & 0xffffffff), arg2[4])
	var x647 uint32
	var x648 uint32
	x648, x647 = bits.Mul32((uint32((uint64(x322) + uint64(x322))) & 0xffffffff), arg2[3])
	var x649 uint32
	var x650 uint32
	x650, x649 = bits.Mul32((uint32((uint64(x322) + uint64(x322))) & 0xffffffff), arg2[2])
	var x651 uint32
	var x652 uint32
	x652, x651 = bits.Mul32((uint32((uint64(x322) + uint64(x322))) & 0xffffffff), arg2[1])
	var x653 uint32
	var x654 uint32
	x654, x653 = bits.Mul32((uint32((uint64(x322) + uint64(x322))) & 0xffffffff), arg2[0])
	var x655 uint32
	x655, _ = bits.Add32(x640, x565, uint32(0x0))
	var x657 uint32
	x657, _ = bits.Add32(x655, x567, uint32(0x0))
	var x659 uint32
	var x660 uint32
	x659, x660 = bits.Add32(x642, x569, uint32(0x0))
	var x661 uint32
	x661, _ = bits.Add32(x657, x570, uint32(uint1(x660)))
	var x663 uint32
	var x664 uint32
	x663, x664 = bits.Add32(x659, x573, uint32(0x0))
	var x665 uint32
	x665, _ = bits.Add32(x661, x571, uint32(uint1(x664)))
	var x667 uint32
	var x668 uint32
	x667, x668 = bits.Add32(x644, x575, uint32(0x0))
	var x669 uint32
	var x670 uint32
	x669, x670 = bits.Add32(x663, x576, uint32(uint1(x668)))
	var x671 uint32
	x671, _ = bits.Add32(x665, x574, uint32(uint1(x670)))
	var x673 uint32
	var x674 uint32
	x673, x674 = bits.Add32(x667, x581, uint32(0x0))
	var x675 uint32
	var x676 uint32
	x675, x676 = bits.Add32(x669, x579, uint32(uint1(x674)))
	var x677 uint32
	x677, _ = bits.Add32(x671, x577, uint32(uint1(x676)))
	var x679 uint32
	var x680 uint32
	x679, x680 = bits.Add32(x646, x583, uint32(0x0))
	var x681 uint32
	var x682 uint32
	x681, x682 = bits.Add32(x673, x584, uint32(uint1(x680)))
	var x683 uint32
	var x684 uint32
	x683, x684 = bits.Add32(x675, x582, uint32(uint1(x682)))
	var x685 uint32
	x685, _ = bits.Add32(x677, x580, uint32(uint1(x684)))
	var x687 uint32
	var x688 uint32
	x687, x688 = bits.Add32(x679, x591, uint32(0x0))
	var x689 uint32
	var x690 uint32
	x689, x690 = bits.Add32(x681, x589, uint32(uint1(x688)))
	var x691 uint32
	var x692 uint32
	x691, x692 = bits.Add32(x683, x587, uint32(uint1(x690)))
	var x693 uint32
	x693, _ = bits.Add32(x685, x585, uint32(uint1(x692)))
	var x695 uint32
	var x696 uint32
	x695, x696 = bits.Add32(x648, x593, uint32(0x0))
	var x697 uint32
	var x698 uint32
	x697, x698 = bits.Add32(x687, x594, uint32(uint1(x696)))
	var x699 uint32
	var x700 uint32
	x699, x700 = bits.Add32(x689, x592, uint32(uint1(x698)))
	var x701 uint32
	var x702 uint32
	x701, x702 = bits.Add32(x691, x590, uint32(uint1(x700)))
	var x703 uint32
	x703, _ = bits.Add32(x693, x588, uint32(uint1(x702)))
	var x705 uint32
	var x706 uint32
	x705, x706 = bits.Add32(x695, x603, uint32(0x0))
	var x707 uint32
	var x708 uint32
	x707, x708 = bits.Add32(x697, x601, uint32(uint1(x706)))
	var x709 uint32
	var x710 uint32
	x709, x710 = bits.Add32(x699, x599, uint32(uint1(x708)))
	var x711 uint32
	var x712 uint32
	x711, x712 = bits.Add32(x701, x597, uint32(uint1(x710)))
	var x713 uint32
	x713, _ = bits.Add32(x703, x595, uint32(uint1(x712)))
	var x715 uint32
	var x716 uint32
	x715, x716 = bits.Add32(x650, x605, uint32(0x0))
	var x717 uint32
	var x718 uint32
	x717, x718 = bits.Add32(x705, x606, uint32(uint1(x716)))
	var x719 uint32
	var x720 uint32
	x719, x720 = bits.Add32(x707, x604, uint32(uint1(x718)))
	var x721 uint32
	var x722 uint32
	x721, x722 = bits.Add32(x709, x602, uint32(uint1(x720)))
	var x723 uint32
	var x724 uint32
	x723, x724 = bits.Add32(x711, x600, uint32(uint1(x722)))
	var x725 uint32
	x725, _ = bits.Add32(x713, x598, uint32(uint1(x724)))
	var x727 uint32
	var x728 uint32
	x727, x728 = bits.Add32(x715, x617, uint32(0x0))
	var x729 uint32
	var x730 uint32
	x729, x730 = bits.Add32(x717, x615, uint32(uint1(x728)))
	var x731 uint32
	var x732 uint32
	x731, x732 = bits.Add32(x719, x613, uint32(uint1(x730)))
	var x733 uint32
	var x734 uint32
	x733, x734 = bits.Add32(x721, x611, uint32(uint1(x732)))
	var x735 uint32
	var x736 uint32
	x735, x736 = bits.Add32(x723, x609, uint32(uint1(x734)))
	var x737 uint32
	x737, _ = bits.Add32(x725, x607, uint32(uint1(x736)))
	var x739 uint32
	var x740 uint32
	x739, x740 = bits.Add32(x652, x619, uint32(0x0))
	var x741 uint32
	var x742 uint32
	x741, x742 = bits.Add32(x727, x620, uint32(uint1(x740)))
	var x743 uint32
	var x744 uint32
	x743, x744 = bits.Add32(x729, x618, uint32(uint1(x742)))
	var x745 uint32
	var x746 uint32
	x745, x746 = bits.Add32(x731, x616, uint32(uint1(x744)))
	var x747 uint32
	var x748 uint32
	x747, x748 = bits.Add32(x733, x614, uint32(uint1(x746)))
	var x749 uint32
	var x750 uint32
	x749, x750 = bits.Add32(x735, x612, uint32(uint1(x748)))
	var x751 uint32
	x751, _ = bits.Add32(x737, x610, uint32(uint1(x750)))
	var x753 uint32
	var x754 uint32
	x753, x754 = bits.Add32(x739, x633, uint32(0x0))
	var x755 uint32
	var x756 uint32
	x755, x756 = bits.Add32(x741, x631, uint32(uint1(x754)))
	var x757 uint32
	var x758 uint32
	x757, x758 = bits.Add32(x743, x629, uint32(uint1(x756)))
	var x759 uint32
	var x760 uint32
	x759, x760 = bits.Add32(x745, x627, uint32(uint1(x758)))
	var x761 uint32
	var x762 uint32
	x761, x762 = bits.Add32(x747, x625, uint32(uint1(x760)))
	var x763 uint32
	var x764 uint32
	x763, x764 = bits.Add32(x749, x623, uint32(uint1(x762)))
	var x765 uint32
	x765, _ = bits.Add32(x751, x621, uint32(uint1(x764)))
	var x767 uint32
	var x768 uint32
	x767, x768 = bits.Add32(x654, x635, uint32(0x0))
	var x769 uint32
	var x770 uint32
	x769, x770 = bits.Add32(x753, x636, uint32(uint1(x768)))
	var x771 uint32
	var x772 uint32
	x771, x772 = bits.Add32(x755, x634, uint32(uint1(x770)))
	var x773 uint32
	var x774 uint32
	x773, x774 = bits.Add32(x757, x632, uint32(uint1(x772)))
	var x775 uint32
	var x776 uint32
	x775, x776 = bits.Add32(x759, x630, uint32(uint1(x774)))
	var x777 uint32
	var x778 uint32
	x777, x778 = bits.Add32(x761, x628, uint32(uint1(x776)))
	var x779 uint32
	var x780 uint32
	x779, x780 = bits.Add32(x763, x626, uint32(uint1(x778)))
	var x781 uint32
	x781, _ = bits.Add32(x765, x624, uint32(uint1(x780)))
	var x783 uint32
	var x784 uint32
	x783, x784 = bits.Add32(x767, x651, uint32(0x0))
	var x785 uint32
	var x786 uint32
	x785, x786 = bits.Add32(x769, x649, uint32(uint1(x784)))
	var x787 uint32
	var x788 uint32
	x787, x788 = bits.Add32(x771, x647, uint32(uint1(x786)))
	var x789 uint32
	var x790 uint32
	x789, x790 = bits.Add32(x773, x645, uint32(uint1(x788)))
	var x791 uint32
	var x792 uint32
	x791, x792 = bits.Add32(x775, x643, uint32(uint1(x790)))
	var x793 uint32
	var x794 uint32
	x793, x794 = bits.Add32(x777, x641, uint32(uint1(x792)))
	var x795 uint32
	var x796 uint32
	x795, x796 = bits.Add32(x779, x639, uint32(uint1(x794)))
	var x797 uint32
	x797, _ = bits.Add32(x781, x637, uint32(uint1(x796)))
	var x799 uint32
	cmovznzU32(&x799, uint1((arg1[7] >> 31)), uint32(0x0), 0xffffffff)
	var x800 uint32
	cmovznzU32(&x800, uint1(((uint32((uint64(x323) + uint64(x325))) & 0xffffffff) >> 31)), uint32(0x0), 0xffffffff)
	var x801 uint32
	_, x801 = bits.Mul32(x800, arg1[0])
	var x803 uint32
	_, x803 = bits.Mul32(x800, arg1[1])
	var x805 uint32
	var x806 uint32
	x806, x805 = bits.Mul32(x800, arg1[0])
	var x807 uint32
	_, x807 = bits.Mul32(x800, arg1[2])
	var x809 uint32
	var x810 uint32
	x810, x809 = bits.Mul32(x800, arg1[1])
	var x811 uint32
	var x812 uint32
	x812, x811 = bits.Mul32(x800, arg1[0])
	var x813 uint32
	_, x813 = bits.Mul32(x800, arg1[3])
	var x815 uint32
	var x816 uint32
	x816, x815 = bits.Mul32(x800, arg1[2])
	var x817 uint32
	var x818 uint32
	x818, x817 = bits.Mul32(x800, arg1[1])
	var x819 uint32
	var x820 uint32
	x820, x819 = bits.Mul32(x800, arg1[0])
	var x821 uint32
	_, x821 = bits.Mul32(x800, arg1[4])
	var x823 uint32
	var x824 uint32
	x824, x823 = bits.Mul32(x800, arg1[3])
	var x825 uint32
	var x826 uint32
	x826, x825 = bits.Mul32(x800, arg1[2])
	var x827 uint32
	var x828 uint32
	x828, x827 = bits.Mul32(x800, arg1[1])
	var x829 uint32
	var x830 uint32
	x830, x829 = bits.Mul32(x800, arg1[0])
	var x831 uint32
	_, x831 = bits.Mul32(x800, arg1[5])
	var x833 uint32
	var x834 uint32
	x834, x833 = bits.Mul32(x800, arg1[4])
	var x835 uint32
	var x836 uint32
	x836, x835 = bits.Mul32(x800, arg1[3])
	var x837 uint32
	var x838 uint32
	x838, x837 = bits.Mul32(x800, arg1[2])
	var x839 uint32
	var x840 uint32
	x840, x839 = bits.Mul32(x800, arg1[1])
	var x841 uint32
	var x842 uint32
	x842, x841 = bits.Mul32(x800, arg1[0])
	var x843 uint32
	_, x843 = bits.Mul32(x800, arg1[6])
	var x845 uint32
	var x846 uint32
	x846, x845 = bits.Mul32(x800, arg1[5])
	var x847 uint32
	var x848 uint32
	x848, x847 = bits.Mul32(x800, arg1[4])
	var x849 uint32
	var x850 uint32
	x850, x849 = bits.Mul32(x800, arg1[3])
	var x851 uint32
	var x852 uint32
	x852, x851 = bits.Mul32(x800, arg1[2])
	var x853 uint32
	var x854 uint32
	x854, x853 = bits.Mul32(x800, arg1[1])
	var x855 uint32
	var x856 uint32
	x856, x855 = bits.Mul32(x800, arg1[0])
	var x857 uint32
	_, x857 = bits.Mul32(x800, arg1[7])
	var x859 uint32
	var x860 uint32
	x860, x859 = bits.Mul32(x800, arg1[6])
	var x861 uint32
	var x862 uint32
	x862, x861 = bits.Mul32(x800, arg1[5])
	var x863 uint32
	var x864 uint32
	x864, x863 = bits.Mul32(x800, arg1[4])
	var x865 uint32
	var x866 uint32
	x866, x865 = bits.Mul32(x800, arg1[3])
	var x867 uint32
	var x868 uint32
	x868, x867 = bits.Mul32(x800, arg1[2])
	var x869 uint32
	var x870 uint32
	x870, x869 = bits.Mul32(x800, arg1[1])
	var x871 uint32
	var x872 uint32
	x872, x871 = bits.Mul32(x800, arg1[0])
	var x873 uint32
	_, x873 = bits.Mul32((uint32((uint64(x323) + uint64(x325))) & 0xffffffff), x799)
	var x875 uint32
	var x876 uint32
	x876, x875 = bits.Mul32((uint32((uint64(x323) + uint64(x325))) & 0xffffffff), arg1[7])
	var x877 uint32
	var x878 uint32
	x878, x877 = bits.Mul32((uint32((uint64(x323) + uint64(x325))) & 0xffffffff), arg1[6])
	var x879 uint32
	var x880 uint32
	x880, x879 = bits.Mul32((uint32((uint64(x323) + uint64(x325))) & 0xffffffff), arg1[5])
	var x881 uint32
	var x882 uint32
	x882, x881 = bits.Mul32((uint32((uint64(x323) + uint64(x325))) & 0xffffffff), arg1[4])
	var x883 uint32
	var x884 uint32
	x884, x883 = bits.Mul32((uint32((uint64(x323) + uint64(x325))) & 0xffffffff), arg1[3])
	var x885 uint32
	var x886 uint32
	x886, x885 = bits.Mul32((uint32((uint64(x323) + uint64(x325))) & 0xffffffff), arg1[2])
	var x887 uint32
	var x888 uint32
	x888, x887 = bits.Mul32((uint32((uint64(x323) + uint64(x325))) & 0xffffffff), arg1[1])
	var x889 uint32
	var x890 uint32
	x890, x889 = bits.Mul32((uint32((uint64(x323) + uint64(x325))) & 0xffffffff), arg1[0])
	var x891 uint32
	x891, _ = bits.Add32(x876, x801, uint32(0x0))
	var x893 uint32
	x893, _ = bits.Add32(x891, x803, uint32(0x0))
	var x895 uint32
	var x896 uint32
	x895, x896 = bits.Add32(x878, x805, uint32(0x0))
	var x897 uint32
	x897, _ = bits.Add32(x893, x806, uint32(uint1(x896)))
	var x899 uint32
	var x900 uint32
	x899, x900 = bits.Add32(x895, x809, uint32(0x0))
	var x901 uint32
	x901, _ = bits.Add32(x897, x807, uint32(uint1(x900)))
	var x903 uint32
	var x904 uint32
	x903, x904 = bits.Add32(x880, x811, uint32(0x0))
	var x905 uint32
	var x906 uint32
	x905, x906 = bits.Add32(x899, x812, uint32(uint1(x904)))
	var x907 uint32
	x907, _ = bits.Add32(x901, x810, uint32(uint1(x906)))
	var x909 uint32
	var x910 uint32
	x909, x910 = bits.Add32(x903, x817, uint32(0x0))
	var x911 uint32
	var x912 uint32
	x911, x912 = bits.Add32(x905, x815, uint32(uint1(x910)))
	var x913 uint32
	x913, _ = bits.Add32(x907, x813, uint32(uint1(x912)))
	var x915 uint32
	var x916 uint32
	x915, x916 = bits.Add32(x882, x819, uint32(0x0))
	var x917 uint32
	var x918 uint32
	x917, x918 = bits.Add32(x909, x820, uint32(uint1(x916)))
	var x919 uint32
	var x920 uint32
	x919, x920 = bits.Add32(x911, x818, uint32(uint1(x918)))
	var x921 uint32
	x921, _ = bits.Add32(x913, x816, uint32(uint1(x920)))
	var x923 uint32
	var x924 uint32
	x923, x924 = bits.Add32(x915, x827, uint32(0x0))
	var x925 uint32
	var x926 uint32
	x925, x926 = bits.Add32(x917, x825, uint32(uint1(x924)))
	var x927 uint32
	var x928 uint32
	x927, x928 = bits.Add32(x919, x823, uint32(uint1(x926)))
	var x929 uint32
	x929, _ = bits.Add32(x921, x821, uint32(uint1(x928)))
	var x931 uint32
	var x932 uint32
	x931, x932 = bits.Add32(x884, x829, uint32(0x0))
	var x933 uint32
	var x934 uint32
	x933, x934 = bits.Add32(x923, x830, uint32(uint1(x932)))
	var x935 uint32
	var x936 uint32
	x935, x936 = bits.Add32(x925, x828, uint32(uint1(x934)))
	var x937 uint32
	var x938 uint32
	x937, x938 = bits.Add32(x927, x826, uint32(uint1(x936)))
	var x939 uint32
	x939, _ = bits.Add32(x929, x824, uint32(uint1(x938)))
	var x941 uint32
	var x942 uint32
	x941, x942 = bits.Add32(x931, x839, uint32(0x0))
	var x943 uint32
	var x944 uint32
	x943, x944 = bits.Add32(x933, x837, uint32(uint1(x942)))
	var x945 uint32
	var x946 uint32
	x945, x946 = bits.Add32(x935, x835, uint32(uint1(x944)))
	var x947 uint32
	var x948 uint32
	x947, x948 = bits.Add32(x937, x833, uint32(uint1(x946)))
	var x949 uint32
	x949, _ = bits.Add32(x939, x831, uint32(uint1(x948)))
	var x951 uint32
	var x952 uint32
	x951, x952 = bits.Add32(x886, x841, uint32(0x0))
	var x953 uint32
	var x954 uint32
	x953, x954 = bits.Add32(x941, x842, uint32(uint1(x952)))
	var x955 uint32
	var x956 uint32
	x955, x956 = bits.Add32(x943, x840, uint32(uint1(x954)))
	var x957 uint32
	var x958 uint32
	x957, x958 = bits.Add32(x945, x838, uint32(uint1(x956)))
	var x959 uint32
	var x960 uint32
	x959, x960 = bits.Add32(x947, x836, uint32(uint1(x958)))
	var x961 uint32
	x961, _ = bits.Add32(x949, x834, uint32(uint1(x960)))
	var x963 uint32
	var x964 uint32
	x963, x964 = bits.Add32(x951, x853, uint32(0x0))
	var x965 uint32
	var x966 uint32
	x965, x966 = bits.Add32(x953, x851, uint32(uint1(x964)))
	var x967 uint32
	var x968 uint32
	x967, x968 = bits.Add32(x955, x849, uint32(uint1(x966)))
	var x969 uint32
	var x970 uint32
	x969, x970 = bits.Add32(x957, x847, uint32(uint1(x968)))
	var x971 uint32
	var x972 uint32
	x971, x972 = bits.Add32(x959, x845, uint32(uint1(x970)))
	var x973 uint32
	x973, _ = bits.Add32(x961, x843, uint32(uint1(x972)))
	var x975 uint32
	var x976 uint32
	x975, x976 = bits.Add32(x888, x855, uint32(0x0))
	var x977 uint32
	var x978 uint32
	x977, x978 = bits.Add32(x963, x856, uint32(uint1(x976)))
	var x979 uint32
	var x980 uint32
	x979, x980 = bits.Add32(x965, x854, uint32(uint1(x978)))
	var x981 uint32
	var x982 uint32
	x981, x982 = bits.Add32(x967, x852, uint32(uint1(x980)))
	var x983 uint32
	var x984 uint32
	x983, x984 = bits.Add32(x969, x850, uint32(uint1(x982)))
	var x985 uint32
	var x986 uint32
	x985, x986 = bits.Add32(x971, x848, uint32(uint1(x984)))
	var x987 uint32
	x987, _ = bits.Add32(x973, x846, uint32(uint1(x986)))
	var x989 uint32
	var x990 uint32
	x989, x990 = bits.Add32(x975, x869, uint32(0x0))
	var x991 uint32
	var x992 uint32
	x991, x992 = bits.Add32(x977, x867, uint32(uint1(x990)))
	var x993 uint32
	var x994 uint32
	x993, x994 = bits.Add32(x979, x865, uint32(uint1(x992)))
	var x995 uint32
	var x996 uint32
	x995, x996 = bits.Add32(x981, x863, uint32(uint1(x994)))
	var x997 uint32
	var x998 uint32
	x997, x998 = bits.Add32(x983, x861, uint32(uint1(x996)))
	var x999 uint32
	var x1000 uint32
	x999, x1000 = bits.Add32(x985, x859, uint32(uint1(x998)))
	var x1001 uint32
	x1001, _ = bits.Add32(x987, x857, uint32(uint1(x1000)))
	var x1003 uint32
	var x1004 uint32
	x1003, x1004 = bits.Add32(x890, x871, uint32(0x0))
	var x1005 uint32
	var x1006 uint32
	x1005, x1006 = bits.Add32(x989, x872, uint32(uint1(x1004)))
	var x1007 uint32
	var x1008 uint32
	x1007, x1008 = bits.Add32(x991, x870, uint32(uint1(x1006)))
	var x1009 uint32
	var x1010 uint32
	x1009, x1010 = bits.Add32(x993, x868, uint32(uint1(x1008)))
	var x1011 uint32
	var x1012 uint32
	x1011, x1012 = bits.Add32(x995, x866, uint32(uint1(x1010)))
	var x1013 uint32
	var x1014 uint32
	x1013, x1014 = bits.Add32(x997, x864, uint32(uint1(x1012)))
	var x1015 uint32
	var x1016 uint32
	x1015, x1016 = bits.Add32(x999, x862, uint32(uint1(x1014)))
	var x1017 uint32
	x1017, _ = bits.Add32(x1001, x860, uint32(uint1(x1016)))
	var x1019 uint32
	var x1020 uint32
	x1019, x1020 = bits.Add32(x1003, x887, uint32(0x0))
	var x1021 uint32
	var x1022 uint32
	x1021, x1022 = bits.Add32(x1005, x885, uint32(uint1(x1020)))
	var x1023 uint32
	var x1024 uint32
	x1023, x1024 = bits.Add32(x1007, x883, uint32(uint1(x1022)))
	var x1025 uint32
	var x1026 uint32
	x1025, x1026 = bits.Add32(x1009, x881, uint32(uint1(x1024)))
	var x1027 uint32
	var x1028 uint32
	x1027, x1028 = bits.Add32(x1011, x879, uint32(uint1(x1026)))
	var x1029 uint32
	var x1030 uint32
	x1029, x1030 = bits.Add32(x1013, x877, uint32(uint1(x1028)))
	var x1031 uint32
	var x1032 uint32
	x1031, x1032 = bits.Add32(x1015, x875, uint32(uint1(x1030)))
	var x1033 uint32
	x1033, _ = bits.Add32(x1017, x873, uint32(uint1(x1032)))
	var x1035 uint32
	cmovznzU32(&x1035, uint1((arg2[7] >> 31)), uint32(0x0), 0xffffffff)
	var x1036 uint32
	cmovznzU32(&x1036, uint1(((uint32((uint64(x324) + uint64(x326))) & 0xffffffff) >> 31)), uint32(0x0), 0xffffffff)
	var x1037 uint32
	_, x1037 = bits.Mul32(x1036, arg2[0])
	var x1039 uint32
	_, x1039 = bits.Mul32(x1036, arg2[1])
	var x1041 uint32
	var x1042 uint32
	x1042, x1041 = bits.Mul32(x1036, arg2[0])
	var x1043 uint32
	_, x1043 = bits.Mul32(x1036, arg2[2])
	var x1045 uint32
	var x1046 uint32
	x1046, x1045 = bits.Mul32(x1036, arg2[1])
	var x1047 uint32
	var x1048 uint32
	x1048, x1047 = bits.Mul32(x1036, arg2[0])
	var x1049 uint32
	_, x1049 = bits.Mul32(x1036, arg2[3])
	var x1051 uint32
	var x1052 uint32
	x1052, x1051 = bits.Mul32(x1036, arg2[2])
	var x1053 uint32
	var x1054 uint32
	x1054, x1053 = bits.Mul32(x1036, arg2[1])
	var x1055 uint32
	var x1056 uint32
	x1056, x1055 = bits.Mul32(x1036, arg2[0])
	var x1057 uint32
	_, x1057 = bits.Mul32(x1036, arg2[4])
	var x1059 uint32
	var x1060 uint32
	x1060, x1059 = bits.Mul32(x1036, arg2[3])
	var x1061 uint32
	var x1062 uint32
	x1062, x1061 = bits.Mul32(x1036, arg2[2])
	var x1063 uint32
	var x1064 uint32
	x1064, x1063 = bits.Mul32(x1036, arg2[1])
	var x1065 uint32
	var x1066 uint32
	x1066, x1065 = bits.Mul32(x1036, arg2[0])
	var x1067 uint32
	_, x1067 = bits.Mul32(x1036, arg2[5])
	var x1069 uint32
	var x1070 uint32
	x1070, x1069 = bits.Mul32(x1036, arg2[4])
	var x1071 uint32
	var x1072 uint32
	x1072, x1071 = bits.Mul32(x1036, arg2[3])
	var x1073 uint32
	var x1074 uint32
	x1074, x1073 = bits.Mul32(x1036, arg2[2])
	var x1075 uint32
	var x1076 uint32
	x1076, x1075 = bits.Mul32(x1036, arg2[1])
	var x1077 uint32
	var x1078 uint32
	x1078, x1077 = bits.Mul32(x1036, arg2[0])
	var x1079 uint32
	_, x1079 = bits.Mul32(x1036, arg2[6])
	var x1081 uint32
	var x1082 uint32
	x1082, x1081 = bits.Mul32(x1036, arg2[5])
	var x1083 uint32
	var x1084 uint32
	x1084, x1083 = bits.Mul32(x1036, arg2[4])
	var x1085 uint32
	var x1086 uint32
	x1086, x1085 = bits.Mul32(x1036, arg2[3])
	var x1087 uint32
	var x1088 uint32
	x1088, x1087 = bits.Mul32(x1036, arg2[2])
	var x1089 uint32
	var x1090 uint32
	x1090, x1089 = bits.Mul32(x1036, arg2[1])
	var x1091 uint32
	var x1092 uint32
	x1092, x1091 = bits.Mul32(x1036, arg2[0])
	var x1093 uint32
	_, x1093 = bits.Mul32(x1036, arg2[7])
	var x1095 uint32
	var x1096 uint32
	x1096, x1095 = bits.Mul32(x1036, arg2[6])
	var x1097 uint32
	var x1098 uint32
	x1098, x1097 = bits.Mul32(x1036, arg2[5])
	var x1099 uint32
	var x1100 uint32
	x1100, x1099 = bits.Mul32(x1036, arg2[4])
	var x1101 uint32
	var x1102 uint32
	x1102, x1101 = bits.Mul32(x1036, arg2[3])
	var x1103 uint32
	var x1104 uint32
	x1104, x1103 = bits.Mul32(x1036, arg2[2])
	var x1105 uint32
	var x1106 uint32
	x1106, x1105 = bits.Mul32(x1036, arg2[1])
	var x1107 uint32
	var x1108 uint32
	x1108, x1107 = bits.Mul32(x1036, arg2[0])
	var x1109 uint32
	_, x1109 = bits.Mul32((uint32((uint64(x324) + uint64(x326))) & 0xffffffff), x1035)
	var x1111 uint32
	var x1112 uint32
	x1112, x1111 = bits.Mul32((uint32((uint64(x324) + uint64(x326))) & 0xffffffff), arg2[7])
	var x1113 uint32
	var x1114 uint32
	x1114, x1113 = bits.Mul32((uint32((uint64(x324) + uint64(x326))) & 0xffffffff), arg2[6])
	var x1115 uint32
	var x1116 uint32
	x1116, x1115 = bits.Mul32((uint32((uint64(x324) + uint64(x326))) & 0xffffffff), arg2[5])
	var x1117 uint32
	var x1118 uint32
	x1118, x1117 = bits.Mul32((uint32((uint64(x324) + uint64(x326))) & 0xffffffff), arg2[4])
	var x1119 uint32
	var x1120 uint32
	x1120, x1119 = bits.Mul32((uint32((uint64(x324) + uint64(x326))) & 0xffffffff), arg2[3])
	var x1121 uint32
	var x1122 uint32
	x1122, x1121 = bits.Mul32((uint32((uint64(x324) + uint64(x326))) & 0xffffffff), arg2[2])
	var x1123 uint32
	var x1124 uint32
	x1124, x1123 = bits.Mul32((uint32((uint64(x324) + uint64(x326))) & 0xffffffff), arg2[1])
	var x1125 uint32
	var x1126 uint32
	x1126, x1125 = bits.Mul32((uint32((uint64(x324) + uint64(x326))) & 0xffffffff), arg2[0])
	var x1127 uint32
	x1127, _ = bits.Add32(x1112, x1037, uint32(0x0))
	var x1129 uint32
	x1129, _ = bits.Add32(x1127, x1039, uint32(0x0))
	var x1131 uint32
	var x1132 uint32
	x1131, x1132 = bits.Add32(x1114, x1041, uint32(0x0))
	var x1133 uint32
	x1133, _ = bits.Add32(x1129, x1042, uint32(uint1(x1132)))
	var x1135 uint32
	var x1136 uint32
	x1135, x1136 = bits.Add32(x1131, x1045, uint32(0x0))
	var x1137 uint32
	x1137, _ = bits.Add32(x1133, x1043, uint32(uint1(x1136)))
	var x1139 uint32
	var x1140 uint32
	x1139, x1140 = bits.Add32(x1116, x1047, uint32(0x0))
	var x1141 uint32
	var x1142 uint32
	x1141, x1142 = bits.Add32(x1135, x1048, uint32(uint1(x1140)))
	var x1143 uint32
	x1143, _ = bits.Add32(x1137, x1046, uint32(uint1(x1142)))
	var x1145 uint32
	var x1146 uint32
	x1145, x1146 = bits.Add32(x1139, x1053, uint32(0x0))
	var x1147 uint32
	var x1148 uint32
	x1147, x1148 = bits.Add32(x1141, x1051, uint32(uint1(x1146)))
	var x1149 uint32
	x1149, _ = bits.Add32(x1143, x1049, uint32(uint1(x1148)))
	var x1151 uint32
	var x1152 uint32
	x1151, x1152 = bits.Add32(x1118, x1055, uint32(0x0))
	var x1153 uint32
	var x1154 uint32
	x1153, x1154 = bits.Add32(x1145, x1056, uint32(uint1(x1152)))
	var x1155 uint32
	var x1156 uint32
	x1155, x1156 = bits.Add32(x1147, x1054, uint32(uint1(x1154)))
	var x1157 uint32
	x1157, _ = bits.Add32(x1149, x1052, uint32(uint1(x1156)))
	var x1159 uint32
	var x1160 uint32
	x1159, x1160 = bits.Add32(x1151, x1063, uint32(0x0))
	var x1161 uint32
	var x1162 uint32
	x1161, x1162 = bits.Add32(x1153, x1061, uint32(uint1(x1160)))
	var x1163 uint32
	var x1164 uint32
	x1163, x1164 = bits.Add32(x1155, x1059, uint32(uint1(x1162)))
	var x1165 uint32
	x1165, _ = bits.Add32(x1157, x1057, uint32(uint1(x1164)))
	var x1167 uint32
	var x1168 uint32
	x1167, x1168 = bits.Add32(x1120, x1065, uint32(0x0))
	var x1169 uint32
	var x1170 uint32
	x1169, x1170 = bits.Add32(x1159, x1066, uint32(uint1(x1168)))
	var x1171 uint32
	var x1172 uint32
	x1171, x1172 = bits.Add32(x1161, x1064, uint32(uint1(x1170)))
	var x1173 uint32
	var x1174 uint32
	x1173, x1174 = bits.Add32(x1163, x1062, uint32(uint1(x1172)))
	var x1175 uint32
	x1175, _ = bits.Add32(x1165, x1060, uint32(uint1(x1174)))
	var x1177 uint32
	var x1178 uint32
	x1177, x1178 = bits.Add32(x1167, x1075, uint32(0x0))
	var x1179 uint32
	var x1180 uint32
	x1179, x1180 = bits.Add32(x1169, x1073, uint32(uint1(x1178)))
	var x1181 uint32
	var x1182 uint32
	x1181, x1182 = bits.Add32(x1171, x1071, uint32(uint1(x1180)))
	var x1183 uint32
	var x1184 uint32
	x1183, x1184 = bits.Add32(x1173, x1069, uint32(uint1(x1182)))
	var x1185 uint32
	x1185, _ = bits.Add32(x1175, x1067, uint32(uint1(x1184)))
	var x1187 uint32
	var x1188 uint32
	x1187, x1188 = bits.Add32(x1122, x1077, uint32(0x0))
	var x1189 uint32
	var x1190 uint32
	x1189, x1190 = bits.Add32(x1177, x1078, uint32(uint1(x1188)))
	var x1191 uint32
	var x1192 uint32
	x1191, x1192 = bits.Add32(x1179, x1076, uint32(uint1(x1190)))
	var x1193 uint32
	var x1194 uint32
	x1193, x1194 = bits.Add32(x1181, x1074, uint32(uint1(x1192)))
	var x1195 uint32
	var x1196 uint32
	x1195, x1196 = bits.Add32(x1183, x1072, uint32(uint1(x1194)))
	var x1197 uint32
	x1197, _ = bits.Add32(x1185, x1070, uint32(uint1(x1196)))
	var x1199 uint32
	var x1200 uint32
	x1199, x1200 = bits.Add32(x1187, x1089, uint32(0x0))
	var x1201 uint32
	var x1202 uint32
	x1201, x1202 = bits.Add32(x1189, x1087, uint32(uint1(x1200)))
	var x1203 uint32
	var x1204 uint32
	x1203, x1204 = bits.Add32(x1191, x1085, uint32(uint1(x1202)))
	var x1205 uint32
	var x1206 uint32
	x1205, x1206 = bits.Add32(x1193, x1083, uint32(uint1(x1204)))
	var x1207 uint32
	var x1208 uint32
	x1207, x1208 = bits.Add32(x1195, x1081, uint32(uint1(x1206)))
	var x1209 uint32
	x1209, _ = bits.Add32(x1197, x1079, uint32(uint1(x1208)))
	var x1211 uint32
	var x1212 uint32
	x1211, x1212 = bits.Add32(x1124, x1091, uint32(0x0))
	var x1213 uint32
	var x1214 uint32
	x1213, x1214 = bits.Add32(x1199, x1092, uint32(uint1(x1212)))
	var x1215 uint32
	var x1216 uint32
	x1215, x1216 = bits.Add32(x1201, x1090, uint32(uint1(x1214)))
	var x1217 uint32
	var x1218 uint32
	x1217, x1218 = bits.Add32(x1203, x1088, uint32(uint1(x1216)))
	var x1219 uint32
	var x1220 uint32
	x1219, x1220 = bits.Add32(x1205, x1086, uint32(uint1(x1218)))
	var x1221 uint32
	var x1222 uint32
	x1221, x1222 = bits.Add32(x1207, x1084, uint32(uint1(x1220)))
	var x1223 uint32
	x1223, _ = bits.Add32(x1209, x1082, uint32(uint1(x1222)))
	var x1225 uint32
	var x1226 uint32
	x1225, x1226 = bits.Add32(x1211, x1105, uint32(0x0))
	var x1227 uint32
	var x1228 uint32
	x1227, x1228 = bits.Add32(x1213, x1103, uint32(uint1(x1226)))
	var x1229 uint32
	var x1230 uint32
	x1229, x1230 = bits.Add32(x1215, x1101, uint32(uint1(x1228)))
	var x1231 uint32
	var x1232 uint32
	x1231, x1232 = bits.Add32(x1217, x1099, uint32(uint1(x1230)))
	var x1233 uint32
	var x1234 uint32
	x1233, x1234 = bits.Add32(x1219, x1097, uint32(uint1(x1232)))
	var x1235 uint32
	var x1236 uint32
	x1235, x1236 = bits.Add32(x1221, x1095, uint32(uint1(x1234)))
	var x1237 uint32
	x1237, _ = bits.Add32(x1223, x1093, uint32(uint1(x1236)))
	var x1239 uint32
	var x1240 uint32
	x1239, x1240 = bits.Add32(x1126, x1107, uint32(0x0))
	var x1241 uint32
	var x1242 uint32
	x1241, x1242 = bits.Add32(x1225, x1108, uint32(uint1(x1240)))
	var x1243 uint32
	var x1244 uint32
	x1243, x1244 = bits.Add32(x1227, x1106, uint32(uint1(x1242)))
	var x1245 uint32
	var x1246 uint32
	x1245, x1246 = bits.Add32(x1229, x1104, uint32(uint1(x1244)))
	var x1247 uint32
	var x1248 uint32
	x1247, x1248 = bits.Add32(x1231, x1102, uint32(uint1(x1246)))
	var x1249 uint32
	var x1250 uint32
	x1249, x1250 = bits.Add32(x1233, x1100, uint32(uint1(x1248)))
	var x1251 uint32
	var x1252 uint32
	x1251, x1252 = bits.Add32(x1235, x1098, uint32(uint1(x1250)))
	var x1253 uint32
	x1253, _ = bits.Add32(x1237, x1096, uint32(uint1(x1252)))
	var x1255 uint32
	var x1256 uint32
	x1255, x1256 = bits.Add32(x1239, x1123, uint32(0x0))
	var x1257 uint32
	var x1258 uint32
	x1257, x1258 = bits.Add32(x1241, x1121, uint32(uint1(x1256)))
	var x1259 uint32
	var x1260 uint32
	x1259, x1260 = bits.Add32(x1243, x1119, uint32(uint1(x1258)))
	var x1261 uint32
	var x1262 uint32
	x1261, x1262 = bits.Add32(x1245, x1117, uint32(uint1(x1260)))
	var x1263 uint32
	var x1264 uint32
	x1263, x1264 = bits.Add32(x1247, x1115, uint32(uint1(x1262)))
	var x1265 uint32
	var x1266 uint32
	x1265, x1266 = bits.Add32(x1249, x1113, uint32(uint1(x1264)))
	var x1267 uint32
	var x1268 uint32
	x1267, x1268 = bits.Add32(x1251, x1111, uint32(uint1(x1266)))
	var x1269 uint32
	x1269, _ = bits.Add32(x1253, x1109, uint32(uint1(x1268)))
	var x1271 uint32
	var x1272 uint32
	x1271, x1272 = bits.Add32(x417, x653, uint32(0x0))
	var x1273 uint32
	var x1274 uint32
	x1273, x1274 = bits.Add32(x547, x783, uint32(uint1(x1272)))
	var x1275 uint32
	var x1276 uint32
	x1275, x1276 = bits.Add32(x549, x785, uint32(uint1(x1274)))
	var x1277 uint32
	var x1278 uint32
	x1277, x1278 = bits.Add32(x551, x787, uint32(uint1(x1276)))
	var x1279 uint32
	var x1280 uint32
	x1279, x1280 = bits.Add32(x553, x789, uint32(uint1(x1278)))
	var x1281 uint32
	var x1282 uint32
	x1281, x1282 = bits.Add32(x555, x791, uint32(uint1(x1280)))
	var x1283 uint32
	var x1284 uint32
	x1283, x1284 = bits.Add32(x557, x793, uint32(uint1(x1282)))
	var x1285 uint32
	var x1286 uint32
	x1285, x1286 = bits.Add32(x559, x795, uint32(uint1(x1284)))
	var x1287 uint32
	x1287, _ = bits.Add32(x561, x797, uint32(uint1(x1286)))
	var x1289 uint32
	var x1290 uint32
	x1289, x1290 = bits.Add32(x889, x1125, uint32(0x0))
	var x1291 uint32
	var x1292 uint32
	x1291, x1292 = bits.Add32(x1019, x1255, uint32(uint1(x1290)))
	var x1293 uint32
	var x1294 uint32
	x1293, x1294 = bits.Add32(x1021, x1257, uint32(uint1(x1292)))
	var x1295 uint32
	var x1296 uint32
	x1295, x1296 = bits.Add32(x1023, x1259, uint32(uint1(x1294)))
	var x1297 uint32
	var x1298 uint32
	x1297, x1298 = bits.Add32(x1025, x1261, uint32(uint1(x1296)))
	var x1299 uint32
	var x1300 uint32
	x1299, x1300 = bits.Add32(x1027, x1263, uint32(uint1(x1298)))
	var x1301 uint32
	var x1302 uint32
	x1301, x1302 = bits.Add32(x1029, x1265, uint32(uint1(x1300)))
	var x1303 uint32
	var x1304 uint32
	x1303, x1304 = bits.Add32(x1031, x1267, uint32(uint1(x1302)))
	var x1305 uint32
	x1305, _ = bits.Add32(x1033, x1269, uint32(uint1(x1304)))
	x1307 := ((x1271 >> 30) | ((x1273 << 2) & 0xffffffff))
	x1308 := ((x1273 >> 30) | ((x1275 << 2) & 0xffffffff))
	x1309 := ((x1275 >> 30) | ((x1277 << 2) & 0xffffffff))
	x1310 := ((x1277 >> 30) | ((x1279 << 2) & 0xffffffff))
	x1311 := ((x1279 >> 30) | ((x1281 << 2) & 0xffffffff))
	x1312 := ((x1281 >> 30) | ((x1283 << 2) & 0xffffffff))
	x1313 := ((x1283 >> 30) | ((x1285 << 2) & 0xffffffff))
	x1314 := ((x1285 >> 30) | ((x1287 << 2) & 0xffffffff))
	x1315 := ((x1289 >> 30) | ((x1291 << 2) & 0xffffffff))
	x1316 := ((x1291 >> 30) | ((x1293 << 2) & 0xffffffff))
	x1317 := ((x1293 >> 30) | ((x1295 << 2) & 0xffffffff))
	x1318 := ((x1295 >> 30) | ((x1297 << 2) & 0xffffffff))
	x1319 := ((x1297 >> 30) | ((x1299 << 2) & 0xffffffff))
	x1320 := ((x1299 >> 30) | ((x1301 << 2) & 0xffffffff))
	x1321 := ((x1301 >> 30) | ((x1303 << 2) & 0xffffffff))
	x1322 := ((x1303 >> 30) | ((x1305 << 2) & 0xffffffff))
	x1323 := uint1(((uint32((uint64(x321) + uint64(x321))) & 0xffffffff) >> 31))
	x1324 := (uint32((uint64((^(uint32((uint64(x321) + uint64(x321))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	x1325 := (uint32((uint64(x321) + uint64(x321))) & 0xffffffff)
	var x1326 uint32
	var x1327 uint32
	x1326, x1327 = bits.Sub32(uint32(0x0), x1324, uint32(0x0))
	var x1328 uint32
	var x1329 uint32
	x1328, x1329 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1327)))
	var x1330 uint32
	var x1331 uint32
	x1330, x1331 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1329)))
	var x1332 uint32
	var x1333 uint32
	x1332, x1333 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1331)))
	var x1334 uint32
	var x1335 uint32
	x1334, x1335 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1333)))
	var x1336 uint32
	var x1337 uint32
	x1336, x1337 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1335)))
	var x1338 uint32
	var x1339 uint32
	x1338, x1339 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1337)))
	var x1340 uint32
	cmovznzU32(&x1340, uint1(x1339), uint32(0x0), 0xffffffff)
	var x1341 uint32
	var x1342 uint32
	x1341, x1342 = bits.Add32(x1326, uint32((uint1(x1340) & 0x1)), uint32(0x0))
	var x1343 uint32
	var x1344 uint32
	x1343, x1344 = bits.Add32(x1328, uint32(0x0), uint32(uint1(x1342)))
	var x1345 uint32
	var x1346 uint32
	x1345, x1346 = bits.Add32(x1330, uint32(0x0), uint32(uint1(x1344)))
	var x1347 uint32
	var x1348 uint32
	x1347, x1348 = bits.Add32(x1332, x1340, uint32(uint1(x1346)))
	var x1349 uint32
	var x1350 uint32
	x1349, x1350 = bits.Add32(x1334, x1340, uint32(uint1(x1348)))
	var x1351 uint32
	var x1352 uint32
	x1351, x1352 = bits.Add32(x1336, x1340, uint32(uint1(x1350)))
	var x1353 uint32
	x1353, _ = bits.Add32(x1338, x1340, uint32(uint1(x1352)))
	var x1355 uint32
	cmovznzU32(&x1355, x1323, x1325, x1341)
	var x1356 uint32
	cmovznzU32(&x1356, x1323, uint32(0x0), x1343)
	var x1357 uint32
	cmovznzU32(&x1357, x1323, uint32(0x0), x1345)
	var x1358 uint32
	cmovznzU32(&x1358, x1323, uint32(0x0), x1347)
	var x1359 uint32
	cmovznzU32(&x1359, x1323, uint32(0x0), x1349)
	var x1360 uint32
	cmovznzU32(&x1360, x1323, uint32(0x0), x1351)
	var x1361 uint32
	cmovznzU32(&x1361, x1323, uint32(0x0), x1353)
	x1362 := uint1(((uint32((uint64(x322) + uint64(x322))) & 0xffffffff) >> 31))
	x1363 := (uint32((uint64((^(uint32((uint64(x322) + uint64(x322))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	x1364 := (uint32((uint64(x322) + uint64(x322))) & 0xffffffff)
	var x1365 uint32
	var x1366 uint32
	x1365, x1366 = bits.Sub32(uint32(0x0), x1363, uint32(0x0))
	var x1367 uint32
	var x1368 uint32
	x1367, x1368 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1366)))
	var x1369 uint32
	var x1370 uint32
	x1369, x1370 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1368)))
	var x1371 uint32
	var x1372 uint32
	x1371, x1372 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1370)))
	var x1373 uint32
	var x1374 uint32
	x1373, x1374 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1372)))
	var x1375 uint32
	var x1376 uint32
	x1375, x1376 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1374)))
	var x1377 uint32
	var x1378 uint32
	x1377, x1378 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1376)))
	var x1379 uint32
	cmovznzU32(&x1379, uint1(x1378), uint32(0x0), 0xffffffff)
	var x1380 uint32
	var x1381 uint32
	x1380, x1381 = bits.Add32(x1365, uint32((uint1(x1379) & 0x1)), uint32(0x0))
	var x1382 uint32
	var x1383 uint32
	x1382, x1383 = bits.Add32(x1367, uint32(0x0), uint32(uint1(x1381)))
	var x1384 uint32
	var x1385 uint32
	x1384, x1385 = bits.Add32(x1369, uint32(0x0), uint32(uint1(x1383)))
	var x1386 uint32
	var x1387 uint32
	x1386, x1387 = bits.Add32(x1371, x1379, uint32(uint1(x1385)))
	var x1388 uint32
	var x1389 uint32
	x1388, x1389 = bits.Add32(x1373, x1379, uint32(uint1(x1387)))
	var x1390 uint32
	var x1391 uint32
	x1390, x1391 = bits.Add32(x1375, x1379, uint32(uint1(x1389)))
	var x1392 uint32
	x1392, _ = bits.Add32(x1377, x1379, uint32(uint1(x1391)))
	var x1394 uint32
	cmovznzU32(&x1394, x1362, x1364, x1380)
	var x1395 uint32
	cmovznzU32(&x1395, x1362, uint32(0x0), x1382)
	var x1396 uint32
	cmovznzU32(&x1396, x1362, uint32(0x0), x1384)
	var x1397 uint32
	cmovznzU32(&x1397, x1362, uint32(0x0), x1386)
	var x1398 uint32
	cmovznzU32(&x1398, x1362, uint32(0x0), x1388)
	var x1399 uint32
	cmovznzU32(&x1399, x1362, uint32(0x0), x1390)
	var x1400 uint32
	cmovznzU32(&x1400, x1362, uint32(0x0), x1392)
	x1401 := uint1(((uint32((uint64(x323) + uint64(x325))) & 0xffffffff) >> 31))
	x1402 := (uint32((uint64((^(uint32((uint64(x323) + uint64(x325))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	x1403 := (uint32((uint64(x323) + uint64(x325))) & 0xffffffff)
	var x1404 uint32
	var x1405 uint32
	x1404, x1405 = bits.Sub32(uint32(0x0), x1402, uint32(0x0))
	var x1406 uint32
	var x1407 uint32
	x1406, x1407 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1405)))
	var x1408 uint32
	var x1409 uint32
	x1408, x1409 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1407)))
	var x1410 uint32
	var x1411 uint32
	x1410, x1411 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1409)))
	var x1412 uint32
	var x1413 uint32
	x1412, x1413 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1411)))
	var x1414 uint32
	var x1415 uint32
	x1414, x1415 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1413)))
	var x1416 uint32
	var x1417 uint32
	x1416, x1417 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1415)))
	var x1418 uint32
	cmovznzU32(&x1418, uint1(x1417), uint32(0x0), 0xffffffff)
	var x1419 uint32
	var x1420 uint32
	x1419, x1420 = bits.Add32(x1404, uint32((uint1(x1418) & 0x1)), uint32(0x0))
	var x1421 uint32
	var x1422 uint32
	x1421, x1422 = bits.Add32(x1406, uint32(0x0), uint32(uint1(x1420)))
	var x1423 uint32
	var x1424 uint32
	x1423, x1424 = bits.Add32(x1408, uint32(0x0), uint32(uint1(x1422)))
	var x1425 uint32
	var x1426 uint32
	x1425, x1426 = bits.Add32(x1410, x1418, uint32(uint1(x1424)))
	var x1427 uint32
	var x1428 uint32
	x1427, x1428 = bits.Add32(x1412, x1418, uint32(uint1(x1426)))
	var x1429 uint32
	var x1430 uint32
	x1429, x1430 = bits.Add32(x1414, x1418, uint32(uint1(x1428)))
	var x1431 uint32
	x1431, _ = bits.Add32(x1416, x1418, uint32(uint1(x1430)))
	var x1433 uint32
	cmovznzU32(&x1433, x1401, x1403, x1419)
	var x1434 uint32
	cmovznzU32(&x1434, x1401, uint32(0x0), x1421)
	var x1435 uint32
	cmovznzU32(&x1435, x1401, uint32(0x0), x1423)
	var x1436 uint32
	cmovznzU32(&x1436, x1401, uint32(0x0), x1425)
	var x1437 uint32
	cmovznzU32(&x1437, x1401, uint32(0x0), x1427)
	var x1438 uint32
	cmovznzU32(&x1438, x1401, uint32(0x0), x1429)
	var x1439 uint32
	cmovznzU32(&x1439, x1401, uint32(0x0), x1431)
	x1440 := uint1(((uint32((uint64(x324) + uint64(x326))) & 0xffffffff) >> 31))
	x1441 := (uint32((uint64((^(uint32((uint64(x324) + uint64(x326))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	x1442 := (uint32((uint64(x324) + uint64(x326))) & 0xffffffff)
	var x1443 uint32
	var x1444 uint32
	x1443, x1444 = bits.Sub32(uint32(0x0), x1441, uint32(0x0))
	var x1445 uint32
	var x1446 uint32
	x1445, x1446 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1444)))
	var x1447 uint32
	var x1448 uint32
	x1447, x1448 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1446)))
	var x1449 uint32
	var x1450 uint32
	x1449, x1450 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1448)))
	var x1451 uint32
	var x1452 uint32
	x1451, x1452 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1450)))
	var x1453 uint32
	var x1454 uint32
	x1453, x1454 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1452)))
	var x1455 uint32
	var x1456 uint32
	x1455, x1456 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1454)))
	var x1457 uint32
	cmovznzU32(&x1457, uint1(x1456), uint32(0x0), 0xffffffff)
	var x1458 uint32
	var x1459 uint32
	x1458, x1459 = bits.Add32(x1443, uint32((uint1(x1457) & 0x1)), uint32(0x0))
	var x1460 uint32
	var x1461 uint32
	x1460, x1461 = bits.Add32(x1445, uint32(0x0), uint32(uint1(x1459)))
	var x1462 uint32
	var x1463 uint32
	x1462, x1463 = bits.Add32(x1447, uint32(0x0), uint32(uint1(x1461)))
	var x1464 uint32
	var x1465 uint32
	x1464, x1465 = bits.Add32(x1449, x1457, uint32(uint1(x1463)))
	var x1466 uint32
	var x1467 uint32
	x1466, x1467 = bits.Add32(x1451, x1457, uint32(uint1(x1465)))
	var x1468 uint32
	var x1469 uint32
	x1468, x1469 = bits.Add32(x1453, x1457, uint32(uint1(x1467)))
	var x1470 uint32
	x1470, _ = bits.Add32(x1455, x1457, uint32(uint1(x1469)))
	var x1472 uint32
	cmovznzU32(&x1472, x1440, x1442, x1458)
	var x1473 uint32
	cmovznzU32(&x1473, x1440, uint32(0x0), x1460)
	var x1474 uint32
	cmovznzU32(&x1474, x1440, uint32(0x0), x1462)
	var x1475 uint32
	cmovznzU32(&x1475, x1440, uint32(0x0), x1464)
	var x1476 uint32
	cmovznzU32(&x1476, x1440, uint32(0x0), x1466)
	var x1477 uint32
	cmovznzU32(&x1477, x1440, uint32(0x0), x1468)
	var x1478 uint32
	cmovznzU32(&x1478, x1440, uint32(0x0), x1470)
	var x1479 uint32
	var x1480 uint32
	x1480, x1479 = bits.Mul32(x1355, arg3[6])
	var x1481 uint32
	var x1482 uint32
	x1482, x1481 = bits.Mul32(x1355, arg3[5])
	var x1483 uint32
	var x1484 uint32
	x1484, x1483 = bits.Mul32(x1355, arg3[4])
	var x1485 uint32
	var x1486 uint32
	x1486, x1485 = bits.Mul32(x1355, arg3[3])
	var x1487 uint32
	var x1488 uint32
	x1488, x1487 = bits.Mul32(x1355, arg3[2])
	var x1489 uint32
	var x1490 uint32
	x1490, x1489 = bits.Mul32(x1355, arg3[1])
	var x1491 uint32
	var x1492 uint32
	x1492, x1491 = bits.Mul32(x1355, arg3[0])
	var x1493 uint32
	var x1494 uint32
	x1493, x1494 = bits.Add32(x1492, x1489, uint32(0x0))
	var x1495 uint32
	var x1496 uint32
	x1495, x1496 = bits.Add32(x1490, x1487, uint32(uint1(x1494)))
	var x1497 uint32
	var x1498 uint32
	x1497, x1498 = bits.Add32(x1488, x1485, uint32(uint1(x1496)))
	var x1499 uint32
	var x1500 uint32
	x1499, x1500 = bits.Add32(x1486, x1483, uint32(uint1(x1498)))
	var x1501 uint32
	var x1502 uint32
	x1501, x1502 = bits.Add32(x1484, x1481, uint32(uint1(x1500)))
	var x1503 uint32
	var x1504 uint32
	x1503, x1504 = bits.Add32(x1482, x1479, uint32(uint1(x1502)))
	x1505 := (uint32(uint1(x1504)) + x1480)
	var x1506 uint32
	_, x1506 = bits.Mul32(x1491, 0xffffffff)
	var x1508 uint32
	var x1509 uint32
	x1509, x1508 = bits.Mul32(x1506, 0xffffffff)
	var x1510 uint32
	var x1511 uint32
	x1511, x1510 = bits.Mul32(x1506, 0xffffffff)
	var x1512 uint32
	var x1513 uint32
	x1513, x1512 = bits.Mul32(x1506, 0xffffffff)
	var x1514 uint32
	var x1515 uint32
	x1515, x1514 = bits.Mul32(x1506, 0xffffffff)
	var x1516 uint32
	var x1517 uint32
	x1516, x1517 = bits.Add32(x1515, x1512, uint32(0x0))
	var x1518 uint32
	var x1519 uint32
	x1518, x1519 = bits.Add32(x1513, x1510, uint32(uint1(x1517)))
	var x1520 uint32
	var x1521 uint32
	x1520, x1521 = bits.Add32(x1511, x1508, uint32(uint1(x1519)))
	x1522 := (uint32(uint1(x1521)) + x1509)
	var x1524 uint32
	_, x1524 = bits.Add32(x1491, x1506, uint32(0x0))
	var x1525 uint32
	var x1526 uint32
	x1525, x1526 = bits.Add32(x1493, uint32(0x0), uint32(uint1(x1524)))
	var x1527 uint32
	var x1528 uint32
	x1527, x1528 = bits.Add32(x1495, uint32(0x0), uint32(uint1(x1526)))
	var x1529 uint32
	var x1530 uint32
	x1529, x1530 = bits.Add32(x1497, x1514, uint32(uint1(x1528)))
	var x1531 uint32
	var x1532 uint32
	x1531, x1532 = bits.Add32(x1499, x1516, uint32(uint1(x1530)))
	var x1533 uint32
	var x1534 uint32
	x1533, x1534 = bits.Add32(x1501, x1518, uint32(uint1(x1532)))
	var x1535 uint32
	var x1536 uint32
	x1535, x1536 = bits.Add32(x1503, x1520, uint32(uint1(x1534)))
	var x1537 uint32
	var x1538 uint32
	x1537, x1538 = bits.Add32(x1505, x1522, uint32(uint1(x1536)))
	var x1539 uint32
	var x1540 uint32
	x1540, x1539 = bits.Mul32(x1356, arg3[6])
	var x1541 uint32
	var x1542 uint32
	x1542, x1541 = bits.Mul32(x1356, arg3[5])
	var x1543 uint32
	var x1544 uint32
	x1544, x1543 = bits.Mul32(x1356, arg3[4])
	var x1545 uint32
	var x1546 uint32
	x1546, x1545 = bits.Mul32(x1356, arg3[3])
	var x1547 uint32
	var x1548 uint32
	x1548, x1547 = bits.Mul32(x1356, arg3[2])
	var x1549 uint32
	var x1550 uint32
	x1550, x1549 = bits.Mul32(x1356, arg3[1])
	var x1551 uint32
	var x1552 uint32
	x1552, x1551 = bits.Mul32(x1356, arg3[0])
	var x1553 uint32
	var x1554 uint32
	x1553, x1554 = bits.Add32(x1552, x1549, uint32(0x0))
	var x1555 uint32
	var x1556 uint32
	x1555, x1556 = bits.Add32(x1550, x1547, uint32(uint1(x1554)))
	var x1557 uint32
	var x1558 uint32
	x1557, x1558 = bits.Add32(x1548, x1545, uint32(uint1(x1556)))
	var x1559 uint32
	var x1560 uint32
	x1559, x1560 = bits.Add32(x1546, x1543, uint32(uint1(x1558)))
	var x1561 uint32
	var x1562 uint32
	x1561, x1562 = bits.Add32(x1544, x1541, uint32(uint1(x1560)))
	var x1563 uint32
	var x1564 uint32
	x1563, x1564 = bits.Add32(x1542, x1539, uint32(uint1(x1562)))
	x1565 := (uint32(uint1(x1564)) + x1540)
	var x1566 uint32
	var x1567 uint32
	x1566, x1567 = bits.Add32(x1525, x1551, uint32(0x0))
	var x1568 uint32
	var x1569 uint32
	x1568, x1569 = bits.Add32(x1527, x1553, uint32(uint1(x1567)))
	var x1570 uint32
	var x1571 uint32
	x1570, x1571 = bits.Add32(x1529, x1555, uint32(uint1(x1569)))
	var x1572 uint32
	var x1573 uint32
	x1572, x1573 = bits.Add32(x1531, x1557, uint32(uint1(x1571)))
	var x1574 uint32
	var x1575 uint32
	x1574, x1575 = bits.Add32(x1533, x1559, uint32(uint1(x1573)))
	var x1576 uint32
	var x1577 uint32
	x1576, x1577 = bits.Add32(x1535, x1561, uint32(uint1(x1575)))
	var x1578 uint32
	var x1579 uint32
	x1578, x1579 = bits.Add32(x1537, x1563, uint32(uint1(x1577)))
	var x1580 uint32
	var x1581 uint32
	x1580, x1581 = bits.Add32(uint32(uint1(x1538)), x1565, uint32(uint1(x1579)))
	var x1582 uint32
	_, x1582 = bits.Mul32(x1566, 0xffffffff)
	var x1584 uint32
	var x1585 uint32
	x1585, x1584 = bits.Mul32(x1582, 0xffffffff)
	var x1586 uint32
	var x1587 uint32
	x1587, x1586 = bits.Mul32(x1582, 0xffffffff)
	var x1588 uint32
	var x1589 uint32
	x1589, x1588 = bits.Mul32(x1582, 0xffffffff)
	var x1590 uint32
	var x1591 uint32
	x1591, x1590 = bits.Mul32(x1582, 0xffffffff)
	var x1592 uint32
	var x1593 uint32
	x1592, x1593 = bits.Add32(x1591, x1588, uint32(0x0))
	var x1594 uint32
	var x1595 uint32
	x1594, x1595 = bits.Add32(x1589, x1586, uint32(uint1(x1593)))
	var x1596 uint32
	var x1597 uint32
	x1596, x1597 = bits.Add32(x1587, x1584, uint32(uint1(x1595)))
	x1598 := (uint32(uint1(x1597)) + x1585)
	var x1600 uint32
	_, x1600 = bits.Add32(x1566, x1582, uint32(0x0))
	var x1601 uint32
	var x1602 uint32
	x1601, x1602 = bits.Add32(x1568, uint32(0x0), uint32(uint1(x1600)))
	var x1603 uint32
	var x1604 uint32
	x1603, x1604 = bits.Add32(x1570, uint32(0x0), uint32(uint1(x1602)))
	var x1605 uint32
	var x1606 uint32
	x1605, x1606 = bits.Add32(x1572, x1590, uint32(uint1(x1604)))
	var x1607 uint32
	var x1608 uint32
	x1607, x1608 = bits.Add32(x1574, x1592, uint32(uint1(x1606)))
	var x1609 uint32
	var x1610 uint32
	x1609, x1610 = bits.Add32(x1576, x1594, uint32(uint1(x1608)))
	var x1611 uint32
	var x1612 uint32
	x1611, x1612 = bits.Add32(x1578, x1596, uint32(uint1(x1610)))
	var x1613 uint32
	var x1614 uint32
	x1613, x1614 = bits.Add32(x1580, x1598, uint32(uint1(x1612)))
	x1615 := (uint32(uint1(x1614)) + uint32(uint1(x1581)))
	var x1616 uint32
	var x1617 uint32
	x1617, x1616 = bits.Mul32(x1357, arg3[6])
	var x1618 uint32
	var x1619 uint32
	x1619, x1618 = bits.Mul32(x1357, arg3[5])
	var x1620 uint32
	var x1621 uint32
	x1621, x1620 = bits.Mul32(x1357, arg3[4])
	var x1622 uint32
	var x1623 uint32
	x1623, x1622 = bits.Mul32(x1357, arg3[3])
	var x1624 uint32
	var x1625 uint32
	x1625, x1624 = bits.Mul32(x1357, arg3[2])
	var x1626 uint32
	var x1627 uint32
	x1627, x1626 = bits.Mul32(x1357, arg3[1])
	var x1628 uint32
	var x1629 uint32
	x1629, x1628 = bits.Mul32(x1357, arg3[0])
	var x1630 uint32
	var x1631 uint32
	x1630, x1631 = bits.Add32(x1629, x1626, uint32(0x0))
	var x1632 uint32
	var x1633 uint32
	x1632, x1633 = bits.Add32(x1627, x1624, uint32(uint1(x1631)))
	var x1634 uint32
	var x1635 uint32
	x1634, x1635 = bits.Add32(x1625, x1622, uint32(uint1(x1633)))
	var x1636 uint32
	var x1637 uint32
	x1636, x1637 = bits.Add32(x1623, x1620, uint32(uint1(x1635)))
	var x1638 uint32
	var x1639 uint32
	x1638, x1639 = bits.Add32(x1621, x1618, uint32(uint1(x1637)))
	var x1640 uint32
	var x1641 uint32
	x1640, x1641 = bits.Add32(x1619, x1616, uint32(uint1(x1639)))
	x1642 := (uint32(uint1(x1641)) + x1617)
	var x1643 uint32
	var x1644 uint32
	x1643, x1644 = bits.Add32(x1601, x1628, uint32(0x0))
	var x1645 uint32
	var x1646 uint32
	x1645, x1646 = bits.Add32(x1603, x1630, uint32(uint1(x1644)))
	var x1647 uint32
	var x1648 uint32
	x1647, x1648 = bits.Add32(x1605, x1632, uint32(uint1(x1646)))
	var x1649 uint32
	var x1650 uint32
	x1649, x1650 = bits.Add32(x1607, x1634, uint32(uint1(x1648)))
	var x1651 uint32
	var x1652 uint32
	x1651, x1652 = bits.Add32(x1609, x1636, uint32(uint1(x1650)))
	var x1653 uint32
	var x1654 uint32
	x1653, x1654 = bits.Add32(x1611, x1638, uint32(uint1(x1652)))
	var x1655 uint32
	var x1656 uint32
	x1655, x1656 = bits.Add32(x1613, x1640, uint32(uint1(x1654)))
	var x1657 uint32
	var x1658 uint32
	x1657, x1658 = bits.Add32(x1615, x1642, uint32(uint1(x1656)))
	var x1659 uint32
	_, x1659 = bits.Mul32(x1643, 0xffffffff)
	var x1661 uint32
	var x1662 uint32
	x1662, x1661 = bits.Mul32(x1659, 0xffffffff)
	var x1663 uint32
	var x1664 uint32
	x1664, x1663 = bits.Mul32(x1659, 0xffffffff)
	var x1665 uint32
	var x1666 uint32
	x1666, x1665 = bits.Mul32(x1659, 0xffffffff)
	var x1667 uint32
	var x1668 uint32
	x1668, x1667 = bits.Mul32(x1659, 0xffffffff)
	var x1669 uint32
	var x1670 uint32
	x1669, x1670 = bits.Add32(x1668, x1665, uint32(0x0))
	var x1671 uint32
	var x1672 uint32
	x1671, x1672 = bits.Add32(x1666, x1663, uint32(uint1(x1670)))
	var x1673 uint32
	var x1674 uint32
	x1673, x1674 = bits.Add32(x1664, x1661, uint32(uint1(x1672)))
	x1675 := (uint32(uint1(x1674)) + x1662)
	var x1677 uint32
	_, x1677 = bits.Add32(x1643, x1659, uint32(0x0))
	var x1678 uint32
	var x1679 uint32
	x1678, x1679 = bits.Add32(x1645, uint32(0x0), uint32(uint1(x1677)))
	var x1680 uint32
	var x1681 uint32
	x1680, x1681 = bits.Add32(x1647, uint32(0x0), uint32(uint1(x1679)))
	var x1682 uint32
	var x1683 uint32
	x1682, x1683 = bits.Add32(x1649, x1667, uint32(uint1(x1681)))
	var x1684 uint32
	var x1685 uint32
	x1684, x1685 = bits.Add32(x1651, x1669, uint32(uint1(x1683)))
	var x1686 uint32
	var x1687 uint32
	x1686, x1687 = bits.Add32(x1653, x1671, uint32(uint1(x1685)))
	var x1688 uint32
	var x1689 uint32
	x1688, x1689 = bits.Add32(x1655, x1673, uint32(uint1(x1687)))
	var x1690 uint32
	var x1691 uint32
	x1690, x1691 = bits.Add32(x1657, x1675, uint32(uint1(x1689)))
	x1692 := (uint32(uint1(x1691)) + uint32(uint1(x1658)))
	var x1693 uint32
	var x1694 uint32
	x1694, x1693 = bits.Mul32(x1358, arg3[6])
	var x1695 uint32
	var x1696 uint32
	x1696, x1695 = bits.Mul32(x1358, arg3[5])
	var x1697 uint32
	var x1698 uint32
	x1698, x1697 = bits.Mul32(x1358, arg3[4])
	var x1699 uint32
	var x1700 uint32
	x1700, x1699 = bits.Mul32(x1358, arg3[3])
	var x1701 uint32
	var x1702 uint32
	x1702, x1701 = bits.Mul32(x1358, arg3[2])
	var x1703 uint32
	var x1704 uint32
	x1704, x1703 = bits.Mul32(x1358, arg3[1])
	var x1705 uint32
	var x1706 uint32
	x1706, x1705 = bits.Mul32(x1358, arg3[0])
	var x1707 uint32
	var x1708 uint32
	x1707, x1708 = bits.Add32(x1706, x1703, uint32(0x0))
	var x1709 uint32
	var x1710 uint32
	x1709, x1710 = bits.Add32(x1704, x1701, uint32(uint1(x1708)))
	var x1711 uint32
	var x1712 uint32
	x1711, x1712 = bits.Add32(x1702, x1699, uint32(uint1(x1710)))
	var x1713 uint32
	var x1714 uint32
	x1713, x1714 = bits.Add32(x1700, x1697, uint32(uint1(x1712)))
	var x1715 uint32
	var x1716 uint32
	x1715, x1716 = bits.Add32(x1698, x1695, uint32(uint1(x1714)))
	var x1717 uint32
	var x1718 uint32
	x1717, x1718 = bits.Add32(x1696, x1693, uint32(uint1(x1716)))
	x1719 := (uint32(uint1(x1718)) + x1694)
	var x1720 uint32
	var x1721 uint32
	x1720, x1721 = bits.Add32(x1678, x1705, uint32(0x0))
	var x1722 uint32
	var x1723 uint32
	x1722, x1723 = bits.Add32(x1680, x1707, uint32(uint1(x1721)))
	var x1724 uint32
	var x1725 uint32
	x1724, x1725 = bits.Add32(x1682, x1709, uint32(uint1(x1723)))
	var x1726 uint32
	var x1727 uint32
	x1726, x1727 = bits.Add32(x1684, x1711, uint32(uint1(x1725)))
	var x1728 uint32
	var x1729 uint32
	x1728, x1729 = bits.Add32(x1686, x1713, uint32(uint1(x1727)))
	var x1730 uint32
	var x1731 uint32
	x1730, x1731 = bits.Add32(x1688, x1715, uint32(uint1(x1729)))
	var x1732 uint32
	var x1733 uint32
	x1732, x1733 = bits.Add32(x1690, x1717, uint32(uint1(x1731)))
	var x1734 uint32
	var x1735 uint32
	x1734, x1735 = bits.Add32(x1692, x1719, uint32(uint1(x1733)))
	var x1736 uint32
	_, x1736 = bits.Mul32(x1720, 0xffffffff)
	var x1738 uint32
	var x1739 uint32
	x1739, x1738 = bits.Mul32(x1736, 0xffffffff)
	var x1740 uint32
	var x1741 uint32
	x1741, x1740 = bits.Mul32(x1736, 0xffffffff)
	var x1742 uint32
	var x1743 uint32
	x1743, x1742 = bits.Mul32(x1736, 0xffffffff)
	var x1744 uint32
	var x1745 uint32
	x1745, x1744 = bits.Mul32(x1736, 0xffffffff)
	var x1746 uint32
	var x1747 uint32
	x1746, x1747 = bits.Add32(x1745, x1742, uint32(0x0))
	var x1748 uint32
	var x1749 uint32
	x1748, x1749 = bits.Add32(x1743, x1740, uint32(uint1(x1747)))
	var x1750 uint32
	var x1751 uint32
	x1750, x1751 = bits.Add32(x1741, x1738, uint32(uint1(x1749)))
	x1752 := (uint32(uint1(x1751)) + x1739)
	var x1754 uint32
	_, x1754 = bits.Add32(x1720, x1736, uint32(0x0))
	var x1755 uint32
	var x1756 uint32
	x1755, x1756 = bits.Add32(x1722, uint32(0x0), uint32(uint1(x1754)))
	var x1757 uint32
	var x1758 uint32
	x1757, x1758 = bits.Add32(x1724, uint32(0x0), uint32(uint1(x1756)))
	var x1759 uint32
	var x1760 uint32
	x1759, x1760 = bits.Add32(x1726, x1744, uint32(uint1(x1758)))
	var x1761 uint32
	var x1762 uint32
	x1761, x1762 = bits.Add32(x1728, x1746, uint32(uint1(x1760)))
	var x1763 uint32
	var x1764 uint32
	x1763, x1764 = bits.Add32(x1730, x1748, uint32(uint1(x1762)))
	var x1765 uint32
	var x1766 uint32
	x1765, x1766 = bits.Add32(x1732, x1750, uint32(uint1(x1764)))
	var x1767 uint32
	var x1768 uint32
	x1767, x1768 = bits.Add32(x1734, x1752, uint32(uint1(x1766)))
	x1769 := (uint32(uint1(x1768)) + uint32(uint1(x1735)))
	var x1770 uint32
	var x1771 uint32
	x1771, x1770 = bits.Mul32(x1359, arg3[6])
	var x1772 uint32
	var x1773 uint32
	x1773, x1772 = bits.Mul32(x1359, arg3[5])
	var x1774 uint32
	var x1775 uint32
	x1775, x1774 = bits.Mul32(x1359, arg3[4])
	var x1776 uint32
	var x1777 uint32
	x1777, x1776 = bits.Mul32(x1359, arg3[3])
	var x1778 uint32
	var x1779 uint32
	x1779, x1778 = bits.Mul32(x1359, arg3[2])
	var x1780 uint32
	var x1781 uint32
	x1781, x1780 = bits.Mul32(x1359, arg3[1])
	var x1782 uint32
	var x1783 uint32
	x1783, x1782 = bits.Mul32(x1359, arg3[0])
	var x1784 uint32
	var x1785 uint32
	x1784, x1785 = bits.Add32(x1783, x1780, uint32(0x0))
	var x1786 uint32
	var x1787 uint32
	x1786, x1787 = bits.Add32(x1781, x1778, uint32(uint1(x1785)))
	var x1788 uint32
	var x1789 uint32
	x1788, x1789 = bits.Add32(x1779, x1776, uint32(uint1(x1787)))
	var x1790 uint32
	var x1791 uint32
	x1790, x1791 = bits.Add32(x1777, x1774, uint32(uint1(x1789)))
	var x1792 uint32
	var x1793 uint32
	x1792, x1793 = bits.Add32(x1775, x1772, uint32(uint1(x1791)))
	var x1794 uint32
	var x1795 uint32
	x1794, x1795 = bits.Add32(x1773, x1770, uint32(uint1(x1793)))
	x1796 := (uint32(uint1(x1795)) + x1771)
	var x1797 uint32
	var x1798 uint32
	x1797, x1798 = bits.Add32(x1755, x1782, uint32(0x0))
	var x1799 uint32
	var x1800 uint32
	x1799, x1800 = bits.Add32(x1757, x1784, uint32(uint1(x1798)))
	var x1801 uint32
	var x1802 uint32
	x1801, x1802 = bits.Add32(x1759, x1786, uint32(uint1(x1800)))
	var x1803 uint32
	var x1804 uint32
	x1803, x1804 = bits.Add32(x1761, x1788, uint32(uint1(x1802)))
	var x1805 uint32
	var x1806 uint32
	x1805, x1806 = bits.Add32(x1763, x1790, uint32(uint1(x1804)))
	var x1807 uint32
	var x1808 uint32
	x1807, x1808 = bits.Add32(x1765, x1792, uint32(uint1(x1806)))
	var x1809 uint32
	var x1810 uint32
	x1809, x1810 = bits.Add32(x1767, x1794, uint32(uint1(x1808)))
	var x1811 uint32
	var x1812 uint32
	x1811, x1812 = bits.Add32(x1769, x1796, uint32(uint1(x1810)))
	var x1813 uint32
	_, x1813 = bits.Mul32(x1797, 0xffffffff)
	var x1815 uint32
	var x1816 uint32
	x1816, x1815 = bits.Mul32(x1813, 0xffffffff)
	var x1817 uint32
	var x1818 uint32
	x1818, x1817 = bits.Mul32(x1813, 0xffffffff)
	var x1819 uint32
	var x1820 uint32
	x1820, x1819 = bits.Mul32(x1813, 0xffffffff)
	var x1821 uint32
	var x1822 uint32
	x1822, x1821 = bits.Mul32(x1813, 0xffffffff)
	var x1823 uint32
	var x1824 uint32
	x1823, x1824 = bits.Add32(x1822, x1819, uint32(0x0))
	var x1825 uint32
	var x1826 uint32
	x1825, x1826 = bits.Add32(x1820, x1817, uint32(uint1(x1824)))
	var x1827 uint32
	var x1828 uint32
	x1827, x1828 = bits.Add32(x1818, x1815, uint32(uint1(x1826)))
	x1829 := (uint32(uint1(x1828)) + x1816)
	var x1831 uint32
	_, x1831 = bits.Add32(x1797, x1813, uint32(0x0))
	var x1832 uint32
	var x1833 uint32
	x1832, x1833 = bits.Add32(x1799, uint32(0x0), uint32(uint1(x1831)))
	var x1834 uint32
	var x1835 uint32
	x1834, x1835 = bits.Add32(x1801, uint32(0x0), uint32(uint1(x1833)))
	var x1836 uint32
	var x1837 uint32
	x1836, x1837 = bits.Add32(x1803, x1821, uint32(uint1(x1835)))
	var x1838 uint32
	var x1839 uint32
	x1838, x1839 = bits.Add32(x1805, x1823, uint32(uint1(x1837)))
	var x1840 uint32
	var x1841 uint32
	x1840, x1841 = bits.Add32(x1807, x1825, uint32(uint1(x1839)))
	var x1842 uint32
	var x1843 uint32
	x1842, x1843 = bits.Add32(x1809, x1827, uint32(uint1(x1841)))
	var x1844 uint32
	var x1845 uint32
	x1844, x1845 = bits.Add32(x1811, x1829, uint32(uint1(x1843)))
	x1846 := (uint32(uint1(x1845)) + uint32(uint1(x1812)))
	var x1847 uint32
	var x1848 uint32
	x1848, x1847 = bits.Mul32(x1360, arg3[6])
	var x1849 uint32
	var x1850 uint32
	x1850, x1849 = bits.Mul32(x1360, arg3[5])
	var x1851 uint32
	var x1852 uint32
	x1852, x1851 = bits.Mul32(x1360, arg3[4])
	var x1853 uint32
	var x1854 uint32
	x1854, x1853 = bits.Mul32(x1360, arg3[3])
	var x1855 uint32
	var x1856 uint32
	x1856, x1855 = bits.Mul32(x1360, arg3[2])
	var x1857 uint32
	var x1858 uint32
	x1858, x1857 = bits.Mul32(x1360, arg3[1])
	var x1859 uint32
	var x1860 uint32
	x1860, x1859 = bits.Mul32(x1360, arg3[0])
	var x1861 uint32
	var x1862 uint32
	x1861, x1862 = bits.Add32(x1860, x1857, uint32(0x0))
	var x1863 uint32
	var x1864 uint32
	x1863, x1864 = bits.Add32(x1858, x1855, uint32(uint1(x1862)))
	var x1865 uint32
	var x1866 uint32
	x1865, x1866 = bits.Add32(x1856, x1853, uint32(uint1(x1864)))
	var x1867 uint32
	var x1868 uint32
	x1867, x1868 = bits.Add32(x1854, x1851, uint32(uint1(x1866)))
	var x1869 uint32
	var x1870 uint32
	x1869, x1870 = bits.Add32(x1852, x1849, uint32(uint1(x1868)))
	var x1871 uint32
	var x1872 uint32
	x1871, x1872 = bits.Add32(x1850, x1847, uint32(uint1(x1870)))
	x1873 := (uint32(uint1(x1872)) + x1848)
	var x1874 uint32
	var x1875 uint32
	x1874, x1875 = bits.Add32(x1832, x1859, uint32(0x0))
	var x1876 uint32
	var x1877 uint32
	x1876, x1877 = bits.Add32(x1834, x1861, uint32(uint1(x1875)))
	var x1878 uint32
	var x1879 uint32
	x1878, x1879 = bits.Add32(x1836, x1863, uint32(uint1(x1877)))
	var x1880 uint32
	var x1881 uint32
	x1880, x1881 = bits.Add32(x1838, x1865, uint32(uint1(x1879)))
	var x1882 uint32
	var x1883 uint32
	x1882, x1883 = bits.Add32(x1840, x1867, uint32(uint1(x1881)))
	var x1884 uint32
	var x1885 uint32
	x1884, x1885 = bits.Add32(x1842, x1869, uint32(uint1(x1883)))
	var x1886 uint32
	var x1887 uint32
	x1886, x1887 = bits.Add32(x1844, x1871, uint32(uint1(x1885)))
	var x1888 uint32
	var x1889 uint32
	x1888, x1889 = bits.Add32(x1846, x1873, uint32(uint1(x1887)))
	var x1890 uint32
	_, x1890 = bits.Mul32(x1874, 0xffffffff)
	var x1892 uint32
	var x1893 uint32
	x1893, x1892 = bits.Mul32(x1890, 0xffffffff)
	var x1894 uint32
	var x1895 uint32
	x1895, x1894 = bits.Mul32(x1890, 0xffffffff)
	var x1896 uint32
	var x1897 uint32
	x1897, x1896 = bits.Mul32(x1890, 0xffffffff)
	var x1898 uint32
	var x1899 uint32
	x1899, x1898 = bits.Mul32(x1890, 0xffffffff)
	var x1900 uint32
	var x1901 uint32
	x1900, x1901 = bits.Add32(x1899, x1896, uint32(0x0))
	var x1902 uint32
	var x1903 uint32
	x1902, x1903 = bits.Add32(x1897, x1894, uint32(uint1(x1901)))
	var x1904 uint32
	var x1905 uint32
	x1904, x1905 = bits.Add32(x1895, x1892, uint32(uint1(x1903)))
	x1906 := (uint32(uint1(x1905)) + x1893)
	var x1908 uint32
	_, x1908 = bits.Add32(x1874, x1890, uint32(0x0))
	var x1909 uint32
	var x1910 uint32
	x1909, x1910 = bits.Add32(x1876, uint32(0x0), uint32(uint1(x1908)))
	var x1911 uint32
	var x1912 uint32
	x1911, x1912 = bits.Add32(x1878, uint32(0x0), uint32(uint1(x1910)))
	var x1913 uint32
	var x1914 uint32
	x1913, x1914 = bits.Add32(x1880, x1898, uint32(uint1(x1912)))
	var x1915 uint32
	var x1916 uint32
	x1915, x1916 = bits.Add32(x1882, x1900, uint32(uint1(x1914)))
	var x1917 uint32
	var x1918 uint32
	x1917, x1918 = bits.Add32(x1884, x1902, uint32(uint1(x1916)))
	var x1919 uint32
	var x1920 uint32
	x1919, x1920 = bits.Add32(x1886, x1904, uint32(uint1(x1918)))
	var x1921 uint32
	var x1922 uint32
	x1921, x1922 = bits.Add32(x1888, x1906, uint32(uint1(x1920)))
	x1923 := (uint32(uint1(x1922)) + uint32(uint1(x1889)))
	var x1924 uint32
	var x1925 uint32
	x1925, x1924 = bits.Mul32(x1361, arg3[6])
	var x1926 uint32
	var x1927 uint32
	x1927, x1926 = bits.Mul32(x1361, arg3[5])
	var x1928 uint32
	var x1929 uint32
	x1929, x1928 = bits.Mul32(x1361, arg3[4])
	var x1930 uint32
	var x1931 uint32
	x1931, x1930 = bits.Mul32(x1361, arg3[3])
	var x1932 uint32
	var x1933 uint32
	x1933, x1932 = bits.Mul32(x1361, arg3[2])
	var x1934 uint32
	var x1935 uint32
	x1935, x1934 = bits.Mul32(x1361, arg3[1])
	var x1936 uint32
	var x1937 uint32
	x1937, x1936 = bits.Mul32(x1361, arg3[0])
	var x1938 uint32
	var x1939 uint32
	x1938, x1939 = bits.Add32(x1937, x1934, uint32(0x0))
	var x1940 uint32
	var x1941 uint32
	x1940, x1941 = bits.Add32(x1935, x1932, uint32(uint1(x1939)))
	var x1942 uint32
	var x1943 uint32
	x1942, x1943 = bits.Add32(x1933, x1930, uint32(uint1(x1941)))
	var x1944 uint32
	var x1945 uint32
	x1944, x1945 = bits.Add32(x1931, x1928, uint32(uint1(x1943)))
	var x1946 uint32
	var x1947 uint32
	x1946, x1947 = bits.Add32(x1929, x1926, uint32(uint1(x1945)))
	var x1948 uint32
	var x1949 uint32
	x1948, x1949 = bits.Add32(x1927, x1924, uint32(uint1(x1947)))
	x1950 := (uint32(uint1(x1949)) + x1925)
	var x1951 uint32
	var x1952 uint32
	x1951, x1952 = bits.Add32(x1909, x1936, uint32(0x0))
	var x1953 uint32
	var x1954 uint32
	x1953, x1954 = bits.Add32(x1911, x1938, uint32(uint1(x1952)))
	var x1955 uint32
	var x1956 uint32
	x1955, x1956 = bits.Add32(x1913, x1940, uint32(uint1(x1954)))
	var x1957 uint32
	var x1958 uint32
	x1957, x1958 = bits.Add32(x1915, x1942, uint32(uint1(x1956)))
	var x1959 uint32
	var x1960 uint32
	x1959, x1960 = bits.Add32(x1917, x1944, uint32(uint1(x1958)))
	var x1961 uint32
	var x1962 uint32
	x1961, x1962 = bits.Add32(x1919, x1946, uint32(uint1(x1960)))
	var x1963 uint32
	var x1964 uint32
	x1963, x1964 = bits.Add32(x1921, x1948, uint32(uint1(x1962)))
	var x1965 uint32
	var x1966 uint32
	x1965, x1966 = bits.Add32(x1923, x1950, uint32(uint1(x1964)))
	var x1967 uint32
	_, x1967 = bits.Mul32(x1951, 0xffffffff)
	var x1969 uint32
	var x1970 uint32
	x1970, x1969 = bits.Mul32(x1967, 0xffffffff)
	var x1971 uint32
	var x1972 uint32
	x1972, x1971 = bits.Mul32(x1967, 0xffffffff)
	var x1973 uint32
	var x1974 uint32
	x1974, x1973 = bits.Mul32(x1967, 0xffffffff)
	var x1975 uint32
	var x1976 uint32
	x1976, x1975 = bits.Mul32(x1967, 0xffffffff)
	var x1977 uint32
	var x1978 uint32
	x1977, x1978 = bits.Add32(x1976, x1973, uint32(0x0))
	var x1979 uint32
	var x1980 uint32
	x1979, x1980 = bits.Add32(x1974, x1971, uint32(uint1(x1978)))
	var x1981 uint32
	var x1982 uint32
	x1981, x1982 = bits.Add32(x1972, x1969, uint32(uint1(x1980)))
	x1983 := (uint32(uint1(x1982)) + x1970)
	var x1985 uint32
	_, x1985 = bits.Add32(x1951, x1967, uint32(0x0))
	var x1986 uint32
	var x1987 uint32
	x1986, x1987 = bits.Add32(x1953, uint32(0x0), uint32(uint1(x1985)))
	var x1988 uint32
	var x1989 uint32
	x1988, x1989 = bits.Add32(x1955, uint32(0x0), uint32(uint1(x1987)))
	var x1990 uint32
	var x1991 uint32
	x1990, x1991 = bits.Add32(x1957, x1975, uint32(uint1(x1989)))
	var x1992 uint32
	var x1993 uint32
	x1992, x1993 = bits.Add32(x1959, x1977, uint32(uint1(x1991)))
	var x1994 uint32
	var x1995 uint32
	x1994, x1995 = bits.Add32(x1961, x1979, uint32(uint1(x1993)))
	var x1996 uint32
	var x1997 uint32
	x1996, x1997 = bits.Add32(x1963, x1981, uint32(uint1(x1995)))
	var x1998 uint32
	var x1999 uint32
	x1998, x1999 = bits.Add32(x1965, x1983, uint32(uint1(x1997)))
	x2000 := (uint32(uint1(x1999)) + uint32(uint1(x1966)))
	var x2001 uint32
	var x2002 uint32
	x2001, x2002 = bits.Sub32(x1986, uint32(0x1), uint32(0x0))
	var x2003 uint32
	var x2004 uint32
	x2003, x2004 = bits.Sub32(x1988, uint32(0x0), uint32(uint1(x2002)))
	var x2005 uint32
	var x2006 uint32
	x2005, x2006 = bits.Sub32(x1990, uint32(0x0), uint32(uint1(x2004)))
	var x2007 uint32
	var x2008 uint32
	x2007, x2008 = bits.Sub32(x1992, 0xffffffff, uint32(uint1(x2006)))
	var x2009 uint32
	var x2010 uint32
	x2009, x2010 = bits.Sub32(x1994, 0xffffffff, uint32(uint1(x2008)))
	var x2011 uint32
	var x2012 uint32
	x2011, x2012 = bits.Sub32(x1996, 0xffffffff, uint32(uint1(x2010)))
	var x2013 uint32
	var x2014 uint32
	x2013, x2014 = bits.Sub32(x1998, 0xffffffff, uint32(uint1(x2012)))
	var x2016 uint32
	_, x2016 = bits.Sub32(x2000, uint32(0x0), uint32(uint1(x2014)))
	var x2017 uint32
	cmovznzU32(&x2017, uint1(x2016), x2001, x1986)
	var x2018 uint32
	cmovznzU32(&x2018, uint1(x2016), x2003, x1988)
	var x2019 uint32
	cmovznzU32(&x2019, uint1(x2016), x2005, x1990)
	var x2020 uint32
	cmovznzU32(&x2020, uint1(x2016), x2007, x1992)
	var x2021 uint32
	cmovznzU32(&x2021, uint1(x2016), x2009, x1994)
	var x2022 uint32
	cmovznzU32(&x2022, uint1(x2016), x2011, x1996)
	var x2023 uint32
	cmovznzU32(&x2023, uint1(x2016), x2013, x1998)
	var x2024 uint32
	var x2025 uint32
	x2025, x2024 = bits.Mul32(x1394, arg4[6])
	var x2026 uint32
	var x2027 uint32
	x2027, x2026 = bits.Mul32(x1394, arg4[5])
	var x2028 uint32
	var x2029 uint32
	x2029, x2028 = bits.Mul32(x1394, arg4[4])
	var x2030 uint32
	var x2031 uint32
	x2031, x2030 = bits.Mul32(x1394, arg4[3])
	var x2032 uint32
	var x2033 uint32
	x2033, x2032 = bits.Mul32(x1394, arg4[2])
	var x2034 uint32
	var x2035 uint32
	x2035, x2034 = bits.Mul32(x1394, arg4[1])
	var x2036 uint32
	var x2037 uint32
	x2037, x2036 = bits.Mul32(x1394, arg4[0])
	var x2038 uint32
	var x2039 uint32
	x2038, x2039 = bits.Add32(x2037, x2034, uint32(0x0))
	var x2040 uint32
	var x2041 uint32
	x2040, x2041 = bits.Add32(x2035, x2032, uint32(uint1(x2039)))
	var x2042 uint32
	var x2043 uint32
	x2042, x2043 = bits.Add32(x2033, x2030, uint32(uint1(x2041)))
	var x2044 uint32
	var x2045 uint32
	x2044, x2045 = bits.Add32(x2031, x2028, uint32(uint1(x2043)))
	var x2046 uint32
	var x2047 uint32
	x2046, x2047 = bits.Add32(x2029, x2026, uint32(uint1(x2045)))
	var x2048 uint32
	var x2049 uint32
	x2048, x2049 = bits.Add32(x2027, x2024, uint32(uint1(x2047)))
	x2050 := (uint32(uint1(x2049)) + x2025)
	var x2051 uint32
	_, x2051 = bits.Mul32(x2036, 0xffffffff)
	var x2053 uint32
	var x2054 uint32
	x2054, x2053 = bits.Mul32(x2051, 0xffffffff)
	var x2055 uint32
	var x2056 uint32
	x2056, x2055 = bits.Mul32(x2051, 0xffffffff)
	var x2057 uint32
	var x2058 uint32
	x2058, x2057 = bits.Mul32(x2051, 0xffffffff)
	var x2059 uint32
	var x2060 uint32
	x2060, x2059 = bits.Mul32(x2051, 0xffffffff)
	var x2061 uint32
	var x2062 uint32
	x2061, x2062 = bits.Add32(x2060, x2057, uint32(0x0))
	var x2063 uint32
	var x2064 uint32
	x2063, x2064 = bits.Add32(x2058, x2055, uint32(uint1(x2062)))
	var x2065 uint32
	var x2066 uint32
	x2065, x2066 = bits.Add32(x2056, x2053, uint32(uint1(x2064)))
	x2067 := (uint32(uint1(x2066)) + x2054)
	var x2069 uint32
	_, x2069 = bits.Add32(x2036, x2051, uint32(0x0))
	var x2070 uint32
	var x2071 uint32
	x2070, x2071 = bits.Add32(x2038, uint32(0x0), uint32(uint1(x2069)))
	var x2072 uint32
	var x2073 uint32
	x2072, x2073 = bits.Add32(x2040, uint32(0x0), uint32(uint1(x2071)))
	var x2074 uint32
	var x2075 uint32
	x2074, x2075 = bits.Add32(x2042, x2059, uint32(uint1(x2073)))
	var x2076 uint32
	var x2077 uint32
	x2076, x2077 = bits.Add32(x2044, x2061, uint32(uint1(x2075)))
	var x2078 uint32
	var x2079 uint32
	x2078, x2079 = bits.Add32(x2046, x2063, uint32(uint1(x2077)))
	var x2080 uint32
	var x2081 uint32
	x2080, x2081 = bits.Add32(x2048, x2065, uint32(uint1(x2079)))
	var x2082 uint32
	var x2083 uint32
	x2082, x2083 = bits.Add32(x2050, x2067, uint32(uint1(x2081)))
	var x2084 uint32
	var x2085 uint32
	x2085, x2084 = bits.Mul32(x1395, arg4[6])
	var x2086 uint32
	var x2087 uint32
	x2087, x2086 = bits.Mul32(x1395, arg4[5])
	var x2088 uint32
	var x2089 uint32
	x2089, x2088 = bits.Mul32(x1395, arg4[4])
	var x2090 uint32
	var x2091 uint32
	x2091, x2090 = bits.Mul32(x1395, arg4[3])
	var x2092 uint32
	var x2093 uint32
	x2093, x2092 = bits.Mul32(x1395, arg4[2])
	var x2094 uint32
	var x2095 uint32
	x2095, x2094 = bits.Mul32(x1395, arg4[1])
	var x2096 uint32
	var x2097 uint32
	x2097, x2096 = bits.Mul32(x1395, arg4[0])
	var x2098 uint32
	var x2099 uint32
	x2098, x2099 = bits.Add32(x2097, x2094, uint32(0x0))
	var x2100 uint32
	var x2101 uint32
	x2100, x2101 = bits.Add32(x2095, x2092, uint32(uint1(x2099)))
	var x2102 uint32
	var x2103 uint32
	x2102, x2103 = bits.Add32(x2093, x2090, uint32(uint1(x2101)))
	var x2104 uint32
	var x2105 uint32
	x2104, x2105 = bits.Add32(x2091, x2088, uint32(uint1(x2103)))
	var x2106 uint32
	var x2107 uint32
	x2106, x2107 = bits.Add32(x2089, x2086, uint32(uint1(x2105)))
	var x2108 uint32
	var x2109 uint32
	x2108, x2109 = bits.Add32(x2087, x2084, uint32(uint1(x2107)))
	x2110 := (uint32(uint1(x2109)) + x2085)
	var x2111 uint32
	var x2112 uint32
	x2111, x2112 = bits.Add32(x2070, x2096, uint32(0x0))
	var x2113 uint32
	var x2114 uint32
	x2113, x2114 = bits.Add32(x2072, x2098, uint32(uint1(x2112)))
	var x2115 uint32
	var x2116 uint32
	x2115, x2116 = bits.Add32(x2074, x2100, uint32(uint1(x2114)))
	var x2117 uint32
	var x2118 uint32
	x2117, x2118 = bits.Add32(x2076, x2102, uint32(uint1(x2116)))
	var x2119 uint32
	var x2120 uint32
	x2119, x2120 = bits.Add32(x2078, x2104, uint32(uint1(x2118)))
	var x2121 uint32
	var x2122 uint32
	x2121, x2122 = bits.Add32(x2080, x2106, uint32(uint1(x2120)))
	var x2123 uint32
	var x2124 uint32
	x2123, x2124 = bits.Add32(x2082, x2108, uint32(uint1(x2122)))
	var x2125 uint32
	var x2126 uint32
	x2125, x2126 = bits.Add32(uint32(uint1(x2083)), x2110, uint32(uint1(x2124)))
	var x2127 uint32
	_, x2127 = bits.Mul32(x2111, 0xffffffff)
	var x2129 uint32
	var x2130 uint32
	x2130, x2129 = bits.Mul32(x2127, 0xffffffff)
	var x2131 uint32
	var x2132 uint32
	x2132, x2131 = bits.Mul32(x2127, 0xffffffff)
	var x2133 uint32
	var x2134 uint32
	x2134, x2133 = bits.Mul32(x2127, 0xffffffff)
	var x2135 uint32
	var x2136 uint32
	x2136, x2135 = bits.Mul32(x2127, 0xffffffff)
	var x2137 uint32
	var x2138 uint32
	x2137, x2138 = bits.Add32(x2136, x2133, uint32(0x0))
	var x2139 uint32
	var x2140 uint32
	x2139, x2140 = bits.Add32(x2134, x2131, uint32(uint1(x2138)))
	var x2141 uint32
	var x2142 uint32
	x2141, x2142 = bits.Add32(x2132, x2129, uint32(uint1(x2140)))
	x2143 := (uint32(uint1(x2142)) + x2130)
	var x2145 uint32
	_, x2145 = bits.Add32(x2111, x2127, uint32(0x0))
	var x2146 uint32
	var x2147 uint32
	x2146, x2147 = bits.Add32(x2113, uint32(0x0), uint32(uint1(x2145)))
	var x2148 uint32
	var x2149 uint32
	x2148, x2149 = bits.Add32(x2115, uint32(0x0), uint32(uint1(x2147)))
	var x2150 uint32
	var x2151 uint32
	x2150, x2151 = bits.Add32(x2117, x2135, uint32(uint1(x2149)))
	var x2152 uint32
	var x2153 uint32
	x2152, x2153 = bits.Add32(x2119, x2137, uint32(uint1(x2151)))
	var x2154 uint32
	var x2155 uint32
	x2154, x2155 = bits.Add32(x2121, x2139, uint32(uint1(x2153)))
	var x2156 uint32
	var x2157 uint32
	x2156, x2157 = bits.Add32(x2123, x2141, uint32(uint1(x2155)))
	var x2158 uint32
	var x2159 uint32
	x2158, x2159 = bits.Add32(x2125, x2143, uint32(uint1(x2157)))
	x2160 := (uint32(uint1(x2159)) + uint32(uint1(x2126)))
	var x2161 uint32
	var x2162 uint32
	x2162, x2161 = bits.Mul32(x1396, arg4[6])
	var x2163 uint32
	var x2164 uint32
	x2164, x2163 = bits.Mul32(x1396, arg4[5])
	var x2165 uint32
	var x2166 uint32
	x2166, x2165 = bits.Mul32(x1396, arg4[4])
	var x2167 uint32
	var x2168 uint32
	x2168, x2167 = bits.Mul32(x1396, arg4[3])
	var x2169 uint32
	var x2170 uint32
	x2170, x2169 = bits.Mul32(x1396, arg4[2])
	var x2171 uint32
	var x2172 uint32
	x2172, x2171 = bits.Mul32(x1396, arg4[1])
	var x2173 uint32
	var x2174 uint32
	x2174, x2173 = bits.Mul32(x1396, arg4[0])
	var x2175 uint32
	var x2176 uint32
	x2175, x2176 = bits.Add32(x2174, x2171, uint32(0x0))
	var x2177 uint32
	var x2178 uint32
	x2177, x2178 = bits.Add32(x2172, x2169, uint32(uint1(x2176)))
	var x2179 uint32
	var x2180 uint32
	x2179, x2180 = bits.Add32(x2170, x2167, uint32(uint1(x2178)))
	var x2181 uint32
	var x2182 uint32
	x2181, x2182 = bits.Add32(x2168, x2165, uint32(uint1(x2180)))
	var x2183 uint32
	var x2184 uint32
	x2183, x2184 = bits.Add32(x2166, x2163, uint32(uint1(x2182)))
	var x2185 uint32
	var x2186 uint32
	x2185, x2186 = bits.Add32(x2164, x2161, uint32(uint1(x2184)))
	x2187 := (uint32(uint1(x2186)) + x2162)
	var x2188 uint32
	var x2189 uint32
	x2188, x2189 = bits.Add32(x2146, x2173, uint32(0x0))
	var x2190 uint32
	var x2191 uint32
	x2190, x2191 = bits.Add32(x2148, x2175, uint32(uint1(x2189)))
	var x2192 uint32
	var x2193 uint32
	x2192, x2193 = bits.Add32(x2150, x2177, uint32(uint1(x2191)))
	var x2194 uint32
	var x2195 uint32
	x2194, x2195 = bits.Add32(x2152, x2179, uint32(uint1(x2193)))
	var x2196 uint32
	var x2197 uint32
	x2196, x2197 = bits.Add32(x2154, x2181, uint32(uint1(x2195)))
	var x2198 uint32
	var x2199 uint32
	x2198, x2199 = bits.Add32(x2156, x2183, uint32(uint1(x2197)))
	var x2200 uint32
	var x2201 uint32
	x2200, x2201 = bits.Add32(x2158, x2185, uint32(uint1(x2199)))
	var x2202 uint32
	var x2203 uint32
	x2202, x2203 = bits.Add32(x2160, x2187, uint32(uint1(x2201)))
	var x2204 uint32
	_, x2204 = bits.Mul32(x2188, 0xffffffff)
	var x2206 uint32
	var x2207 uint32
	x2207, x2206 = bits.Mul32(x2204, 0xffffffff)
	var x2208 uint32
	var x2209 uint32
	x2209, x2208 = bits.Mul32(x2204, 0xffffffff)
	var x2210 uint32
	var x2211 uint32
	x2211, x2210 = bits.Mul32(x2204, 0xffffffff)
	var x2212 uint32
	var x2213 uint32
	x2213, x2212 = bits.Mul32(x2204, 0xffffffff)
	var x2214 uint32
	var x2215 uint32
	x2214, x2215 = bits.Add32(x2213, x2210, uint32(0x0))
	var x2216 uint32
	var x2217 uint32
	x2216, x2217 = bits.Add32(x2211, x2208, uint32(uint1(x2215)))
	var x2218 uint32
	var x2219 uint32
	x2218, x2219 = bits.Add32(x2209, x2206, uint32(uint1(x2217)))
	x2220 := (uint32(uint1(x2219)) + x2207)
	var x2222 uint32
	_, x2222 = bits.Add32(x2188, x2204, uint32(0x0))
	var x2223 uint32
	var x2224 uint32
	x2223, x2224 = bits.Add32(x2190, uint32(0x0), uint32(uint1(x2222)))
	var x2225 uint32
	var x2226 uint32
	x2225, x2226 = bits.Add32(x2192, uint32(0x0), uint32(uint1(x2224)))
	var x2227 uint32
	var x2228 uint32
	x2227, x2228 = bits.Add32(x2194, x2212, uint32(uint1(x2226)))
	var x2229 uint32
	var x2230 uint32
	x2229, x2230 = bits.Add32(x2196, x2214, uint32(uint1(x2228)))
	var x2231 uint32
	var x2232 uint32
	x2231, x2232 = bits.Add32(x2198, x2216, uint32(uint1(x2230)))
	var x2233 uint32
	var x2234 uint32
	x2233, x2234 = bits.Add32(x2200, x2218, uint32(uint1(x2232)))
	var x2235 uint32
	var x2236 uint32
	x2235, x2236 = bits.Add32(x2202, x2220, uint32(uint1(x2234)))
	x2237 := (uint32(uint1(x2236)) + uint32(uint1(x2203)))
	var x2238 uint32
	var x2239 uint32
	x2239, x2238 = bits.Mul32(x1397, arg4[6])
	var x2240 uint32
	var x2241 uint32
	x2241, x2240 = bits.Mul32(x1397, arg4[5])
	var x2242 uint32
	var x2243 uint32
	x2243, x2242 = bits.Mul32(x1397, arg4[4])
	var x2244 uint32
	var x2245 uint32
	x2245, x2244 = bits.Mul32(x1397, arg4[3])
	var x2246 uint32
	var x2247 uint32
	x2247, x2246 = bits.Mul32(x1397, arg4[2])
	var x2248 uint32
	var x2249 uint32
	x2249, x2248 = bits.Mul32(x1397, arg4[1])
	var x2250 uint32
	var x2251 uint32
	x2251, x2250 = bits.Mul32(x1397, arg4[0])
	var x2252 uint32
	var x2253 uint32
	x2252, x2253 = bits.Add32(x2251, x2248, uint32(0x0))
	var x2254 uint32
	var x2255 uint32
	x2254, x2255 = bits.Add32(x2249, x2246, uint32(uint1(x2253)))
	var x2256 uint32
	var x2257 uint32
	x2256, x2257 = bits.Add32(x2247, x2244, uint32(uint1(x2255)))
	var x2258 uint32
	var x2259 uint32
	x2258, x2259 = bits.Add32(x2245, x2242, uint32(uint1(x2257)))
	var x2260 uint32
	var x2261 uint32
	x2260, x2261 = bits.Add32(x2243, x2240, uint32(uint1(x2259)))
	var x2262 uint32
	var x2263 uint32
	x2262, x2263 = bits.Add32(x2241, x2238, uint32(uint1(x2261)))
	x2264 := (uint32(uint1(x2263)) + x2239)
	var x2265 uint32
	var x2266 uint32
	x2265, x2266 = bits.Add32(x2223, x2250, uint32(0x0))
	var x2267 uint32
	var x2268 uint32
	x2267, x2268 = bits.Add32(x2225, x2252, uint32(uint1(x2266)))
	var x2269 uint32
	var x2270 uint32
	x2269, x2270 = bits.Add32(x2227, x2254, uint32(uint1(x2268)))
	var x2271 uint32
	var x2272 uint32
	x2271, x2272 = bits.Add32(x2229, x2256, uint32(uint1(x2270)))
	var x2273 uint32
	var x2274 uint32
	x2273, x2274 = bits.Add32(x2231, x2258, uint32(uint1(x2272)))
	var x2275 uint32
	var x2276 uint32
	x2275, x2276 = bits.Add32(x2233, x2260, uint32(uint1(x2274)))
	var x2277 uint32
	var x2278 uint32
	x2277, x2278 = bits.Add32(x2235, x2262, uint32(uint1(x2276)))
	var x2279 uint32
	var x2280 uint32
	x2279, x2280 = bits.Add32(x2237, x2264, uint32(uint1(x2278)))
	var x2281 uint32
	_, x2281 = bits.Mul32(x2265, 0xffffffff)
	var x2283 uint32
	var x2284 uint32
	x2284, x2283 = bits.Mul32(x2281, 0xffffffff)
	var x2285 uint32
	var x2286 uint32
	x2286, x2285 = bits.Mul32(x2281, 0xffffffff)
	var x2287 uint32
	var x2288 uint32
	x2288, x2287 = bits.Mul32(x2281, 0xffffffff)
	var x2289 uint32
	var x2290 uint32
	x2290, x2289 = bits.Mul32(x2281, 0xffffffff)
	var x2291 uint32
	var x2292 uint32
	x2291, x2292 = bits.Add32(x2290, x2287, uint32(0x0))
	var x2293 uint32
	var x2294 uint32
	x2293, x2294 = bits.Add32(x2288, x2285, uint32(uint1(x2292)))
	var x2295 uint32
	var x2296 uint32
	x2295, x2296 = bits.Add32(x2286, x2283, uint32(uint1(x2294)))
	x2297 := (uint32(uint1(x2296)) + x2284)
	var x2299 uint32
	_, x2299 = bits.Add32(x2265, x2281, uint32(0x0))
	var x2300 uint32
	var x2301 uint32
	x2300, x2301 = bits.Add32(x2267, uint32(0x0), uint32(uint1(x2299)))
	var x2302 uint32
	var x2303 uint32
	x2302, x2303 = bits.Add32(x2269, uint32(0x0), uint32(uint1(x2301)))
	var x2304 uint32
	var x2305 uint32
	x2304, x2305 = bits.Add32(x2271, x2289, uint32(uint1(x2303)))
	var x2306 uint32
	var x2307 uint32
	x2306, x2307 = bits.Add32(x2273, x2291, uint32(uint1(x2305)))
	var x2308 uint32
	var x2309 uint32
	x2308, x2309 = bits.Add32(x2275, x2293, uint32(uint1(x2307)))
	var x2310 uint32
	var x2311 uint32
	x2310, x2311 = bits.Add32(x2277, x2295, uint32(uint1(x2309)))
	var x2312 uint32
	var x2313 uint32
	x2312, x2313 = bits.Add32(x2279, x2297, uint32(uint1(x2311)))
	x2314 := (uint32(uint1(x2313)) + uint32(uint1(x2280)))
	var x2315 uint32
	var x2316 uint32
	x2316, x2315 = bits.Mul32(x1398, arg4[6])
	var x2317 uint32
	var x2318 uint32
	x2318, x2317 = bits.Mul32(x1398, arg4[5])
	var x2319 uint32
	var x2320 uint32
	x2320, x2319 = bits.Mul32(x1398, arg4[4])
	var x2321 uint32
	var x2322 uint32
	x2322, x2321 = bits.Mul32(x1398, arg4[3])
	var x2323 uint32
	var x2324 uint32
	x2324, x2323 = bits.Mul32(x1398, arg4[2])
	var x2325 uint32
	var x2326 uint32
	x2326, x2325 = bits.Mul32(x1398, arg4[1])
	var x2327 uint32
	var x2328 uint32
	x2328, x2327 = bits.Mul32(x1398, arg4[0])
	var x2329 uint32
	var x2330 uint32
	x2329, x2330 = bits.Add32(x2328, x2325, uint32(0x0))
	var x2331 uint32
	var x2332 uint32
	x2331, x2332 = bits.Add32(x2326, x2323, uint32(uint1(x2330)))
	var x2333 uint32
	var x2334 uint32
	x2333, x2334 = bits.Add32(x2324, x2321, uint32(uint1(x2332)))
	var x2335 uint32
	var x2336 uint32
	x2335, x2336 = bits.Add32(x2322, x2319, uint32(uint1(x2334)))
	var x2337 uint32
	var x2338 uint32
	x2337, x2338 = bits.Add32(x2320, x2317, uint32(uint1(x2336)))
	var x2339 uint32
	var x2340 uint32
	x2339, x2340 = bits.Add32(x2318, x2315, uint32(uint1(x2338)))
	x2341 := (uint32(uint1(x2340)) + x2316)
	var x2342 uint32
	var x2343 uint32
	x2342, x2343 = bits.Add32(x2300, x2327, uint32(0x0))
	var x2344 uint32
	var x2345 uint32
	x2344, x2345 = bits.Add32(x2302, x2329, uint32(uint1(x2343)))
	var x2346 uint32
	var x2347 uint32
	x2346, x2347 = bits.Add32(x2304, x2331, uint32(uint1(x2345)))
	var x2348 uint32
	var x2349 uint32
	x2348, x2349 = bits.Add32(x2306, x2333, uint32(uint1(x2347)))
	var x2350 uint32
	var x2351 uint32
	x2350, x2351 = bits.Add32(x2308, x2335, uint32(uint1(x2349)))
	var x2352 uint32
	var x2353 uint32
	x2352, x2353 = bits.Add32(x2310, x2337, uint32(uint1(x2351)))
	var x2354 uint32
	var x2355 uint32
	x2354, x2355 = bits.Add32(x2312, x2339, uint32(uint1(x2353)))
	var x2356 uint32
	var x2357 uint32
	x2356, x2357 = bits.Add32(x2314, x2341, uint32(uint1(x2355)))
	var x2358 uint32
	_, x2358 = bits.Mul32(x2342, 0xffffffff)
	var x2360 uint32
	var x2361 uint32
	x2361, x2360 = bits.Mul32(x2358, 0xffffffff)
	var x2362 uint32
	var x2363 uint32
	x2363, x2362 = bits.Mul32(x2358, 0xffffffff)
	var x2364 uint32
	var x2365 uint32
	x2365, x2364 = bits.Mul32(x2358, 0xffffffff)
	var x2366 uint32
	var x2367 uint32
	x2367, x2366 = bits.Mul32(x2358, 0xffffffff)
	var x2368 uint32
	var x2369 uint32
	x2368, x2369 = bits.Add32(x2367, x2364, uint32(0x0))
	var x2370 uint32
	var x2371 uint32
	x2370, x2371 = bits.Add32(x2365, x2362, uint32(uint1(x2369)))
	var x2372 uint32
	var x2373 uint32
	x2372, x2373 = bits.Add32(x2363, x2360, uint32(uint1(x2371)))
	x2374 := (uint32(uint1(x2373)) + x2361)
	var x2376 uint32
	_, x2376 = bits.Add32(x2342, x2358, uint32(0x0))
	var x2377 uint32
	var x2378 uint32
	x2377, x2378 = bits.Add32(x2344, uint32(0x0), uint32(uint1(x2376)))
	var x2379 uint32
	var x2380 uint32
	x2379, x2380 = bits.Add32(x2346, uint32(0x0), uint32(uint1(x2378)))
	var x2381 uint32
	var x2382 uint32
	x2381, x2382 = bits.Add32(x2348, x2366, uint32(uint1(x2380)))
	var x2383 uint32
	var x2384 uint32
	x2383, x2384 = bits.Add32(x2350, x2368, uint32(uint1(x2382)))
	var x2385 uint32
	var x2386 uint32
	x2385, x2386 = bits.Add32(x2352, x2370, uint32(uint1(x2384)))
	var x2387 uint32
	var x2388 uint32
	x2387, x2388 = bits.Add32(x2354, x2372, uint32(uint1(x2386)))
	var x2389 uint32
	var x2390 uint32
	x2389, x2390 = bits.Add32(x2356, x2374, uint32(uint1(x2388)))
	x2391 := (uint32(uint1(x2390)) + uint32(uint1(x2357)))
	var x2392 uint32
	var x2393 uint32
	x2393, x2392 = bits.Mul32(x1399, arg4[6])
	var x2394 uint32
	var x2395 uint32
	x2395, x2394 = bits.Mul32(x1399, arg4[5])
	var x2396 uint32
	var x2397 uint32
	x2397, x2396 = bits.Mul32(x1399, arg4[4])
	var x2398 uint32
	var x2399 uint32
	x2399, x2398 = bits.Mul32(x1399, arg4[3])
	var x2400 uint32
	var x2401 uint32
	x2401, x2400 = bits.Mul32(x1399, arg4[2])
	var x2402 uint32
	var x2403 uint32
	x2403, x2402 = bits.Mul32(x1399, arg4[1])
	var x2404 uint32
	var x2405 uint32
	x2405, x2404 = bits.Mul32(x1399, arg4[0])
	var x2406 uint32
	var x2407 uint32
	x2406, x2407 = bits.Add32(x2405, x2402, uint32(0x0))
	var x2408 uint32
	var x2409 uint32
	x2408, x2409 = bits.Add32(x2403, x2400, uint32(uint1(x2407)))
	var x2410 uint32
	var x2411 uint32
	x2410, x2411 = bits.Add32(x2401, x2398, uint32(uint1(x2409)))
	var x2412 uint32
	var x2413 uint32
	x2412, x2413 = bits.Add32(x2399, x2396, uint32(uint1(x2411)))
	var x2414 uint32
	var x2415 uint32
	x2414, x2415 = bits.Add32(x2397, x2394, uint32(uint1(x2413)))
	var x2416 uint32
	var x2417 uint32
	x2416, x2417 = bits.Add32(x2395, x2392, uint32(uint1(x2415)))
	x2418 := (uint32(uint1(x2417)) + x2393)
	var x2419 uint32
	var x2420 uint32
	x2419, x2420 = bits.Add32(x2377, x2404, uint32(0x0))
	var x2421 uint32
	var x2422 uint32
	x2421, x2422 = bits.Add32(x2379, x2406, uint32(uint1(x2420)))
	var x2423 uint32
	var x2424 uint32
	x2423, x2424 = bits.Add32(x2381, x2408, uint32(uint1(x2422)))
	var x2425 uint32
	var x2426 uint32
	x2425, x2426 = bits.Add32(x2383, x2410, uint32(uint1(x2424)))
	var x2427 uint32
	var x2428 uint32
	x2427, x2428 = bits.Add32(x2385, x2412, uint32(uint1(x2426)))
	var x2429 uint32
	var x2430 uint32
	x2429, x2430 = bits.Add32(x2387, x2414, uint32(uint1(x2428)))
	var x2431 uint32
	var x2432 uint32
	x2431, x2432 = bits.Add32(x2389, x2416, uint32(uint1(x2430)))
	var x2433 uint32
	var x2434 uint32
	x2433, x2434 = bits.Add32(x2391, x2418, uint32(uint1(x2432)))
	var x2435 uint32
	_, x2435 = bits.Mul32(x2419, 0xffffffff)
	var x2437 uint32
	var x2438 uint32
	x2438, x2437 = bits.Mul32(x2435, 0xffffffff)
	var x2439 uint32
	var x2440 uint32
	x2440, x2439 = bits.Mul32(x2435, 0xffffffff)
	var x2441 uint32
	var x2442 uint32
	x2442, x2441 = bits.Mul32(x2435, 0xffffffff)
	var x2443 uint32
	var x2444 uint32
	x2444, x2443 = bits.Mul32(x2435, 0xffffffff)
	var x2445 uint32
	var x2446 uint32
	x2445, x2446 = bits.Add32(x2444, x2441, uint32(0x0))
	var x2447 uint32
	var x2448 uint32
	x2447, x2448 = bits.Add32(x2442, x2439, uint32(uint1(x2446)))
	var x2449 uint32
	var x2450 uint32
	x2449, x2450 = bits.Add32(x2440, x2437, uint32(uint1(x2448)))
	x2451 := (uint32(uint1(x2450)) + x2438)
	var x2453 uint32
	_, x2453 = bits.Add32(x2419, x2435, uint32(0x0))
	var x2454 uint32
	var x2455 uint32
	x2454, x2455 = bits.Add32(x2421, uint32(0x0), uint32(uint1(x2453)))
	var x2456 uint32
	var x2457 uint32
	x2456, x2457 = bits.Add32(x2423, uint32(0x0), uint32(uint1(x2455)))
	var x2458 uint32
	var x2459 uint32
	x2458, x2459 = bits.Add32(x2425, x2443, uint32(uint1(x2457)))
	var x2460 uint32
	var x2461 uint32
	x2460, x2461 = bits.Add32(x2427, x2445, uint32(uint1(x2459)))
	var x2462 uint32
	var x2463 uint32
	x2462, x2463 = bits.Add32(x2429, x2447, uint32(uint1(x2461)))
	var x2464 uint32
	var x2465 uint32
	x2464, x2465 = bits.Add32(x2431, x2449, uint32(uint1(x2463)))
	var x2466 uint32
	var x2467 uint32
	x2466, x2467 = bits.Add32(x2433, x2451, uint32(uint1(x2465)))
	x2468 := (uint32(uint1(x2467)) + uint32(uint1(x2434)))
	var x2469 uint32
	var x2470 uint32
	x2470, x2469 = bits.Mul32(x1400, arg4[6])
	var x2471 uint32
	var x2472 uint32
	x2472, x2471 = bits.Mul32(x1400, arg4[5])
	var x2473 uint32
	var x2474 uint32
	x2474, x2473 = bits.Mul32(x1400, arg4[4])
	var x2475 uint32
	var x2476 uint32
	x2476, x2475 = bits.Mul32(x1400, arg4[3])
	var x2477 uint32
	var x2478 uint32
	x2478, x2477 = bits.Mul32(x1400, arg4[2])
	var x2479 uint32
	var x2480 uint32
	x2480, x2479 = bits.Mul32(x1400, arg4[1])
	var x2481 uint32
	var x2482 uint32
	x2482, x2481 = bits.Mul32(x1400, arg4[0])
	var x2483 uint32
	var x2484 uint32
	x2483, x2484 = bits.Add32(x2482, x2479, uint32(0x0))
	var x2485 uint32
	var x2486 uint32
	x2485, x2486 = bits.Add32(x2480, x2477, uint32(uint1(x2484)))
	var x2487 uint32
	var x2488 uint32
	x2487, x2488 = bits.Add32(x2478, x2475, uint32(uint1(x2486)))
	var x2489 uint32
	var x2490 uint32
	x2489, x2490 = bits.Add32(x2476, x2473, uint32(uint1(x2488)))
	var x2491 uint32
	var x2492 uint32
	x2491, x2492 = bits.Add32(x2474, x2471, uint32(uint1(x2490)))
	var x2493 uint32
	var x2494 uint32
	x2493, x2494 = bits.Add32(x2472, x2469, uint32(uint1(x2492)))
	x2495 := (uint32(uint1(x2494)) + x2470)
	var x2496 uint32
	var x2497 uint32
	x2496, x2497 = bits.Add32(x2454, x2481, uint32(0x0))
	var x2498 uint32
	var x2499 uint32
	x2498, x2499 = bits.Add32(x2456, x2483, uint32(uint1(x2497)))
	var x2500 uint32
	var x2501 uint32
	x2500, x2501 = bits.Add32(x2458, x2485, uint32(uint1(x2499)))
	var x2502 uint32
	var x2503 uint32
	x2502, x2503 = bits.Add32(x2460, x2487, uint32(uint1(x2501)))
	var x2504 uint32
	var x2505 uint32
	x2504, x2505 = bits.Add32(x2462, x2489, uint32(uint1(x2503)))
	var x2506 uint32
	var x2507 uint32
	x2506, x2507 = bits.Add32(x2464, x2491, uint32(uint1(x2505)))
	var x2508 uint32
	var x2509 uint32
	x2508, x2509 = bits.Add32(x2466, x2493, uint32(uint1(x2507)))
	var x2510 uint32
	var x2511 uint32
	x2510, x2511 = bits.Add32(x2468, x2495, uint32(uint1(x2509)))
	var x2512 uint32
	_, x2512 = bits.Mul32(x2496, 0xffffffff)
	var x2514 uint32
	var x2515 uint32
	x2515, x2514 = bits.Mul32(x2512, 0xffffffff)
	var x2516 uint32
	var x2517 uint32
	x2517, x2516 = bits.Mul32(x2512, 0xffffffff)
	var x2518 uint32
	var x2519 uint32
	x2519, x2518 = bits.Mul32(x2512, 0xffffffff)
	var x2520 uint32
	var x2521 uint32
	x2521, x2520 = bits.Mul32(x2512, 0xffffffff)
	var x2522 uint32
	var x2523 uint32
	x2522, x2523 = bits.Add32(x2521, x2518, uint32(0x0))
	var x2524 uint32
	var x2525 uint32
	x2524, x2525 = bits.Add32(x2519, x2516, uint32(uint1(x2523)))
	var x2526 uint32
	var x2527 uint32
	x2526, x2527 = bits.Add32(x2517, x2514, uint32(uint1(x2525)))
	x2528 := (uint32(uint1(x2527)) + x2515)
	var x2530 uint32
	_, x2530 = bits.Add32(x2496, x2512, uint32(0x0))
	var x2531 uint32
	var x2532 uint32
	x2531, x2532 = bits.Add32(x2498, uint32(0x0), uint32(uint1(x2530)))
	var x2533 uint32
	var x2534 uint32
	x2533, x2534 = bits.Add32(x2500, uint32(0x0), uint32(uint1(x2532)))
	var x2535 uint32
	var x2536 uint32
	x2535, x2536 = bits.Add32(x2502, x2520, uint32(uint1(x2534)))
	var x2537 uint32
	var x2538 uint32
	x2537, x2538 = bits.Add32(x2504, x2522, uint32(uint1(x2536)))
	var x2539 uint32
	var x2540 uint32
	x2539, x2540 = bits.Add32(x2506, x2524, uint32(uint1(x2538)))
	var x2541 uint32
	var x2542 uint32
	x2541, x2542 = bits.Add32(x2508, x2526, uint32(uint1(x2540)))
	var x2543 uint32
	var x2544 uint32
	x2543, x2544 = bits.Add32(x2510, x2528, uint32(uint1(x2542)))
	x2545 := (uint32(uint1(x2544)) + uint32(uint1(x2511)))
	var x2546 uint32
	var x2547 uint32
	x2546, x2547 = bits.Sub32(x2531, uint32(0x1), uint32(0x0))
	var x2548 uint32
	var x2549 uint32
	x2548, x2549 = bits.Sub32(x2533, uint32(0x0), uint32(uint1(x2547)))
	var x2550 uint32
	var x2551 uint32
	x2550, x2551 = bits.Sub32(x2535, uint32(0x0), uint32(uint1(x2549)))
	var x2552 uint32
	var x2553 uint32
	x2552, x2553 = bits.Sub32(x2537, 0xffffffff, uint32(uint1(x2551)))
	var x2554 uint32
	var x2555 uint32
	x2554, x2555 = bits.Sub32(x2539, 0xffffffff, uint32(uint1(x2553)))
	var x2556 uint32
	var x2557 uint32
	x2556, x2557 = bits.Sub32(x2541, 0xffffffff, uint32(uint1(x2555)))
	var x2558 uint32
	var x2559 uint32
	x2558, x2559 = bits.Sub32(x2543, 0xffffffff, uint32(uint1(x2557)))
	var x2561 uint32
	_, x2561 = bits.Sub32(x2545, uint32(0x0), uint32(uint1(x2559)))
	var x2562 uint32
	cmovznzU32(&x2562, uint1(x2561), x2546, x2531)
	var x2563 uint32
	cmovznzU32(&x2563, uint1(x2561), x2548, x2533)
	var x2564 uint32
	cmovznzU32(&x2564, uint1(x2561), x2550, x2535)
	var x2565 uint32
	cmovznzU32(&x2565, uint1(x2561), x2552, x2537)
	var x2566 uint32
	cmovznzU32(&x2566, uint1(x2561), x2554, x2539)
	var x2567 uint32
	cmovznzU32(&x2567, uint1(x2561), x2556, x2541)
	var x2568 uint32
	cmovznzU32(&x2568, uint1(x2561), x2558, x2543)
	var x2569 uint32
	var x2570 uint32
	x2570, x2569 = bits.Mul32(x1433, arg3[6])
	var x2571 uint32
	var x2572 uint32
	x2572, x2571 = bits.Mul32(x1433, arg3[5])
	var x2573 uint32
	var x2574 uint32
	x2574, x2573 = bits.Mul32(x1433, arg3[4])
	var x2575 uint32
	var x2576 uint32
	x2576, x2575 = bits.Mul32(x1433, arg3[3])
	var x2577 uint32
	var x2578 uint32
	x2578, x2577 = bits.Mul32(x1433, arg3[2])
	var x2579 uint32
	var x2580 uint32
	x2580, x2579 = bits.Mul32(x1433, arg3[1])
	var x2581 uint32
	var x2582 uint32
	x2582, x2581 = bits.Mul32(x1433, arg3[0])
	var x2583 uint32
	var x2584 uint32
	x2583, x2584 = bits.Add32(x2582, x2579, uint32(0x0))
	var x2585 uint32
	var x2586 uint32
	x2585, x2586 = bits.Add32(x2580, x2577, uint32(uint1(x2584)))
	var x2587 uint32
	var x2588 uint32
	x2587, x2588 = bits.Add32(x2578, x2575, uint32(uint1(x2586)))
	var x2589 uint32
	var x2590 uint32
	x2589, x2590 = bits.Add32(x2576, x2573, uint32(uint1(x2588)))
	var x2591 uint32
	var x2592 uint32
	x2591, x2592 = bits.Add32(x2574, x2571, uint32(uint1(x2590)))
	var x2593 uint32
	var x2594 uint32
	x2593, x2594 = bits.Add32(x2572, x2569, uint32(uint1(x2592)))
	x2595 := (uint32(uint1(x2594)) + x2570)
	var x2596 uint32
	_, x2596 = bits.Mul32(x2581, 0xffffffff)
	var x2598 uint32
	var x2599 uint32
	x2599, x2598 = bits.Mul32(x2596, 0xffffffff)
	var x2600 uint32
	var x2601 uint32
	x2601, x2600 = bits.Mul32(x2596, 0xffffffff)
	var x2602 uint32
	var x2603 uint32
	x2603, x2602 = bits.Mul32(x2596, 0xffffffff)
	var x2604 uint32
	var x2605 uint32
	x2605, x2604 = bits.Mul32(x2596, 0xffffffff)
	var x2606 uint32
	var x2607 uint32
	x2606, x2607 = bits.Add32(x2605, x2602, uint32(0x0))
	var x2608 uint32
	var x2609 uint32
	x2608, x2609 = bits.Add32(x2603, x2600, uint32(uint1(x2607)))
	var x2610 uint32
	var x2611 uint32
	x2610, x2611 = bits.Add32(x2601, x2598, uint32(uint1(x2609)))
	x2612 := (uint32(uint1(x2611)) + x2599)
	var x2614 uint32
	_, x2614 = bits.Add32(x2581, x2596, uint32(0x0))
	var x2615 uint32
	var x2616 uint32
	x2615, x2616 = bits.Add32(x2583, uint32(0x0), uint32(uint1(x2614)))
	var x2617 uint32
	var x2618 uint32
	x2617, x2618 = bits.Add32(x2585, uint32(0x0), uint32(uint1(x2616)))
	var x2619 uint32
	var x2620 uint32
	x2619, x2620 = bits.Add32(x2587, x2604, uint32(uint1(x2618)))
	var x2621 uint32
	var x2622 uint32
	x2621, x2622 = bits.Add32(x2589, x2606, uint32(uint1(x2620)))
	var x2623 uint32
	var x2624 uint32
	x2623, x2624 = bits.Add32(x2591, x2608, uint32(uint1(x2622)))
	var x2625 uint32
	var x2626 uint32
	x2625, x2626 = bits.Add32(x2593, x2610, uint32(uint1(x2624)))
	var x2627 uint32
	var x2628 uint32
	x2627, x2628 = bits.Add32(x2595, x2612, uint32(uint1(x2626)))
	var x2629 uint32
	var x2630 uint32
	x2630, x2629 = bits.Mul32(x1434, arg3[6])
	var x2631 uint32
	var x2632 uint32
	x2632, x2631 = bits.Mul32(x1434, arg3[5])
	var x2633 uint32
	var x2634 uint32
	x2634, x2633 = bits.Mul32(x1434, arg3[4])
	var x2635 uint32
	var x2636 uint32
	x2636, x2635 = bits.Mul32(x1434, arg3[3])
	var x2637 uint32
	var x2638 uint32
	x2638, x2637 = bits.Mul32(x1434, arg3[2])
	var x2639 uint32
	var x2640 uint32
	x2640, x2639 = bits.Mul32(x1434, arg3[1])
	var x2641 uint32
	var x2642 uint32
	x2642, x2641 = bits.Mul32(x1434, arg3[0])
	var x2643 uint32
	var x2644 uint32
	x2643, x2644 = bits.Add32(x2642, x2639, uint32(0x0))
	var x2645 uint32
	var x2646 uint32
	x2645, x2646 = bits.Add32(x2640, x2637, uint32(uint1(x2644)))
	var x2647 uint32
	var x2648 uint32
	x2647, x2648 = bits.Add32(x2638, x2635, uint32(uint1(x2646)))
	var x2649 uint32
	var x2650 uint32
	x2649, x2650 = bits.Add32(x2636, x2633, uint32(uint1(x2648)))
	var x2651 uint32
	var x2652 uint32
	x2651, x2652 = bits.Add32(x2634, x2631, uint32(uint1(x2650)))
	var x2653 uint32
	var x2654 uint32
	x2653, x2654 = bits.Add32(x2632, x2629, uint32(uint1(x2652)))
	x2655 := (uint32(uint1(x2654)) + x2630)
	var x2656 uint32
	var x2657 uint32
	x2656, x2657 = bits.Add32(x2615, x2641, uint32(0x0))
	var x2658 uint32
	var x2659 uint32
	x2658, x2659 = bits.Add32(x2617, x2643, uint32(uint1(x2657)))
	var x2660 uint32
	var x2661 uint32
	x2660, x2661 = bits.Add32(x2619, x2645, uint32(uint1(x2659)))
	var x2662 uint32
	var x2663 uint32
	x2662, x2663 = bits.Add32(x2621, x2647, uint32(uint1(x2661)))
	var x2664 uint32
	var x2665 uint32
	x2664, x2665 = bits.Add32(x2623, x2649, uint32(uint1(x2663)))
	var x2666 uint32
	var x2667 uint32
	x2666, x2667 = bits.Add32(x2625, x2651, uint32(uint1(x2665)))
	var x2668 uint32
	var x2669 uint32
	x2668, x2669 = bits.Add32(x2627, x2653, uint32(uint1(x2667)))
	var x2670 uint32
	var x2671 uint32
	x2670, x2671 = bits.Add32(uint32(uint1(x2628)), x2655, uint32(uint1(x2669)))
	var x2672 uint32
	_, x2672 = bits.Mul32(x2656, 0xffffffff)
	var x2674 uint32
	var x2675 uint32
	x2675, x2674 = bits.Mul32(x2672, 0xffffffff)
	var x2676 uint32
	var x2677 uint32
	x2677, x2676 = bits.Mul32(x2672, 0xffffffff)
	var x2678 uint32
	var x2679 uint32
	x2679, x2678 = bits.Mul32(x2672, 0xffffffff)
	var x2680 uint32
	var x2681 uint32
	x2681, x2680 = bits.Mul32(x2672, 0xffffffff)
	var x2682 uint32
	var x2683 uint32
	x2682, x2683 = bits.Add32(x2681, x2678, uint32(0x0))
	var x2684 uint32
	var x2685 uint32
	x2684, x2685 = bits.Add32(x2679, x2676, uint32(uint1(x2683)))
	var x2686 uint32
	var x2687 uint32
	x2686, x2687 = bits.Add32(x2677, x2674, uint32(uint1(x2685)))
	x2688 := (uint32(uint1(x2687)) + x2675)
	var x2690 uint32
	_, x2690 = bits.Add32(x2656, x2672, uint32(0x0))
	var x2691 uint32
	var x2692 uint32
	x2691, x2692 = bits.Add32(x2658, uint32(0x0), uint32(uint1(x2690)))
	var x2693 uint32
	var x2694 uint32
	x2693, x2694 = bits.Add32(x2660, uint32(0x0), uint32(uint1(x2692)))
	var x2695 uint32
	var x2696 uint32
	x2695, x2696 = bits.Add32(x2662, x2680, uint32(uint1(x2694)))
	var x2697 uint32
	var x2698 uint32
	x2697, x2698 = bits.Add32(x2664, x2682, uint32(uint1(x2696)))
	var x2699 uint32
	var x2700 uint32
	x2699, x2700 = bits.Add32(x2666, x2684, uint32(uint1(x2698)))
	var x2701 uint32
	var x2702 uint32
	x2701, x2702 = bits.Add32(x2668, x2686, uint32(uint1(x2700)))
	var x2703 uint32
	var x2704 uint32
	x2703, x2704 = bits.Add32(x2670, x2688, uint32(uint1(x2702)))
	x2705 := (uint32(uint1(x2704)) + uint32(uint1(x2671)))
	var x2706 uint32
	var x2707 uint32
	x2707, x2706 = bits.Mul32(x1435, arg3[6])
	var x2708 uint32
	var x2709 uint32
	x2709, x2708 = bits.Mul32(x1435, arg3[5])
	var x2710 uint32
	var x2711 uint32
	x2711, x2710 = bits.Mul32(x1435, arg3[4])
	var x2712 uint32
	var x2713 uint32
	x2713, x2712 = bits.Mul32(x1435, arg3[3])
	var x2714 uint32
	var x2715 uint32
	x2715, x2714 = bits.Mul32(x1435, arg3[2])
	var x2716 uint32
	var x2717 uint32
	x2717, x2716 = bits.Mul32(x1435, arg3[1])
	var x2718 uint32
	var x2719 uint32
	x2719, x2718 = bits.Mul32(x1435, arg3[0])
	var x2720 uint32
	var x2721 uint32
	x2720, x2721 = bits.Add32(x2719, x2716, uint32(0x0))
	var x2722 uint32
	var x2723 uint32
	x2722, x2723 = bits.Add32(x2717, x2714, uint32(uint1(x2721)))
	var x2724 uint32
	var x2725 uint32
	x2724, x2725 = bits.Add32(x2715, x2712, uint32(uint1(x2723)))
	var x2726 uint32
	var x2727 uint32
	x2726, x2727 = bits.Add32(x2713, x2710, uint32(uint1(x2725)))
	var x2728 uint32
	var x2729 uint32
	x2728, x2729 = bits.Add32(x2711, x2708, uint32(uint1(x2727)))
	var x2730 uint32
	var x2731 uint32
	x2730, x2731 = bits.Add32(x2709, x2706, uint32(uint1(x2729)))
	x2732 := (uint32(uint1(x2731)) + x2707)
	var x2733 uint32
	var x2734 uint32
	x2733, x2734 = bits.Add32(x2691, x2718, uint32(0x0))
	var x2735 uint32
	var x2736 uint32
	x2735, x2736 = bits.Add32(x2693, x2720, uint32(uint1(x2734)))
	var x2737 uint32
	var x2738 uint32
	x2737, x2738 = bits.Add32(x2695, x2722, uint32(uint1(x2736)))
	var x2739 uint32
	var x2740 uint32
	x2739, x2740 = bits.Add32(x2697, x2724, uint32(uint1(x2738)))
	var x2741 uint32
	var x2742 uint32
	x2741, x2742 = bits.Add32(x2699, x2726, uint32(uint1(x2740)))
	var x2743 uint32
	var x2744 uint32
	x2743, x2744 = bits.Add32(x2701, x2728, uint32(uint1(x2742)))
	var x2745 uint32
	var x2746 uint32
	x2745, x2746 = bits.Add32(x2703, x2730, uint32(uint1(x2744)))
	var x2747 uint32
	var x2748 uint32
	x2747, x2748 = bits.Add32(x2705, x2732, uint32(uint1(x2746)))
	var x2749 uint32
	_, x2749 = bits.Mul32(x2733, 0xffffffff)
	var x2751 uint32
	var x2752 uint32
	x2752, x2751 = bits.Mul32(x2749, 0xffffffff)
	var x2753 uint32
	var x2754 uint32
	x2754, x2753 = bits.Mul32(x2749, 0xffffffff)
	var x2755 uint32
	var x2756 uint32
	x2756, x2755 = bits.Mul32(x2749, 0xffffffff)
	var x2757 uint32
	var x2758 uint32
	x2758, x2757 = bits.Mul32(x2749, 0xffffffff)
	var x2759 uint32
	var x2760 uint32
	x2759, x2760 = bits.Add32(x2758, x2755, uint32(0x0))
	var x2761 uint32
	var x2762 uint32
	x2761, x2762 = bits.Add32(x2756, x2753, uint32(uint1(x2760)))
	var x2763 uint32
	var x2764 uint32
	x2763, x2764 = bits.Add32(x2754, x2751, uint32(uint1(x2762)))
	x2765 := (uint32(uint1(x2764)) + x2752)
	var x2767 uint32
	_, x2767 = bits.Add32(x2733, x2749, uint32(0x0))
	var x2768 uint32
	var x2769 uint32
	x2768, x2769 = bits.Add32(x2735, uint32(0x0), uint32(uint1(x2767)))
	var x2770 uint32
	var x2771 uint32
	x2770, x2771 = bits.Add32(x2737, uint32(0x0), uint32(uint1(x2769)))
	var x2772 uint32
	var x2773 uint32
	x2772, x2773 = bits.Add32(x2739, x2757, uint32(uint1(x2771)))
	var x2774 uint32
	var x2775 uint32
	x2774, x2775 = bits.Add32(x2741, x2759, uint32(uint1(x2773)))
	var x2776 uint32
	var x2777 uint32
	x2776, x2777 = bits.Add32(x2743, x2761, uint32(uint1(x2775)))
	var x2778 uint32
	var x2779 uint32
	x2778, x2779 = bits.Add32(x2745, x2763, uint32(uint1(x2777)))
	var x2780 uint32
	var x2781 uint32
	x2780, x2781 = bits.Add32(x2747, x2765, uint32(uint1(x2779)))
	x2782 := (uint32(uint1(x2781)) + uint32(uint1(x2748)))
	var x2783 uint32
	var x2784 uint32
	x2784, x2783 = bits.Mul32(x1436, arg3[6])
	var x2785 uint32
	var x2786 uint32
	x2786, x2785 = bits.Mul32(x1436, arg3[5])
	var x2787 uint32
	var x2788 uint32
	x2788, x2787 = bits.Mul32(x1436, arg3[4])
	var x2789 uint32
	var x2790 uint32
	x2790, x2789 = bits.Mul32(x1436, arg3[3])
	var x2791 uint32
	var x2792 uint32
	x2792, x2791 = bits.Mul32(x1436, arg3[2])
	var x2793 uint32
	var x2794 uint32
	x2794, x2793 = bits.Mul32(x1436, arg3[1])
	var x2795 uint32
	var x2796 uint32
	x2796, x2795 = bits.Mul32(x1436, arg3[0])
	var x2797 uint32
	var x2798 uint32
	x2797, x2798 = bits.Add32(x2796, x2793, uint32(0x0))
	var x2799 uint32
	var x2800 uint32
	x2799, x2800 = bits.Add32(x2794, x2791, uint32(uint1(x2798)))
	var x2801 uint32
	var x2802 uint32
	x2801, x2802 = bits.Add32(x2792, x2789, uint32(uint1(x2800)))
	var x2803 uint32
	var x2804 uint32
	x2803, x2804 = bits.Add32(x2790, x2787, uint32(uint1(x2802)))
	var x2805 uint32
	var x2806 uint32
	x2805, x2806 = bits.Add32(x2788, x2785, uint32(uint1(x2804)))
	var x2807 uint32
	var x2808 uint32
	x2807, x2808 = bits.Add32(x2786, x2783, uint32(uint1(x2806)))
	x2809 := (uint32(uint1(x2808)) + x2784)
	var x2810 uint32
	var x2811 uint32
	x2810, x2811 = bits.Add32(x2768, x2795, uint32(0x0))
	var x2812 uint32
	var x2813 uint32
	x2812, x2813 = bits.Add32(x2770, x2797, uint32(uint1(x2811)))
	var x2814 uint32
	var x2815 uint32
	x2814, x2815 = bits.Add32(x2772, x2799, uint32(uint1(x2813)))
	var x2816 uint32
	var x2817 uint32
	x2816, x2817 = bits.Add32(x2774, x2801, uint32(uint1(x2815)))
	var x2818 uint32
	var x2819 uint32
	x2818, x2819 = bits.Add32(x2776, x2803, uint32(uint1(x2817)))
	var x2820 uint32
	var x2821 uint32
	x2820, x2821 = bits.Add32(x2778, x2805, uint32(uint1(x2819)))
	var x2822 uint32
	var x2823 uint32
	x2822, x2823 = bits.Add32(x2780, x2807, uint32(uint1(x2821)))
	var x2824 uint32
	var x2825 uint32
	x2824, x2825 = bits.Add32(x2782, x2809, uint32(uint1(x2823)))
	var x2826 uint32
	_, x2826 = bits.Mul32(x2810, 0xffffffff)
	var x2828 uint32
	var x2829 uint32
	x2829, x2828 = bits.Mul32(x2826, 0xffffffff)
	var x2830 uint32
	var x2831 uint32
	x2831, x2830 = bits.Mul32(x2826, 0xffffffff)
	var x2832 uint32
	var x2833 uint32
	x2833, x2832 = bits.Mul32(x2826, 0xffffffff)
	var x2834 uint32
	var x2835 uint32
	x2835, x2834 = bits.Mul32(x2826, 0xffffffff)
	var x2836 uint32
	var x2837 uint32
	x2836, x2837 = bits.Add32(x2835, x2832, uint32(0x0))
	var x2838 uint32
	var x2839 uint32
	x2838, x2839 = bits.Add32(x2833, x2830, uint32(uint1(x2837)))
	var x2840 uint32
	var x2841 uint32
	x2840, x2841 = bits.Add32(x2831, x2828, uint32(uint1(x2839)))
	x2842 := (uint32(uint1(x2841)) + x2829)
	var x2844 uint32
	_, x2844 = bits.Add32(x2810, x2826, uint32(0x0))
	var x2845 uint32
	var x2846 uint32
	x2845, x2846 = bits.Add32(x2812, uint32(0x0), uint32(uint1(x2844)))
	var x2847 uint32
	var x2848 uint32
	x2847, x2848 = bits.Add32(x2814, uint32(0x0), uint32(uint1(x2846)))
	var x2849 uint32
	var x2850 uint32
	x2849, x2850 = bits.Add32(x2816, x2834, uint32(uint1(x2848)))
	var x2851 uint32
	var x2852 uint32
	x2851, x2852 = bits.Add32(x2818, x2836, uint32(uint1(x2850)))
	var x2853 uint32
	var x2854 uint32
	x2853, x2854 = bits.Add32(x2820, x2838, uint32(uint1(x2852)))
	var x2855 uint32
	var x2856 uint32
	x2855, x2856 = bits.Add32(x2822, x2840, uint32(uint1(x2854)))
	var x2857 uint32
	var x2858 uint32
	x2857, x2858 = bits.Add32(x2824, x2842, uint32(uint1(x2856)))
	x2859 := (uint32(uint1(x2858)) + uint32(uint1(x2825)))
	var x2860 uint32
	var x2861 uint32
	x2861, x2860 = bits.Mul32(x1437, arg3[6])
	var x2862 uint32
	var x2863 uint32
	x2863, x2862 = bits.Mul32(x1437, arg3[5])
	var x2864 uint32
	var x2865 uint32
	x2865, x2864 = bits.Mul32(x1437, arg3[4])
	var x2866 uint32
	var x2867 uint32
	x2867, x2866 = bits.Mul32(x1437, arg3[3])
	var x2868 uint32
	var x2869 uint32
	x2869, x2868 = bits.Mul32(x1437, arg3[2])
	var x2870 uint32
	var x2871 uint32
	x2871, x2870 = bits.Mul32(x1437, arg3[1])
	var x2872 uint32
	var x2873 uint32
	x2873, x2872 = bits.Mul32(x1437, arg3[0])
	var x2874 uint32
	var x2875 uint32
	x2874, x2875 = bits.Add32(x2873, x2870, uint32(0x0))
	var x2876 uint32
	var x2877 uint32
	x2876, x2877 = bits.Add32(x2871, x2868, uint32(uint1(x2875)))
	var x2878 uint32
	var x2879 uint32
	x2878, x2879 = bits.Add32(x2869, x2866, uint32(uint1(x2877)))
	var x2880 uint32
	var x2881 uint32
	x2880, x2881 = bits.Add32(x2867, x2864, uint32(uint1(x2879)))
	var x2882 uint32
	var x2883 uint32
	x2882, x2883 = bits.Add32(x2865, x2862, uint32(uint1(x2881)))
	var x2884 uint32
	var x2885 uint32
	x2884, x2885 = bits.Add32(x2863, x2860, uint32(uint1(x2883)))
	x2886 := (uint32(uint1(x2885)) + x2861)
	var x2887 uint32
	var x2888 uint32
	x2887, x2888 = bits.Add32(x2845, x2872, uint32(0x0))
	var x2889 uint32
	var x2890 uint32
	x2889, x2890 = bits.Add32(x2847, x2874, uint32(uint1(x2888)))
	var x2891 uint32
	var x2892 uint32
	x2891, x2892 = bits.Add32(x2849, x2876, uint32(uint1(x2890)))
	var x2893 uint32
	var x2894 uint32
	x2893, x2894 = bits.Add32(x2851, x2878, uint32(uint1(x2892)))
	var x2895 uint32
	var x2896 uint32
	x2895, x2896 = bits.Add32(x2853, x2880, uint32(uint1(x2894)))
	var x2897 uint32
	var x2898 uint32
	x2897, x2898 = bits.Add32(x2855, x2882, uint32(uint1(x2896)))
	var x2899 uint32
	var x2900 uint32
	x2899, x2900 = bits.Add32(x2857, x2884, uint32(uint1(x2898)))
	var x2901 uint32
	var x2902 uint32
	x2901, x2902 = bits.Add32(x2859, x2886, uint32(uint1(x2900)))
	var x2903 uint32
	_, x2903 = bits.Mul32(x2887, 0xffffffff)
	var x2905 uint32
	var x2906 uint32
	x2906, x2905 = bits.Mul32(x2903, 0xffffffff)
	var x2907 uint32
	var x2908 uint32
	x2908, x2907 = bits.Mul32(x2903, 0xffffffff)
	var x2909 uint32
	var x2910 uint32
	x2910, x2909 = bits.Mul32(x2903, 0xffffffff)
	var x2911 uint32
	var x2912 uint32
	x2912, x2911 = bits.Mul32(x2903, 0xffffffff)
	var x2913 uint32
	var x2914 uint32
	x2913, x2914 = bits.Add32(x2912, x2909, uint32(0x0))
	var x2915 uint32
	var x2916 uint32
	x2915, x2916 = bits.Add32(x2910, x2907, uint32(uint1(x2914)))
	var x2917 uint32
	var x2918 uint32
	x2917, x2918 = bits.Add32(x2908, x2905, uint32(uint1(x2916)))
	x2919 := (uint32(uint1(x2918)) + x2906)
	var x2921 uint32
	_, x2921 = bits.Add32(x2887, x2903, uint32(0x0))
	var x2922 uint32
	var x2923 uint32
	x2922, x2923 = bits.Add32(x2889, uint32(0x0), uint32(uint1(x2921)))
	var x2924 uint32
	var x2925 uint32
	x2924, x2925 = bits.Add32(x2891, uint32(0x0), uint32(uint1(x2923)))
	var x2926 uint32
	var x2927 uint32
	x2926, x2927 = bits.Add32(x2893, x2911, uint32(uint1(x2925)))
	var x2928 uint32
	var x2929 uint32
	x2928, x2929 = bits.Add32(x2895, x2913, uint32(uint1(x2927)))
	var x2930 uint32
	var x2931 uint32
	x2930, x2931 = bits.Add32(x2897, x2915, uint32(uint1(x2929)))
	var x2932 uint32
	var x2933 uint32
	x2932, x2933 = bits.Add32(x2899, x2917, uint32(uint1(x2931)))
	var x2934 uint32
	var x2935 uint32
	x2934, x2935 = bits.Add32(x2901, x2919, uint32(uint1(x2933)))
	x2936 := (uint32(uint1(x2935)) + uint32(uint1(x2902)))
	var x2937 uint32
	var x2938 uint32
	x2938, x2937 = bits.Mul32(x1438, arg3[6])
	var x2939 uint32
	var x2940 uint32
	x2940, x2939 = bits.Mul32(x1438, arg3[5])
	var x2941 uint32
	var x2942 uint32
	x2942, x2941 = bits.Mul32(x1438, arg3[4])
	var x2943 uint32
	var x2944 uint32
	x2944, x2943 = bits.Mul32(x1438, arg3[3])
	var x2945 uint32
	var x2946 uint32
	x2946, x2945 = bits.Mul32(x1438, arg3[2])
	var x2947 uint32
	var x2948 uint32
	x2948, x2947 = bits.Mul32(x1438, arg3[1])
	var x2949 uint32
	var x2950 uint32
	x2950, x2949 = bits.Mul32(x1438, arg3[0])
	var x2951 uint32
	var x2952 uint32
	x2951, x2952 = bits.Add32(x2950, x2947, uint32(0x0))
	var x2953 uint32
	var x2954 uint32
	x2953, x2954 = bits.Add32(x2948, x2945, uint32(uint1(x2952)))
	var x2955 uint32
	var x2956 uint32
	x2955, x2956 = bits.Add32(x2946, x2943, uint32(uint1(x2954)))
	var x2957 uint32
	var x2958 uint32
	x2957, x2958 = bits.Add32(x2944, x2941, uint32(uint1(x2956)))
	var x2959 uint32
	var x2960 uint32
	x2959, x2960 = bits.Add32(x2942, x2939, uint32(uint1(x2958)))
	var x2961 uint32
	var x2962 uint32
	x2961, x2962 = bits.Add32(x2940, x2937, uint32(uint1(x2960)))
	x2963 := (uint32(uint1(x2962)) + x2938)
	var x2964 uint32
	var x2965 uint32
	x2964, x2965 = bits.Add32(x2922, x2949, uint32(0x0))
	var x2966 uint32
	var x2967 uint32
	x2966, x2967 = bits.Add32(x2924, x2951, uint32(uint1(x2965)))
	var x2968 uint32
	var x2969 uint32
	x2968, x2969 = bits.Add32(x2926, x2953, uint32(uint1(x2967)))
	var x2970 uint32
	var x2971 uint32
	x2970, x2971 = bits.Add32(x2928, x2955, uint32(uint1(x2969)))
	var x2972 uint32
	var x2973 uint32
	x2972, x2973 = bits.Add32(x2930, x2957, uint32(uint1(x2971)))
	var x2974 uint32
	var x2975 uint32
	x2974, x2975 = bits.Add32(x2932, x2959, uint32(uint1(x2973)))
	var x2976 uint32
	var x2977 uint32
	x2976, x2977 = bits.Add32(x2934, x2961, uint32(uint1(x2975)))
	var x2978 uint32
	var x2979 uint32
	x2978, x2979 = bits.Add32(x2936, x2963, uint32(uint1(x2977)))
	var x2980 uint32
	_, x2980 = bits.Mul32(x2964, 0xffffffff)
	var x2982 uint32
	var x2983 uint32
	x2983, x2982 = bits.Mul32(x2980, 0xffffffff)
	var x2984 uint32
	var x2985 uint32
	x2985, x2984 = bits.Mul32(x2980, 0xffffffff)
	var x2986 uint32
	var x2987 uint32
	x2987, x2986 = bits.Mul32(x2980, 0xffffffff)
	var x2988 uint32
	var x2989 uint32
	x2989, x2988 = bits.Mul32(x2980, 0xffffffff)
	var x2990 uint32
	var x2991 uint32
	x2990, x2991 = bits.Add32(x2989, x2986, uint32(0x0))
	var x2992 uint32
	var x2993 uint32
	x2992, x2993 = bits.Add32(x2987, x2984, uint32(uint1(x2991)))
	var x2994 uint32
	var x2995 uint32
	x2994, x2995 = bits.Add32(x2985, x2982, uint32(uint1(x2993)))
	x2996 := (uint32(uint1(x2995)) + x2983)
	var x2998 uint32
	_, x2998 = bits.Add32(x2964, x2980, uint32(0x0))
	var x2999 uint32
	var x3000 uint32
	x2999, x3000 = bits.Add32(x2966, uint32(0x0), uint32(uint1(x2998)))
	var x3001 uint32
	var x3002 uint32
	x3001, x3002 = bits.Add32(x2968, uint32(0x0), uint32(uint1(x3000)))
	var x3003 uint32
	var x3004 uint32
	x3003, x3004 = bits.Add32(x2970, x2988, uint32(uint1(x3002)))
	var x3005 uint32
	var x3006 uint32
	x3005, x3006 = bits.Add32(x2972, x2990, uint32(uint1(x3004)))
	var x3007 uint32
	var x3008 uint32
	x3007, x3008 = bits.Add32(x2974, x2992, uint32(uint1(x3006)))
	var x3009 uint32
	var x3010 uint32
	x3009, x3010 = bits.Add32(x2976, x2994, uint32(uint1(x3008)))
	var x3011 uint32
	var x3012 uint32
	x3011, x3012 = bits.Add32(x2978, x2996, uint32(uint1(x3010)))
	x3013 := (uint32(uint1(x3012)) + uint32(uint1(x2979)))
	var x3014 uint32
	var x3015 uint32
	x3015, x3014 = bits.Mul32(x1439, arg3[6])
	var x3016 uint32
	var x3017 uint32
	x3017, x3016 = bits.Mul32(x1439, arg3[5])
	var x3018 uint32
	var x3019 uint32
	x3019, x3018 = bits.Mul32(x1439, arg3[4])
	var x3020 uint32
	var x3021 uint32
	x3021, x3020 = bits.Mul32(x1439, arg3[3])
	var x3022 uint32
	var x3023 uint32
	x3023, x3022 = bits.Mul32(x1439, arg3[2])
	var x3024 uint32
	var x3025 uint32
	x3025, x3024 = bits.Mul32(x1439, arg3[1])
	var x3026 uint32
	var x3027 uint32
	x3027, x3026 = bits.Mul32(x1439, arg3[0])
	var x3028 uint32
	var x3029 uint32
	x3028, x3029 = bits.Add32(x3027, x3024, uint32(0x0))
	var x3030 uint32
	var x3031 uint32
	x3030, x3031 = bits.Add32(x3025, x3022, uint32(uint1(x3029)))
	var x3032 uint32
	var x3033 uint32
	x3032, x3033 = bits.Add32(x3023, x3020, uint32(uint1(x3031)))
	var x3034 uint32
	var x3035 uint32
	x3034, x3035 = bits.Add32(x3021, x3018, uint32(uint1(x3033)))
	var x3036 uint32
	var x3037 uint32
	x3036, x3037 = bits.Add32(x3019, x3016, uint32(uint1(x3035)))
	var x3038 uint32
	var x3039 uint32
	x3038, x3039 = bits.Add32(x3017, x3014, uint32(uint1(x3037)))
	x3040 := (uint32(uint1(x3039)) + x3015)
	var x3041 uint32
	var x3042 uint32
	x3041, x3042 = bits.Add32(x2999, x3026, uint32(0x0))
	var x3043 uint32
	var x3044 uint32
	x3043, x3044 = bits.Add32(x3001, x3028, uint32(uint1(x3042)))
	var x3045 uint32
	var x3046 uint32
	x3045, x3046 = bits.Add32(x3003, x3030, uint32(uint1(x3044)))
	var x3047 uint32
	var x3048 uint32
	x3047, x3048 = bits.Add32(x3005, x3032, uint32(uint1(x3046)))
	var x3049 uint32
	var x3050 uint32
	x3049, x3050 = bits.Add32(x3007, x3034, uint32(uint1(x3048)))
	var x3051 uint32
	var x3052 uint32
	x3051, x3052 = bits.Add32(x3009, x3036, uint32(uint1(x3050)))
	var x3053 uint32
	var x3054 uint32
	x3053, x3054 = bits.Add32(x3011, x3038, uint32(uint1(x3052)))
	var x3055 uint32
	var x3056 uint32
	x3055, x3056 = bits.Add32(x3013, x3040, uint32(uint1(x3054)))
	var x3057 uint32
	_, x3057 = bits.Mul32(x3041, 0xffffffff)
	var x3059 uint32
	var x3060 uint32
	x3060, x3059 = bits.Mul32(x3057, 0xffffffff)
	var x3061 uint32
	var x3062 uint32
	x3062, x3061 = bits.Mul32(x3057, 0xffffffff)
	var x3063 uint32
	var x3064 uint32
	x3064, x3063 = bits.Mul32(x3057, 0xffffffff)
	var x3065 uint32
	var x3066 uint32
	x3066, x3065 = bits.Mul32(x3057, 0xffffffff)
	var x3067 uint32
	var x3068 uint32
	x3067, x3068 = bits.Add32(x3066, x3063, uint32(0x0))
	var x3069 uint32
	var x3070 uint32
	x3069, x3070 = bits.Add32(x3064, x3061, uint32(uint1(x3068)))
	var x3071 uint32
	var x3072 uint32
	x3071, x3072 = bits.Add32(x3062, x3059, uint32(uint1(x3070)))
	x3073 := (uint32(uint1(x3072)) + x3060)
	var x3075 uint32
	_, x3075 = bits.Add32(x3041, x3057, uint32(0x0))
	var x3076 uint32
	var x3077 uint32
	x3076, x3077 = bits.Add32(x3043, uint32(0x0), uint32(uint1(x3075)))
	var x3078 uint32
	var x3079 uint32
	x3078, x3079 = bits.Add32(x3045, uint32(0x0), uint32(uint1(x3077)))
	var x3080 uint32
	var x3081 uint32
	x3080, x3081 = bits.Add32(x3047, x3065, uint32(uint1(x3079)))
	var x3082 uint32
	var x3083 uint32
	x3082, x3083 = bits.Add32(x3049, x3067, uint32(uint1(x3081)))
	var x3084 uint32
	var x3085 uint32
	x3084, x3085 = bits.Add32(x3051, x3069, uint32(uint1(x3083)))
	var x3086 uint32
	var x3087 uint32
	x3086, x3087 = bits.Add32(x3053, x3071, uint32(uint1(x3085)))
	var x3088 uint32
	var x3089 uint32
	x3088, x3089 = bits.Add32(x3055, x3073, uint32(uint1(x3087)))
	x3090 := (uint32(uint1(x3089)) + uint32(uint1(x3056)))
	var x3091 uint32
	var x3092 uint32
	x3091, x3092 = bits.Sub32(x3076, uint32(0x1), uint32(0x0))
	var x3093 uint32
	var x3094 uint32
	x3093, x3094 = bits.Sub32(x3078, uint32(0x0), uint32(uint1(x3092)))
	var x3095 uint32
	var x3096 uint32
	x3095, x3096 = bits.Sub32(x3080, uint32(0x0), uint32(uint1(x3094)))
	var x3097 uint32
	var x3098 uint32
	x3097, x3098 = bits.Sub32(x3082, 0xffffffff, uint32(uint1(x3096)))
	var x3099 uint32
	var x3100 uint32
	x3099, x3100 = bits.Sub32(x3084, 0xffffffff, uint32(uint1(x3098)))
	var x3101 uint32
	var x3102 uint32
	x3101, x3102 = bits.Sub32(x3086, 0xffffffff, uint32(uint1(x3100)))
	var x3103 uint32
	var x3104 uint32
	x3103, x3104 = bits.Sub32(x3088, 0xffffffff, uint32(uint1(x3102)))
	var x3106 uint32
	_, x3106 = bits.Sub32(x3090, uint32(0x0), uint32(uint1(x3104)))
	var x3107 uint32
	cmovznzU32(&x3107, uint1(x3106), x3091, x3076)
	var x3108 uint32
	cmovznzU32(&x3108, uint1(x3106), x3093, x3078)
	var x3109 uint32
	cmovznzU32(&x3109, uint1(x3106), x3095, x3080)
	var x3110 uint32
	cmovznzU32(&x3110, uint1(x3106), x3097, x3082)
	var x3111 uint32
	cmovznzU32(&x3111, uint1(x3106), x3099, x3084)
	var x3112 uint32
	cmovznzU32(&x3112, uint1(x3106), x3101, x3086)
	var x3113 uint32
	cmovznzU32(&x3113, uint1(x3106), x3103, x3088)
	var x3114 uint32
	var x3115 uint32
	x3115, x3114 = bits.Mul32(x1472, arg4[6])
	var x3116 uint32
	var x3117 uint32
	x3117, x3116 = bits.Mul32(x1472, arg4[5])
	var x3118 uint32
	var x3119 uint32
	x3119, x3118 = bits.Mul32(x1472, arg4[4])
	var x3120 uint32
	var x3121 uint32
	x3121, x3120 = bits.Mul32(x1472, arg4[3])
	var x3122 uint32
	var x3123 uint32
	x3123, x3122 = bits.Mul32(x1472, arg4[2])
	var x3124 uint32
	var x3125 uint32
	x3125, x3124 = bits.Mul32(x1472, arg4[1])
	var x3126 uint32
	var x3127 uint32
	x3127, x3126 = bits.Mul32(x1472, arg4[0])
	var x3128 uint32
	var x3129 uint32
	x3128, x3129 = bits.Add32(x3127, x3124, uint32(0x0))
	var x3130 uint32
	var x3131 uint32
	x3130, x3131 = bits.Add32(x3125, x3122, uint32(uint1(x3129)))
	var x3132 uint32
	var x3133 uint32
	x3132, x3133 = bits.Add32(x3123, x3120, uint32(uint1(x3131)))
	var x3134 uint32
	var x3135 uint32
	x3134, x3135 = bits.Add32(x3121, x3118, uint32(uint1(x3133)))
	var x3136 uint32
	var x3137 uint32
	x3136, x3137 = bits.Add32(x3119, x3116, uint32(uint1(x3135)))
	var x3138 uint32
	var x3139 uint32
	x3138, x3139 = bits.Add32(x3117, x3114, uint32(uint1(x3137)))
	x3140 := (uint32(uint1(x3139)) + x3115)
	var x3141 uint32
	_, x3141 = bits.Mul32(x3126, 0xffffffff)
	var x3143 uint32
	var x3144 uint32
	x3144, x3143 = bits.Mul32(x3141, 0xffffffff)
	var x3145 uint32
	var x3146 uint32
	x3146, x3145 = bits.Mul32(x3141, 0xffffffff)
	var x3147 uint32
	var x3148 uint32
	x3148, x3147 = bits.Mul32(x3141, 0xffffffff)
	var x3149 uint32
	var x3150 uint32
	x3150, x3149 = bits.Mul32(x3141, 0xffffffff)
	var x3151 uint32
	var x3152 uint32
	x3151, x3152 = bits.Add32(x3150, x3147, uint32(0x0))
	var x3153 uint32
	var x3154 uint32
	x3153, x3154 = bits.Add32(x3148, x3145, uint32(uint1(x3152)))
	var x3155 uint32
	var x3156 uint32
	x3155, x3156 = bits.Add32(x3146, x3143, uint32(uint1(x3154)))
	x3157 := (uint32(uint1(x3156)) + x3144)
	var x3159 uint32
	_, x3159 = bits.Add32(x3126, x3141, uint32(0x0))
	var x3160 uint32
	var x3161 uint32
	x3160, x3161 = bits.Add32(x3128, uint32(0x0), uint32(uint1(x3159)))
	var x3162 uint32
	var x3163 uint32
	x3162, x3163 = bits.Add32(x3130, uint32(0x0), uint32(uint1(x3161)))
	var x3164 uint32
	var x3165 uint32
	x3164, x3165 = bits.Add32(x3132, x3149, uint32(uint1(x3163)))
	var x3166 uint32
	var x3167 uint32
	x3166, x3167 = bits.Add32(x3134, x3151, uint32(uint1(x3165)))
	var x3168 uint32
	var x3169 uint32
	x3168, x3169 = bits.Add32(x3136, x3153, uint32(uint1(x3167)))
	var x3170 uint32
	var x3171 uint32
	x3170, x3171 = bits.Add32(x3138, x3155, uint32(uint1(x3169)))
	var x3172 uint32
	var x3173 uint32
	x3172, x3173 = bits.Add32(x3140, x3157, uint32(uint1(x3171)))
	var x3174 uint32
	var x3175 uint32
	x3175, x3174 = bits.Mul32(x1473, arg4[6])
	var x3176 uint32
	var x3177 uint32
	x3177, x3176 = bits.Mul32(x1473, arg4[5])
	var x3178 uint32
	var x3179 uint32
	x3179, x3178 = bits.Mul32(x1473, arg4[4])
	var x3180 uint32
	var x3181 uint32
	x3181, x3180 = bits.Mul32(x1473, arg4[3])
	var x3182 uint32
	var x3183 uint32
	x3183, x3182 = bits.Mul32(x1473, arg4[2])
	var x3184 uint32
	var x3185 uint32
	x3185, x3184 = bits.Mul32(x1473, arg4[1])
	var x3186 uint32
	var x3187 uint32
	x3187, x3186 = bits.Mul32(x1473, arg4[0])
	var x3188 uint32
	var x3189 uint32
	x3188, x3189 = bits.Add32(x3187, x3184, uint32(0x0))
	var x3190 uint32
	var x3191 uint32
	x3190, x3191 = bits.Add32(x3185, x3182, uint32(uint1(x3189)))
	var x3192 uint32
	var x3193 uint32
	x3192, x3193 = bits.Add32(x3183, x3180, uint32(uint1(x3191)))
	var x3194 uint32
	var x3195 uint32
	x3194, x3195 = bits.Add32(x3181, x3178, uint32(uint1(x3193)))
	var x3196 uint32
	var x3197 uint32
	x3196, x3197 = bits.Add32(x3179, x3176, uint32(uint1(x3195)))
	var x3198 uint32
	var x3199 uint32
	x3198, x3199 = bits.Add32(x3177, x3174, uint32(uint1(x3197)))
	x3200 := (uint32(uint1(x3199)) + x3175)
	var x3201 uint32
	var x3202 uint32
	x3201, x3202 = bits.Add32(x3160, x3186, uint32(0x0))
	var x3203 uint32
	var x3204 uint32
	x3203, x3204 = bits.Add32(x3162, x3188, uint32(uint1(x3202)))
	var x3205 uint32
	var x3206 uint32
	x3205, x3206 = bits.Add32(x3164, x3190, uint32(uint1(x3204)))
	var x3207 uint32
	var x3208 uint32
	x3207, x3208 = bits.Add32(x3166, x3192, uint32(uint1(x3206)))
	var x3209 uint32
	var x3210 uint32
	x3209, x3210 = bits.Add32(x3168, x3194, uint32(uint1(x3208)))
	var x3211 uint32
	var x3212 uint32
	x3211, x3212 = bits.Add32(x3170, x3196, uint32(uint1(x3210)))
	var x3213 uint32
	var x3214 uint32
	x3213, x3214 = bits.Add32(x3172, x3198, uint32(uint1(x3212)))
	var x3215 uint32
	var x3216 uint32
	x3215, x3216 = bits.Add32(uint32(uint1(x3173)), x3200, uint32(uint1(x3214)))
	var x3217 uint32
	_, x3217 = bits.Mul32(x3201, 0xffffffff)
	var x3219 uint32
	var x3220 uint32
	x3220, x3219 = bits.Mul32(x3217, 0xffffffff)
	var x3221 uint32
	var x3222 uint32
	x3222, x3221 = bits.Mul32(x3217, 0xffffffff)
	var x3223 uint32
	var x3224 uint32
	x3224, x3223 = bits.Mul32(x3217, 0xffffffff)
	var x3225 uint32
	var x3226 uint32
	x3226, x3225 = bits.Mul32(x3217, 0xffffffff)
	var x3227 uint32
	var x3228 uint32
	x3227, x3228 = bits.Add32(x3226, x3223, uint32(0x0))
	var x3229 uint32
	var x3230 uint32
	x3229, x3230 = bits.Add32(x3224, x3221, uint32(uint1(x3228)))
	var x3231 uint32
	var x3232 uint32
	x3231, x3232 = bits.Add32(x3222, x3219, uint32(uint1(x3230)))
	x3233 := (uint32(uint1(x3232)) + x3220)
	var x3235 uint32
	_, x3235 = bits.Add32(x3201, x3217, uint32(0x0))
	var x3236 uint32
	var x3237 uint32
	x3236, x3237 = bits.Add32(x3203, uint32(0x0), uint32(uint1(x3235)))
	var x3238 uint32
	var x3239 uint32
	x3238, x3239 = bits.Add32(x3205, uint32(0x0), uint32(uint1(x3237)))
	var x3240 uint32
	var x3241 uint32
	x3240, x3241 = bits.Add32(x3207, x3225, uint32(uint1(x3239)))
	var x3242 uint32
	var x3243 uint32
	x3242, x3243 = bits.Add32(x3209, x3227, uint32(uint1(x3241)))
	var x3244 uint32
	var x3245 uint32
	x3244, x3245 = bits.Add32(x3211, x3229, uint32(uint1(x3243)))
	var x3246 uint32
	var x3247 uint32
	x3246, x3247 = bits.Add32(x3213, x3231, uint32(uint1(x3245)))
	var x3248 uint32
	var x3249 uint32
	x3248, x3249 = bits.Add32(x3215, x3233, uint32(uint1(x3247)))
	x3250 := (uint32(uint1(x3249)) + uint32(uint1(x3216)))
	var x3251 uint32
	var x3252 uint32
	x3252, x3251 = bits.Mul32(x1474, arg4[6])
	var x3253 uint32
	var x3254 uint32
	x3254, x3253 = bits.Mul32(x1474, arg4[5])
	var x3255 uint32
	var x3256 uint32
	x3256, x3255 = bits.Mul32(x1474, arg4[4])
	var x3257 uint32
	var x3258 uint32
	x3258, x3257 = bits.Mul32(x1474, arg4[3])
	var x3259 uint32
	var x3260 uint32
	x3260, x3259 = bits.Mul32(x1474, arg4[2])
	var x3261 uint32
	var x3262 uint32
	x3262, x3261 = bits.Mul32(x1474, arg4[1])
	var x3263 uint32
	var x3264 uint32
	x3264, x3263 = bits.Mul32(x1474, arg4[0])
	var x3265 uint32
	var x3266 uint32
	x3265, x3266 = bits.Add32(x3264, x3261, uint32(0x0))
	var x3267 uint32
	var x3268 uint32
	x3267, x3268 = bits.Add32(x3262, x3259, uint32(uint1(x3266)))
	var x3269 uint32
	var x3270 uint32
	x3269, x3270 = bits.Add32(x3260, x3257, uint32(uint1(x3268)))
	var x3271 uint32
	var x3272 uint32
	x3271, x3272 = bits.Add32(x3258, x3255, uint32(uint1(x3270)))
	var x3273 uint32
	var x3274 uint32
	x3273, x3274 = bits.Add32(x3256, x3253, uint32(uint1(x3272)))
	var x3275 uint32
	var x3276 uint32
	x3275, x3276 = bits.Add32(x3254, x3251, uint32(uint1(x3274)))
	x3277 := (uint32(uint1(x3276)) + x3252)
	var x3278 uint32
	var x3279 uint32
	x3278, x3279 = bits.Add32(x3236, x3263, uint32(0x0))
	var x3280 uint32
	var x3281 uint32
	x3280, x3281 = bits.Add32(x3238, x3265, uint32(uint1(x3279)))
	var x3282 uint32
	var x3283 uint32
	x3282, x3283 = bits.Add32(x3240, x3267, uint32(uint1(x3281)))
	var x3284 uint32
	var x3285 uint32
	x3284, x3285 = bits.Add32(x3242, x3269, uint32(uint1(x3283)))
	var x3286 uint32
	var x3287 uint32
	x3286, x3287 = bits.Add32(x3244, x3271, uint32(uint1(x3285)))
	var x3288 uint32
	var x3289 uint32
	x3288, x3289 = bits.Add32(x3246, x3273, uint32(uint1(x3287)))
	var x3290 uint32
	var x3291 uint32
	x3290, x3291 = bits.Add32(x3248, x3275, uint32(uint1(x3289)))
	var x3292 uint32
	var x3293 uint32
	x3292, x3293 = bits.Add32(x3250, x3277, uint32(uint1(x3291)))
	var x3294 uint32
	_, x3294 = bits.Mul32(x3278, 0xffffffff)
	var x3296 uint32
	var x3297 uint32
	x3297, x3296 = bits.Mul32(x3294, 0xffffffff)
	var x3298 uint32
	var x3299 uint32
	x3299, x3298 = bits.Mul32(x3294, 0xffffffff)
	var x3300 uint32
	var x3301 uint32
	x3301, x3300 = bits.Mul32(x3294, 0xffffffff)
	var x3302 uint32
	var x3303 uint32
	x3303, x3302 = bits.Mul32(x3294, 0xffffffff)
	var x3304 uint32
	var x3305 uint32
	x3304, x3305 = bits.Add32(x3303, x3300, uint32(0x0))
	var x3306 uint32
	var x3307 uint32
	x3306, x3307 = bits.Add32(x3301, x3298, uint32(uint1(x3305)))
	var x3308 uint32
	var x3309 uint32
	x3308, x3309 = bits.Add32(x3299, x3296, uint32(uint1(x3307)))
	x3310 := (uint32(uint1(x3309)) + x3297)
	var x3312 uint32
	_, x3312 = bits.Add32(x3278, x3294, uint32(0x0))
	var x3313 uint32
	var x3314 uint32
	x3313, x3314 = bits.Add32(x3280, uint32(0x0), uint32(uint1(x3312)))
	var x3315 uint32
	var x3316 uint32
	x3315, x3316 = bits.Add32(x3282, uint32(0x0), uint32(uint1(x3314)))
	var x3317 uint32
	var x3318 uint32
	x3317, x3318 = bits.Add32(x3284, x3302, uint32(uint1(x3316)))
	var x3319 uint32
	var x3320 uint32
	x3319, x3320 = bits.Add32(x3286, x3304, uint32(uint1(x3318)))
	var x3321 uint32
	var x3322 uint32
	x3321, x3322 = bits.Add32(x3288, x3306, uint32(uint1(x3320)))
	var x3323 uint32
	var x3324 uint32
	x3323, x3324 = bits.Add32(x3290, x3308, uint32(uint1(x3322)))
	var x3325 uint32
	var x3326 uint32
	x3325, x3326 = bits.Add32(x3292, x3310, uint32(uint1(x3324)))
	x3327 := (uint32(uint1(x3326)) + uint32(uint1(x3293)))
	var x3328 uint32
	var x3329 uint32
	x3329, x3328 = bits.Mul32(x1475, arg4[6])
	var x3330 uint32
	var x3331 uint32
	x3331, x3330 = bits.Mul32(x1475, arg4[5])
	var x3332 uint32
	var x3333 uint32
	x3333, x3332 = bits.Mul32(x1475, arg4[4])
	var x3334 uint32
	var x3335 uint32
	x3335, x3334 = bits.Mul32(x1475, arg4[3])
	var x3336 uint32
	var x3337 uint32
	x3337, x3336 = bits.Mul32(x1475, arg4[2])
	var x3338 uint32
	var x3339 uint32
	x3339, x3338 = bits.Mul32(x1475, arg4[1])
	var x3340 uint32
	var x3341 uint32
	x3341, x3340 = bits.Mul32(x1475, arg4[0])
	var x3342 uint32
	var x3343 uint32
	x3342, x3343 = bits.Add32(x3341, x3338, uint32(0x0))
	var x3344 uint32
	var x3345 uint32
	x3344, x3345 = bits.Add32(x3339, x3336, uint32(uint1(x3343)))
	var x3346 uint32
	var x3347 uint32
	x3346, x3347 = bits.Add32(x3337, x3334, uint32(uint1(x3345)))
	var x3348 uint32
	var x3349 uint32
	x3348, x3349 = bits.Add32(x3335, x3332, uint32(uint1(x3347)))
	var x3350 uint32
	var x3351 uint32
	x3350, x3351 = bits.Add32(x3333, x3330, uint32(uint1(x3349)))
	var x3352 uint32
	var x3353 uint32
	x3352, x3353 = bits.Add32(x3331, x3328, uint32(uint1(x3351)))
	x3354 := (uint32(uint1(x3353)) + x3329)
	var x3355 uint32
	var x3356 uint32
	x3355, x3356 = bits.Add32(x3313, x3340, uint32(0x0))
	var x3357 uint32
	var x3358 uint32
	x3357, x3358 = bits.Add32(x3315, x3342, uint32(uint1(x3356)))
	var x3359 uint32
	var x3360 uint32
	x3359, x3360 = bits.Add32(x3317, x3344, uint32(uint1(x3358)))
	var x3361 uint32
	var x3362 uint32
	x3361, x3362 = bits.Add32(x3319, x3346, uint32(uint1(x3360)))
	var x3363 uint32
	var x3364 uint32
	x3363, x3364 = bits.Add32(x3321, x3348, uint32(uint1(x3362)))
	var x3365 uint32
	var x3366 uint32
	x3365, x3366 = bits.Add32(x3323, x3350, uint32(uint1(x3364)))
	var x3367 uint32
	var x3368 uint32
	x3367, x3368 = bits.Add32(x3325, x3352, uint32(uint1(x3366)))
	var x3369 uint32
	var x3370 uint32
	x3369, x3370 = bits.Add32(x3327, x3354, uint32(uint1(x3368)))
	var x3371 uint32
	_, x3371 = bits.Mul32(x3355, 0xffffffff)
	var x3373 uint32
	var x3374 uint32
	x3374, x3373 = bits.Mul32(x3371, 0xffffffff)
	var x3375 uint32
	var x3376 uint32
	x3376, x3375 = bits.Mul32(x3371, 0xffffffff)
	var x3377 uint32
	var x3378 uint32
	x3378, x3377 = bits.Mul32(x3371, 0xffffffff)
	var x3379 uint32
	var x3380 uint32
	x3380, x3379 = bits.Mul32(x3371, 0xffffffff)
	var x3381 uint32
	var x3382 uint32
	x3381, x3382 = bits.Add32(x3380, x3377, uint32(0x0))
	var x3383 uint32
	var x3384 uint32
	x3383, x3384 = bits.Add32(x3378, x3375, uint32(uint1(x3382)))
	var x3385 uint32
	var x3386 uint32
	x3385, x3386 = bits.Add32(x3376, x3373, uint32(uint1(x3384)))
	x3387 := (uint32(uint1(x3386)) + x3374)
	var x3389 uint32
	_, x3389 = bits.Add32(x3355, x3371, uint32(0x0))
	var x3390 uint32
	var x3391 uint32
	x3390, x3391 = bits.Add32(x3357, uint32(0x0), uint32(uint1(x3389)))
	var x3392 uint32
	var x3393 uint32
	x3392, x3393 = bits.Add32(x3359, uint32(0x0), uint32(uint1(x3391)))
	var x3394 uint32
	var x3395 uint32
	x3394, x3395 = bits.Add32(x3361, x3379, uint32(uint1(x3393)))
	var x3396 uint32
	var x3397 uint32
	x3396, x3397 = bits.Add32(x3363, x3381, uint32(uint1(x3395)))
	var x3398 uint32
	var x3399 uint32
	x3398, x3399 = bits.Add32(x3365, x3383, uint32(uint1(x3397)))
	var x3400 uint32
	var x3401 uint32
	x3400, x3401 = bits.Add32(x3367, x3385, uint32(uint1(x3399)))
	var x3402 uint32
	var x3403 uint32
	x3402, x3403 = bits.Add32(x3369, x3387, uint32(uint1(x3401)))
	x3404 := (uint32(uint1(x3403)) + uint32(uint1(x3370)))
	var x3405 uint32
	var x3406 uint32
	x3406, x3405 = bits.Mul32(x1476, arg4[6])
	var x3407 uint32
	var x3408 uint32
	x3408, x3407 = bits.Mul32(x1476, arg4[5])
	var x3409 uint32
	var x3410 uint32
	x3410, x3409 = bits.Mul32(x1476, arg4[4])
	var x3411 uint32
	var x3412 uint32
	x3412, x3411 = bits.Mul32(x1476, arg4[3])
	var x3413 uint32
	var x3414 uint32
	x3414, x3413 = bits.Mul32(x1476, arg4[2])
	var x3415 uint32
	var x3416 uint32
	x3416, x3415 = bits.Mul32(x1476, arg4[1])
	var x3417 uint32
	var x3418 uint32
	x3418, x3417 = bits.Mul32(x1476, arg4[0])
	var x3419 uint32
	var x3420 uint32
	x3419, x3420 = bits.Add32(x3418, x3415, uint32(0x0))
	var x3421 uint32
	var x3422 uint32
	x3421, x3422 = bits.Add32(x3416, x3413, uint32(uint1(x3420)))
	var x3423 uint32
	var x3424 uint32
	x3423, x3424 = bits.Add32(x3414, x3411, uint32(uint1(x3422)))
	var x3425 uint32
	var x3426 uint32
	x3425, x3426 = bits.Add32(x3412, x3409, uint32(uint1(x3424)))
	var x3427 uint32
	var x3428 uint32
	x3427, x3428 = bits.Add32(x3410, x3407, uint32(uint1(x3426)))
	var x3429 uint32
	var x3430 uint32
	x3429, x3430 = bits.Add32(x3408, x3405, uint32(uint1(x3428)))
	x3431 := (uint32(uint1(x3430)) + x3406)
	var x3432 uint32
	var x3433 uint32
	x3432, x3433 = bits.Add32(x3390, x3417, uint32(0x0))
	var x3434 uint32
	var x3435 uint32
	x3434, x3435 = bits.Add32(x3392, x3419, uint32(uint1(x3433)))
	var x3436 uint32
	var x3437 uint32
	x3436, x3437 = bits.Add32(x3394, x3421, uint32(uint1(x3435)))
	var x3438 uint32
	var x3439 uint32
	x3438, x3439 = bits.Add32(x3396, x3423, uint32(uint1(x3437)))
	var x3440 uint32
	var x3441 uint32
	x3440, x3441 = bits.Add32(x3398, x3425, uint32(uint1(x3439)))
	var x3442 uint32
	var x3443 uint32
	x3442, x3443 = bits.Add32(x3400, x3427, uint32(uint1(x3441)))
	var x3444 uint32
	var x3445 uint32
	x3444, x3445 = bits.Add32(x3402, x3429, uint32(uint1(x3443)))
	var x3446 uint32
	var x3447 uint32
	x3446, x3447 = bits.Add32(x3404, x3431, uint32(uint1(x3445)))
	var x3448 uint32
	_, x3448 = bits.Mul32(x3432, 0xffffffff)
	var x3450 uint32
	var x3451 uint32
	x3451, x3450 = bits.Mul32(x3448, 0xffffffff)
	var x3452 uint32
	var x3453 uint32
	x3453, x3452 = bits.Mul32(x3448, 0xffffffff)
	var x3454 uint32
	var x3455 uint32
	x3455, x3454 = bits.Mul32(x3448, 0xffffffff)
	var x3456 uint32
	var x3457 uint32
	x3457, x3456 = bits.Mul32(x3448, 0xffffffff)
	var x3458 uint32
	var x3459 uint32
	x3458, x3459 = bits.Add32(x3457, x3454, uint32(0x0))
	var x3460 uint32
	var x3461 uint32
	x3460, x3461 = bits.Add32(x3455, x3452, uint32(uint1(x3459)))
	var x3462 uint32
	var x3463 uint32
	x3462, x3463 = bits.Add32(x3453, x3450, uint32(uint1(x3461)))
	x3464 := (uint32(uint1(x3463)) + x3451)
	var x3466 uint32
	_, x3466 = bits.Add32(x3432, x3448, uint32(0x0))
	var x3467 uint32
	var x3468 uint32
	x3467, x3468 = bits.Add32(x3434, uint32(0x0), uint32(uint1(x3466)))
	var x3469 uint32
	var x3470 uint32
	x3469, x3470 = bits.Add32(x3436, uint32(0x0), uint32(uint1(x3468)))
	var x3471 uint32
	var x3472 uint32
	x3471, x3472 = bits.Add32(x3438, x3456, uint32(uint1(x3470)))
	var x3473 uint32
	var x3474 uint32
	x3473, x3474 = bits.Add32(x3440, x3458, uint32(uint1(x3472)))
	var x3475 uint32
	var x3476 uint32
	x3475, x3476 = bits.Add32(x3442, x3460, uint32(uint1(x3474)))
	var x3477 uint32
	var x3478 uint32
	x3477, x3478 = bits.Add32(x3444, x3462, uint32(uint1(x3476)))
	var x3479 uint32
	var x3480 uint32
	x3479, x3480 = bits.Add32(x3446, x3464, uint32(uint1(x3478)))
	x3481 := (uint32(uint1(x3480)) + uint32(uint1(x3447)))
	var x3482 uint32
	var x3483 uint32
	x3483, x3482 = bits.Mul32(x1477, arg4[6])
	var x3484 uint32
	var x3485 uint32
	x3485, x3484 = bits.Mul32(x1477, arg4[5])
	var x3486 uint32
	var x3487 uint32
	x3487, x3486 = bits.Mul32(x1477, arg4[4])
	var x3488 uint32
	var x3489 uint32
	x3489, x3488 = bits.Mul32(x1477, arg4[3])
	var x3490 uint32
	var x3491 uint32
	x3491, x3490 = bits.Mul32(x1477, arg4[2])
	var x3492 uint32
	var x3493 uint32
	x3493, x3492 = bits.Mul32(x1477, arg4[1])
	var x3494 uint32
	var x3495 uint32
	x3495, x3494 = bits.Mul32(x1477, arg4[0])
	var x3496 uint32
	var x3497 uint32
	x3496, x3497 = bits.Add32(x3495, x3492, uint32(0x0))
	var x3498 uint32
	var x3499 uint32
	x3498, x3499 = bits.Add32(x3493, x3490, uint32(uint1(x3497)))
	var x3500 uint32
	var x3501 uint32
	x3500, x3501 = bits.Add32(x3491, x3488, uint32(uint1(x3499)))
	var x3502 uint32
	var x3503 uint32
	x3502, x3503 = bits.Add32(x3489, x3486, uint32(uint1(x3501)))
	var x3504 uint32
	var x3505 uint32
	x3504, x3505 = bits.Add32(x3487, x3484, uint32(uint1(x3503)))
	var x3506 uint32
	var x3507 uint32
	x3506, x3507 = bits.Add32(x3485, x3482, uint32(uint1(x3505)))
	x3508 := (uint32(uint1(x3507)) + x3483)
	var x3509 uint32
	var x3510 uint32
	x3509, x3510 = bits.Add32(x3467, x3494, uint32(0x0))
	var x3511 uint32
	var x3512 uint32
	x3511, x3512 = bits.Add32(x3469, x3496, uint32(uint1(x3510)))
	var x3513 uint32
	var x3514 uint32
	x3513, x3514 = bits.Add32(x3471, x3498, uint32(uint1(x3512)))
	var x3515 uint32
	var x3516 uint32
	x3515, x3516 = bits.Add32(x3473, x3500, uint32(uint1(x3514)))
	var x3517 uint32
	var x3518 uint32
	x3517, x3518 = bits.Add32(x3475, x3502, uint32(uint1(x3516)))
	var x3519 uint32
	var x3520 uint32
	x3519, x3520 = bits.Add32(x3477, x3504, uint32(uint1(x3518)))
	var x3521 uint32
	var x3522 uint32
	x3521, x3522 = bits.Add32(x3479, x3506, uint32(uint1(x3520)))
	var x3523 uint32
	var x3524 uint32
	x3523, x3524 = bits.Add32(x3481, x3508, uint32(uint1(x3522)))
	var x3525 uint32
	_, x3525 = bits.Mul32(x3509, 0xffffffff)
	var x3527 uint32
	var x3528 uint32
	x3528, x3527 = bits.Mul32(x3525, 0xffffffff)
	var x3529 uint32
	var x3530 uint32
	x3530, x3529 = bits.Mul32(x3525, 0xffffffff)
	var x3531 uint32
	var x3532 uint32
	x3532, x3531 = bits.Mul32(x3525, 0xffffffff)
	var x3533 uint32
	var x3534 uint32
	x3534, x3533 = bits.Mul32(x3525, 0xffffffff)
	var x3535 uint32
	var x3536 uint32
	x3535, x3536 = bits.Add32(x3534, x3531, uint32(0x0))
	var x3537 uint32
	var x3538 uint32
	x3537, x3538 = bits.Add32(x3532, x3529, uint32(uint1(x3536)))
	var x3539 uint32
	var x3540 uint32
	x3539, x3540 = bits.Add32(x3530, x3527, uint32(uint1(x3538)))
	x3541 := (uint32(uint1(x3540)) + x3528)
	var x3543 uint32
	_, x3543 = bits.Add32(x3509, x3525, uint32(0x0))
	var x3544 uint32
	var x3545 uint32
	x3544, x3545 = bits.Add32(x3511, uint32(0x0), uint32(uint1(x3543)))
	var x3546 uint32
	var x3547 uint32
	x3546, x3547 = bits.Add32(x3513, uint32(0x0), uint32(uint1(x3545)))
	var x3548 uint32
	var x3549 uint32
	x3548, x3549 = bits.Add32(x3515, x3533, uint32(uint1(x3547)))
	var x3550 uint32
	var x3551 uint32
	x3550, x3551 = bits.Add32(x3517, x3535, uint32(uint1(x3549)))
	var x3552 uint32
	var x3553 uint32
	x3552, x3553 = bits.Add32(x3519, x3537, uint32(uint1(x3551)))
	var x3554 uint32
	var x3555 uint32
	x3554, x3555 = bits.Add32(x3521, x3539, uint32(uint1(x3553)))
	var x3556 uint32
	var x3557 uint32
	x3556, x3557 = bits.Add32(x3523, x3541, uint32(uint1(x3555)))
	x3558 := (uint32(uint1(x3557)) + uint32(uint1(x3524)))
	var x3559 uint32
	var x3560 uint32
	x3560, x3559 = bits.Mul32(x1478, arg4[6])
	var x3561 uint32
	var x3562 uint32
	x3562, x3561 = bits.Mul32(x1478, arg4[5])
	var x3563 uint32
	var x3564 uint32
	x3564, x3563 = bits.Mul32(x1478, arg4[4])
	var x3565 uint32
	var x3566 uint32
	x3566, x3565 = bits.Mul32(x1478, arg4[3])
	var x3567 uint32
	var x3568 uint32
	x3568, x3567 = bits.Mul32(x1478, arg4[2])
	var x3569 uint32
	var x3570 uint32
	x3570, x3569 = bits.Mul32(x1478, arg4[1])
	var x3571 uint32
	var x3572 uint32
	x3572, x3571 = bits.Mul32(x1478, arg4[0])
	var x3573 uint32
	var x3574 uint32
	x3573, x3574 = bits.Add32(x3572, x3569, uint32(0x0))
	var x3575 uint32
	var x3576 uint32
	x3575, x3576 = bits.Add32(x3570, x3567, uint32(uint1(x3574)))
	var x3577 uint32
	var x3578 uint32
	x3577, x3578 = bits.Add32(x3568, x3565, uint32(uint1(x3576)))
	var x3579 uint32
	var x3580 uint32
	x3579, x3580 = bits.Add32(x3566, x3563, uint32(uint1(x3578)))
	var x3581 uint32
	var x3582 uint32
	x3581, x3582 = bits.Add32(x3564, x3561, uint32(uint1(x3580)))
	var x3583 uint32
	var x3584 uint32
	x3583, x3584 = bits.Add32(x3562, x3559, uint32(uint1(x3582)))
	x3585 := (uint32(uint1(x3584)) + x3560)
	var x3586 uint32
	var x3587 uint32
	x3586, x3587 = bits.Add32(x3544, x3571, uint32(0x0))
	var x3588 uint32
	var x3589 uint32
	x3588, x3589 = bits.Add32(x3546, x3573, uint32(uint1(x3587)))
	var x3590 uint32
	var x3591 uint32
	x3590, x3591 = bits.Add32(x3548, x3575, uint32(uint1(x3589)))
	var x3592 uint32
	var x3593 uint32
	x3592, x3593 = bits.Add32(x3550, x3577, uint32(uint1(x3591)))
	var x3594 uint32
	var x3595 uint32
	x3594, x3595 = bits.Add32(x3552, x3579, uint32(uint1(x3593)))
	var x3596 uint32
	var x3597 uint32
	x3596, x3597 = bits.Add32(x3554, x3581, uint32(uint1(x3595)))
	var x3598 uint32
	var x3599 uint32
	x3598, x3599 = bits.Add32(x3556, x3583, uint32(uint1(x3597)))
	var x3600 uint32
	var x3601 uint32
	x3600, x3601 = bits.Add32(x3558, x3585, uint32(uint1(x3599)))
	var x3602 uint32
	_, x3602 = bits.Mul32(x3586, 0xffffffff)
	var x3604 uint32
	var x3605 uint32
	x3605, x3604 = bits.Mul32(x3602, 0xffffffff)
	var x3606 uint32
	var x3607 uint32
	x3607, x3606 = bits.Mul32(x3602, 0xffffffff)
	var x3608 uint32
	var x3609 uint32
	x3609, x3608 = bits.Mul32(x3602, 0xffffffff)
	var x3610 uint32
	var x3611 uint32
	x3611, x3610 = bits.Mul32(x3602, 0xffffffff)
	var x3612 uint32
	var x3613 uint32
	x3612, x3613 = bits.Add32(x3611, x3608, uint32(0x0))
	var x3614 uint32
	var x3615 uint32
	x3614, x3615 = bits.Add32(x3609, x3606, uint32(uint1(x3613)))
	var x3616 uint32
	var x3617 uint32
	x3616, x3617 = bits.Add32(x3607, x3604, uint32(uint1(x3615)))
	x3618 := (uint32(uint1(x3617)) + x3605)
	var x3620 uint32
	_, x3620 = bits.Add32(x3586, x3602, uint32(0x0))
	var x3621 uint32
	var x3622 uint32
	x3621, x3622 = bits.Add32(x3588, uint32(0x0), uint32(uint1(x3620)))
	var x3623 uint32
	var x3624 uint32
	x3623, x3624 = bits.Add32(x3590, uint32(0x0), uint32(uint1(x3622)))
	var x3625 uint32
	var x3626 uint32
	x3625, x3626 = bits.Add32(x3592, x3610, uint32(uint1(x3624)))
	var x3627 uint32
	var x3628 uint32
	x3627, x3628 = bits.Add32(x3594, x3612, uint32(uint1(x3626)))
	var x3629 uint32
	var x3630 uint32
	x3629, x3630 = bits.Add32(x3596, x3614, uint32(uint1(x3628)))
	var x3631 uint32
	var x3632 uint32
	x3631, x3632 = bits.Add32(x3598, x3616, uint32(uint1(x3630)))
	var x3633 uint32
	var x3634 uint32
	x3633, x3634 = bits.Add32(x3600, x3618, uint32(uint1(x3632)))
	x3635 := (uint32(uint1(x3634)) + uint32(uint1(x3601)))
	var x3636 uint32
	var x3637 uint32
	x3636, x3637 = bits.Sub32(x3621, uint32(0x1), uint32(0x0))
	var x3638 uint32
	var x3639 uint32
	x3638, x3639 = bits.Sub32(x3623, uint32(0x0), uint32(uint1(x3637)))
	var x3640 uint32
	var x3641 uint32
	x3640, x3641 = bits.Sub32(x3625, uint32(0x0), uint32(uint1(x3639)))
	var x3642 uint32
	var x3643 uint32
	x3642, x3643 = bits.Sub32(x3627, 0xffffffff, uint32(uint1(x3641)))
	var x3644 uint32
	var x3645 uint32
	x3644, x3645 = bits.Sub32(x3629, 0xffffffff, uint32(uint1(x3643)))
	var x3646 uint32
	var x3647 uint32
	x3646, x3647 = bits.Sub32(x3631, 0xffffffff, uint32(uint1(x3645)))
	var x3648 uint32
	var x3649 uint32
	x3648, x3649 = bits.Sub32(x3633, 0xffffffff, uint32(uint1(x3647)))
	var x3651 uint32
	_, x3651 = bits.Sub32(x3635, uint32(0x0), uint32(uint1(x3649)))
	var x3652 uint32
	cmovznzU32(&x3652, uint1(x3651), x3636, x3621)
	var x3653 uint32
	cmovznzU32(&x3653, uint1(x3651), x3638, x3623)
	var x3654 uint32
	cmovznzU32(&x3654, uint1(x3651), x3640, x3625)
	var x3655 uint32
	cmovznzU32(&x3655, uint1(x3651), x3642, x3627)
	var x3656 uint32
	cmovznzU32(&x3656, uint1(x3651), x3644, x3629)
	var x3657 uint32
	cmovznzU32(&x3657, uint1(x3651), x3646, x3631)
	var x3658 uint32
	cmovznzU32(&x3658, uint1(x3651), x3648, x3633)
	var x3659 uint32
	var x3660 uint32
	x3659, x3660 = bits.Add32(x2017, x2562, uint32(0x0))
	var x3661 uint32
	var x3662 uint32
	x3661, x3662 = bits.Add32(x2018, x2563, uint32(uint1(x3660)))
	var x3663 uint32
	var x3664 uint32
	x3663, x3664 = bits.Add32(x2019, x2564, uint32(uint1(x3662)))
	var x3665 uint32
	var x3666 uint32
	x3665, x3666 = bits.Add32(x2020, x2565, uint32(uint1(x3664)))
	var x3667 uint32
	var x3668 uint32
	x3667, x3668 = bits.Add32(x2021, x2566, uint32(uint1(x3666)))
	var x3669 uint32
	var x3670 uint32
	x3669, x3670 = bits.Add32(x2022, x2567, uint32(uint1(x3668)))
	var x3671 uint32
	var x3672 uint32
	x3671, x3672 = bits.Add32(x2023, x2568, uint32(uint1(x3670)))
	var x3673 uint32
	var x3674 uint32
	x3673, x3674 = bits.Sub32(x3659, uint32(0x1), uint32(0x0))
	var x3675 uint32
	var x3676 uint32
	x3675, x3676 = bits.Sub32(x3661, uint32(0x0), uint32(uint1(x3674)))
	var x3677 uint32
	var x3678 uint32
	x3677, x3678 = bits.Sub32(x3663, uint32(0x0), uint32(uint1(x3676)))
	var x3679 uint32
	var x3680 uint32
	x3679, x3680 = bits.Sub32(x3665, 0xffffffff, uint32(uint1(x3678)))
	var x3681 uint32
	var x3682 uint32
	x3681, x3682 = bits.Sub32(x3667, 0xffffffff, uint32(uint1(x3680)))
	var x3683 uint32
	var x3684 uint32
	x3683, x3684 = bits.Sub32(x3669, 0xffffffff, uint32(uint1(x3682)))
	var x3685 uint32
	var x3686 uint32
	x3685, x3686 = bits.Sub32(x3671, 0xffffffff, uint32(uint1(x3684)))
	var x3688 uint32
	_, x3688 = bits.Sub32(uint32(uint1(x3672)), uint32(0x0), uint32(uint1(x3686)))
	var x3689 uint32
	cmovznzU32(&x3689, uint1(x3688), x3673, x3659)
	var x3690 uint32
	cmovznzU32(&x3690, uint1(x3688), x3675, x3661)
	var x3691 uint32
	cmovznzU32(&x3691, uint1(x3688), x3677, x3663)
	var x3692 uint32
	cmovznzU32(&x3692, uint1(x3688), x3679, x3665)
	var x3693 uint32
	cmovznzU32(&x3693, uint1(x3688), x3681, x3667)
	var x3694 uint32
	cmovznzU32(&x3694, uint1(x3688), x3683, x3669)
	var x3695 uint32
	cmovznzU32(&x3695, uint1(x3688), x3685, x3671)
	var x3696 uint32
	var x3697 uint32
	x3696, x3697 = bits.Add32(x3107, x3652, uint32(0x0))
	var x3698 uint32
	var x3699 uint32
	x3698, x3699 = bits.Add32(x3108, x3653, uint32(uint1(x3697)))
	var x3700 uint32
	var x3701 uint32
	x3700, x3701 = bits.Add32(x3109, x3654, uint32(uint1(x3699)))
	var x3702 uint32
	var x3703 uint32
	x3702, x3703 = bits.Add32(x3110, x3655, uint32(uint1(x3701)))
	var x3704 uint32
	var x3705 uint32
	x3704, x3705 = bits.Add32(x3111, x3656, uint32(uint1(x3703)))
	var x3706 uint32
	var x3707 uint32
	x3706, x3707 = bits.Add32(x3112, x3657, uint32(uint1(x3705)))
	var x3708 uint32
	var x3709 uint32
	x3708, x3709 = bits.Add32(x3113, x3658, uint32(uint1(x3707)))
	var x3710 uint32
	var x3711 uint32
	x3710, x3711 = bits.Sub32(x3696, uint32(0x1), uint32(0x0))
	var x3712 uint32
	var x3713 uint32
	x3712, x3713 = bits.Sub32(x3698, uint32(0x0), uint32(uint1(x3711)))
	var x3714 uint32
	var x3715 uint32
	x3714, x3715 = bits.Sub32(x3700, uint32(0x0), uint32(uint1(x3713)))
	var x3716 uint32
	var x3717 uint32
	x3716, x3717 = bits.Sub32(x3702, 0xffffffff, uint32(uint1(x3715)))
	var x3718 uint32
	var x3719 uint32
	x3718, x3719 = bits.Sub32(x3704, 0xffffffff, uint32(uint1(x3717)))
	var x3720 uint32
	var x3721 uint32
	x3720, x3721 = bits.Sub32(x3706, 0xffffffff, uint32(uint1(x3719)))
	var x3722 uint32
	var x3723 uint32
	x3722, x3723 = bits.Sub32(x3708, 0xffffffff, uint32(uint1(x3721)))
	var x3725 uint32
	_, x3725 = bits.Sub32(uint32(uint1(x3709)), uint32(0x0), uint32(uint1(x3723)))
	var x3726 uint32
	cmovznzU32(&x3726, uint1(x3725), x3710, x3696)
	var x3727 uint32
	cmovznzU32(&x3727, uint1(x3725), x3712, x3698)
	var x3728 uint32
	cmovznzU32(&x3728, uint1(x3725), x3714, x3700)
	var x3729 uint32
	cmovznzU32(&x3729, uint1(x3725), x3716, x3702)
	var x3730 uint32
	cmovznzU32(&x3730, uint1(x3725), x3718, x3704)
	var x3731 uint32
	cmovznzU32(&x3731, uint1(x3725), x3720, x3706)
	var x3732 uint32
	cmovznzU32(&x3732, uint1(x3725), x3722, x3708)
	out1[0] = x1307
	out1[1] = x1308
	out1[2] = x1309
	out1[3] = x1310
	out1[4] = x1311
	out1[5] = x1312
	out1[6] = x1313
	out1[7] = x1314
	out2[0] = x1315
	out2[1] = x1316
	out2[2] = x1317
	out2[3] = x1318
	out2[4] = x1319
	out2[5] = x1320
	out2[6] = x1321
	out2[7] = x1322
	out3[0] = x3689
	out3[1] = x3690
	out3[2] = x3691
	out3[3] = x3692
	out3[4] = x3693
	out3[5] = x3694
	out3[6] = x3695
	out4[0] = x3726
	out4[1] = x3727
	out4[2] = x3728
	out4[3] = x3729
	out4[4] = x3730
	out4[5] = x3731
	out4[6] = x3732
}
