// Code generated by Fiat Cryptography. DO NOT EDIT.
//
// Autogenerated: 'src/ExtractionOCaml/word_by_word_montgomery' --lang Go --relax-primitive-carry-to-bitwidth 32,64 --cmovznz-by-mul --internal-static --package-case flatcase --public-function-case UpperCamelCase --private-function-case camelCase --public-type-case UpperCamelCase --private-type-case camelCase --no-prefix-fiat --doc-newline-in-typedef-bounds --doc-prepend-header 'Code generated by Fiat Cryptography. DO NOT EDIT.' --doc-text-before-function-name '' --doc-text-before-type-name '' --package-name p256 '' 32 '2^256 - 2^224 + 2^192 + 2^96 - 1' mul square add sub opp from_montgomery to_montgomery nonzero selectznz to_bytes from_bytes one msat sat_from_bytes divstep divstep_precomp jumpdivstep_precomp outer_loop_body
//
// curve description (via package name): p256
//
// machine_wordsize = 32 (from "32")
//
// requested operations: mul, square, add, sub, opp, from_montgomery, to_montgomery, nonzero, selectznz, to_bytes, from_bytes, one, msat, sat_from_bytes, divstep, divstep_precomp, jumpdivstep_precomp, outer_loop_body
//
// m = 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff (from "2^256 - 2^224 + 2^192 + 2^96 - 1")
//
//
//
// NOTE: In addition to the bounds specified above each function, all
//
//   functions synthesized for this Montgomery arithmetic require the
//
//   input to be strictly less than the prime modulus (m), and also
//
//   require the input to be in the unique saturated representation.
//
//   All functions also ensure that these two properties are true of
//
//   return values.
//
//
//
// Computed values:
//
//   eval z = z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160) + (z[6] << 192) + (z[7] << 224)
//
//   bytes_eval z = z[0] + (z[1] << 8) + (z[2] << 16) + (z[3] << 24) + (z[4] << 32) + (z[5] << 40) + (z[6] << 48) + (z[7] << 56) + (z[8] << 64) + (z[9] << 72) + (z[10] << 80) + (z[11] << 88) + (z[12] << 96) + (z[13] << 104) + (z[14] << 112) + (z[15] << 120) + (z[16] << 128) + (z[17] << 136) + (z[18] << 144) + (z[19] << 152) + (z[20] << 160) + (z[21] << 168) + (z[22] << 176) + (z[23] << 184) + (z[24] << 192) + (z[25] << 200) + (z[26] << 208) + (z[27] << 216) + (z[28] << 224) + (z[29] << 232) + (z[30] << 240) + (z[31] << 248)
//
//   twos_complement_eval z = if (z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160) + (z[6] << 192) + (z[7] << 224)) & (2^256-1) < 2^255 then (z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160) + (z[6] << 192) + (z[7] << 224)) & (2^256-1) else ((z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160) + (z[6] << 192) + (z[7] << 224)) & (2^256-1)) - 2^256
package p256

import "math/bits"

type uint1 uint64 // We use uint64 instead of a more narrow type for performance reasons; see https://github.com/mit-plv/fiat-crypto/pull/1006#issuecomment-892625927
type int1 int64 // We use uint64 instead of a more narrow type for performance reasons; see https://github.com/mit-plv/fiat-crypto/pull/1006#issuecomment-892625927

// MontgomeryDomainFieldElement is a field element in the Montgomery domain.
//
// Bounds:
//
//   [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
type MontgomeryDomainFieldElement [8]uint32

// NonMontgomeryDomainFieldElement is a field element NOT in the Montgomery domain.
//
// Bounds:
//
//   [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
type NonMontgomeryDomainFieldElement [8]uint32

// cmovznzU32 is a single-word conditional move.
//
// Postconditions:
//   out1 = (if arg1 = 0 then arg2 else arg3)
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [0x0 ~> 0xffffffff]
//   arg3: [0x0 ~> 0xffffffff]
// Output Bounds:
//   out1: [0x0 ~> 0xffffffff]
func cmovznzU32(out1 *uint32, arg1 uint1, arg2 uint32, arg3 uint32) {
	x1 := (uint32(arg1) * 0xffffffff)
	x2 := ((x1 & arg3) | ((^x1) & arg2))
	*out1 = x2
}

// cmovznzU1 is a single-word conditional move.
//
// Postconditions:
//   out1 = (if arg1 = 0 then arg2 else arg3)
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [0x0 ~> 0x1]
//   arg3: [0x0 ~> 0x1]
// Output Bounds:
//   out1: [0x0 ~> 0x1]
func cmovznzU1(out1 *uint1, arg1 uint1, arg2 uint1, arg3 uint1) {
	x1 := ((arg1 & arg3) | ((^arg1) & arg2))
	*out1 = x1
}

// Mul multiplies two field elements in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
//   0 ≤ eval arg2 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m
//   0 ≤ eval out1 < m
//
func Mul(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement, arg2 *MontgomeryDomainFieldElement) {
	x1 := arg1[1]
	x2 := arg1[2]
	x3 := arg1[3]
	x4 := arg1[4]
	x5 := arg1[5]
	x6 := arg1[6]
	x7 := arg1[7]
	x8 := arg1[0]
	var x9 uint32
	var x10 uint32
	x10, x9 = bits.Mul32(x8, arg2[7])
	var x11 uint32
	var x12 uint32
	x12, x11 = bits.Mul32(x8, arg2[6])
	var x13 uint32
	var x14 uint32
	x14, x13 = bits.Mul32(x8, arg2[5])
	var x15 uint32
	var x16 uint32
	x16, x15 = bits.Mul32(x8, arg2[4])
	var x17 uint32
	var x18 uint32
	x18, x17 = bits.Mul32(x8, arg2[3])
	var x19 uint32
	var x20 uint32
	x20, x19 = bits.Mul32(x8, arg2[2])
	var x21 uint32
	var x22 uint32
	x22, x21 = bits.Mul32(x8, arg2[1])
	var x23 uint32
	var x24 uint32
	x24, x23 = bits.Mul32(x8, arg2[0])
	var x25 uint32
	var x26 uint32
	x25, x26 = bits.Add32(x24, x21, uint32(0x0))
	var x27 uint32
	var x28 uint32
	x27, x28 = bits.Add32(x22, x19, uint32(uint1(x26)))
	var x29 uint32
	var x30 uint32
	x29, x30 = bits.Add32(x20, x17, uint32(uint1(x28)))
	var x31 uint32
	var x32 uint32
	x31, x32 = bits.Add32(x18, x15, uint32(uint1(x30)))
	var x33 uint32
	var x34 uint32
	x33, x34 = bits.Add32(x16, x13, uint32(uint1(x32)))
	var x35 uint32
	var x36 uint32
	x35, x36 = bits.Add32(x14, x11, uint32(uint1(x34)))
	var x37 uint32
	var x38 uint32
	x37, x38 = bits.Add32(x12, x9, uint32(uint1(x36)))
	x39 := (uint32(uint1(x38)) + x10)
	var x40 uint32
	var x41 uint32
	x41, x40 = bits.Mul32(x23, 0xffffffff)
	var x42 uint32
	var x43 uint32
	x43, x42 = bits.Mul32(x23, 0xffffffff)
	var x44 uint32
	var x45 uint32
	x45, x44 = bits.Mul32(x23, 0xffffffff)
	var x46 uint32
	var x47 uint32
	x47, x46 = bits.Mul32(x23, 0xffffffff)
	var x48 uint32
	var x49 uint32
	x48, x49 = bits.Add32(x47, x44, uint32(0x0))
	var x50 uint32
	var x51 uint32
	x50, x51 = bits.Add32(x45, x42, uint32(uint1(x49)))
	x52 := (uint32(uint1(x51)) + x43)
	var x54 uint32
	_, x54 = bits.Add32(x23, x46, uint32(0x0))
	var x55 uint32
	var x56 uint32
	x55, x56 = bits.Add32(x25, x48, uint32(uint1(x54)))
	var x57 uint32
	var x58 uint32
	x57, x58 = bits.Add32(x27, x50, uint32(uint1(x56)))
	var x59 uint32
	var x60 uint32
	x59, x60 = bits.Add32(x29, x52, uint32(uint1(x58)))
	var x61 uint32
	var x62 uint32
	x61, x62 = bits.Add32(x31, uint32(0x0), uint32(uint1(x60)))
	var x63 uint32
	var x64 uint32
	x63, x64 = bits.Add32(x33, uint32(0x0), uint32(uint1(x62)))
	var x65 uint32
	var x66 uint32
	x65, x66 = bits.Add32(x35, x23, uint32(uint1(x64)))
	var x67 uint32
	var x68 uint32
	x67, x68 = bits.Add32(x37, x40, uint32(uint1(x66)))
	var x69 uint32
	var x70 uint32
	x69, x70 = bits.Add32(x39, x41, uint32(uint1(x68)))
	var x71 uint32
	var x72 uint32
	x72, x71 = bits.Mul32(x1, arg2[7])
	var x73 uint32
	var x74 uint32
	x74, x73 = bits.Mul32(x1, arg2[6])
	var x75 uint32
	var x76 uint32
	x76, x75 = bits.Mul32(x1, arg2[5])
	var x77 uint32
	var x78 uint32
	x78, x77 = bits.Mul32(x1, arg2[4])
	var x79 uint32
	var x80 uint32
	x80, x79 = bits.Mul32(x1, arg2[3])
	var x81 uint32
	var x82 uint32
	x82, x81 = bits.Mul32(x1, arg2[2])
	var x83 uint32
	var x84 uint32
	x84, x83 = bits.Mul32(x1, arg2[1])
	var x85 uint32
	var x86 uint32
	x86, x85 = bits.Mul32(x1, arg2[0])
	var x87 uint32
	var x88 uint32
	x87, x88 = bits.Add32(x86, x83, uint32(0x0))
	var x89 uint32
	var x90 uint32
	x89, x90 = bits.Add32(x84, x81, uint32(uint1(x88)))
	var x91 uint32
	var x92 uint32
	x91, x92 = bits.Add32(x82, x79, uint32(uint1(x90)))
	var x93 uint32
	var x94 uint32
	x93, x94 = bits.Add32(x80, x77, uint32(uint1(x92)))
	var x95 uint32
	var x96 uint32
	x95, x96 = bits.Add32(x78, x75, uint32(uint1(x94)))
	var x97 uint32
	var x98 uint32
	x97, x98 = bits.Add32(x76, x73, uint32(uint1(x96)))
	var x99 uint32
	var x100 uint32
	x99, x100 = bits.Add32(x74, x71, uint32(uint1(x98)))
	x101 := (uint32(uint1(x100)) + x72)
	var x102 uint32
	var x103 uint32
	x102, x103 = bits.Add32(x55, x85, uint32(0x0))
	var x104 uint32
	var x105 uint32
	x104, x105 = bits.Add32(x57, x87, uint32(uint1(x103)))
	var x106 uint32
	var x107 uint32
	x106, x107 = bits.Add32(x59, x89, uint32(uint1(x105)))
	var x108 uint32
	var x109 uint32
	x108, x109 = bits.Add32(x61, x91, uint32(uint1(x107)))
	var x110 uint32
	var x111 uint32
	x110, x111 = bits.Add32(x63, x93, uint32(uint1(x109)))
	var x112 uint32
	var x113 uint32
	x112, x113 = bits.Add32(x65, x95, uint32(uint1(x111)))
	var x114 uint32
	var x115 uint32
	x114, x115 = bits.Add32(x67, x97, uint32(uint1(x113)))
	var x116 uint32
	var x117 uint32
	x116, x117 = bits.Add32(x69, x99, uint32(uint1(x115)))
	var x118 uint32
	var x119 uint32
	x118, x119 = bits.Add32(uint32(uint1(x70)), x101, uint32(uint1(x117)))
	var x120 uint32
	var x121 uint32
	x121, x120 = bits.Mul32(x102, 0xffffffff)
	var x122 uint32
	var x123 uint32
	x123, x122 = bits.Mul32(x102, 0xffffffff)
	var x124 uint32
	var x125 uint32
	x125, x124 = bits.Mul32(x102, 0xffffffff)
	var x126 uint32
	var x127 uint32
	x127, x126 = bits.Mul32(x102, 0xffffffff)
	var x128 uint32
	var x129 uint32
	x128, x129 = bits.Add32(x127, x124, uint32(0x0))
	var x130 uint32
	var x131 uint32
	x130, x131 = bits.Add32(x125, x122, uint32(uint1(x129)))
	x132 := (uint32(uint1(x131)) + x123)
	var x134 uint32
	_, x134 = bits.Add32(x102, x126, uint32(0x0))
	var x135 uint32
	var x136 uint32
	x135, x136 = bits.Add32(x104, x128, uint32(uint1(x134)))
	var x137 uint32
	var x138 uint32
	x137, x138 = bits.Add32(x106, x130, uint32(uint1(x136)))
	var x139 uint32
	var x140 uint32
	x139, x140 = bits.Add32(x108, x132, uint32(uint1(x138)))
	var x141 uint32
	var x142 uint32
	x141, x142 = bits.Add32(x110, uint32(0x0), uint32(uint1(x140)))
	var x143 uint32
	var x144 uint32
	x143, x144 = bits.Add32(x112, uint32(0x0), uint32(uint1(x142)))
	var x145 uint32
	var x146 uint32
	x145, x146 = bits.Add32(x114, x102, uint32(uint1(x144)))
	var x147 uint32
	var x148 uint32
	x147, x148 = bits.Add32(x116, x120, uint32(uint1(x146)))
	var x149 uint32
	var x150 uint32
	x149, x150 = bits.Add32(x118, x121, uint32(uint1(x148)))
	x151 := (uint32(uint1(x150)) + uint32(uint1(x119)))
	var x152 uint32
	var x153 uint32
	x153, x152 = bits.Mul32(x2, arg2[7])
	var x154 uint32
	var x155 uint32
	x155, x154 = bits.Mul32(x2, arg2[6])
	var x156 uint32
	var x157 uint32
	x157, x156 = bits.Mul32(x2, arg2[5])
	var x158 uint32
	var x159 uint32
	x159, x158 = bits.Mul32(x2, arg2[4])
	var x160 uint32
	var x161 uint32
	x161, x160 = bits.Mul32(x2, arg2[3])
	var x162 uint32
	var x163 uint32
	x163, x162 = bits.Mul32(x2, arg2[2])
	var x164 uint32
	var x165 uint32
	x165, x164 = bits.Mul32(x2, arg2[1])
	var x166 uint32
	var x167 uint32
	x167, x166 = bits.Mul32(x2, arg2[0])
	var x168 uint32
	var x169 uint32
	x168, x169 = bits.Add32(x167, x164, uint32(0x0))
	var x170 uint32
	var x171 uint32
	x170, x171 = bits.Add32(x165, x162, uint32(uint1(x169)))
	var x172 uint32
	var x173 uint32
	x172, x173 = bits.Add32(x163, x160, uint32(uint1(x171)))
	var x174 uint32
	var x175 uint32
	x174, x175 = bits.Add32(x161, x158, uint32(uint1(x173)))
	var x176 uint32
	var x177 uint32
	x176, x177 = bits.Add32(x159, x156, uint32(uint1(x175)))
	var x178 uint32
	var x179 uint32
	x178, x179 = bits.Add32(x157, x154, uint32(uint1(x177)))
	var x180 uint32
	var x181 uint32
	x180, x181 = bits.Add32(x155, x152, uint32(uint1(x179)))
	x182 := (uint32(uint1(x181)) + x153)
	var x183 uint32
	var x184 uint32
	x183, x184 = bits.Add32(x135, x166, uint32(0x0))
	var x185 uint32
	var x186 uint32
	x185, x186 = bits.Add32(x137, x168, uint32(uint1(x184)))
	var x187 uint32
	var x188 uint32
	x187, x188 = bits.Add32(x139, x170, uint32(uint1(x186)))
	var x189 uint32
	var x190 uint32
	x189, x190 = bits.Add32(x141, x172, uint32(uint1(x188)))
	var x191 uint32
	var x192 uint32
	x191, x192 = bits.Add32(x143, x174, uint32(uint1(x190)))
	var x193 uint32
	var x194 uint32
	x193, x194 = bits.Add32(x145, x176, uint32(uint1(x192)))
	var x195 uint32
	var x196 uint32
	x195, x196 = bits.Add32(x147, x178, uint32(uint1(x194)))
	var x197 uint32
	var x198 uint32
	x197, x198 = bits.Add32(x149, x180, uint32(uint1(x196)))
	var x199 uint32
	var x200 uint32
	x199, x200 = bits.Add32(x151, x182, uint32(uint1(x198)))
	var x201 uint32
	var x202 uint32
	x202, x201 = bits.Mul32(x183, 0xffffffff)
	var x203 uint32
	var x204 uint32
	x204, x203 = bits.Mul32(x183, 0xffffffff)
	var x205 uint32
	var x206 uint32
	x206, x205 = bits.Mul32(x183, 0xffffffff)
	var x207 uint32
	var x208 uint32
	x208, x207 = bits.Mul32(x183, 0xffffffff)
	var x209 uint32
	var x210 uint32
	x209, x210 = bits.Add32(x208, x205, uint32(0x0))
	var x211 uint32
	var x212 uint32
	x211, x212 = bits.Add32(x206, x203, uint32(uint1(x210)))
	x213 := (uint32(uint1(x212)) + x204)
	var x215 uint32
	_, x215 = bits.Add32(x183, x207, uint32(0x0))
	var x216 uint32
	var x217 uint32
	x216, x217 = bits.Add32(x185, x209, uint32(uint1(x215)))
	var x218 uint32
	var x219 uint32
	x218, x219 = bits.Add32(x187, x211, uint32(uint1(x217)))
	var x220 uint32
	var x221 uint32
	x220, x221 = bits.Add32(x189, x213, uint32(uint1(x219)))
	var x222 uint32
	var x223 uint32
	x222, x223 = bits.Add32(x191, uint32(0x0), uint32(uint1(x221)))
	var x224 uint32
	var x225 uint32
	x224, x225 = bits.Add32(x193, uint32(0x0), uint32(uint1(x223)))
	var x226 uint32
	var x227 uint32
	x226, x227 = bits.Add32(x195, x183, uint32(uint1(x225)))
	var x228 uint32
	var x229 uint32
	x228, x229 = bits.Add32(x197, x201, uint32(uint1(x227)))
	var x230 uint32
	var x231 uint32
	x230, x231 = bits.Add32(x199, x202, uint32(uint1(x229)))
	x232 := (uint32(uint1(x231)) + uint32(uint1(x200)))
	var x233 uint32
	var x234 uint32
	x234, x233 = bits.Mul32(x3, arg2[7])
	var x235 uint32
	var x236 uint32
	x236, x235 = bits.Mul32(x3, arg2[6])
	var x237 uint32
	var x238 uint32
	x238, x237 = bits.Mul32(x3, arg2[5])
	var x239 uint32
	var x240 uint32
	x240, x239 = bits.Mul32(x3, arg2[4])
	var x241 uint32
	var x242 uint32
	x242, x241 = bits.Mul32(x3, arg2[3])
	var x243 uint32
	var x244 uint32
	x244, x243 = bits.Mul32(x3, arg2[2])
	var x245 uint32
	var x246 uint32
	x246, x245 = bits.Mul32(x3, arg2[1])
	var x247 uint32
	var x248 uint32
	x248, x247 = bits.Mul32(x3, arg2[0])
	var x249 uint32
	var x250 uint32
	x249, x250 = bits.Add32(x248, x245, uint32(0x0))
	var x251 uint32
	var x252 uint32
	x251, x252 = bits.Add32(x246, x243, uint32(uint1(x250)))
	var x253 uint32
	var x254 uint32
	x253, x254 = bits.Add32(x244, x241, uint32(uint1(x252)))
	var x255 uint32
	var x256 uint32
	x255, x256 = bits.Add32(x242, x239, uint32(uint1(x254)))
	var x257 uint32
	var x258 uint32
	x257, x258 = bits.Add32(x240, x237, uint32(uint1(x256)))
	var x259 uint32
	var x260 uint32
	x259, x260 = bits.Add32(x238, x235, uint32(uint1(x258)))
	var x261 uint32
	var x262 uint32
	x261, x262 = bits.Add32(x236, x233, uint32(uint1(x260)))
	x263 := (uint32(uint1(x262)) + x234)
	var x264 uint32
	var x265 uint32
	x264, x265 = bits.Add32(x216, x247, uint32(0x0))
	var x266 uint32
	var x267 uint32
	x266, x267 = bits.Add32(x218, x249, uint32(uint1(x265)))
	var x268 uint32
	var x269 uint32
	x268, x269 = bits.Add32(x220, x251, uint32(uint1(x267)))
	var x270 uint32
	var x271 uint32
	x270, x271 = bits.Add32(x222, x253, uint32(uint1(x269)))
	var x272 uint32
	var x273 uint32
	x272, x273 = bits.Add32(x224, x255, uint32(uint1(x271)))
	var x274 uint32
	var x275 uint32
	x274, x275 = bits.Add32(x226, x257, uint32(uint1(x273)))
	var x276 uint32
	var x277 uint32
	x276, x277 = bits.Add32(x228, x259, uint32(uint1(x275)))
	var x278 uint32
	var x279 uint32
	x278, x279 = bits.Add32(x230, x261, uint32(uint1(x277)))
	var x280 uint32
	var x281 uint32
	x280, x281 = bits.Add32(x232, x263, uint32(uint1(x279)))
	var x282 uint32
	var x283 uint32
	x283, x282 = bits.Mul32(x264, 0xffffffff)
	var x284 uint32
	var x285 uint32
	x285, x284 = bits.Mul32(x264, 0xffffffff)
	var x286 uint32
	var x287 uint32
	x287, x286 = bits.Mul32(x264, 0xffffffff)
	var x288 uint32
	var x289 uint32
	x289, x288 = bits.Mul32(x264, 0xffffffff)
	var x290 uint32
	var x291 uint32
	x290, x291 = bits.Add32(x289, x286, uint32(0x0))
	var x292 uint32
	var x293 uint32
	x292, x293 = bits.Add32(x287, x284, uint32(uint1(x291)))
	x294 := (uint32(uint1(x293)) + x285)
	var x296 uint32
	_, x296 = bits.Add32(x264, x288, uint32(0x0))
	var x297 uint32
	var x298 uint32
	x297, x298 = bits.Add32(x266, x290, uint32(uint1(x296)))
	var x299 uint32
	var x300 uint32
	x299, x300 = bits.Add32(x268, x292, uint32(uint1(x298)))
	var x301 uint32
	var x302 uint32
	x301, x302 = bits.Add32(x270, x294, uint32(uint1(x300)))
	var x303 uint32
	var x304 uint32
	x303, x304 = bits.Add32(x272, uint32(0x0), uint32(uint1(x302)))
	var x305 uint32
	var x306 uint32
	x305, x306 = bits.Add32(x274, uint32(0x0), uint32(uint1(x304)))
	var x307 uint32
	var x308 uint32
	x307, x308 = bits.Add32(x276, x264, uint32(uint1(x306)))
	var x309 uint32
	var x310 uint32
	x309, x310 = bits.Add32(x278, x282, uint32(uint1(x308)))
	var x311 uint32
	var x312 uint32
	x311, x312 = bits.Add32(x280, x283, uint32(uint1(x310)))
	x313 := (uint32(uint1(x312)) + uint32(uint1(x281)))
	var x314 uint32
	var x315 uint32
	x315, x314 = bits.Mul32(x4, arg2[7])
	var x316 uint32
	var x317 uint32
	x317, x316 = bits.Mul32(x4, arg2[6])
	var x318 uint32
	var x319 uint32
	x319, x318 = bits.Mul32(x4, arg2[5])
	var x320 uint32
	var x321 uint32
	x321, x320 = bits.Mul32(x4, arg2[4])
	var x322 uint32
	var x323 uint32
	x323, x322 = bits.Mul32(x4, arg2[3])
	var x324 uint32
	var x325 uint32
	x325, x324 = bits.Mul32(x4, arg2[2])
	var x326 uint32
	var x327 uint32
	x327, x326 = bits.Mul32(x4, arg2[1])
	var x328 uint32
	var x329 uint32
	x329, x328 = bits.Mul32(x4, arg2[0])
	var x330 uint32
	var x331 uint32
	x330, x331 = bits.Add32(x329, x326, uint32(0x0))
	var x332 uint32
	var x333 uint32
	x332, x333 = bits.Add32(x327, x324, uint32(uint1(x331)))
	var x334 uint32
	var x335 uint32
	x334, x335 = bits.Add32(x325, x322, uint32(uint1(x333)))
	var x336 uint32
	var x337 uint32
	x336, x337 = bits.Add32(x323, x320, uint32(uint1(x335)))
	var x338 uint32
	var x339 uint32
	x338, x339 = bits.Add32(x321, x318, uint32(uint1(x337)))
	var x340 uint32
	var x341 uint32
	x340, x341 = bits.Add32(x319, x316, uint32(uint1(x339)))
	var x342 uint32
	var x343 uint32
	x342, x343 = bits.Add32(x317, x314, uint32(uint1(x341)))
	x344 := (uint32(uint1(x343)) + x315)
	var x345 uint32
	var x346 uint32
	x345, x346 = bits.Add32(x297, x328, uint32(0x0))
	var x347 uint32
	var x348 uint32
	x347, x348 = bits.Add32(x299, x330, uint32(uint1(x346)))
	var x349 uint32
	var x350 uint32
	x349, x350 = bits.Add32(x301, x332, uint32(uint1(x348)))
	var x351 uint32
	var x352 uint32
	x351, x352 = bits.Add32(x303, x334, uint32(uint1(x350)))
	var x353 uint32
	var x354 uint32
	x353, x354 = bits.Add32(x305, x336, uint32(uint1(x352)))
	var x355 uint32
	var x356 uint32
	x355, x356 = bits.Add32(x307, x338, uint32(uint1(x354)))
	var x357 uint32
	var x358 uint32
	x357, x358 = bits.Add32(x309, x340, uint32(uint1(x356)))
	var x359 uint32
	var x360 uint32
	x359, x360 = bits.Add32(x311, x342, uint32(uint1(x358)))
	var x361 uint32
	var x362 uint32
	x361, x362 = bits.Add32(x313, x344, uint32(uint1(x360)))
	var x363 uint32
	var x364 uint32
	x364, x363 = bits.Mul32(x345, 0xffffffff)
	var x365 uint32
	var x366 uint32
	x366, x365 = bits.Mul32(x345, 0xffffffff)
	var x367 uint32
	var x368 uint32
	x368, x367 = bits.Mul32(x345, 0xffffffff)
	var x369 uint32
	var x370 uint32
	x370, x369 = bits.Mul32(x345, 0xffffffff)
	var x371 uint32
	var x372 uint32
	x371, x372 = bits.Add32(x370, x367, uint32(0x0))
	var x373 uint32
	var x374 uint32
	x373, x374 = bits.Add32(x368, x365, uint32(uint1(x372)))
	x375 := (uint32(uint1(x374)) + x366)
	var x377 uint32
	_, x377 = bits.Add32(x345, x369, uint32(0x0))
	var x378 uint32
	var x379 uint32
	x378, x379 = bits.Add32(x347, x371, uint32(uint1(x377)))
	var x380 uint32
	var x381 uint32
	x380, x381 = bits.Add32(x349, x373, uint32(uint1(x379)))
	var x382 uint32
	var x383 uint32
	x382, x383 = bits.Add32(x351, x375, uint32(uint1(x381)))
	var x384 uint32
	var x385 uint32
	x384, x385 = bits.Add32(x353, uint32(0x0), uint32(uint1(x383)))
	var x386 uint32
	var x387 uint32
	x386, x387 = bits.Add32(x355, uint32(0x0), uint32(uint1(x385)))
	var x388 uint32
	var x389 uint32
	x388, x389 = bits.Add32(x357, x345, uint32(uint1(x387)))
	var x390 uint32
	var x391 uint32
	x390, x391 = bits.Add32(x359, x363, uint32(uint1(x389)))
	var x392 uint32
	var x393 uint32
	x392, x393 = bits.Add32(x361, x364, uint32(uint1(x391)))
	x394 := (uint32(uint1(x393)) + uint32(uint1(x362)))
	var x395 uint32
	var x396 uint32
	x396, x395 = bits.Mul32(x5, arg2[7])
	var x397 uint32
	var x398 uint32
	x398, x397 = bits.Mul32(x5, arg2[6])
	var x399 uint32
	var x400 uint32
	x400, x399 = bits.Mul32(x5, arg2[5])
	var x401 uint32
	var x402 uint32
	x402, x401 = bits.Mul32(x5, arg2[4])
	var x403 uint32
	var x404 uint32
	x404, x403 = bits.Mul32(x5, arg2[3])
	var x405 uint32
	var x406 uint32
	x406, x405 = bits.Mul32(x5, arg2[2])
	var x407 uint32
	var x408 uint32
	x408, x407 = bits.Mul32(x5, arg2[1])
	var x409 uint32
	var x410 uint32
	x410, x409 = bits.Mul32(x5, arg2[0])
	var x411 uint32
	var x412 uint32
	x411, x412 = bits.Add32(x410, x407, uint32(0x0))
	var x413 uint32
	var x414 uint32
	x413, x414 = bits.Add32(x408, x405, uint32(uint1(x412)))
	var x415 uint32
	var x416 uint32
	x415, x416 = bits.Add32(x406, x403, uint32(uint1(x414)))
	var x417 uint32
	var x418 uint32
	x417, x418 = bits.Add32(x404, x401, uint32(uint1(x416)))
	var x419 uint32
	var x420 uint32
	x419, x420 = bits.Add32(x402, x399, uint32(uint1(x418)))
	var x421 uint32
	var x422 uint32
	x421, x422 = bits.Add32(x400, x397, uint32(uint1(x420)))
	var x423 uint32
	var x424 uint32
	x423, x424 = bits.Add32(x398, x395, uint32(uint1(x422)))
	x425 := (uint32(uint1(x424)) + x396)
	var x426 uint32
	var x427 uint32
	x426, x427 = bits.Add32(x378, x409, uint32(0x0))
	var x428 uint32
	var x429 uint32
	x428, x429 = bits.Add32(x380, x411, uint32(uint1(x427)))
	var x430 uint32
	var x431 uint32
	x430, x431 = bits.Add32(x382, x413, uint32(uint1(x429)))
	var x432 uint32
	var x433 uint32
	x432, x433 = bits.Add32(x384, x415, uint32(uint1(x431)))
	var x434 uint32
	var x435 uint32
	x434, x435 = bits.Add32(x386, x417, uint32(uint1(x433)))
	var x436 uint32
	var x437 uint32
	x436, x437 = bits.Add32(x388, x419, uint32(uint1(x435)))
	var x438 uint32
	var x439 uint32
	x438, x439 = bits.Add32(x390, x421, uint32(uint1(x437)))
	var x440 uint32
	var x441 uint32
	x440, x441 = bits.Add32(x392, x423, uint32(uint1(x439)))
	var x442 uint32
	var x443 uint32
	x442, x443 = bits.Add32(x394, x425, uint32(uint1(x441)))
	var x444 uint32
	var x445 uint32
	x445, x444 = bits.Mul32(x426, 0xffffffff)
	var x446 uint32
	var x447 uint32
	x447, x446 = bits.Mul32(x426, 0xffffffff)
	var x448 uint32
	var x449 uint32
	x449, x448 = bits.Mul32(x426, 0xffffffff)
	var x450 uint32
	var x451 uint32
	x451, x450 = bits.Mul32(x426, 0xffffffff)
	var x452 uint32
	var x453 uint32
	x452, x453 = bits.Add32(x451, x448, uint32(0x0))
	var x454 uint32
	var x455 uint32
	x454, x455 = bits.Add32(x449, x446, uint32(uint1(x453)))
	x456 := (uint32(uint1(x455)) + x447)
	var x458 uint32
	_, x458 = bits.Add32(x426, x450, uint32(0x0))
	var x459 uint32
	var x460 uint32
	x459, x460 = bits.Add32(x428, x452, uint32(uint1(x458)))
	var x461 uint32
	var x462 uint32
	x461, x462 = bits.Add32(x430, x454, uint32(uint1(x460)))
	var x463 uint32
	var x464 uint32
	x463, x464 = bits.Add32(x432, x456, uint32(uint1(x462)))
	var x465 uint32
	var x466 uint32
	x465, x466 = bits.Add32(x434, uint32(0x0), uint32(uint1(x464)))
	var x467 uint32
	var x468 uint32
	x467, x468 = bits.Add32(x436, uint32(0x0), uint32(uint1(x466)))
	var x469 uint32
	var x470 uint32
	x469, x470 = bits.Add32(x438, x426, uint32(uint1(x468)))
	var x471 uint32
	var x472 uint32
	x471, x472 = bits.Add32(x440, x444, uint32(uint1(x470)))
	var x473 uint32
	var x474 uint32
	x473, x474 = bits.Add32(x442, x445, uint32(uint1(x472)))
	x475 := (uint32(uint1(x474)) + uint32(uint1(x443)))
	var x476 uint32
	var x477 uint32
	x477, x476 = bits.Mul32(x6, arg2[7])
	var x478 uint32
	var x479 uint32
	x479, x478 = bits.Mul32(x6, arg2[6])
	var x480 uint32
	var x481 uint32
	x481, x480 = bits.Mul32(x6, arg2[5])
	var x482 uint32
	var x483 uint32
	x483, x482 = bits.Mul32(x6, arg2[4])
	var x484 uint32
	var x485 uint32
	x485, x484 = bits.Mul32(x6, arg2[3])
	var x486 uint32
	var x487 uint32
	x487, x486 = bits.Mul32(x6, arg2[2])
	var x488 uint32
	var x489 uint32
	x489, x488 = bits.Mul32(x6, arg2[1])
	var x490 uint32
	var x491 uint32
	x491, x490 = bits.Mul32(x6, arg2[0])
	var x492 uint32
	var x493 uint32
	x492, x493 = bits.Add32(x491, x488, uint32(0x0))
	var x494 uint32
	var x495 uint32
	x494, x495 = bits.Add32(x489, x486, uint32(uint1(x493)))
	var x496 uint32
	var x497 uint32
	x496, x497 = bits.Add32(x487, x484, uint32(uint1(x495)))
	var x498 uint32
	var x499 uint32
	x498, x499 = bits.Add32(x485, x482, uint32(uint1(x497)))
	var x500 uint32
	var x501 uint32
	x500, x501 = bits.Add32(x483, x480, uint32(uint1(x499)))
	var x502 uint32
	var x503 uint32
	x502, x503 = bits.Add32(x481, x478, uint32(uint1(x501)))
	var x504 uint32
	var x505 uint32
	x504, x505 = bits.Add32(x479, x476, uint32(uint1(x503)))
	x506 := (uint32(uint1(x505)) + x477)
	var x507 uint32
	var x508 uint32
	x507, x508 = bits.Add32(x459, x490, uint32(0x0))
	var x509 uint32
	var x510 uint32
	x509, x510 = bits.Add32(x461, x492, uint32(uint1(x508)))
	var x511 uint32
	var x512 uint32
	x511, x512 = bits.Add32(x463, x494, uint32(uint1(x510)))
	var x513 uint32
	var x514 uint32
	x513, x514 = bits.Add32(x465, x496, uint32(uint1(x512)))
	var x515 uint32
	var x516 uint32
	x515, x516 = bits.Add32(x467, x498, uint32(uint1(x514)))
	var x517 uint32
	var x518 uint32
	x517, x518 = bits.Add32(x469, x500, uint32(uint1(x516)))
	var x519 uint32
	var x520 uint32
	x519, x520 = bits.Add32(x471, x502, uint32(uint1(x518)))
	var x521 uint32
	var x522 uint32
	x521, x522 = bits.Add32(x473, x504, uint32(uint1(x520)))
	var x523 uint32
	var x524 uint32
	x523, x524 = bits.Add32(x475, x506, uint32(uint1(x522)))
	var x525 uint32
	var x526 uint32
	x526, x525 = bits.Mul32(x507, 0xffffffff)
	var x527 uint32
	var x528 uint32
	x528, x527 = bits.Mul32(x507, 0xffffffff)
	var x529 uint32
	var x530 uint32
	x530, x529 = bits.Mul32(x507, 0xffffffff)
	var x531 uint32
	var x532 uint32
	x532, x531 = bits.Mul32(x507, 0xffffffff)
	var x533 uint32
	var x534 uint32
	x533, x534 = bits.Add32(x532, x529, uint32(0x0))
	var x535 uint32
	var x536 uint32
	x535, x536 = bits.Add32(x530, x527, uint32(uint1(x534)))
	x537 := (uint32(uint1(x536)) + x528)
	var x539 uint32
	_, x539 = bits.Add32(x507, x531, uint32(0x0))
	var x540 uint32
	var x541 uint32
	x540, x541 = bits.Add32(x509, x533, uint32(uint1(x539)))
	var x542 uint32
	var x543 uint32
	x542, x543 = bits.Add32(x511, x535, uint32(uint1(x541)))
	var x544 uint32
	var x545 uint32
	x544, x545 = bits.Add32(x513, x537, uint32(uint1(x543)))
	var x546 uint32
	var x547 uint32
	x546, x547 = bits.Add32(x515, uint32(0x0), uint32(uint1(x545)))
	var x548 uint32
	var x549 uint32
	x548, x549 = bits.Add32(x517, uint32(0x0), uint32(uint1(x547)))
	var x550 uint32
	var x551 uint32
	x550, x551 = bits.Add32(x519, x507, uint32(uint1(x549)))
	var x552 uint32
	var x553 uint32
	x552, x553 = bits.Add32(x521, x525, uint32(uint1(x551)))
	var x554 uint32
	var x555 uint32
	x554, x555 = bits.Add32(x523, x526, uint32(uint1(x553)))
	x556 := (uint32(uint1(x555)) + uint32(uint1(x524)))
	var x557 uint32
	var x558 uint32
	x558, x557 = bits.Mul32(x7, arg2[7])
	var x559 uint32
	var x560 uint32
	x560, x559 = bits.Mul32(x7, arg2[6])
	var x561 uint32
	var x562 uint32
	x562, x561 = bits.Mul32(x7, arg2[5])
	var x563 uint32
	var x564 uint32
	x564, x563 = bits.Mul32(x7, arg2[4])
	var x565 uint32
	var x566 uint32
	x566, x565 = bits.Mul32(x7, arg2[3])
	var x567 uint32
	var x568 uint32
	x568, x567 = bits.Mul32(x7, arg2[2])
	var x569 uint32
	var x570 uint32
	x570, x569 = bits.Mul32(x7, arg2[1])
	var x571 uint32
	var x572 uint32
	x572, x571 = bits.Mul32(x7, arg2[0])
	var x573 uint32
	var x574 uint32
	x573, x574 = bits.Add32(x572, x569, uint32(0x0))
	var x575 uint32
	var x576 uint32
	x575, x576 = bits.Add32(x570, x567, uint32(uint1(x574)))
	var x577 uint32
	var x578 uint32
	x577, x578 = bits.Add32(x568, x565, uint32(uint1(x576)))
	var x579 uint32
	var x580 uint32
	x579, x580 = bits.Add32(x566, x563, uint32(uint1(x578)))
	var x581 uint32
	var x582 uint32
	x581, x582 = bits.Add32(x564, x561, uint32(uint1(x580)))
	var x583 uint32
	var x584 uint32
	x583, x584 = bits.Add32(x562, x559, uint32(uint1(x582)))
	var x585 uint32
	var x586 uint32
	x585, x586 = bits.Add32(x560, x557, uint32(uint1(x584)))
	x587 := (uint32(uint1(x586)) + x558)
	var x588 uint32
	var x589 uint32
	x588, x589 = bits.Add32(x540, x571, uint32(0x0))
	var x590 uint32
	var x591 uint32
	x590, x591 = bits.Add32(x542, x573, uint32(uint1(x589)))
	var x592 uint32
	var x593 uint32
	x592, x593 = bits.Add32(x544, x575, uint32(uint1(x591)))
	var x594 uint32
	var x595 uint32
	x594, x595 = bits.Add32(x546, x577, uint32(uint1(x593)))
	var x596 uint32
	var x597 uint32
	x596, x597 = bits.Add32(x548, x579, uint32(uint1(x595)))
	var x598 uint32
	var x599 uint32
	x598, x599 = bits.Add32(x550, x581, uint32(uint1(x597)))
	var x600 uint32
	var x601 uint32
	x600, x601 = bits.Add32(x552, x583, uint32(uint1(x599)))
	var x602 uint32
	var x603 uint32
	x602, x603 = bits.Add32(x554, x585, uint32(uint1(x601)))
	var x604 uint32
	var x605 uint32
	x604, x605 = bits.Add32(x556, x587, uint32(uint1(x603)))
	var x606 uint32
	var x607 uint32
	x607, x606 = bits.Mul32(x588, 0xffffffff)
	var x608 uint32
	var x609 uint32
	x609, x608 = bits.Mul32(x588, 0xffffffff)
	var x610 uint32
	var x611 uint32
	x611, x610 = bits.Mul32(x588, 0xffffffff)
	var x612 uint32
	var x613 uint32
	x613, x612 = bits.Mul32(x588, 0xffffffff)
	var x614 uint32
	var x615 uint32
	x614, x615 = bits.Add32(x613, x610, uint32(0x0))
	var x616 uint32
	var x617 uint32
	x616, x617 = bits.Add32(x611, x608, uint32(uint1(x615)))
	x618 := (uint32(uint1(x617)) + x609)
	var x620 uint32
	_, x620 = bits.Add32(x588, x612, uint32(0x0))
	var x621 uint32
	var x622 uint32
	x621, x622 = bits.Add32(x590, x614, uint32(uint1(x620)))
	var x623 uint32
	var x624 uint32
	x623, x624 = bits.Add32(x592, x616, uint32(uint1(x622)))
	var x625 uint32
	var x626 uint32
	x625, x626 = bits.Add32(x594, x618, uint32(uint1(x624)))
	var x627 uint32
	var x628 uint32
	x627, x628 = bits.Add32(x596, uint32(0x0), uint32(uint1(x626)))
	var x629 uint32
	var x630 uint32
	x629, x630 = bits.Add32(x598, uint32(0x0), uint32(uint1(x628)))
	var x631 uint32
	var x632 uint32
	x631, x632 = bits.Add32(x600, x588, uint32(uint1(x630)))
	var x633 uint32
	var x634 uint32
	x633, x634 = bits.Add32(x602, x606, uint32(uint1(x632)))
	var x635 uint32
	var x636 uint32
	x635, x636 = bits.Add32(x604, x607, uint32(uint1(x634)))
	x637 := (uint32(uint1(x636)) + uint32(uint1(x605)))
	var x638 uint32
	var x639 uint32
	x638, x639 = bits.Sub32(x621, 0xffffffff, uint32(0x0))
	var x640 uint32
	var x641 uint32
	x640, x641 = bits.Sub32(x623, 0xffffffff, uint32(uint1(x639)))
	var x642 uint32
	var x643 uint32
	x642, x643 = bits.Sub32(x625, 0xffffffff, uint32(uint1(x641)))
	var x644 uint32
	var x645 uint32
	x644, x645 = bits.Sub32(x627, uint32(0x0), uint32(uint1(x643)))
	var x646 uint32
	var x647 uint32
	x646, x647 = bits.Sub32(x629, uint32(0x0), uint32(uint1(x645)))
	var x648 uint32
	var x649 uint32
	x648, x649 = bits.Sub32(x631, uint32(0x0), uint32(uint1(x647)))
	var x650 uint32
	var x651 uint32
	x650, x651 = bits.Sub32(x633, uint32(0x1), uint32(uint1(x649)))
	var x652 uint32
	var x653 uint32
	x652, x653 = bits.Sub32(x635, 0xffffffff, uint32(uint1(x651)))
	var x655 uint32
	_, x655 = bits.Sub32(x637, uint32(0x0), uint32(uint1(x653)))
	var x656 uint32
	cmovznzU32(&x656, uint1(x655), x638, x621)
	var x657 uint32
	cmovznzU32(&x657, uint1(x655), x640, x623)
	var x658 uint32
	cmovznzU32(&x658, uint1(x655), x642, x625)
	var x659 uint32
	cmovznzU32(&x659, uint1(x655), x644, x627)
	var x660 uint32
	cmovznzU32(&x660, uint1(x655), x646, x629)
	var x661 uint32
	cmovznzU32(&x661, uint1(x655), x648, x631)
	var x662 uint32
	cmovznzU32(&x662, uint1(x655), x650, x633)
	var x663 uint32
	cmovznzU32(&x663, uint1(x655), x652, x635)
	out1[0] = x656
	out1[1] = x657
	out1[2] = x658
	out1[3] = x659
	out1[4] = x660
	out1[5] = x661
	out1[6] = x662
	out1[7] = x663
}

// Square squares a field element in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m
//   0 ≤ eval out1 < m
//
func Square(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement) {
	x1 := arg1[1]
	x2 := arg1[2]
	x3 := arg1[3]
	x4 := arg1[4]
	x5 := arg1[5]
	x6 := arg1[6]
	x7 := arg1[7]
	x8 := arg1[0]
	var x9 uint32
	var x10 uint32
	x10, x9 = bits.Mul32(x8, arg1[7])
	var x11 uint32
	var x12 uint32
	x12, x11 = bits.Mul32(x8, arg1[6])
	var x13 uint32
	var x14 uint32
	x14, x13 = bits.Mul32(x8, arg1[5])
	var x15 uint32
	var x16 uint32
	x16, x15 = bits.Mul32(x8, arg1[4])
	var x17 uint32
	var x18 uint32
	x18, x17 = bits.Mul32(x8, arg1[3])
	var x19 uint32
	var x20 uint32
	x20, x19 = bits.Mul32(x8, arg1[2])
	var x21 uint32
	var x22 uint32
	x22, x21 = bits.Mul32(x8, arg1[1])
	var x23 uint32
	var x24 uint32
	x24, x23 = bits.Mul32(x8, arg1[0])
	var x25 uint32
	var x26 uint32
	x25, x26 = bits.Add32(x24, x21, uint32(0x0))
	var x27 uint32
	var x28 uint32
	x27, x28 = bits.Add32(x22, x19, uint32(uint1(x26)))
	var x29 uint32
	var x30 uint32
	x29, x30 = bits.Add32(x20, x17, uint32(uint1(x28)))
	var x31 uint32
	var x32 uint32
	x31, x32 = bits.Add32(x18, x15, uint32(uint1(x30)))
	var x33 uint32
	var x34 uint32
	x33, x34 = bits.Add32(x16, x13, uint32(uint1(x32)))
	var x35 uint32
	var x36 uint32
	x35, x36 = bits.Add32(x14, x11, uint32(uint1(x34)))
	var x37 uint32
	var x38 uint32
	x37, x38 = bits.Add32(x12, x9, uint32(uint1(x36)))
	x39 := (uint32(uint1(x38)) + x10)
	var x40 uint32
	var x41 uint32
	x41, x40 = bits.Mul32(x23, 0xffffffff)
	var x42 uint32
	var x43 uint32
	x43, x42 = bits.Mul32(x23, 0xffffffff)
	var x44 uint32
	var x45 uint32
	x45, x44 = bits.Mul32(x23, 0xffffffff)
	var x46 uint32
	var x47 uint32
	x47, x46 = bits.Mul32(x23, 0xffffffff)
	var x48 uint32
	var x49 uint32
	x48, x49 = bits.Add32(x47, x44, uint32(0x0))
	var x50 uint32
	var x51 uint32
	x50, x51 = bits.Add32(x45, x42, uint32(uint1(x49)))
	x52 := (uint32(uint1(x51)) + x43)
	var x54 uint32
	_, x54 = bits.Add32(x23, x46, uint32(0x0))
	var x55 uint32
	var x56 uint32
	x55, x56 = bits.Add32(x25, x48, uint32(uint1(x54)))
	var x57 uint32
	var x58 uint32
	x57, x58 = bits.Add32(x27, x50, uint32(uint1(x56)))
	var x59 uint32
	var x60 uint32
	x59, x60 = bits.Add32(x29, x52, uint32(uint1(x58)))
	var x61 uint32
	var x62 uint32
	x61, x62 = bits.Add32(x31, uint32(0x0), uint32(uint1(x60)))
	var x63 uint32
	var x64 uint32
	x63, x64 = bits.Add32(x33, uint32(0x0), uint32(uint1(x62)))
	var x65 uint32
	var x66 uint32
	x65, x66 = bits.Add32(x35, x23, uint32(uint1(x64)))
	var x67 uint32
	var x68 uint32
	x67, x68 = bits.Add32(x37, x40, uint32(uint1(x66)))
	var x69 uint32
	var x70 uint32
	x69, x70 = bits.Add32(x39, x41, uint32(uint1(x68)))
	var x71 uint32
	var x72 uint32
	x72, x71 = bits.Mul32(x1, arg1[7])
	var x73 uint32
	var x74 uint32
	x74, x73 = bits.Mul32(x1, arg1[6])
	var x75 uint32
	var x76 uint32
	x76, x75 = bits.Mul32(x1, arg1[5])
	var x77 uint32
	var x78 uint32
	x78, x77 = bits.Mul32(x1, arg1[4])
	var x79 uint32
	var x80 uint32
	x80, x79 = bits.Mul32(x1, arg1[3])
	var x81 uint32
	var x82 uint32
	x82, x81 = bits.Mul32(x1, arg1[2])
	var x83 uint32
	var x84 uint32
	x84, x83 = bits.Mul32(x1, arg1[1])
	var x85 uint32
	var x86 uint32
	x86, x85 = bits.Mul32(x1, arg1[0])
	var x87 uint32
	var x88 uint32
	x87, x88 = bits.Add32(x86, x83, uint32(0x0))
	var x89 uint32
	var x90 uint32
	x89, x90 = bits.Add32(x84, x81, uint32(uint1(x88)))
	var x91 uint32
	var x92 uint32
	x91, x92 = bits.Add32(x82, x79, uint32(uint1(x90)))
	var x93 uint32
	var x94 uint32
	x93, x94 = bits.Add32(x80, x77, uint32(uint1(x92)))
	var x95 uint32
	var x96 uint32
	x95, x96 = bits.Add32(x78, x75, uint32(uint1(x94)))
	var x97 uint32
	var x98 uint32
	x97, x98 = bits.Add32(x76, x73, uint32(uint1(x96)))
	var x99 uint32
	var x100 uint32
	x99, x100 = bits.Add32(x74, x71, uint32(uint1(x98)))
	x101 := (uint32(uint1(x100)) + x72)
	var x102 uint32
	var x103 uint32
	x102, x103 = bits.Add32(x55, x85, uint32(0x0))
	var x104 uint32
	var x105 uint32
	x104, x105 = bits.Add32(x57, x87, uint32(uint1(x103)))
	var x106 uint32
	var x107 uint32
	x106, x107 = bits.Add32(x59, x89, uint32(uint1(x105)))
	var x108 uint32
	var x109 uint32
	x108, x109 = bits.Add32(x61, x91, uint32(uint1(x107)))
	var x110 uint32
	var x111 uint32
	x110, x111 = bits.Add32(x63, x93, uint32(uint1(x109)))
	var x112 uint32
	var x113 uint32
	x112, x113 = bits.Add32(x65, x95, uint32(uint1(x111)))
	var x114 uint32
	var x115 uint32
	x114, x115 = bits.Add32(x67, x97, uint32(uint1(x113)))
	var x116 uint32
	var x117 uint32
	x116, x117 = bits.Add32(x69, x99, uint32(uint1(x115)))
	var x118 uint32
	var x119 uint32
	x118, x119 = bits.Add32(uint32(uint1(x70)), x101, uint32(uint1(x117)))
	var x120 uint32
	var x121 uint32
	x121, x120 = bits.Mul32(x102, 0xffffffff)
	var x122 uint32
	var x123 uint32
	x123, x122 = bits.Mul32(x102, 0xffffffff)
	var x124 uint32
	var x125 uint32
	x125, x124 = bits.Mul32(x102, 0xffffffff)
	var x126 uint32
	var x127 uint32
	x127, x126 = bits.Mul32(x102, 0xffffffff)
	var x128 uint32
	var x129 uint32
	x128, x129 = bits.Add32(x127, x124, uint32(0x0))
	var x130 uint32
	var x131 uint32
	x130, x131 = bits.Add32(x125, x122, uint32(uint1(x129)))
	x132 := (uint32(uint1(x131)) + x123)
	var x134 uint32
	_, x134 = bits.Add32(x102, x126, uint32(0x0))
	var x135 uint32
	var x136 uint32
	x135, x136 = bits.Add32(x104, x128, uint32(uint1(x134)))
	var x137 uint32
	var x138 uint32
	x137, x138 = bits.Add32(x106, x130, uint32(uint1(x136)))
	var x139 uint32
	var x140 uint32
	x139, x140 = bits.Add32(x108, x132, uint32(uint1(x138)))
	var x141 uint32
	var x142 uint32
	x141, x142 = bits.Add32(x110, uint32(0x0), uint32(uint1(x140)))
	var x143 uint32
	var x144 uint32
	x143, x144 = bits.Add32(x112, uint32(0x0), uint32(uint1(x142)))
	var x145 uint32
	var x146 uint32
	x145, x146 = bits.Add32(x114, x102, uint32(uint1(x144)))
	var x147 uint32
	var x148 uint32
	x147, x148 = bits.Add32(x116, x120, uint32(uint1(x146)))
	var x149 uint32
	var x150 uint32
	x149, x150 = bits.Add32(x118, x121, uint32(uint1(x148)))
	x151 := (uint32(uint1(x150)) + uint32(uint1(x119)))
	var x152 uint32
	var x153 uint32
	x153, x152 = bits.Mul32(x2, arg1[7])
	var x154 uint32
	var x155 uint32
	x155, x154 = bits.Mul32(x2, arg1[6])
	var x156 uint32
	var x157 uint32
	x157, x156 = bits.Mul32(x2, arg1[5])
	var x158 uint32
	var x159 uint32
	x159, x158 = bits.Mul32(x2, arg1[4])
	var x160 uint32
	var x161 uint32
	x161, x160 = bits.Mul32(x2, arg1[3])
	var x162 uint32
	var x163 uint32
	x163, x162 = bits.Mul32(x2, arg1[2])
	var x164 uint32
	var x165 uint32
	x165, x164 = bits.Mul32(x2, arg1[1])
	var x166 uint32
	var x167 uint32
	x167, x166 = bits.Mul32(x2, arg1[0])
	var x168 uint32
	var x169 uint32
	x168, x169 = bits.Add32(x167, x164, uint32(0x0))
	var x170 uint32
	var x171 uint32
	x170, x171 = bits.Add32(x165, x162, uint32(uint1(x169)))
	var x172 uint32
	var x173 uint32
	x172, x173 = bits.Add32(x163, x160, uint32(uint1(x171)))
	var x174 uint32
	var x175 uint32
	x174, x175 = bits.Add32(x161, x158, uint32(uint1(x173)))
	var x176 uint32
	var x177 uint32
	x176, x177 = bits.Add32(x159, x156, uint32(uint1(x175)))
	var x178 uint32
	var x179 uint32
	x178, x179 = bits.Add32(x157, x154, uint32(uint1(x177)))
	var x180 uint32
	var x181 uint32
	x180, x181 = bits.Add32(x155, x152, uint32(uint1(x179)))
	x182 := (uint32(uint1(x181)) + x153)
	var x183 uint32
	var x184 uint32
	x183, x184 = bits.Add32(x135, x166, uint32(0x0))
	var x185 uint32
	var x186 uint32
	x185, x186 = bits.Add32(x137, x168, uint32(uint1(x184)))
	var x187 uint32
	var x188 uint32
	x187, x188 = bits.Add32(x139, x170, uint32(uint1(x186)))
	var x189 uint32
	var x190 uint32
	x189, x190 = bits.Add32(x141, x172, uint32(uint1(x188)))
	var x191 uint32
	var x192 uint32
	x191, x192 = bits.Add32(x143, x174, uint32(uint1(x190)))
	var x193 uint32
	var x194 uint32
	x193, x194 = bits.Add32(x145, x176, uint32(uint1(x192)))
	var x195 uint32
	var x196 uint32
	x195, x196 = bits.Add32(x147, x178, uint32(uint1(x194)))
	var x197 uint32
	var x198 uint32
	x197, x198 = bits.Add32(x149, x180, uint32(uint1(x196)))
	var x199 uint32
	var x200 uint32
	x199, x200 = bits.Add32(x151, x182, uint32(uint1(x198)))
	var x201 uint32
	var x202 uint32
	x202, x201 = bits.Mul32(x183, 0xffffffff)
	var x203 uint32
	var x204 uint32
	x204, x203 = bits.Mul32(x183, 0xffffffff)
	var x205 uint32
	var x206 uint32
	x206, x205 = bits.Mul32(x183, 0xffffffff)
	var x207 uint32
	var x208 uint32
	x208, x207 = bits.Mul32(x183, 0xffffffff)
	var x209 uint32
	var x210 uint32
	x209, x210 = bits.Add32(x208, x205, uint32(0x0))
	var x211 uint32
	var x212 uint32
	x211, x212 = bits.Add32(x206, x203, uint32(uint1(x210)))
	x213 := (uint32(uint1(x212)) + x204)
	var x215 uint32
	_, x215 = bits.Add32(x183, x207, uint32(0x0))
	var x216 uint32
	var x217 uint32
	x216, x217 = bits.Add32(x185, x209, uint32(uint1(x215)))
	var x218 uint32
	var x219 uint32
	x218, x219 = bits.Add32(x187, x211, uint32(uint1(x217)))
	var x220 uint32
	var x221 uint32
	x220, x221 = bits.Add32(x189, x213, uint32(uint1(x219)))
	var x222 uint32
	var x223 uint32
	x222, x223 = bits.Add32(x191, uint32(0x0), uint32(uint1(x221)))
	var x224 uint32
	var x225 uint32
	x224, x225 = bits.Add32(x193, uint32(0x0), uint32(uint1(x223)))
	var x226 uint32
	var x227 uint32
	x226, x227 = bits.Add32(x195, x183, uint32(uint1(x225)))
	var x228 uint32
	var x229 uint32
	x228, x229 = bits.Add32(x197, x201, uint32(uint1(x227)))
	var x230 uint32
	var x231 uint32
	x230, x231 = bits.Add32(x199, x202, uint32(uint1(x229)))
	x232 := (uint32(uint1(x231)) + uint32(uint1(x200)))
	var x233 uint32
	var x234 uint32
	x234, x233 = bits.Mul32(x3, arg1[7])
	var x235 uint32
	var x236 uint32
	x236, x235 = bits.Mul32(x3, arg1[6])
	var x237 uint32
	var x238 uint32
	x238, x237 = bits.Mul32(x3, arg1[5])
	var x239 uint32
	var x240 uint32
	x240, x239 = bits.Mul32(x3, arg1[4])
	var x241 uint32
	var x242 uint32
	x242, x241 = bits.Mul32(x3, arg1[3])
	var x243 uint32
	var x244 uint32
	x244, x243 = bits.Mul32(x3, arg1[2])
	var x245 uint32
	var x246 uint32
	x246, x245 = bits.Mul32(x3, arg1[1])
	var x247 uint32
	var x248 uint32
	x248, x247 = bits.Mul32(x3, arg1[0])
	var x249 uint32
	var x250 uint32
	x249, x250 = bits.Add32(x248, x245, uint32(0x0))
	var x251 uint32
	var x252 uint32
	x251, x252 = bits.Add32(x246, x243, uint32(uint1(x250)))
	var x253 uint32
	var x254 uint32
	x253, x254 = bits.Add32(x244, x241, uint32(uint1(x252)))
	var x255 uint32
	var x256 uint32
	x255, x256 = bits.Add32(x242, x239, uint32(uint1(x254)))
	var x257 uint32
	var x258 uint32
	x257, x258 = bits.Add32(x240, x237, uint32(uint1(x256)))
	var x259 uint32
	var x260 uint32
	x259, x260 = bits.Add32(x238, x235, uint32(uint1(x258)))
	var x261 uint32
	var x262 uint32
	x261, x262 = bits.Add32(x236, x233, uint32(uint1(x260)))
	x263 := (uint32(uint1(x262)) + x234)
	var x264 uint32
	var x265 uint32
	x264, x265 = bits.Add32(x216, x247, uint32(0x0))
	var x266 uint32
	var x267 uint32
	x266, x267 = bits.Add32(x218, x249, uint32(uint1(x265)))
	var x268 uint32
	var x269 uint32
	x268, x269 = bits.Add32(x220, x251, uint32(uint1(x267)))
	var x270 uint32
	var x271 uint32
	x270, x271 = bits.Add32(x222, x253, uint32(uint1(x269)))
	var x272 uint32
	var x273 uint32
	x272, x273 = bits.Add32(x224, x255, uint32(uint1(x271)))
	var x274 uint32
	var x275 uint32
	x274, x275 = bits.Add32(x226, x257, uint32(uint1(x273)))
	var x276 uint32
	var x277 uint32
	x276, x277 = bits.Add32(x228, x259, uint32(uint1(x275)))
	var x278 uint32
	var x279 uint32
	x278, x279 = bits.Add32(x230, x261, uint32(uint1(x277)))
	var x280 uint32
	var x281 uint32
	x280, x281 = bits.Add32(x232, x263, uint32(uint1(x279)))
	var x282 uint32
	var x283 uint32
	x283, x282 = bits.Mul32(x264, 0xffffffff)
	var x284 uint32
	var x285 uint32
	x285, x284 = bits.Mul32(x264, 0xffffffff)
	var x286 uint32
	var x287 uint32
	x287, x286 = bits.Mul32(x264, 0xffffffff)
	var x288 uint32
	var x289 uint32
	x289, x288 = bits.Mul32(x264, 0xffffffff)
	var x290 uint32
	var x291 uint32
	x290, x291 = bits.Add32(x289, x286, uint32(0x0))
	var x292 uint32
	var x293 uint32
	x292, x293 = bits.Add32(x287, x284, uint32(uint1(x291)))
	x294 := (uint32(uint1(x293)) + x285)
	var x296 uint32
	_, x296 = bits.Add32(x264, x288, uint32(0x0))
	var x297 uint32
	var x298 uint32
	x297, x298 = bits.Add32(x266, x290, uint32(uint1(x296)))
	var x299 uint32
	var x300 uint32
	x299, x300 = bits.Add32(x268, x292, uint32(uint1(x298)))
	var x301 uint32
	var x302 uint32
	x301, x302 = bits.Add32(x270, x294, uint32(uint1(x300)))
	var x303 uint32
	var x304 uint32
	x303, x304 = bits.Add32(x272, uint32(0x0), uint32(uint1(x302)))
	var x305 uint32
	var x306 uint32
	x305, x306 = bits.Add32(x274, uint32(0x0), uint32(uint1(x304)))
	var x307 uint32
	var x308 uint32
	x307, x308 = bits.Add32(x276, x264, uint32(uint1(x306)))
	var x309 uint32
	var x310 uint32
	x309, x310 = bits.Add32(x278, x282, uint32(uint1(x308)))
	var x311 uint32
	var x312 uint32
	x311, x312 = bits.Add32(x280, x283, uint32(uint1(x310)))
	x313 := (uint32(uint1(x312)) + uint32(uint1(x281)))
	var x314 uint32
	var x315 uint32
	x315, x314 = bits.Mul32(x4, arg1[7])
	var x316 uint32
	var x317 uint32
	x317, x316 = bits.Mul32(x4, arg1[6])
	var x318 uint32
	var x319 uint32
	x319, x318 = bits.Mul32(x4, arg1[5])
	var x320 uint32
	var x321 uint32
	x321, x320 = bits.Mul32(x4, arg1[4])
	var x322 uint32
	var x323 uint32
	x323, x322 = bits.Mul32(x4, arg1[3])
	var x324 uint32
	var x325 uint32
	x325, x324 = bits.Mul32(x4, arg1[2])
	var x326 uint32
	var x327 uint32
	x327, x326 = bits.Mul32(x4, arg1[1])
	var x328 uint32
	var x329 uint32
	x329, x328 = bits.Mul32(x4, arg1[0])
	var x330 uint32
	var x331 uint32
	x330, x331 = bits.Add32(x329, x326, uint32(0x0))
	var x332 uint32
	var x333 uint32
	x332, x333 = bits.Add32(x327, x324, uint32(uint1(x331)))
	var x334 uint32
	var x335 uint32
	x334, x335 = bits.Add32(x325, x322, uint32(uint1(x333)))
	var x336 uint32
	var x337 uint32
	x336, x337 = bits.Add32(x323, x320, uint32(uint1(x335)))
	var x338 uint32
	var x339 uint32
	x338, x339 = bits.Add32(x321, x318, uint32(uint1(x337)))
	var x340 uint32
	var x341 uint32
	x340, x341 = bits.Add32(x319, x316, uint32(uint1(x339)))
	var x342 uint32
	var x343 uint32
	x342, x343 = bits.Add32(x317, x314, uint32(uint1(x341)))
	x344 := (uint32(uint1(x343)) + x315)
	var x345 uint32
	var x346 uint32
	x345, x346 = bits.Add32(x297, x328, uint32(0x0))
	var x347 uint32
	var x348 uint32
	x347, x348 = bits.Add32(x299, x330, uint32(uint1(x346)))
	var x349 uint32
	var x350 uint32
	x349, x350 = bits.Add32(x301, x332, uint32(uint1(x348)))
	var x351 uint32
	var x352 uint32
	x351, x352 = bits.Add32(x303, x334, uint32(uint1(x350)))
	var x353 uint32
	var x354 uint32
	x353, x354 = bits.Add32(x305, x336, uint32(uint1(x352)))
	var x355 uint32
	var x356 uint32
	x355, x356 = bits.Add32(x307, x338, uint32(uint1(x354)))
	var x357 uint32
	var x358 uint32
	x357, x358 = bits.Add32(x309, x340, uint32(uint1(x356)))
	var x359 uint32
	var x360 uint32
	x359, x360 = bits.Add32(x311, x342, uint32(uint1(x358)))
	var x361 uint32
	var x362 uint32
	x361, x362 = bits.Add32(x313, x344, uint32(uint1(x360)))
	var x363 uint32
	var x364 uint32
	x364, x363 = bits.Mul32(x345, 0xffffffff)
	var x365 uint32
	var x366 uint32
	x366, x365 = bits.Mul32(x345, 0xffffffff)
	var x367 uint32
	var x368 uint32
	x368, x367 = bits.Mul32(x345, 0xffffffff)
	var x369 uint32
	var x370 uint32
	x370, x369 = bits.Mul32(x345, 0xffffffff)
	var x371 uint32
	var x372 uint32
	x371, x372 = bits.Add32(x370, x367, uint32(0x0))
	var x373 uint32
	var x374 uint32
	x373, x374 = bits.Add32(x368, x365, uint32(uint1(x372)))
	x375 := (uint32(uint1(x374)) + x366)
	var x377 uint32
	_, x377 = bits.Add32(x345, x369, uint32(0x0))
	var x378 uint32
	var x379 uint32
	x378, x379 = bits.Add32(x347, x371, uint32(uint1(x377)))
	var x380 uint32
	var x381 uint32
	x380, x381 = bits.Add32(x349, x373, uint32(uint1(x379)))
	var x382 uint32
	var x383 uint32
	x382, x383 = bits.Add32(x351, x375, uint32(uint1(x381)))
	var x384 uint32
	var x385 uint32
	x384, x385 = bits.Add32(x353, uint32(0x0), uint32(uint1(x383)))
	var x386 uint32
	var x387 uint32
	x386, x387 = bits.Add32(x355, uint32(0x0), uint32(uint1(x385)))
	var x388 uint32
	var x389 uint32
	x388, x389 = bits.Add32(x357, x345, uint32(uint1(x387)))
	var x390 uint32
	var x391 uint32
	x390, x391 = bits.Add32(x359, x363, uint32(uint1(x389)))
	var x392 uint32
	var x393 uint32
	x392, x393 = bits.Add32(x361, x364, uint32(uint1(x391)))
	x394 := (uint32(uint1(x393)) + uint32(uint1(x362)))
	var x395 uint32
	var x396 uint32
	x396, x395 = bits.Mul32(x5, arg1[7])
	var x397 uint32
	var x398 uint32
	x398, x397 = bits.Mul32(x5, arg1[6])
	var x399 uint32
	var x400 uint32
	x400, x399 = bits.Mul32(x5, arg1[5])
	var x401 uint32
	var x402 uint32
	x402, x401 = bits.Mul32(x5, arg1[4])
	var x403 uint32
	var x404 uint32
	x404, x403 = bits.Mul32(x5, arg1[3])
	var x405 uint32
	var x406 uint32
	x406, x405 = bits.Mul32(x5, arg1[2])
	var x407 uint32
	var x408 uint32
	x408, x407 = bits.Mul32(x5, arg1[1])
	var x409 uint32
	var x410 uint32
	x410, x409 = bits.Mul32(x5, arg1[0])
	var x411 uint32
	var x412 uint32
	x411, x412 = bits.Add32(x410, x407, uint32(0x0))
	var x413 uint32
	var x414 uint32
	x413, x414 = bits.Add32(x408, x405, uint32(uint1(x412)))
	var x415 uint32
	var x416 uint32
	x415, x416 = bits.Add32(x406, x403, uint32(uint1(x414)))
	var x417 uint32
	var x418 uint32
	x417, x418 = bits.Add32(x404, x401, uint32(uint1(x416)))
	var x419 uint32
	var x420 uint32
	x419, x420 = bits.Add32(x402, x399, uint32(uint1(x418)))
	var x421 uint32
	var x422 uint32
	x421, x422 = bits.Add32(x400, x397, uint32(uint1(x420)))
	var x423 uint32
	var x424 uint32
	x423, x424 = bits.Add32(x398, x395, uint32(uint1(x422)))
	x425 := (uint32(uint1(x424)) + x396)
	var x426 uint32
	var x427 uint32
	x426, x427 = bits.Add32(x378, x409, uint32(0x0))
	var x428 uint32
	var x429 uint32
	x428, x429 = bits.Add32(x380, x411, uint32(uint1(x427)))
	var x430 uint32
	var x431 uint32
	x430, x431 = bits.Add32(x382, x413, uint32(uint1(x429)))
	var x432 uint32
	var x433 uint32
	x432, x433 = bits.Add32(x384, x415, uint32(uint1(x431)))
	var x434 uint32
	var x435 uint32
	x434, x435 = bits.Add32(x386, x417, uint32(uint1(x433)))
	var x436 uint32
	var x437 uint32
	x436, x437 = bits.Add32(x388, x419, uint32(uint1(x435)))
	var x438 uint32
	var x439 uint32
	x438, x439 = bits.Add32(x390, x421, uint32(uint1(x437)))
	var x440 uint32
	var x441 uint32
	x440, x441 = bits.Add32(x392, x423, uint32(uint1(x439)))
	var x442 uint32
	var x443 uint32
	x442, x443 = bits.Add32(x394, x425, uint32(uint1(x441)))
	var x444 uint32
	var x445 uint32
	x445, x444 = bits.Mul32(x426, 0xffffffff)
	var x446 uint32
	var x447 uint32
	x447, x446 = bits.Mul32(x426, 0xffffffff)
	var x448 uint32
	var x449 uint32
	x449, x448 = bits.Mul32(x426, 0xffffffff)
	var x450 uint32
	var x451 uint32
	x451, x450 = bits.Mul32(x426, 0xffffffff)
	var x452 uint32
	var x453 uint32
	x452, x453 = bits.Add32(x451, x448, uint32(0x0))
	var x454 uint32
	var x455 uint32
	x454, x455 = bits.Add32(x449, x446, uint32(uint1(x453)))
	x456 := (uint32(uint1(x455)) + x447)
	var x458 uint32
	_, x458 = bits.Add32(x426, x450, uint32(0x0))
	var x459 uint32
	var x460 uint32
	x459, x460 = bits.Add32(x428, x452, uint32(uint1(x458)))
	var x461 uint32
	var x462 uint32
	x461, x462 = bits.Add32(x430, x454, uint32(uint1(x460)))
	var x463 uint32
	var x464 uint32
	x463, x464 = bits.Add32(x432, x456, uint32(uint1(x462)))
	var x465 uint32
	var x466 uint32
	x465, x466 = bits.Add32(x434, uint32(0x0), uint32(uint1(x464)))
	var x467 uint32
	var x468 uint32
	x467, x468 = bits.Add32(x436, uint32(0x0), uint32(uint1(x466)))
	var x469 uint32
	var x470 uint32
	x469, x470 = bits.Add32(x438, x426, uint32(uint1(x468)))
	var x471 uint32
	var x472 uint32
	x471, x472 = bits.Add32(x440, x444, uint32(uint1(x470)))
	var x473 uint32
	var x474 uint32
	x473, x474 = bits.Add32(x442, x445, uint32(uint1(x472)))
	x475 := (uint32(uint1(x474)) + uint32(uint1(x443)))
	var x476 uint32
	var x477 uint32
	x477, x476 = bits.Mul32(x6, arg1[7])
	var x478 uint32
	var x479 uint32
	x479, x478 = bits.Mul32(x6, arg1[6])
	var x480 uint32
	var x481 uint32
	x481, x480 = bits.Mul32(x6, arg1[5])
	var x482 uint32
	var x483 uint32
	x483, x482 = bits.Mul32(x6, arg1[4])
	var x484 uint32
	var x485 uint32
	x485, x484 = bits.Mul32(x6, arg1[3])
	var x486 uint32
	var x487 uint32
	x487, x486 = bits.Mul32(x6, arg1[2])
	var x488 uint32
	var x489 uint32
	x489, x488 = bits.Mul32(x6, arg1[1])
	var x490 uint32
	var x491 uint32
	x491, x490 = bits.Mul32(x6, arg1[0])
	var x492 uint32
	var x493 uint32
	x492, x493 = bits.Add32(x491, x488, uint32(0x0))
	var x494 uint32
	var x495 uint32
	x494, x495 = bits.Add32(x489, x486, uint32(uint1(x493)))
	var x496 uint32
	var x497 uint32
	x496, x497 = bits.Add32(x487, x484, uint32(uint1(x495)))
	var x498 uint32
	var x499 uint32
	x498, x499 = bits.Add32(x485, x482, uint32(uint1(x497)))
	var x500 uint32
	var x501 uint32
	x500, x501 = bits.Add32(x483, x480, uint32(uint1(x499)))
	var x502 uint32
	var x503 uint32
	x502, x503 = bits.Add32(x481, x478, uint32(uint1(x501)))
	var x504 uint32
	var x505 uint32
	x504, x505 = bits.Add32(x479, x476, uint32(uint1(x503)))
	x506 := (uint32(uint1(x505)) + x477)
	var x507 uint32
	var x508 uint32
	x507, x508 = bits.Add32(x459, x490, uint32(0x0))
	var x509 uint32
	var x510 uint32
	x509, x510 = bits.Add32(x461, x492, uint32(uint1(x508)))
	var x511 uint32
	var x512 uint32
	x511, x512 = bits.Add32(x463, x494, uint32(uint1(x510)))
	var x513 uint32
	var x514 uint32
	x513, x514 = bits.Add32(x465, x496, uint32(uint1(x512)))
	var x515 uint32
	var x516 uint32
	x515, x516 = bits.Add32(x467, x498, uint32(uint1(x514)))
	var x517 uint32
	var x518 uint32
	x517, x518 = bits.Add32(x469, x500, uint32(uint1(x516)))
	var x519 uint32
	var x520 uint32
	x519, x520 = bits.Add32(x471, x502, uint32(uint1(x518)))
	var x521 uint32
	var x522 uint32
	x521, x522 = bits.Add32(x473, x504, uint32(uint1(x520)))
	var x523 uint32
	var x524 uint32
	x523, x524 = bits.Add32(x475, x506, uint32(uint1(x522)))
	var x525 uint32
	var x526 uint32
	x526, x525 = bits.Mul32(x507, 0xffffffff)
	var x527 uint32
	var x528 uint32
	x528, x527 = bits.Mul32(x507, 0xffffffff)
	var x529 uint32
	var x530 uint32
	x530, x529 = bits.Mul32(x507, 0xffffffff)
	var x531 uint32
	var x532 uint32
	x532, x531 = bits.Mul32(x507, 0xffffffff)
	var x533 uint32
	var x534 uint32
	x533, x534 = bits.Add32(x532, x529, uint32(0x0))
	var x535 uint32
	var x536 uint32
	x535, x536 = bits.Add32(x530, x527, uint32(uint1(x534)))
	x537 := (uint32(uint1(x536)) + x528)
	var x539 uint32
	_, x539 = bits.Add32(x507, x531, uint32(0x0))
	var x540 uint32
	var x541 uint32
	x540, x541 = bits.Add32(x509, x533, uint32(uint1(x539)))
	var x542 uint32
	var x543 uint32
	x542, x543 = bits.Add32(x511, x535, uint32(uint1(x541)))
	var x544 uint32
	var x545 uint32
	x544, x545 = bits.Add32(x513, x537, uint32(uint1(x543)))
	var x546 uint32
	var x547 uint32
	x546, x547 = bits.Add32(x515, uint32(0x0), uint32(uint1(x545)))
	var x548 uint32
	var x549 uint32
	x548, x549 = bits.Add32(x517, uint32(0x0), uint32(uint1(x547)))
	var x550 uint32
	var x551 uint32
	x550, x551 = bits.Add32(x519, x507, uint32(uint1(x549)))
	var x552 uint32
	var x553 uint32
	x552, x553 = bits.Add32(x521, x525, uint32(uint1(x551)))
	var x554 uint32
	var x555 uint32
	x554, x555 = bits.Add32(x523, x526, uint32(uint1(x553)))
	x556 := (uint32(uint1(x555)) + uint32(uint1(x524)))
	var x557 uint32
	var x558 uint32
	x558, x557 = bits.Mul32(x7, arg1[7])
	var x559 uint32
	var x560 uint32
	x560, x559 = bits.Mul32(x7, arg1[6])
	var x561 uint32
	var x562 uint32
	x562, x561 = bits.Mul32(x7, arg1[5])
	var x563 uint32
	var x564 uint32
	x564, x563 = bits.Mul32(x7, arg1[4])
	var x565 uint32
	var x566 uint32
	x566, x565 = bits.Mul32(x7, arg1[3])
	var x567 uint32
	var x568 uint32
	x568, x567 = bits.Mul32(x7, arg1[2])
	var x569 uint32
	var x570 uint32
	x570, x569 = bits.Mul32(x7, arg1[1])
	var x571 uint32
	var x572 uint32
	x572, x571 = bits.Mul32(x7, arg1[0])
	var x573 uint32
	var x574 uint32
	x573, x574 = bits.Add32(x572, x569, uint32(0x0))
	var x575 uint32
	var x576 uint32
	x575, x576 = bits.Add32(x570, x567, uint32(uint1(x574)))
	var x577 uint32
	var x578 uint32
	x577, x578 = bits.Add32(x568, x565, uint32(uint1(x576)))
	var x579 uint32
	var x580 uint32
	x579, x580 = bits.Add32(x566, x563, uint32(uint1(x578)))
	var x581 uint32
	var x582 uint32
	x581, x582 = bits.Add32(x564, x561, uint32(uint1(x580)))
	var x583 uint32
	var x584 uint32
	x583, x584 = bits.Add32(x562, x559, uint32(uint1(x582)))
	var x585 uint32
	var x586 uint32
	x585, x586 = bits.Add32(x560, x557, uint32(uint1(x584)))
	x587 := (uint32(uint1(x586)) + x558)
	var x588 uint32
	var x589 uint32
	x588, x589 = bits.Add32(x540, x571, uint32(0x0))
	var x590 uint32
	var x591 uint32
	x590, x591 = bits.Add32(x542, x573, uint32(uint1(x589)))
	var x592 uint32
	var x593 uint32
	x592, x593 = bits.Add32(x544, x575, uint32(uint1(x591)))
	var x594 uint32
	var x595 uint32
	x594, x595 = bits.Add32(x546, x577, uint32(uint1(x593)))
	var x596 uint32
	var x597 uint32
	x596, x597 = bits.Add32(x548, x579, uint32(uint1(x595)))
	var x598 uint32
	var x599 uint32
	x598, x599 = bits.Add32(x550, x581, uint32(uint1(x597)))
	var x600 uint32
	var x601 uint32
	x600, x601 = bits.Add32(x552, x583, uint32(uint1(x599)))
	var x602 uint32
	var x603 uint32
	x602, x603 = bits.Add32(x554, x585, uint32(uint1(x601)))
	var x604 uint32
	var x605 uint32
	x604, x605 = bits.Add32(x556, x587, uint32(uint1(x603)))
	var x606 uint32
	var x607 uint32
	x607, x606 = bits.Mul32(x588, 0xffffffff)
	var x608 uint32
	var x609 uint32
	x609, x608 = bits.Mul32(x588, 0xffffffff)
	var x610 uint32
	var x611 uint32
	x611, x610 = bits.Mul32(x588, 0xffffffff)
	var x612 uint32
	var x613 uint32
	x613, x612 = bits.Mul32(x588, 0xffffffff)
	var x614 uint32
	var x615 uint32
	x614, x615 = bits.Add32(x613, x610, uint32(0x0))
	var x616 uint32
	var x617 uint32
	x616, x617 = bits.Add32(x611, x608, uint32(uint1(x615)))
	x618 := (uint32(uint1(x617)) + x609)
	var x620 uint32
	_, x620 = bits.Add32(x588, x612, uint32(0x0))
	var x621 uint32
	var x622 uint32
	x621, x622 = bits.Add32(x590, x614, uint32(uint1(x620)))
	var x623 uint32
	var x624 uint32
	x623, x624 = bits.Add32(x592, x616, uint32(uint1(x622)))
	var x625 uint32
	var x626 uint32
	x625, x626 = bits.Add32(x594, x618, uint32(uint1(x624)))
	var x627 uint32
	var x628 uint32
	x627, x628 = bits.Add32(x596, uint32(0x0), uint32(uint1(x626)))
	var x629 uint32
	var x630 uint32
	x629, x630 = bits.Add32(x598, uint32(0x0), uint32(uint1(x628)))
	var x631 uint32
	var x632 uint32
	x631, x632 = bits.Add32(x600, x588, uint32(uint1(x630)))
	var x633 uint32
	var x634 uint32
	x633, x634 = bits.Add32(x602, x606, uint32(uint1(x632)))
	var x635 uint32
	var x636 uint32
	x635, x636 = bits.Add32(x604, x607, uint32(uint1(x634)))
	x637 := (uint32(uint1(x636)) + uint32(uint1(x605)))
	var x638 uint32
	var x639 uint32
	x638, x639 = bits.Sub32(x621, 0xffffffff, uint32(0x0))
	var x640 uint32
	var x641 uint32
	x640, x641 = bits.Sub32(x623, 0xffffffff, uint32(uint1(x639)))
	var x642 uint32
	var x643 uint32
	x642, x643 = bits.Sub32(x625, 0xffffffff, uint32(uint1(x641)))
	var x644 uint32
	var x645 uint32
	x644, x645 = bits.Sub32(x627, uint32(0x0), uint32(uint1(x643)))
	var x646 uint32
	var x647 uint32
	x646, x647 = bits.Sub32(x629, uint32(0x0), uint32(uint1(x645)))
	var x648 uint32
	var x649 uint32
	x648, x649 = bits.Sub32(x631, uint32(0x0), uint32(uint1(x647)))
	var x650 uint32
	var x651 uint32
	x650, x651 = bits.Sub32(x633, uint32(0x1), uint32(uint1(x649)))
	var x652 uint32
	var x653 uint32
	x652, x653 = bits.Sub32(x635, 0xffffffff, uint32(uint1(x651)))
	var x655 uint32
	_, x655 = bits.Sub32(x637, uint32(0x0), uint32(uint1(x653)))
	var x656 uint32
	cmovznzU32(&x656, uint1(x655), x638, x621)
	var x657 uint32
	cmovznzU32(&x657, uint1(x655), x640, x623)
	var x658 uint32
	cmovznzU32(&x658, uint1(x655), x642, x625)
	var x659 uint32
	cmovznzU32(&x659, uint1(x655), x644, x627)
	var x660 uint32
	cmovznzU32(&x660, uint1(x655), x646, x629)
	var x661 uint32
	cmovznzU32(&x661, uint1(x655), x648, x631)
	var x662 uint32
	cmovznzU32(&x662, uint1(x655), x650, x633)
	var x663 uint32
	cmovznzU32(&x663, uint1(x655), x652, x635)
	out1[0] = x656
	out1[1] = x657
	out1[2] = x658
	out1[3] = x659
	out1[4] = x660
	out1[5] = x661
	out1[6] = x662
	out1[7] = x663
}

// Add adds two field elements in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
//   0 ≤ eval arg2 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m
//   0 ≤ eval out1 < m
//
func Add(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement, arg2 *MontgomeryDomainFieldElement) {
	var x1 uint32
	var x2 uint32
	x1, x2 = bits.Add32(arg1[0], arg2[0], uint32(0x0))
	var x3 uint32
	var x4 uint32
	x3, x4 = bits.Add32(arg1[1], arg2[1], uint32(uint1(x2)))
	var x5 uint32
	var x6 uint32
	x5, x6 = bits.Add32(arg1[2], arg2[2], uint32(uint1(x4)))
	var x7 uint32
	var x8 uint32
	x7, x8 = bits.Add32(arg1[3], arg2[3], uint32(uint1(x6)))
	var x9 uint32
	var x10 uint32
	x9, x10 = bits.Add32(arg1[4], arg2[4], uint32(uint1(x8)))
	var x11 uint32
	var x12 uint32
	x11, x12 = bits.Add32(arg1[5], arg2[5], uint32(uint1(x10)))
	var x13 uint32
	var x14 uint32
	x13, x14 = bits.Add32(arg1[6], arg2[6], uint32(uint1(x12)))
	var x15 uint32
	var x16 uint32
	x15, x16 = bits.Add32(arg1[7], arg2[7], uint32(uint1(x14)))
	var x17 uint32
	var x18 uint32
	x17, x18 = bits.Sub32(x1, 0xffffffff, uint32(0x0))
	var x19 uint32
	var x20 uint32
	x19, x20 = bits.Sub32(x3, 0xffffffff, uint32(uint1(x18)))
	var x21 uint32
	var x22 uint32
	x21, x22 = bits.Sub32(x5, 0xffffffff, uint32(uint1(x20)))
	var x23 uint32
	var x24 uint32
	x23, x24 = bits.Sub32(x7, uint32(0x0), uint32(uint1(x22)))
	var x25 uint32
	var x26 uint32
	x25, x26 = bits.Sub32(x9, uint32(0x0), uint32(uint1(x24)))
	var x27 uint32
	var x28 uint32
	x27, x28 = bits.Sub32(x11, uint32(0x0), uint32(uint1(x26)))
	var x29 uint32
	var x30 uint32
	x29, x30 = bits.Sub32(x13, uint32(0x1), uint32(uint1(x28)))
	var x31 uint32
	var x32 uint32
	x31, x32 = bits.Sub32(x15, 0xffffffff, uint32(uint1(x30)))
	var x34 uint32
	_, x34 = bits.Sub32(uint32(uint1(x16)), uint32(0x0), uint32(uint1(x32)))
	var x35 uint32
	cmovznzU32(&x35, uint1(x34), x17, x1)
	var x36 uint32
	cmovznzU32(&x36, uint1(x34), x19, x3)
	var x37 uint32
	cmovznzU32(&x37, uint1(x34), x21, x5)
	var x38 uint32
	cmovznzU32(&x38, uint1(x34), x23, x7)
	var x39 uint32
	cmovznzU32(&x39, uint1(x34), x25, x9)
	var x40 uint32
	cmovznzU32(&x40, uint1(x34), x27, x11)
	var x41 uint32
	cmovznzU32(&x41, uint1(x34), x29, x13)
	var x42 uint32
	cmovznzU32(&x42, uint1(x34), x31, x15)
	out1[0] = x35
	out1[1] = x36
	out1[2] = x37
	out1[3] = x38
	out1[4] = x39
	out1[5] = x40
	out1[6] = x41
	out1[7] = x42
}

// Sub subtracts two field elements in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
//   0 ≤ eval arg2 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m
//   0 ≤ eval out1 < m
//
func Sub(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement, arg2 *MontgomeryDomainFieldElement) {
	var x1 uint32
	var x2 uint32
	x1, x2 = bits.Sub32(arg1[0], arg2[0], uint32(0x0))
	var x3 uint32
	var x4 uint32
	x3, x4 = bits.Sub32(arg1[1], arg2[1], uint32(uint1(x2)))
	var x5 uint32
	var x6 uint32
	x5, x6 = bits.Sub32(arg1[2], arg2[2], uint32(uint1(x4)))
	var x7 uint32
	var x8 uint32
	x7, x8 = bits.Sub32(arg1[3], arg2[3], uint32(uint1(x6)))
	var x9 uint32
	var x10 uint32
	x9, x10 = bits.Sub32(arg1[4], arg2[4], uint32(uint1(x8)))
	var x11 uint32
	var x12 uint32
	x11, x12 = bits.Sub32(arg1[5], arg2[5], uint32(uint1(x10)))
	var x13 uint32
	var x14 uint32
	x13, x14 = bits.Sub32(arg1[6], arg2[6], uint32(uint1(x12)))
	var x15 uint32
	var x16 uint32
	x15, x16 = bits.Sub32(arg1[7], arg2[7], uint32(uint1(x14)))
	var x17 uint32
	cmovznzU32(&x17, uint1(x16), uint32(0x0), 0xffffffff)
	var x18 uint32
	var x19 uint32
	x18, x19 = bits.Add32(x1, x17, uint32(0x0))
	var x20 uint32
	var x21 uint32
	x20, x21 = bits.Add32(x3, x17, uint32(uint1(x19)))
	var x22 uint32
	var x23 uint32
	x22, x23 = bits.Add32(x5, x17, uint32(uint1(x21)))
	var x24 uint32
	var x25 uint32
	x24, x25 = bits.Add32(x7, uint32(0x0), uint32(uint1(x23)))
	var x26 uint32
	var x27 uint32
	x26, x27 = bits.Add32(x9, uint32(0x0), uint32(uint1(x25)))
	var x28 uint32
	var x29 uint32
	x28, x29 = bits.Add32(x11, uint32(0x0), uint32(uint1(x27)))
	var x30 uint32
	var x31 uint32
	x30, x31 = bits.Add32(x13, uint32((uint1(x17) & 0x1)), uint32(uint1(x29)))
	var x32 uint32
	x32, _ = bits.Add32(x15, x17, uint32(uint1(x31)))
	out1[0] = x18
	out1[1] = x20
	out1[2] = x22
	out1[3] = x24
	out1[4] = x26
	out1[5] = x28
	out1[6] = x30
	out1[7] = x32
}

// Opp negates a field element in the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m
//   0 ≤ eval out1 < m
//
func Opp(out1 *MontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement) {
	var x1 uint32
	var x2 uint32
	x1, x2 = bits.Sub32(uint32(0x0), arg1[0], uint32(0x0))
	var x3 uint32
	var x4 uint32
	x3, x4 = bits.Sub32(uint32(0x0), arg1[1], uint32(uint1(x2)))
	var x5 uint32
	var x6 uint32
	x5, x6 = bits.Sub32(uint32(0x0), arg1[2], uint32(uint1(x4)))
	var x7 uint32
	var x8 uint32
	x7, x8 = bits.Sub32(uint32(0x0), arg1[3], uint32(uint1(x6)))
	var x9 uint32
	var x10 uint32
	x9, x10 = bits.Sub32(uint32(0x0), arg1[4], uint32(uint1(x8)))
	var x11 uint32
	var x12 uint32
	x11, x12 = bits.Sub32(uint32(0x0), arg1[5], uint32(uint1(x10)))
	var x13 uint32
	var x14 uint32
	x13, x14 = bits.Sub32(uint32(0x0), arg1[6], uint32(uint1(x12)))
	var x15 uint32
	var x16 uint32
	x15, x16 = bits.Sub32(uint32(0x0), arg1[7], uint32(uint1(x14)))
	var x17 uint32
	cmovznzU32(&x17, uint1(x16), uint32(0x0), 0xffffffff)
	var x18 uint32
	var x19 uint32
	x18, x19 = bits.Add32(x1, x17, uint32(0x0))
	var x20 uint32
	var x21 uint32
	x20, x21 = bits.Add32(x3, x17, uint32(uint1(x19)))
	var x22 uint32
	var x23 uint32
	x22, x23 = bits.Add32(x5, x17, uint32(uint1(x21)))
	var x24 uint32
	var x25 uint32
	x24, x25 = bits.Add32(x7, uint32(0x0), uint32(uint1(x23)))
	var x26 uint32
	var x27 uint32
	x26, x27 = bits.Add32(x9, uint32(0x0), uint32(uint1(x25)))
	var x28 uint32
	var x29 uint32
	x28, x29 = bits.Add32(x11, uint32(0x0), uint32(uint1(x27)))
	var x30 uint32
	var x31 uint32
	x30, x31 = bits.Add32(x13, uint32((uint1(x17) & 0x1)), uint32(uint1(x29)))
	var x32 uint32
	x32, _ = bits.Add32(x15, x17, uint32(uint1(x31)))
	out1[0] = x18
	out1[1] = x20
	out1[2] = x22
	out1[3] = x24
	out1[4] = x26
	out1[5] = x28
	out1[6] = x30
	out1[7] = x32
}

// FromMontgomery translates a field element out of the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   eval out1 mod m = (eval arg1 * ((2^32)⁻¹ mod m)^8) mod m
//   0 ≤ eval out1 < m
//
func FromMontgomery(out1 *NonMontgomeryDomainFieldElement, arg1 *MontgomeryDomainFieldElement) {
	x1 := arg1[0]
	var x2 uint32
	var x3 uint32
	x3, x2 = bits.Mul32(x1, 0xffffffff)
	var x4 uint32
	var x5 uint32
	x5, x4 = bits.Mul32(x1, 0xffffffff)
	var x6 uint32
	var x7 uint32
	x7, x6 = bits.Mul32(x1, 0xffffffff)
	var x8 uint32
	var x9 uint32
	x9, x8 = bits.Mul32(x1, 0xffffffff)
	var x10 uint32
	var x11 uint32
	x10, x11 = bits.Add32(x9, x6, uint32(0x0))
	var x12 uint32
	var x13 uint32
	x12, x13 = bits.Add32(x7, x4, uint32(uint1(x11)))
	var x15 uint32
	_, x15 = bits.Add32(x1, x8, uint32(0x0))
	var x16 uint32
	var x17 uint32
	x16, x17 = bits.Add32(uint32(0x0), x10, uint32(uint1(x15)))
	var x18 uint32
	var x19 uint32
	x18, x19 = bits.Add32(uint32(0x0), x12, uint32(uint1(x17)))
	var x20 uint32
	var x21 uint32
	x20, x21 = bits.Add32(uint32(0x0), (uint32(uint1(x13)) + x5), uint32(uint1(x19)))
	var x22 uint32
	var x23 uint32
	x22, x23 = bits.Add32(x16, arg1[1], uint32(0x0))
	var x24 uint32
	var x25 uint32
	x24, x25 = bits.Add32(x18, uint32(0x0), uint32(uint1(x23)))
	var x26 uint32
	var x27 uint32
	x26, x27 = bits.Add32(x20, uint32(0x0), uint32(uint1(x25)))
	var x28 uint32
	var x29 uint32
	x29, x28 = bits.Mul32(x22, 0xffffffff)
	var x30 uint32
	var x31 uint32
	x31, x30 = bits.Mul32(x22, 0xffffffff)
	var x32 uint32
	var x33 uint32
	x33, x32 = bits.Mul32(x22, 0xffffffff)
	var x34 uint32
	var x35 uint32
	x35, x34 = bits.Mul32(x22, 0xffffffff)
	var x36 uint32
	var x37 uint32
	x36, x37 = bits.Add32(x35, x32, uint32(0x0))
	var x38 uint32
	var x39 uint32
	x38, x39 = bits.Add32(x33, x30, uint32(uint1(x37)))
	var x41 uint32
	_, x41 = bits.Add32(x22, x34, uint32(0x0))
	var x42 uint32
	var x43 uint32
	x42, x43 = bits.Add32(x24, x36, uint32(uint1(x41)))
	var x44 uint32
	var x45 uint32
	x44, x45 = bits.Add32(x26, x38, uint32(uint1(x43)))
	var x46 uint32
	var x47 uint32
	x46, x47 = bits.Add32((uint32(uint1(x27)) + uint32(uint1(x21))), (uint32(uint1(x39)) + x31), uint32(uint1(x45)))
	var x48 uint32
	var x49 uint32
	x48, x49 = bits.Add32(x2, x22, uint32(0x0))
	var x50 uint32
	var x51 uint32
	x50, x51 = bits.Add32(x3, x28, uint32(uint1(x49)))
	var x52 uint32
	var x53 uint32
	x52, x53 = bits.Add32(x42, arg1[2], uint32(0x0))
	var x54 uint32
	var x55 uint32
	x54, x55 = bits.Add32(x44, uint32(0x0), uint32(uint1(x53)))
	var x56 uint32
	var x57 uint32
	x56, x57 = bits.Add32(x46, uint32(0x0), uint32(uint1(x55)))
	var x58 uint32
	var x59 uint32
	x59, x58 = bits.Mul32(x52, 0xffffffff)
	var x60 uint32
	var x61 uint32
	x61, x60 = bits.Mul32(x52, 0xffffffff)
	var x62 uint32
	var x63 uint32
	x63, x62 = bits.Mul32(x52, 0xffffffff)
	var x64 uint32
	var x65 uint32
	x65, x64 = bits.Mul32(x52, 0xffffffff)
	var x66 uint32
	var x67 uint32
	x66, x67 = bits.Add32(x65, x62, uint32(0x0))
	var x68 uint32
	var x69 uint32
	x68, x69 = bits.Add32(x63, x60, uint32(uint1(x67)))
	var x71 uint32
	_, x71 = bits.Add32(x52, x64, uint32(0x0))
	var x72 uint32
	var x73 uint32
	x72, x73 = bits.Add32(x54, x66, uint32(uint1(x71)))
	var x74 uint32
	var x75 uint32
	x74, x75 = bits.Add32(x56, x68, uint32(uint1(x73)))
	var x76 uint32
	var x77 uint32
	x76, x77 = bits.Add32((uint32(uint1(x57)) + uint32(uint1(x47))), (uint32(uint1(x69)) + x61), uint32(uint1(x75)))
	var x78 uint32
	var x79 uint32
	x78, x79 = bits.Add32(x1, uint32(0x0), uint32(uint1(x77)))
	var x80 uint32
	var x81 uint32
	x80, x81 = bits.Add32(x48, uint32(0x0), uint32(uint1(x79)))
	var x82 uint32
	var x83 uint32
	x82, x83 = bits.Add32(x50, x52, uint32(uint1(x81)))
	var x84 uint32
	var x85 uint32
	x84, x85 = bits.Add32((uint32(uint1(x51)) + x29), x58, uint32(uint1(x83)))
	var x86 uint32
	var x87 uint32
	x86, x87 = bits.Add32(x72, arg1[3], uint32(0x0))
	var x88 uint32
	var x89 uint32
	x88, x89 = bits.Add32(x74, uint32(0x0), uint32(uint1(x87)))
	var x90 uint32
	var x91 uint32
	x90, x91 = bits.Add32(x76, uint32(0x0), uint32(uint1(x89)))
	var x92 uint32
	var x93 uint32
	x92, x93 = bits.Add32(x78, uint32(0x0), uint32(uint1(x91)))
	var x94 uint32
	var x95 uint32
	x94, x95 = bits.Add32(x80, uint32(0x0), uint32(uint1(x93)))
	var x96 uint32
	var x97 uint32
	x96, x97 = bits.Add32(x82, uint32(0x0), uint32(uint1(x95)))
	var x98 uint32
	var x99 uint32
	x98, x99 = bits.Add32(x84, uint32(0x0), uint32(uint1(x97)))
	var x100 uint32
	var x101 uint32
	x100, x101 = bits.Add32((uint32(uint1(x85)) + x59), uint32(0x0), uint32(uint1(x99)))
	var x102 uint32
	var x103 uint32
	x103, x102 = bits.Mul32(x86, 0xffffffff)
	var x104 uint32
	var x105 uint32
	x105, x104 = bits.Mul32(x86, 0xffffffff)
	var x106 uint32
	var x107 uint32
	x107, x106 = bits.Mul32(x86, 0xffffffff)
	var x108 uint32
	var x109 uint32
	x109, x108 = bits.Mul32(x86, 0xffffffff)
	var x110 uint32
	var x111 uint32
	x110, x111 = bits.Add32(x109, x106, uint32(0x0))
	var x112 uint32
	var x113 uint32
	x112, x113 = bits.Add32(x107, x104, uint32(uint1(x111)))
	var x115 uint32
	_, x115 = bits.Add32(x86, x108, uint32(0x0))
	var x116 uint32
	var x117 uint32
	x116, x117 = bits.Add32(x88, x110, uint32(uint1(x115)))
	var x118 uint32
	var x119 uint32
	x118, x119 = bits.Add32(x90, x112, uint32(uint1(x117)))
	var x120 uint32
	var x121 uint32
	x120, x121 = bits.Add32(x92, (uint32(uint1(x113)) + x105), uint32(uint1(x119)))
	var x122 uint32
	var x123 uint32
	x122, x123 = bits.Add32(x94, uint32(0x0), uint32(uint1(x121)))
	var x124 uint32
	var x125 uint32
	x124, x125 = bits.Add32(x96, uint32(0x0), uint32(uint1(x123)))
	var x126 uint32
	var x127 uint32
	x126, x127 = bits.Add32(x98, x86, uint32(uint1(x125)))
	var x128 uint32
	var x129 uint32
	x128, x129 = bits.Add32(x100, x102, uint32(uint1(x127)))
	var x130 uint32
	var x131 uint32
	x130, x131 = bits.Add32(uint32(uint1(x101)), x103, uint32(uint1(x129)))
	var x132 uint32
	var x133 uint32
	x132, x133 = bits.Add32(x116, arg1[4], uint32(0x0))
	var x134 uint32
	var x135 uint32
	x134, x135 = bits.Add32(x118, uint32(0x0), uint32(uint1(x133)))
	var x136 uint32
	var x137 uint32
	x136, x137 = bits.Add32(x120, uint32(0x0), uint32(uint1(x135)))
	var x138 uint32
	var x139 uint32
	x138, x139 = bits.Add32(x122, uint32(0x0), uint32(uint1(x137)))
	var x140 uint32
	var x141 uint32
	x140, x141 = bits.Add32(x124, uint32(0x0), uint32(uint1(x139)))
	var x142 uint32
	var x143 uint32
	x142, x143 = bits.Add32(x126, uint32(0x0), uint32(uint1(x141)))
	var x144 uint32
	var x145 uint32
	x144, x145 = bits.Add32(x128, uint32(0x0), uint32(uint1(x143)))
	var x146 uint32
	var x147 uint32
	x146, x147 = bits.Add32(x130, uint32(0x0), uint32(uint1(x145)))
	var x148 uint32
	var x149 uint32
	x149, x148 = bits.Mul32(x132, 0xffffffff)
	var x150 uint32
	var x151 uint32
	x151, x150 = bits.Mul32(x132, 0xffffffff)
	var x152 uint32
	var x153 uint32
	x153, x152 = bits.Mul32(x132, 0xffffffff)
	var x154 uint32
	var x155 uint32
	x155, x154 = bits.Mul32(x132, 0xffffffff)
	var x156 uint32
	var x157 uint32
	x156, x157 = bits.Add32(x155, x152, uint32(0x0))
	var x158 uint32
	var x159 uint32
	x158, x159 = bits.Add32(x153, x150, uint32(uint1(x157)))
	var x161 uint32
	_, x161 = bits.Add32(x132, x154, uint32(0x0))
	var x162 uint32
	var x163 uint32
	x162, x163 = bits.Add32(x134, x156, uint32(uint1(x161)))
	var x164 uint32
	var x165 uint32
	x164, x165 = bits.Add32(x136, x158, uint32(uint1(x163)))
	var x166 uint32
	var x167 uint32
	x166, x167 = bits.Add32(x138, (uint32(uint1(x159)) + x151), uint32(uint1(x165)))
	var x168 uint32
	var x169 uint32
	x168, x169 = bits.Add32(x140, uint32(0x0), uint32(uint1(x167)))
	var x170 uint32
	var x171 uint32
	x170, x171 = bits.Add32(x142, uint32(0x0), uint32(uint1(x169)))
	var x172 uint32
	var x173 uint32
	x172, x173 = bits.Add32(x144, x132, uint32(uint1(x171)))
	var x174 uint32
	var x175 uint32
	x174, x175 = bits.Add32(x146, x148, uint32(uint1(x173)))
	var x176 uint32
	var x177 uint32
	x176, x177 = bits.Add32((uint32(uint1(x147)) + uint32(uint1(x131))), x149, uint32(uint1(x175)))
	var x178 uint32
	var x179 uint32
	x178, x179 = bits.Add32(x162, arg1[5], uint32(0x0))
	var x180 uint32
	var x181 uint32
	x180, x181 = bits.Add32(x164, uint32(0x0), uint32(uint1(x179)))
	var x182 uint32
	var x183 uint32
	x182, x183 = bits.Add32(x166, uint32(0x0), uint32(uint1(x181)))
	var x184 uint32
	var x185 uint32
	x184, x185 = bits.Add32(x168, uint32(0x0), uint32(uint1(x183)))
	var x186 uint32
	var x187 uint32
	x186, x187 = bits.Add32(x170, uint32(0x0), uint32(uint1(x185)))
	var x188 uint32
	var x189 uint32
	x188, x189 = bits.Add32(x172, uint32(0x0), uint32(uint1(x187)))
	var x190 uint32
	var x191 uint32
	x190, x191 = bits.Add32(x174, uint32(0x0), uint32(uint1(x189)))
	var x192 uint32
	var x193 uint32
	x192, x193 = bits.Add32(x176, uint32(0x0), uint32(uint1(x191)))
	var x194 uint32
	var x195 uint32
	x195, x194 = bits.Mul32(x178, 0xffffffff)
	var x196 uint32
	var x197 uint32
	x197, x196 = bits.Mul32(x178, 0xffffffff)
	var x198 uint32
	var x199 uint32
	x199, x198 = bits.Mul32(x178, 0xffffffff)
	var x200 uint32
	var x201 uint32
	x201, x200 = bits.Mul32(x178, 0xffffffff)
	var x202 uint32
	var x203 uint32
	x202, x203 = bits.Add32(x201, x198, uint32(0x0))
	var x204 uint32
	var x205 uint32
	x204, x205 = bits.Add32(x199, x196, uint32(uint1(x203)))
	var x207 uint32
	_, x207 = bits.Add32(x178, x200, uint32(0x0))
	var x208 uint32
	var x209 uint32
	x208, x209 = bits.Add32(x180, x202, uint32(uint1(x207)))
	var x210 uint32
	var x211 uint32
	x210, x211 = bits.Add32(x182, x204, uint32(uint1(x209)))
	var x212 uint32
	var x213 uint32
	x212, x213 = bits.Add32(x184, (uint32(uint1(x205)) + x197), uint32(uint1(x211)))
	var x214 uint32
	var x215 uint32
	x214, x215 = bits.Add32(x186, uint32(0x0), uint32(uint1(x213)))
	var x216 uint32
	var x217 uint32
	x216, x217 = bits.Add32(x188, uint32(0x0), uint32(uint1(x215)))
	var x218 uint32
	var x219 uint32
	x218, x219 = bits.Add32(x190, x178, uint32(uint1(x217)))
	var x220 uint32
	var x221 uint32
	x220, x221 = bits.Add32(x192, x194, uint32(uint1(x219)))
	var x222 uint32
	var x223 uint32
	x222, x223 = bits.Add32((uint32(uint1(x193)) + uint32(uint1(x177))), x195, uint32(uint1(x221)))
	var x224 uint32
	var x225 uint32
	x224, x225 = bits.Add32(x208, arg1[6], uint32(0x0))
	var x226 uint32
	var x227 uint32
	x226, x227 = bits.Add32(x210, uint32(0x0), uint32(uint1(x225)))
	var x228 uint32
	var x229 uint32
	x228, x229 = bits.Add32(x212, uint32(0x0), uint32(uint1(x227)))
	var x230 uint32
	var x231 uint32
	x230, x231 = bits.Add32(x214, uint32(0x0), uint32(uint1(x229)))
	var x232 uint32
	var x233 uint32
	x232, x233 = bits.Add32(x216, uint32(0x0), uint32(uint1(x231)))
	var x234 uint32
	var x235 uint32
	x234, x235 = bits.Add32(x218, uint32(0x0), uint32(uint1(x233)))
	var x236 uint32
	var x237 uint32
	x236, x237 = bits.Add32(x220, uint32(0x0), uint32(uint1(x235)))
	var x238 uint32
	var x239 uint32
	x238, x239 = bits.Add32(x222, uint32(0x0), uint32(uint1(x237)))
	var x240 uint32
	var x241 uint32
	x241, x240 = bits.Mul32(x224, 0xffffffff)
	var x242 uint32
	var x243 uint32
	x243, x242 = bits.Mul32(x224, 0xffffffff)
	var x244 uint32
	var x245 uint32
	x245, x244 = bits.Mul32(x224, 0xffffffff)
	var x246 uint32
	var x247 uint32
	x247, x246 = bits.Mul32(x224, 0xffffffff)
	var x248 uint32
	var x249 uint32
	x248, x249 = bits.Add32(x247, x244, uint32(0x0))
	var x250 uint32
	var x251 uint32
	x250, x251 = bits.Add32(x245, x242, uint32(uint1(x249)))
	var x253 uint32
	_, x253 = bits.Add32(x224, x246, uint32(0x0))
	var x254 uint32
	var x255 uint32
	x254, x255 = bits.Add32(x226, x248, uint32(uint1(x253)))
	var x256 uint32
	var x257 uint32
	x256, x257 = bits.Add32(x228, x250, uint32(uint1(x255)))
	var x258 uint32
	var x259 uint32
	x258, x259 = bits.Add32(x230, (uint32(uint1(x251)) + x243), uint32(uint1(x257)))
	var x260 uint32
	var x261 uint32
	x260, x261 = bits.Add32(x232, uint32(0x0), uint32(uint1(x259)))
	var x262 uint32
	var x263 uint32
	x262, x263 = bits.Add32(x234, uint32(0x0), uint32(uint1(x261)))
	var x264 uint32
	var x265 uint32
	x264, x265 = bits.Add32(x236, x224, uint32(uint1(x263)))
	var x266 uint32
	var x267 uint32
	x266, x267 = bits.Add32(x238, x240, uint32(uint1(x265)))
	var x268 uint32
	var x269 uint32
	x268, x269 = bits.Add32((uint32(uint1(x239)) + uint32(uint1(x223))), x241, uint32(uint1(x267)))
	var x270 uint32
	var x271 uint32
	x270, x271 = bits.Add32(x254, arg1[7], uint32(0x0))
	var x272 uint32
	var x273 uint32
	x272, x273 = bits.Add32(x256, uint32(0x0), uint32(uint1(x271)))
	var x274 uint32
	var x275 uint32
	x274, x275 = bits.Add32(x258, uint32(0x0), uint32(uint1(x273)))
	var x276 uint32
	var x277 uint32
	x276, x277 = bits.Add32(x260, uint32(0x0), uint32(uint1(x275)))
	var x278 uint32
	var x279 uint32
	x278, x279 = bits.Add32(x262, uint32(0x0), uint32(uint1(x277)))
	var x280 uint32
	var x281 uint32
	x280, x281 = bits.Add32(x264, uint32(0x0), uint32(uint1(x279)))
	var x282 uint32
	var x283 uint32
	x282, x283 = bits.Add32(x266, uint32(0x0), uint32(uint1(x281)))
	var x284 uint32
	var x285 uint32
	x284, x285 = bits.Add32(x268, uint32(0x0), uint32(uint1(x283)))
	var x286 uint32
	var x287 uint32
	x287, x286 = bits.Mul32(x270, 0xffffffff)
	var x288 uint32
	var x289 uint32
	x289, x288 = bits.Mul32(x270, 0xffffffff)
	var x290 uint32
	var x291 uint32
	x291, x290 = bits.Mul32(x270, 0xffffffff)
	var x292 uint32
	var x293 uint32
	x293, x292 = bits.Mul32(x270, 0xffffffff)
	var x294 uint32
	var x295 uint32
	x294, x295 = bits.Add32(x293, x290, uint32(0x0))
	var x296 uint32
	var x297 uint32
	x296, x297 = bits.Add32(x291, x288, uint32(uint1(x295)))
	var x299 uint32
	_, x299 = bits.Add32(x270, x292, uint32(0x0))
	var x300 uint32
	var x301 uint32
	x300, x301 = bits.Add32(x272, x294, uint32(uint1(x299)))
	var x302 uint32
	var x303 uint32
	x302, x303 = bits.Add32(x274, x296, uint32(uint1(x301)))
	var x304 uint32
	var x305 uint32
	x304, x305 = bits.Add32(x276, (uint32(uint1(x297)) + x289), uint32(uint1(x303)))
	var x306 uint32
	var x307 uint32
	x306, x307 = bits.Add32(x278, uint32(0x0), uint32(uint1(x305)))
	var x308 uint32
	var x309 uint32
	x308, x309 = bits.Add32(x280, uint32(0x0), uint32(uint1(x307)))
	var x310 uint32
	var x311 uint32
	x310, x311 = bits.Add32(x282, x270, uint32(uint1(x309)))
	var x312 uint32
	var x313 uint32
	x312, x313 = bits.Add32(x284, x286, uint32(uint1(x311)))
	var x314 uint32
	var x315 uint32
	x314, x315 = bits.Add32((uint32(uint1(x285)) + uint32(uint1(x269))), x287, uint32(uint1(x313)))
	var x316 uint32
	var x317 uint32
	x316, x317 = bits.Sub32(x300, 0xffffffff, uint32(0x0))
	var x318 uint32
	var x319 uint32
	x318, x319 = bits.Sub32(x302, 0xffffffff, uint32(uint1(x317)))
	var x320 uint32
	var x321 uint32
	x320, x321 = bits.Sub32(x304, 0xffffffff, uint32(uint1(x319)))
	var x322 uint32
	var x323 uint32
	x322, x323 = bits.Sub32(x306, uint32(0x0), uint32(uint1(x321)))
	var x324 uint32
	var x325 uint32
	x324, x325 = bits.Sub32(x308, uint32(0x0), uint32(uint1(x323)))
	var x326 uint32
	var x327 uint32
	x326, x327 = bits.Sub32(x310, uint32(0x0), uint32(uint1(x325)))
	var x328 uint32
	var x329 uint32
	x328, x329 = bits.Sub32(x312, uint32(0x1), uint32(uint1(x327)))
	var x330 uint32
	var x331 uint32
	x330, x331 = bits.Sub32(x314, 0xffffffff, uint32(uint1(x329)))
	var x333 uint32
	_, x333 = bits.Sub32(uint32(uint1(x315)), uint32(0x0), uint32(uint1(x331)))
	var x334 uint32
	cmovznzU32(&x334, uint1(x333), x316, x300)
	var x335 uint32
	cmovznzU32(&x335, uint1(x333), x318, x302)
	var x336 uint32
	cmovznzU32(&x336, uint1(x333), x320, x304)
	var x337 uint32
	cmovznzU32(&x337, uint1(x333), x322, x306)
	var x338 uint32
	cmovznzU32(&x338, uint1(x333), x324, x308)
	var x339 uint32
	cmovznzU32(&x339, uint1(x333), x326, x310)
	var x340 uint32
	cmovznzU32(&x340, uint1(x333), x328, x312)
	var x341 uint32
	cmovznzU32(&x341, uint1(x333), x330, x314)
	out1[0] = x334
	out1[1] = x335
	out1[2] = x336
	out1[3] = x337
	out1[4] = x338
	out1[5] = x339
	out1[6] = x340
	out1[7] = x341
}

// ToMontgomery translates a field element into the Montgomery domain.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   eval (from_montgomery out1) mod m = eval arg1 mod m
//   0 ≤ eval out1 < m
//
func ToMontgomery(out1 *MontgomeryDomainFieldElement, arg1 *NonMontgomeryDomainFieldElement) {
	x1 := arg1[1]
	x2 := arg1[2]
	x3 := arg1[3]
	x4 := arg1[4]
	x5 := arg1[5]
	x6 := arg1[6]
	x7 := arg1[7]
	x8 := arg1[0]
	var x9 uint32
	var x10 uint32
	x10, x9 = bits.Mul32(x8, 0x4)
	var x11 uint32
	var x12 uint32
	x12, x11 = bits.Mul32(x8, 0xfffffffd)
	var x13 uint32
	var x14 uint32
	x14, x13 = bits.Mul32(x8, 0xffffffff)
	var x15 uint32
	var x16 uint32
	x16, x15 = bits.Mul32(x8, 0xfffffffe)
	var x17 uint32
	var x18 uint32
	x18, x17 = bits.Mul32(x8, 0xfffffffb)
	var x19 uint32
	var x20 uint32
	x20, x19 = bits.Mul32(x8, 0xffffffff)
	var x21 uint32
	var x22 uint32
	x22, x21 = bits.Mul32(x8, 0x3)
	var x23 uint32
	var x24 uint32
	x23, x24 = bits.Add32(x20, x17, uint32(0x0))
	var x25 uint32
	var x26 uint32
	x25, x26 = bits.Add32(x18, x15, uint32(uint1(x24)))
	var x27 uint32
	var x28 uint32
	x27, x28 = bits.Add32(x16, x13, uint32(uint1(x26)))
	var x29 uint32
	var x30 uint32
	x29, x30 = bits.Add32(x14, x11, uint32(uint1(x28)))
	var x31 uint32
	var x32 uint32
	x31, x32 = bits.Add32(x12, x9, uint32(uint1(x30)))
	var x33 uint32
	var x34 uint32
	x34, x33 = bits.Mul32(x21, 0xffffffff)
	var x35 uint32
	var x36 uint32
	x36, x35 = bits.Mul32(x21, 0xffffffff)
	var x37 uint32
	var x38 uint32
	x38, x37 = bits.Mul32(x21, 0xffffffff)
	var x39 uint32
	var x40 uint32
	x40, x39 = bits.Mul32(x21, 0xffffffff)
	var x41 uint32
	var x42 uint32
	x41, x42 = bits.Add32(x40, x37, uint32(0x0))
	var x43 uint32
	var x44 uint32
	x43, x44 = bits.Add32(x38, x35, uint32(uint1(x42)))
	var x46 uint32
	_, x46 = bits.Add32(x21, x39, uint32(0x0))
	var x47 uint32
	var x48 uint32
	x47, x48 = bits.Add32(x22, x41, uint32(uint1(x46)))
	var x49 uint32
	var x50 uint32
	x49, x50 = bits.Add32(x19, x43, uint32(uint1(x48)))
	var x51 uint32
	var x52 uint32
	x51, x52 = bits.Add32(x23, (uint32(uint1(x44)) + x36), uint32(uint1(x50)))
	var x53 uint32
	var x54 uint32
	x53, x54 = bits.Add32(x25, uint32(0x0), uint32(uint1(x52)))
	var x55 uint32
	var x56 uint32
	x55, x56 = bits.Add32(x27, uint32(0x0), uint32(uint1(x54)))
	var x57 uint32
	var x58 uint32
	x57, x58 = bits.Add32(x29, x21, uint32(uint1(x56)))
	var x59 uint32
	var x60 uint32
	x59, x60 = bits.Add32(x31, x33, uint32(uint1(x58)))
	var x61 uint32
	var x62 uint32
	x61, x62 = bits.Add32((uint32(uint1(x32)) + x10), x34, uint32(uint1(x60)))
	var x63 uint32
	var x64 uint32
	x64, x63 = bits.Mul32(x1, 0x4)
	var x65 uint32
	var x66 uint32
	x66, x65 = bits.Mul32(x1, 0xfffffffd)
	var x67 uint32
	var x68 uint32
	x68, x67 = bits.Mul32(x1, 0xffffffff)
	var x69 uint32
	var x70 uint32
	x70, x69 = bits.Mul32(x1, 0xfffffffe)
	var x71 uint32
	var x72 uint32
	x72, x71 = bits.Mul32(x1, 0xfffffffb)
	var x73 uint32
	var x74 uint32
	x74, x73 = bits.Mul32(x1, 0xffffffff)
	var x75 uint32
	var x76 uint32
	x76, x75 = bits.Mul32(x1, 0x3)
	var x77 uint32
	var x78 uint32
	x77, x78 = bits.Add32(x74, x71, uint32(0x0))
	var x79 uint32
	var x80 uint32
	x79, x80 = bits.Add32(x72, x69, uint32(uint1(x78)))
	var x81 uint32
	var x82 uint32
	x81, x82 = bits.Add32(x70, x67, uint32(uint1(x80)))
	var x83 uint32
	var x84 uint32
	x83, x84 = bits.Add32(x68, x65, uint32(uint1(x82)))
	var x85 uint32
	var x86 uint32
	x85, x86 = bits.Add32(x66, x63, uint32(uint1(x84)))
	var x87 uint32
	var x88 uint32
	x87, x88 = bits.Add32(x47, x75, uint32(0x0))
	var x89 uint32
	var x90 uint32
	x89, x90 = bits.Add32(x49, x76, uint32(uint1(x88)))
	var x91 uint32
	var x92 uint32
	x91, x92 = bits.Add32(x51, x73, uint32(uint1(x90)))
	var x93 uint32
	var x94 uint32
	x93, x94 = bits.Add32(x53, x77, uint32(uint1(x92)))
	var x95 uint32
	var x96 uint32
	x95, x96 = bits.Add32(x55, x79, uint32(uint1(x94)))
	var x97 uint32
	var x98 uint32
	x97, x98 = bits.Add32(x57, x81, uint32(uint1(x96)))
	var x99 uint32
	var x100 uint32
	x99, x100 = bits.Add32(x59, x83, uint32(uint1(x98)))
	var x101 uint32
	var x102 uint32
	x101, x102 = bits.Add32(x61, x85, uint32(uint1(x100)))
	var x103 uint32
	var x104 uint32
	x104, x103 = bits.Mul32(x87, 0xffffffff)
	var x105 uint32
	var x106 uint32
	x106, x105 = bits.Mul32(x87, 0xffffffff)
	var x107 uint32
	var x108 uint32
	x108, x107 = bits.Mul32(x87, 0xffffffff)
	var x109 uint32
	var x110 uint32
	x110, x109 = bits.Mul32(x87, 0xffffffff)
	var x111 uint32
	var x112 uint32
	x111, x112 = bits.Add32(x110, x107, uint32(0x0))
	var x113 uint32
	var x114 uint32
	x113, x114 = bits.Add32(x108, x105, uint32(uint1(x112)))
	var x116 uint32
	_, x116 = bits.Add32(x87, x109, uint32(0x0))
	var x117 uint32
	var x118 uint32
	x117, x118 = bits.Add32(x89, x111, uint32(uint1(x116)))
	var x119 uint32
	var x120 uint32
	x119, x120 = bits.Add32(x91, x113, uint32(uint1(x118)))
	var x121 uint32
	var x122 uint32
	x121, x122 = bits.Add32(x93, (uint32(uint1(x114)) + x106), uint32(uint1(x120)))
	var x123 uint32
	var x124 uint32
	x123, x124 = bits.Add32(x95, uint32(0x0), uint32(uint1(x122)))
	var x125 uint32
	var x126 uint32
	x125, x126 = bits.Add32(x97, uint32(0x0), uint32(uint1(x124)))
	var x127 uint32
	var x128 uint32
	x127, x128 = bits.Add32(x99, x87, uint32(uint1(x126)))
	var x129 uint32
	var x130 uint32
	x129, x130 = bits.Add32(x101, x103, uint32(uint1(x128)))
	var x131 uint32
	var x132 uint32
	x131, x132 = bits.Add32(((uint32(uint1(x102)) + uint32(uint1(x62))) + (uint32(uint1(x86)) + x64)), x104, uint32(uint1(x130)))
	var x133 uint32
	var x134 uint32
	x134, x133 = bits.Mul32(x2, 0x4)
	var x135 uint32
	var x136 uint32
	x136, x135 = bits.Mul32(x2, 0xfffffffd)
	var x137 uint32
	var x138 uint32
	x138, x137 = bits.Mul32(x2, 0xffffffff)
	var x139 uint32
	var x140 uint32
	x140, x139 = bits.Mul32(x2, 0xfffffffe)
	var x141 uint32
	var x142 uint32
	x142, x141 = bits.Mul32(x2, 0xfffffffb)
	var x143 uint32
	var x144 uint32
	x144, x143 = bits.Mul32(x2, 0xffffffff)
	var x145 uint32
	var x146 uint32
	x146, x145 = bits.Mul32(x2, 0x3)
	var x147 uint32
	var x148 uint32
	x147, x148 = bits.Add32(x144, x141, uint32(0x0))
	var x149 uint32
	var x150 uint32
	x149, x150 = bits.Add32(x142, x139, uint32(uint1(x148)))
	var x151 uint32
	var x152 uint32
	x151, x152 = bits.Add32(x140, x137, uint32(uint1(x150)))
	var x153 uint32
	var x154 uint32
	x153, x154 = bits.Add32(x138, x135, uint32(uint1(x152)))
	var x155 uint32
	var x156 uint32
	x155, x156 = bits.Add32(x136, x133, uint32(uint1(x154)))
	var x157 uint32
	var x158 uint32
	x157, x158 = bits.Add32(x117, x145, uint32(0x0))
	var x159 uint32
	var x160 uint32
	x159, x160 = bits.Add32(x119, x146, uint32(uint1(x158)))
	var x161 uint32
	var x162 uint32
	x161, x162 = bits.Add32(x121, x143, uint32(uint1(x160)))
	var x163 uint32
	var x164 uint32
	x163, x164 = bits.Add32(x123, x147, uint32(uint1(x162)))
	var x165 uint32
	var x166 uint32
	x165, x166 = bits.Add32(x125, x149, uint32(uint1(x164)))
	var x167 uint32
	var x168 uint32
	x167, x168 = bits.Add32(x127, x151, uint32(uint1(x166)))
	var x169 uint32
	var x170 uint32
	x169, x170 = bits.Add32(x129, x153, uint32(uint1(x168)))
	var x171 uint32
	var x172 uint32
	x171, x172 = bits.Add32(x131, x155, uint32(uint1(x170)))
	var x173 uint32
	var x174 uint32
	x174, x173 = bits.Mul32(x157, 0xffffffff)
	var x175 uint32
	var x176 uint32
	x176, x175 = bits.Mul32(x157, 0xffffffff)
	var x177 uint32
	var x178 uint32
	x178, x177 = bits.Mul32(x157, 0xffffffff)
	var x179 uint32
	var x180 uint32
	x180, x179 = bits.Mul32(x157, 0xffffffff)
	var x181 uint32
	var x182 uint32
	x181, x182 = bits.Add32(x180, x177, uint32(0x0))
	var x183 uint32
	var x184 uint32
	x183, x184 = bits.Add32(x178, x175, uint32(uint1(x182)))
	var x186 uint32
	_, x186 = bits.Add32(x157, x179, uint32(0x0))
	var x187 uint32
	var x188 uint32
	x187, x188 = bits.Add32(x159, x181, uint32(uint1(x186)))
	var x189 uint32
	var x190 uint32
	x189, x190 = bits.Add32(x161, x183, uint32(uint1(x188)))
	var x191 uint32
	var x192 uint32
	x191, x192 = bits.Add32(x163, (uint32(uint1(x184)) + x176), uint32(uint1(x190)))
	var x193 uint32
	var x194 uint32
	x193, x194 = bits.Add32(x165, uint32(0x0), uint32(uint1(x192)))
	var x195 uint32
	var x196 uint32
	x195, x196 = bits.Add32(x167, uint32(0x0), uint32(uint1(x194)))
	var x197 uint32
	var x198 uint32
	x197, x198 = bits.Add32(x169, x157, uint32(uint1(x196)))
	var x199 uint32
	var x200 uint32
	x199, x200 = bits.Add32(x171, x173, uint32(uint1(x198)))
	var x201 uint32
	var x202 uint32
	x201, x202 = bits.Add32(((uint32(uint1(x172)) + uint32(uint1(x132))) + (uint32(uint1(x156)) + x134)), x174, uint32(uint1(x200)))
	var x203 uint32
	var x204 uint32
	x204, x203 = bits.Mul32(x3, 0x4)
	var x205 uint32
	var x206 uint32
	x206, x205 = bits.Mul32(x3, 0xfffffffd)
	var x207 uint32
	var x208 uint32
	x208, x207 = bits.Mul32(x3, 0xffffffff)
	var x209 uint32
	var x210 uint32
	x210, x209 = bits.Mul32(x3, 0xfffffffe)
	var x211 uint32
	var x212 uint32
	x212, x211 = bits.Mul32(x3, 0xfffffffb)
	var x213 uint32
	var x214 uint32
	x214, x213 = bits.Mul32(x3, 0xffffffff)
	var x215 uint32
	var x216 uint32
	x216, x215 = bits.Mul32(x3, 0x3)
	var x217 uint32
	var x218 uint32
	x217, x218 = bits.Add32(x214, x211, uint32(0x0))
	var x219 uint32
	var x220 uint32
	x219, x220 = bits.Add32(x212, x209, uint32(uint1(x218)))
	var x221 uint32
	var x222 uint32
	x221, x222 = bits.Add32(x210, x207, uint32(uint1(x220)))
	var x223 uint32
	var x224 uint32
	x223, x224 = bits.Add32(x208, x205, uint32(uint1(x222)))
	var x225 uint32
	var x226 uint32
	x225, x226 = bits.Add32(x206, x203, uint32(uint1(x224)))
	var x227 uint32
	var x228 uint32
	x227, x228 = bits.Add32(x187, x215, uint32(0x0))
	var x229 uint32
	var x230 uint32
	x229, x230 = bits.Add32(x189, x216, uint32(uint1(x228)))
	var x231 uint32
	var x232 uint32
	x231, x232 = bits.Add32(x191, x213, uint32(uint1(x230)))
	var x233 uint32
	var x234 uint32
	x233, x234 = bits.Add32(x193, x217, uint32(uint1(x232)))
	var x235 uint32
	var x236 uint32
	x235, x236 = bits.Add32(x195, x219, uint32(uint1(x234)))
	var x237 uint32
	var x238 uint32
	x237, x238 = bits.Add32(x197, x221, uint32(uint1(x236)))
	var x239 uint32
	var x240 uint32
	x239, x240 = bits.Add32(x199, x223, uint32(uint1(x238)))
	var x241 uint32
	var x242 uint32
	x241, x242 = bits.Add32(x201, x225, uint32(uint1(x240)))
	var x243 uint32
	var x244 uint32
	x244, x243 = bits.Mul32(x227, 0xffffffff)
	var x245 uint32
	var x246 uint32
	x246, x245 = bits.Mul32(x227, 0xffffffff)
	var x247 uint32
	var x248 uint32
	x248, x247 = bits.Mul32(x227, 0xffffffff)
	var x249 uint32
	var x250 uint32
	x250, x249 = bits.Mul32(x227, 0xffffffff)
	var x251 uint32
	var x252 uint32
	x251, x252 = bits.Add32(x250, x247, uint32(0x0))
	var x253 uint32
	var x254 uint32
	x253, x254 = bits.Add32(x248, x245, uint32(uint1(x252)))
	var x256 uint32
	_, x256 = bits.Add32(x227, x249, uint32(0x0))
	var x257 uint32
	var x258 uint32
	x257, x258 = bits.Add32(x229, x251, uint32(uint1(x256)))
	var x259 uint32
	var x260 uint32
	x259, x260 = bits.Add32(x231, x253, uint32(uint1(x258)))
	var x261 uint32
	var x262 uint32
	x261, x262 = bits.Add32(x233, (uint32(uint1(x254)) + x246), uint32(uint1(x260)))
	var x263 uint32
	var x264 uint32
	x263, x264 = bits.Add32(x235, uint32(0x0), uint32(uint1(x262)))
	var x265 uint32
	var x266 uint32
	x265, x266 = bits.Add32(x237, uint32(0x0), uint32(uint1(x264)))
	var x267 uint32
	var x268 uint32
	x267, x268 = bits.Add32(x239, x227, uint32(uint1(x266)))
	var x269 uint32
	var x270 uint32
	x269, x270 = bits.Add32(x241, x243, uint32(uint1(x268)))
	var x271 uint32
	var x272 uint32
	x271, x272 = bits.Add32(((uint32(uint1(x242)) + uint32(uint1(x202))) + (uint32(uint1(x226)) + x204)), x244, uint32(uint1(x270)))
	var x273 uint32
	var x274 uint32
	x274, x273 = bits.Mul32(x4, 0x4)
	var x275 uint32
	var x276 uint32
	x276, x275 = bits.Mul32(x4, 0xfffffffd)
	var x277 uint32
	var x278 uint32
	x278, x277 = bits.Mul32(x4, 0xffffffff)
	var x279 uint32
	var x280 uint32
	x280, x279 = bits.Mul32(x4, 0xfffffffe)
	var x281 uint32
	var x282 uint32
	x282, x281 = bits.Mul32(x4, 0xfffffffb)
	var x283 uint32
	var x284 uint32
	x284, x283 = bits.Mul32(x4, 0xffffffff)
	var x285 uint32
	var x286 uint32
	x286, x285 = bits.Mul32(x4, 0x3)
	var x287 uint32
	var x288 uint32
	x287, x288 = bits.Add32(x284, x281, uint32(0x0))
	var x289 uint32
	var x290 uint32
	x289, x290 = bits.Add32(x282, x279, uint32(uint1(x288)))
	var x291 uint32
	var x292 uint32
	x291, x292 = bits.Add32(x280, x277, uint32(uint1(x290)))
	var x293 uint32
	var x294 uint32
	x293, x294 = bits.Add32(x278, x275, uint32(uint1(x292)))
	var x295 uint32
	var x296 uint32
	x295, x296 = bits.Add32(x276, x273, uint32(uint1(x294)))
	var x297 uint32
	var x298 uint32
	x297, x298 = bits.Add32(x257, x285, uint32(0x0))
	var x299 uint32
	var x300 uint32
	x299, x300 = bits.Add32(x259, x286, uint32(uint1(x298)))
	var x301 uint32
	var x302 uint32
	x301, x302 = bits.Add32(x261, x283, uint32(uint1(x300)))
	var x303 uint32
	var x304 uint32
	x303, x304 = bits.Add32(x263, x287, uint32(uint1(x302)))
	var x305 uint32
	var x306 uint32
	x305, x306 = bits.Add32(x265, x289, uint32(uint1(x304)))
	var x307 uint32
	var x308 uint32
	x307, x308 = bits.Add32(x267, x291, uint32(uint1(x306)))
	var x309 uint32
	var x310 uint32
	x309, x310 = bits.Add32(x269, x293, uint32(uint1(x308)))
	var x311 uint32
	var x312 uint32
	x311, x312 = bits.Add32(x271, x295, uint32(uint1(x310)))
	var x313 uint32
	var x314 uint32
	x314, x313 = bits.Mul32(x297, 0xffffffff)
	var x315 uint32
	var x316 uint32
	x316, x315 = bits.Mul32(x297, 0xffffffff)
	var x317 uint32
	var x318 uint32
	x318, x317 = bits.Mul32(x297, 0xffffffff)
	var x319 uint32
	var x320 uint32
	x320, x319 = bits.Mul32(x297, 0xffffffff)
	var x321 uint32
	var x322 uint32
	x321, x322 = bits.Add32(x320, x317, uint32(0x0))
	var x323 uint32
	var x324 uint32
	x323, x324 = bits.Add32(x318, x315, uint32(uint1(x322)))
	var x326 uint32
	_, x326 = bits.Add32(x297, x319, uint32(0x0))
	var x327 uint32
	var x328 uint32
	x327, x328 = bits.Add32(x299, x321, uint32(uint1(x326)))
	var x329 uint32
	var x330 uint32
	x329, x330 = bits.Add32(x301, x323, uint32(uint1(x328)))
	var x331 uint32
	var x332 uint32
	x331, x332 = bits.Add32(x303, (uint32(uint1(x324)) + x316), uint32(uint1(x330)))
	var x333 uint32
	var x334 uint32
	x333, x334 = bits.Add32(x305, uint32(0x0), uint32(uint1(x332)))
	var x335 uint32
	var x336 uint32
	x335, x336 = bits.Add32(x307, uint32(0x0), uint32(uint1(x334)))
	var x337 uint32
	var x338 uint32
	x337, x338 = bits.Add32(x309, x297, uint32(uint1(x336)))
	var x339 uint32
	var x340 uint32
	x339, x340 = bits.Add32(x311, x313, uint32(uint1(x338)))
	var x341 uint32
	var x342 uint32
	x341, x342 = bits.Add32(((uint32(uint1(x312)) + uint32(uint1(x272))) + (uint32(uint1(x296)) + x274)), x314, uint32(uint1(x340)))
	var x343 uint32
	var x344 uint32
	x344, x343 = bits.Mul32(x5, 0x4)
	var x345 uint32
	var x346 uint32
	x346, x345 = bits.Mul32(x5, 0xfffffffd)
	var x347 uint32
	var x348 uint32
	x348, x347 = bits.Mul32(x5, 0xffffffff)
	var x349 uint32
	var x350 uint32
	x350, x349 = bits.Mul32(x5, 0xfffffffe)
	var x351 uint32
	var x352 uint32
	x352, x351 = bits.Mul32(x5, 0xfffffffb)
	var x353 uint32
	var x354 uint32
	x354, x353 = bits.Mul32(x5, 0xffffffff)
	var x355 uint32
	var x356 uint32
	x356, x355 = bits.Mul32(x5, 0x3)
	var x357 uint32
	var x358 uint32
	x357, x358 = bits.Add32(x354, x351, uint32(0x0))
	var x359 uint32
	var x360 uint32
	x359, x360 = bits.Add32(x352, x349, uint32(uint1(x358)))
	var x361 uint32
	var x362 uint32
	x361, x362 = bits.Add32(x350, x347, uint32(uint1(x360)))
	var x363 uint32
	var x364 uint32
	x363, x364 = bits.Add32(x348, x345, uint32(uint1(x362)))
	var x365 uint32
	var x366 uint32
	x365, x366 = bits.Add32(x346, x343, uint32(uint1(x364)))
	var x367 uint32
	var x368 uint32
	x367, x368 = bits.Add32(x327, x355, uint32(0x0))
	var x369 uint32
	var x370 uint32
	x369, x370 = bits.Add32(x329, x356, uint32(uint1(x368)))
	var x371 uint32
	var x372 uint32
	x371, x372 = bits.Add32(x331, x353, uint32(uint1(x370)))
	var x373 uint32
	var x374 uint32
	x373, x374 = bits.Add32(x333, x357, uint32(uint1(x372)))
	var x375 uint32
	var x376 uint32
	x375, x376 = bits.Add32(x335, x359, uint32(uint1(x374)))
	var x377 uint32
	var x378 uint32
	x377, x378 = bits.Add32(x337, x361, uint32(uint1(x376)))
	var x379 uint32
	var x380 uint32
	x379, x380 = bits.Add32(x339, x363, uint32(uint1(x378)))
	var x381 uint32
	var x382 uint32
	x381, x382 = bits.Add32(x341, x365, uint32(uint1(x380)))
	var x383 uint32
	var x384 uint32
	x384, x383 = bits.Mul32(x367, 0xffffffff)
	var x385 uint32
	var x386 uint32
	x386, x385 = bits.Mul32(x367, 0xffffffff)
	var x387 uint32
	var x388 uint32
	x388, x387 = bits.Mul32(x367, 0xffffffff)
	var x389 uint32
	var x390 uint32
	x390, x389 = bits.Mul32(x367, 0xffffffff)
	var x391 uint32
	var x392 uint32
	x391, x392 = bits.Add32(x390, x387, uint32(0x0))
	var x393 uint32
	var x394 uint32
	x393, x394 = bits.Add32(x388, x385, uint32(uint1(x392)))
	var x396 uint32
	_, x396 = bits.Add32(x367, x389, uint32(0x0))
	var x397 uint32
	var x398 uint32
	x397, x398 = bits.Add32(x369, x391, uint32(uint1(x396)))
	var x399 uint32
	var x400 uint32
	x399, x400 = bits.Add32(x371, x393, uint32(uint1(x398)))
	var x401 uint32
	var x402 uint32
	x401, x402 = bits.Add32(x373, (uint32(uint1(x394)) + x386), uint32(uint1(x400)))
	var x403 uint32
	var x404 uint32
	x403, x404 = bits.Add32(x375, uint32(0x0), uint32(uint1(x402)))
	var x405 uint32
	var x406 uint32
	x405, x406 = bits.Add32(x377, uint32(0x0), uint32(uint1(x404)))
	var x407 uint32
	var x408 uint32
	x407, x408 = bits.Add32(x379, x367, uint32(uint1(x406)))
	var x409 uint32
	var x410 uint32
	x409, x410 = bits.Add32(x381, x383, uint32(uint1(x408)))
	var x411 uint32
	var x412 uint32
	x411, x412 = bits.Add32(((uint32(uint1(x382)) + uint32(uint1(x342))) + (uint32(uint1(x366)) + x344)), x384, uint32(uint1(x410)))
	var x413 uint32
	var x414 uint32
	x414, x413 = bits.Mul32(x6, 0x4)
	var x415 uint32
	var x416 uint32
	x416, x415 = bits.Mul32(x6, 0xfffffffd)
	var x417 uint32
	var x418 uint32
	x418, x417 = bits.Mul32(x6, 0xffffffff)
	var x419 uint32
	var x420 uint32
	x420, x419 = bits.Mul32(x6, 0xfffffffe)
	var x421 uint32
	var x422 uint32
	x422, x421 = bits.Mul32(x6, 0xfffffffb)
	var x423 uint32
	var x424 uint32
	x424, x423 = bits.Mul32(x6, 0xffffffff)
	var x425 uint32
	var x426 uint32
	x426, x425 = bits.Mul32(x6, 0x3)
	var x427 uint32
	var x428 uint32
	x427, x428 = bits.Add32(x424, x421, uint32(0x0))
	var x429 uint32
	var x430 uint32
	x429, x430 = bits.Add32(x422, x419, uint32(uint1(x428)))
	var x431 uint32
	var x432 uint32
	x431, x432 = bits.Add32(x420, x417, uint32(uint1(x430)))
	var x433 uint32
	var x434 uint32
	x433, x434 = bits.Add32(x418, x415, uint32(uint1(x432)))
	var x435 uint32
	var x436 uint32
	x435, x436 = bits.Add32(x416, x413, uint32(uint1(x434)))
	var x437 uint32
	var x438 uint32
	x437, x438 = bits.Add32(x397, x425, uint32(0x0))
	var x439 uint32
	var x440 uint32
	x439, x440 = bits.Add32(x399, x426, uint32(uint1(x438)))
	var x441 uint32
	var x442 uint32
	x441, x442 = bits.Add32(x401, x423, uint32(uint1(x440)))
	var x443 uint32
	var x444 uint32
	x443, x444 = bits.Add32(x403, x427, uint32(uint1(x442)))
	var x445 uint32
	var x446 uint32
	x445, x446 = bits.Add32(x405, x429, uint32(uint1(x444)))
	var x447 uint32
	var x448 uint32
	x447, x448 = bits.Add32(x407, x431, uint32(uint1(x446)))
	var x449 uint32
	var x450 uint32
	x449, x450 = bits.Add32(x409, x433, uint32(uint1(x448)))
	var x451 uint32
	var x452 uint32
	x451, x452 = bits.Add32(x411, x435, uint32(uint1(x450)))
	var x453 uint32
	var x454 uint32
	x454, x453 = bits.Mul32(x437, 0xffffffff)
	var x455 uint32
	var x456 uint32
	x456, x455 = bits.Mul32(x437, 0xffffffff)
	var x457 uint32
	var x458 uint32
	x458, x457 = bits.Mul32(x437, 0xffffffff)
	var x459 uint32
	var x460 uint32
	x460, x459 = bits.Mul32(x437, 0xffffffff)
	var x461 uint32
	var x462 uint32
	x461, x462 = bits.Add32(x460, x457, uint32(0x0))
	var x463 uint32
	var x464 uint32
	x463, x464 = bits.Add32(x458, x455, uint32(uint1(x462)))
	var x466 uint32
	_, x466 = bits.Add32(x437, x459, uint32(0x0))
	var x467 uint32
	var x468 uint32
	x467, x468 = bits.Add32(x439, x461, uint32(uint1(x466)))
	var x469 uint32
	var x470 uint32
	x469, x470 = bits.Add32(x441, x463, uint32(uint1(x468)))
	var x471 uint32
	var x472 uint32
	x471, x472 = bits.Add32(x443, (uint32(uint1(x464)) + x456), uint32(uint1(x470)))
	var x473 uint32
	var x474 uint32
	x473, x474 = bits.Add32(x445, uint32(0x0), uint32(uint1(x472)))
	var x475 uint32
	var x476 uint32
	x475, x476 = bits.Add32(x447, uint32(0x0), uint32(uint1(x474)))
	var x477 uint32
	var x478 uint32
	x477, x478 = bits.Add32(x449, x437, uint32(uint1(x476)))
	var x479 uint32
	var x480 uint32
	x479, x480 = bits.Add32(x451, x453, uint32(uint1(x478)))
	var x481 uint32
	var x482 uint32
	x481, x482 = bits.Add32(((uint32(uint1(x452)) + uint32(uint1(x412))) + (uint32(uint1(x436)) + x414)), x454, uint32(uint1(x480)))
	var x483 uint32
	var x484 uint32
	x484, x483 = bits.Mul32(x7, 0x4)
	var x485 uint32
	var x486 uint32
	x486, x485 = bits.Mul32(x7, 0xfffffffd)
	var x487 uint32
	var x488 uint32
	x488, x487 = bits.Mul32(x7, 0xffffffff)
	var x489 uint32
	var x490 uint32
	x490, x489 = bits.Mul32(x7, 0xfffffffe)
	var x491 uint32
	var x492 uint32
	x492, x491 = bits.Mul32(x7, 0xfffffffb)
	var x493 uint32
	var x494 uint32
	x494, x493 = bits.Mul32(x7, 0xffffffff)
	var x495 uint32
	var x496 uint32
	x496, x495 = bits.Mul32(x7, 0x3)
	var x497 uint32
	var x498 uint32
	x497, x498 = bits.Add32(x494, x491, uint32(0x0))
	var x499 uint32
	var x500 uint32
	x499, x500 = bits.Add32(x492, x489, uint32(uint1(x498)))
	var x501 uint32
	var x502 uint32
	x501, x502 = bits.Add32(x490, x487, uint32(uint1(x500)))
	var x503 uint32
	var x504 uint32
	x503, x504 = bits.Add32(x488, x485, uint32(uint1(x502)))
	var x505 uint32
	var x506 uint32
	x505, x506 = bits.Add32(x486, x483, uint32(uint1(x504)))
	var x507 uint32
	var x508 uint32
	x507, x508 = bits.Add32(x467, x495, uint32(0x0))
	var x509 uint32
	var x510 uint32
	x509, x510 = bits.Add32(x469, x496, uint32(uint1(x508)))
	var x511 uint32
	var x512 uint32
	x511, x512 = bits.Add32(x471, x493, uint32(uint1(x510)))
	var x513 uint32
	var x514 uint32
	x513, x514 = bits.Add32(x473, x497, uint32(uint1(x512)))
	var x515 uint32
	var x516 uint32
	x515, x516 = bits.Add32(x475, x499, uint32(uint1(x514)))
	var x517 uint32
	var x518 uint32
	x517, x518 = bits.Add32(x477, x501, uint32(uint1(x516)))
	var x519 uint32
	var x520 uint32
	x519, x520 = bits.Add32(x479, x503, uint32(uint1(x518)))
	var x521 uint32
	var x522 uint32
	x521, x522 = bits.Add32(x481, x505, uint32(uint1(x520)))
	var x523 uint32
	var x524 uint32
	x524, x523 = bits.Mul32(x507, 0xffffffff)
	var x525 uint32
	var x526 uint32
	x526, x525 = bits.Mul32(x507, 0xffffffff)
	var x527 uint32
	var x528 uint32
	x528, x527 = bits.Mul32(x507, 0xffffffff)
	var x529 uint32
	var x530 uint32
	x530, x529 = bits.Mul32(x507, 0xffffffff)
	var x531 uint32
	var x532 uint32
	x531, x532 = bits.Add32(x530, x527, uint32(0x0))
	var x533 uint32
	var x534 uint32
	x533, x534 = bits.Add32(x528, x525, uint32(uint1(x532)))
	var x536 uint32
	_, x536 = bits.Add32(x507, x529, uint32(0x0))
	var x537 uint32
	var x538 uint32
	x537, x538 = bits.Add32(x509, x531, uint32(uint1(x536)))
	var x539 uint32
	var x540 uint32
	x539, x540 = bits.Add32(x511, x533, uint32(uint1(x538)))
	var x541 uint32
	var x542 uint32
	x541, x542 = bits.Add32(x513, (uint32(uint1(x534)) + x526), uint32(uint1(x540)))
	var x543 uint32
	var x544 uint32
	x543, x544 = bits.Add32(x515, uint32(0x0), uint32(uint1(x542)))
	var x545 uint32
	var x546 uint32
	x545, x546 = bits.Add32(x517, uint32(0x0), uint32(uint1(x544)))
	var x547 uint32
	var x548 uint32
	x547, x548 = bits.Add32(x519, x507, uint32(uint1(x546)))
	var x549 uint32
	var x550 uint32
	x549, x550 = bits.Add32(x521, x523, uint32(uint1(x548)))
	var x551 uint32
	var x552 uint32
	x551, x552 = bits.Add32(((uint32(uint1(x522)) + uint32(uint1(x482))) + (uint32(uint1(x506)) + x484)), x524, uint32(uint1(x550)))
	var x553 uint32
	var x554 uint32
	x553, x554 = bits.Sub32(x537, 0xffffffff, uint32(0x0))
	var x555 uint32
	var x556 uint32
	x555, x556 = bits.Sub32(x539, 0xffffffff, uint32(uint1(x554)))
	var x557 uint32
	var x558 uint32
	x557, x558 = bits.Sub32(x541, 0xffffffff, uint32(uint1(x556)))
	var x559 uint32
	var x560 uint32
	x559, x560 = bits.Sub32(x543, uint32(0x0), uint32(uint1(x558)))
	var x561 uint32
	var x562 uint32
	x561, x562 = bits.Sub32(x545, uint32(0x0), uint32(uint1(x560)))
	var x563 uint32
	var x564 uint32
	x563, x564 = bits.Sub32(x547, uint32(0x0), uint32(uint1(x562)))
	var x565 uint32
	var x566 uint32
	x565, x566 = bits.Sub32(x549, uint32(0x1), uint32(uint1(x564)))
	var x567 uint32
	var x568 uint32
	x567, x568 = bits.Sub32(x551, 0xffffffff, uint32(uint1(x566)))
	var x570 uint32
	_, x570 = bits.Sub32(uint32(uint1(x552)), uint32(0x0), uint32(uint1(x568)))
	var x571 uint32
	cmovznzU32(&x571, uint1(x570), x553, x537)
	var x572 uint32
	cmovznzU32(&x572, uint1(x570), x555, x539)
	var x573 uint32
	cmovznzU32(&x573, uint1(x570), x557, x541)
	var x574 uint32
	cmovznzU32(&x574, uint1(x570), x559, x543)
	var x575 uint32
	cmovznzU32(&x575, uint1(x570), x561, x545)
	var x576 uint32
	cmovznzU32(&x576, uint1(x570), x563, x547)
	var x577 uint32
	cmovznzU32(&x577, uint1(x570), x565, x549)
	var x578 uint32
	cmovznzU32(&x578, uint1(x570), x567, x551)
	out1[0] = x571
	out1[1] = x572
	out1[2] = x573
	out1[3] = x574
	out1[4] = x575
	out1[5] = x576
	out1[6] = x577
	out1[7] = x578
}

// Nonzero outputs a single non-zero word if the input is non-zero and zero otherwise.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [0x0 ~> 0xffffffff]
func Nonzero(out1 *uint32, arg1 *[8]uint32) {
	x1 := (arg1[0] | (arg1[1] | (arg1[2] | (arg1[3] | (arg1[4] | (arg1[5] | (arg1[6] | arg1[7])))))))
	*out1 = x1
}

// Selectznz is a multi-limb conditional select.
//
// Postconditions:
//   eval out1 = (if arg1 = 0 then eval arg2 else eval arg3)
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func Selectznz(out1 *[8]uint32, arg1 uint1, arg2 *[8]uint32, arg3 *[8]uint32) {
	var x1 uint32
	cmovznzU32(&x1, arg1, arg2[0], arg3[0])
	var x2 uint32
	cmovznzU32(&x2, arg1, arg2[1], arg3[1])
	var x3 uint32
	cmovznzU32(&x3, arg1, arg2[2], arg3[2])
	var x4 uint32
	cmovznzU32(&x4, arg1, arg2[3], arg3[3])
	var x5 uint32
	cmovznzU32(&x5, arg1, arg2[4], arg3[4])
	var x6 uint32
	cmovznzU32(&x6, arg1, arg2[5], arg3[5])
	var x7 uint32
	cmovznzU32(&x7, arg1, arg2[6], arg3[6])
	var x8 uint32
	cmovznzU32(&x8, arg1, arg2[7], arg3[7])
	out1[0] = x1
	out1[1] = x2
	out1[2] = x3
	out1[3] = x4
	out1[4] = x5
	out1[5] = x6
	out1[6] = x7
	out1[7] = x8
}

// ToBytes serializes a field element NOT in the Montgomery domain to bytes in little-endian order.
//
// Preconditions:
//   0 ≤ eval arg1 < m
// Postconditions:
//   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..31]
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
func ToBytes(out1 *[32]uint8, arg1 *[8]uint32) {
	x1 := arg1[7]
	x2 := arg1[6]
	x3 := arg1[5]
	x4 := arg1[4]
	x5 := arg1[3]
	x6 := arg1[2]
	x7 := arg1[1]
	x8 := arg1[0]
	x9 := (uint8(x8) & 0xff)
	x10 := (x8 >> 8)
	x11 := (uint8(x10) & 0xff)
	x12 := (x10 >> 8)
	x13 := (uint8(x12) & 0xff)
	x14 := uint8((x12 >> 8))
	x15 := (uint8(x7) & 0xff)
	x16 := (x7 >> 8)
	x17 := (uint8(x16) & 0xff)
	x18 := (x16 >> 8)
	x19 := (uint8(x18) & 0xff)
	x20 := uint8((x18 >> 8))
	x21 := (uint8(x6) & 0xff)
	x22 := (x6 >> 8)
	x23 := (uint8(x22) & 0xff)
	x24 := (x22 >> 8)
	x25 := (uint8(x24) & 0xff)
	x26 := uint8((x24 >> 8))
	x27 := (uint8(x5) & 0xff)
	x28 := (x5 >> 8)
	x29 := (uint8(x28) & 0xff)
	x30 := (x28 >> 8)
	x31 := (uint8(x30) & 0xff)
	x32 := uint8((x30 >> 8))
	x33 := (uint8(x4) & 0xff)
	x34 := (x4 >> 8)
	x35 := (uint8(x34) & 0xff)
	x36 := (x34 >> 8)
	x37 := (uint8(x36) & 0xff)
	x38 := uint8((x36 >> 8))
	x39 := (uint8(x3) & 0xff)
	x40 := (x3 >> 8)
	x41 := (uint8(x40) & 0xff)
	x42 := (x40 >> 8)
	x43 := (uint8(x42) & 0xff)
	x44 := uint8((x42 >> 8))
	x45 := (uint8(x2) & 0xff)
	x46 := (x2 >> 8)
	x47 := (uint8(x46) & 0xff)
	x48 := (x46 >> 8)
	x49 := (uint8(x48) & 0xff)
	x50 := uint8((x48 >> 8))
	x51 := (uint8(x1) & 0xff)
	x52 := (x1 >> 8)
	x53 := (uint8(x52) & 0xff)
	x54 := (x52 >> 8)
	x55 := (uint8(x54) & 0xff)
	x56 := uint8((x54 >> 8))
	out1[0] = x9
	out1[1] = x11
	out1[2] = x13
	out1[3] = x14
	out1[4] = x15
	out1[5] = x17
	out1[6] = x19
	out1[7] = x20
	out1[8] = x21
	out1[9] = x23
	out1[10] = x25
	out1[11] = x26
	out1[12] = x27
	out1[13] = x29
	out1[14] = x31
	out1[15] = x32
	out1[16] = x33
	out1[17] = x35
	out1[18] = x37
	out1[19] = x38
	out1[20] = x39
	out1[21] = x41
	out1[22] = x43
	out1[23] = x44
	out1[24] = x45
	out1[25] = x47
	out1[26] = x49
	out1[27] = x50
	out1[28] = x51
	out1[29] = x53
	out1[30] = x55
	out1[31] = x56
}

// FromBytes deserializes a field element NOT in the Montgomery domain from bytes in little-endian order.
//
// Preconditions:
//   0 ≤ bytes_eval arg1 < m
// Postconditions:
//   eval out1 mod m = bytes_eval arg1 mod m
//   0 ≤ eval out1 < m
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func FromBytes(out1 *[8]uint32, arg1 *[32]uint8) {
	x1 := (uint32(arg1[31]) << 24)
	x2 := (uint32(arg1[30]) << 16)
	x3 := (uint32(arg1[29]) << 8)
	x4 := arg1[28]
	x5 := (uint32(arg1[27]) << 24)
	x6 := (uint32(arg1[26]) << 16)
	x7 := (uint32(arg1[25]) << 8)
	x8 := arg1[24]
	x9 := (uint32(arg1[23]) << 24)
	x10 := (uint32(arg1[22]) << 16)
	x11 := (uint32(arg1[21]) << 8)
	x12 := arg1[20]
	x13 := (uint32(arg1[19]) << 24)
	x14 := (uint32(arg1[18]) << 16)
	x15 := (uint32(arg1[17]) << 8)
	x16 := arg1[16]
	x17 := (uint32(arg1[15]) << 24)
	x18 := (uint32(arg1[14]) << 16)
	x19 := (uint32(arg1[13]) << 8)
	x20 := arg1[12]
	x21 := (uint32(arg1[11]) << 24)
	x22 := (uint32(arg1[10]) << 16)
	x23 := (uint32(arg1[9]) << 8)
	x24 := arg1[8]
	x25 := (uint32(arg1[7]) << 24)
	x26 := (uint32(arg1[6]) << 16)
	x27 := (uint32(arg1[5]) << 8)
	x28 := arg1[4]
	x29 := (uint32(arg1[3]) << 24)
	x30 := (uint32(arg1[2]) << 16)
	x31 := (uint32(arg1[1]) << 8)
	x32 := arg1[0]
	x33 := (x31 + uint32(x32))
	x34 := (x30 + x33)
	x35 := (x29 + x34)
	x36 := (x27 + uint32(x28))
	x37 := (x26 + x36)
	x38 := (x25 + x37)
	x39 := (x23 + uint32(x24))
	x40 := (x22 + x39)
	x41 := (x21 + x40)
	x42 := (x19 + uint32(x20))
	x43 := (x18 + x42)
	x44 := (x17 + x43)
	x45 := (x15 + uint32(x16))
	x46 := (x14 + x45)
	x47 := (x13 + x46)
	x48 := (x11 + uint32(x12))
	x49 := (x10 + x48)
	x50 := (x9 + x49)
	x51 := (x7 + uint32(x8))
	x52 := (x6 + x51)
	x53 := (x5 + x52)
	x54 := (x3 + uint32(x4))
	x55 := (x2 + x54)
	x56 := (x1 + x55)
	out1[0] = x35
	out1[1] = x38
	out1[2] = x41
	out1[3] = x44
	out1[4] = x47
	out1[5] = x50
	out1[6] = x53
	out1[7] = x56
}

// SetOne returns the field element one in the Montgomery domain.
//
// Postconditions:
//   eval (from_montgomery out1) mod m = 1 mod m
//   0 ≤ eval out1 < m
//
func SetOne(out1 *MontgomeryDomainFieldElement) {
	out1[0] = uint32(0x1)
	out1[1] = uint32(0x0)
	out1[2] = uint32(0x0)
	out1[3] = 0xffffffff
	out1[4] = 0xffffffff
	out1[5] = 0xffffffff
	out1[6] = 0xfffffffe
	out1[7] = uint32(0x0)
}

// Msat returns the saturated representation of the prime modulus.
//
// Postconditions:
//   twos_complement_eval out1 = m
//   0 ≤ eval out1 < m
//
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func Msat(out1 *[9]uint32) {
	out1[0] = 0xffffffff
	out1[1] = 0xffffffff
	out1[2] = 0xffffffff
	out1[3] = uint32(0x0)
	out1[4] = uint32(0x0)
	out1[5] = uint32(0x0)
	out1[6] = uint32(0x1)
	out1[7] = 0xffffffff
	out1[8] = uint32(0x0)
}

// The function SatFromBytes deserializes a field element NOT in the Montgomery domain from bytes in little-endian order.
//
// Postconditions:
//   0 ≤ eval arg1 < m
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func SatFromBytes(out1 *[9]uint32, arg1 *[32]uint8) {
	x1 := (uint32(arg1[31]) << 24)
	x2 := (uint32(arg1[30]) << 16)
	x3 := (uint32(arg1[29]) << 8)
	x4 := arg1[28]
	x5 := (uint32(arg1[27]) << 24)
	x6 := (uint32(arg1[26]) << 16)
	x7 := (uint32(arg1[25]) << 8)
	x8 := arg1[24]
	x9 := (uint32(arg1[23]) << 24)
	x10 := (uint32(arg1[22]) << 16)
	x11 := (uint32(arg1[21]) << 8)
	x12 := arg1[20]
	x13 := (uint32(arg1[19]) << 24)
	x14 := (uint32(arg1[18]) << 16)
	x15 := (uint32(arg1[17]) << 8)
	x16 := arg1[16]
	x17 := (uint32(arg1[15]) << 24)
	x18 := (uint32(arg1[14]) << 16)
	x19 := (uint32(arg1[13]) << 8)
	x20 := arg1[12]
	x21 := (uint32(arg1[11]) << 24)
	x22 := (uint32(arg1[10]) << 16)
	x23 := (uint32(arg1[9]) << 8)
	x24 := arg1[8]
	x25 := (uint32(arg1[7]) << 24)
	x26 := (uint32(arg1[6]) << 16)
	x27 := (uint32(arg1[5]) << 8)
	x28 := arg1[4]
	x29 := (uint32(arg1[3]) << 24)
	x30 := (uint32(arg1[2]) << 16)
	x31 := (uint32(arg1[1]) << 8)
	x32 := arg1[0]
	x33 := (x31 + uint32(x32))
	x34 := (x30 + x33)
	x35 := (x29 + x34)
	x36 := (x27 + uint32(x28))
	x37 := (x26 + x36)
	x38 := (x25 + x37)
	x39 := (x23 + uint32(x24))
	x40 := (x22 + x39)
	x41 := (x21 + x40)
	x42 := (x19 + uint32(x20))
	x43 := (x18 + x42)
	x44 := (x17 + x43)
	x45 := (x15 + uint32(x16))
	x46 := (x14 + x45)
	x47 := (x13 + x46)
	x48 := (x11 + uint32(x12))
	x49 := (x10 + x48)
	x50 := (x9 + x49)
	x51 := (x7 + uint32(x8))
	x52 := (x6 + x51)
	x53 := (x5 + x52)
	x54 := (x3 + uint32(x4))
	x55 := (x2 + x54)
	x56 := (x1 + x55)
	out1[0] = x35
	out1[1] = x38
	out1[2] = x41
	out1[3] = x44
	out1[4] = x47
	out1[5] = x50
	out1[6] = x53
	out1[7] = x56
	out1[8] = uint32(0x0)
}

// Divstep computes a divstep.
//
// Preconditions:
//   0 ≤ eval arg4 < m
//   0 ≤ eval arg5 < m
// Postconditions:
//   out1 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then 1 - arg1 else 1 + arg1)
//   twos_complement_eval out2 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then twos_complement_eval arg3 else twos_complement_eval arg2)
//   twos_complement_eval out3 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then ⌊(twos_complement_eval arg3 - twos_complement_eval arg2) / 2⌋ else ⌊(twos_complement_eval arg3 + (twos_complement_eval arg3 mod 2) * twos_complement_eval arg2) / 2⌋)
//   eval (from_montgomery out4) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (2 * eval (from_montgomery arg5)) mod m else (2 * eval (from_montgomery arg4)) mod m)
//   eval (from_montgomery out5) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (eval (from_montgomery arg4) - eval (from_montgomery arg4)) mod m else (eval (from_montgomery arg5) + (twos_complement_eval arg3 mod 2) * eval (from_montgomery arg4)) mod m)
//   0 ≤ eval out5 < m
//   0 ≤ eval out4 < m
//   0 ≤ eval out2 < m
//   0 ≤ eval out3 < m
//
// Input Bounds:
//   arg1: [0x0 ~> 0xffffffff]
//   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg5: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [0x0 ~> 0xffffffff]
//   out2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   out3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   out4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   out5: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func Divstep(out1 *uint32, out2 *[9]uint32, out3 *[9]uint32, out4 *[8]uint32, out5 *[8]uint32, arg1 uint32, arg2 *[9]uint32, arg3 *[9]uint32, arg4 *[8]uint32, arg5 *[8]uint32) {
	var x1 uint32
	x1, _ = bits.Add32((^arg1), uint32(0x1), uint32(0x0))
	x3 := (uint1((x1 >> 31)) & (uint1(arg3[0]) & 0x1))
	var x4 uint32
	x4, _ = bits.Add32((^arg1), uint32(0x1), uint32(0x0))
	var x6 uint32
	cmovznzU32(&x6, x3, arg1, x4)
	var x7 uint32
	cmovznzU32(&x7, x3, arg2[0], arg3[0])
	var x8 uint32
	cmovznzU32(&x8, x3, arg2[1], arg3[1])
	var x9 uint32
	cmovznzU32(&x9, x3, arg2[2], arg3[2])
	var x10 uint32
	cmovznzU32(&x10, x3, arg2[3], arg3[3])
	var x11 uint32
	cmovznzU32(&x11, x3, arg2[4], arg3[4])
	var x12 uint32
	cmovznzU32(&x12, x3, arg2[5], arg3[5])
	var x13 uint32
	cmovznzU32(&x13, x3, arg2[6], arg3[6])
	var x14 uint32
	cmovznzU32(&x14, x3, arg2[7], arg3[7])
	var x15 uint32
	cmovznzU32(&x15, x3, arg2[8], arg3[8])
	var x16 uint32
	var x17 uint32
	x16, x17 = bits.Add32(uint32(0x1), (^arg2[0]), uint32(0x0))
	var x18 uint32
	var x19 uint32
	x18, x19 = bits.Add32(uint32(0x0), (^arg2[1]), uint32(uint1(x17)))
	var x20 uint32
	var x21 uint32
	x20, x21 = bits.Add32(uint32(0x0), (^arg2[2]), uint32(uint1(x19)))
	var x22 uint32
	var x23 uint32
	x22, x23 = bits.Add32(uint32(0x0), (^arg2[3]), uint32(uint1(x21)))
	var x24 uint32
	var x25 uint32
	x24, x25 = bits.Add32(uint32(0x0), (^arg2[4]), uint32(uint1(x23)))
	var x26 uint32
	var x27 uint32
	x26, x27 = bits.Add32(uint32(0x0), (^arg2[5]), uint32(uint1(x25)))
	var x28 uint32
	var x29 uint32
	x28, x29 = bits.Add32(uint32(0x0), (^arg2[6]), uint32(uint1(x27)))
	var x30 uint32
	var x31 uint32
	x30, x31 = bits.Add32(uint32(0x0), (^arg2[7]), uint32(uint1(x29)))
	var x32 uint32
	x32, _ = bits.Add32(uint32(0x0), (^arg2[8]), uint32(uint1(x31)))
	var x34 uint32
	cmovznzU32(&x34, x3, arg3[0], x16)
	var x35 uint32
	cmovznzU32(&x35, x3, arg3[1], x18)
	var x36 uint32
	cmovznzU32(&x36, x3, arg3[2], x20)
	var x37 uint32
	cmovznzU32(&x37, x3, arg3[3], x22)
	var x38 uint32
	cmovznzU32(&x38, x3, arg3[4], x24)
	var x39 uint32
	cmovznzU32(&x39, x3, arg3[5], x26)
	var x40 uint32
	cmovznzU32(&x40, x3, arg3[6], x28)
	var x41 uint32
	cmovznzU32(&x41, x3, arg3[7], x30)
	var x42 uint32
	cmovznzU32(&x42, x3, arg3[8], x32)
	var x43 uint32
	cmovznzU32(&x43, x3, arg4[0], arg5[0])
	var x44 uint32
	cmovznzU32(&x44, x3, arg4[1], arg5[1])
	var x45 uint32
	cmovznzU32(&x45, x3, arg4[2], arg5[2])
	var x46 uint32
	cmovznzU32(&x46, x3, arg4[3], arg5[3])
	var x47 uint32
	cmovznzU32(&x47, x3, arg4[4], arg5[4])
	var x48 uint32
	cmovznzU32(&x48, x3, arg4[5], arg5[5])
	var x49 uint32
	cmovznzU32(&x49, x3, arg4[6], arg5[6])
	var x50 uint32
	cmovznzU32(&x50, x3, arg4[7], arg5[7])
	var x51 uint32
	var x52 uint32
	x51, x52 = bits.Add32(x43, x43, uint32(0x0))
	var x53 uint32
	var x54 uint32
	x53, x54 = bits.Add32(x44, x44, uint32(uint1(x52)))
	var x55 uint32
	var x56 uint32
	x55, x56 = bits.Add32(x45, x45, uint32(uint1(x54)))
	var x57 uint32
	var x58 uint32
	x57, x58 = bits.Add32(x46, x46, uint32(uint1(x56)))
	var x59 uint32
	var x60 uint32
	x59, x60 = bits.Add32(x47, x47, uint32(uint1(x58)))
	var x61 uint32
	var x62 uint32
	x61, x62 = bits.Add32(x48, x48, uint32(uint1(x60)))
	var x63 uint32
	var x64 uint32
	x63, x64 = bits.Add32(x49, x49, uint32(uint1(x62)))
	var x65 uint32
	var x66 uint32
	x65, x66 = bits.Add32(x50, x50, uint32(uint1(x64)))
	var x67 uint32
	var x68 uint32
	x67, x68 = bits.Sub32(x51, 0xffffffff, uint32(0x0))
	var x69 uint32
	var x70 uint32
	x69, x70 = bits.Sub32(x53, 0xffffffff, uint32(uint1(x68)))
	var x71 uint32
	var x72 uint32
	x71, x72 = bits.Sub32(x55, 0xffffffff, uint32(uint1(x70)))
	var x73 uint32
	var x74 uint32
	x73, x74 = bits.Sub32(x57, uint32(0x0), uint32(uint1(x72)))
	var x75 uint32
	var x76 uint32
	x75, x76 = bits.Sub32(x59, uint32(0x0), uint32(uint1(x74)))
	var x77 uint32
	var x78 uint32
	x77, x78 = bits.Sub32(x61, uint32(0x0), uint32(uint1(x76)))
	var x79 uint32
	var x80 uint32
	x79, x80 = bits.Sub32(x63, uint32(0x1), uint32(uint1(x78)))
	var x81 uint32
	var x82 uint32
	x81, x82 = bits.Sub32(x65, 0xffffffff, uint32(uint1(x80)))
	var x84 uint32
	_, x84 = bits.Sub32(uint32(uint1(x66)), uint32(0x0), uint32(uint1(x82)))
	x85 := arg4[7]
	x86 := arg4[6]
	x87 := arg4[5]
	x88 := arg4[4]
	x89 := arg4[3]
	x90 := arg4[2]
	x91 := arg4[1]
	x92 := arg4[0]
	var x93 uint32
	var x94 uint32
	x93, x94 = bits.Sub32(uint32(0x0), x92, uint32(0x0))
	var x95 uint32
	var x96 uint32
	x95, x96 = bits.Sub32(uint32(0x0), x91, uint32(uint1(x94)))
	var x97 uint32
	var x98 uint32
	x97, x98 = bits.Sub32(uint32(0x0), x90, uint32(uint1(x96)))
	var x99 uint32
	var x100 uint32
	x99, x100 = bits.Sub32(uint32(0x0), x89, uint32(uint1(x98)))
	var x101 uint32
	var x102 uint32
	x101, x102 = bits.Sub32(uint32(0x0), x88, uint32(uint1(x100)))
	var x103 uint32
	var x104 uint32
	x103, x104 = bits.Sub32(uint32(0x0), x87, uint32(uint1(x102)))
	var x105 uint32
	var x106 uint32
	x105, x106 = bits.Sub32(uint32(0x0), x86, uint32(uint1(x104)))
	var x107 uint32
	var x108 uint32
	x107, x108 = bits.Sub32(uint32(0x0), x85, uint32(uint1(x106)))
	var x109 uint32
	cmovznzU32(&x109, uint1(x108), uint32(0x0), 0xffffffff)
	var x110 uint32
	var x111 uint32
	x110, x111 = bits.Add32(x93, x109, uint32(0x0))
	var x112 uint32
	var x113 uint32
	x112, x113 = bits.Add32(x95, x109, uint32(uint1(x111)))
	var x114 uint32
	var x115 uint32
	x114, x115 = bits.Add32(x97, x109, uint32(uint1(x113)))
	var x116 uint32
	var x117 uint32
	x116, x117 = bits.Add32(x99, uint32(0x0), uint32(uint1(x115)))
	var x118 uint32
	var x119 uint32
	x118, x119 = bits.Add32(x101, uint32(0x0), uint32(uint1(x117)))
	var x120 uint32
	var x121 uint32
	x120, x121 = bits.Add32(x103, uint32(0x0), uint32(uint1(x119)))
	var x122 uint32
	var x123 uint32
	x122, x123 = bits.Add32(x105, uint32((uint1(x109) & 0x1)), uint32(uint1(x121)))
	var x124 uint32
	x124, _ = bits.Add32(x107, x109, uint32(uint1(x123)))
	var x126 uint32
	cmovznzU32(&x126, x3, arg5[0], x110)
	var x127 uint32
	cmovznzU32(&x127, x3, arg5[1], x112)
	var x128 uint32
	cmovznzU32(&x128, x3, arg5[2], x114)
	var x129 uint32
	cmovznzU32(&x129, x3, arg5[3], x116)
	var x130 uint32
	cmovznzU32(&x130, x3, arg5[4], x118)
	var x131 uint32
	cmovznzU32(&x131, x3, arg5[5], x120)
	var x132 uint32
	cmovznzU32(&x132, x3, arg5[6], x122)
	var x133 uint32
	cmovznzU32(&x133, x3, arg5[7], x124)
	x134 := (uint1(x34) & 0x1)
	var x135 uint32
	cmovznzU32(&x135, x134, uint32(0x0), x7)
	var x136 uint32
	cmovznzU32(&x136, x134, uint32(0x0), x8)
	var x137 uint32
	cmovznzU32(&x137, x134, uint32(0x0), x9)
	var x138 uint32
	cmovznzU32(&x138, x134, uint32(0x0), x10)
	var x139 uint32
	cmovznzU32(&x139, x134, uint32(0x0), x11)
	var x140 uint32
	cmovznzU32(&x140, x134, uint32(0x0), x12)
	var x141 uint32
	cmovznzU32(&x141, x134, uint32(0x0), x13)
	var x142 uint32
	cmovznzU32(&x142, x134, uint32(0x0), x14)
	var x143 uint32
	cmovznzU32(&x143, x134, uint32(0x0), x15)
	var x144 uint32
	var x145 uint32
	x144, x145 = bits.Add32(x34, x135, uint32(0x0))
	var x146 uint32
	var x147 uint32
	x146, x147 = bits.Add32(x35, x136, uint32(uint1(x145)))
	var x148 uint32
	var x149 uint32
	x148, x149 = bits.Add32(x36, x137, uint32(uint1(x147)))
	var x150 uint32
	var x151 uint32
	x150, x151 = bits.Add32(x37, x138, uint32(uint1(x149)))
	var x152 uint32
	var x153 uint32
	x152, x153 = bits.Add32(x38, x139, uint32(uint1(x151)))
	var x154 uint32
	var x155 uint32
	x154, x155 = bits.Add32(x39, x140, uint32(uint1(x153)))
	var x156 uint32
	var x157 uint32
	x156, x157 = bits.Add32(x40, x141, uint32(uint1(x155)))
	var x158 uint32
	var x159 uint32
	x158, x159 = bits.Add32(x41, x142, uint32(uint1(x157)))
	var x160 uint32
	x160, _ = bits.Add32(x42, x143, uint32(uint1(x159)))
	var x162 uint32
	cmovznzU32(&x162, x134, uint32(0x0), x43)
	var x163 uint32
	cmovznzU32(&x163, x134, uint32(0x0), x44)
	var x164 uint32
	cmovznzU32(&x164, x134, uint32(0x0), x45)
	var x165 uint32
	cmovznzU32(&x165, x134, uint32(0x0), x46)
	var x166 uint32
	cmovznzU32(&x166, x134, uint32(0x0), x47)
	var x167 uint32
	cmovznzU32(&x167, x134, uint32(0x0), x48)
	var x168 uint32
	cmovznzU32(&x168, x134, uint32(0x0), x49)
	var x169 uint32
	cmovznzU32(&x169, x134, uint32(0x0), x50)
	var x170 uint32
	var x171 uint32
	x170, x171 = bits.Add32(x126, x162, uint32(0x0))
	var x172 uint32
	var x173 uint32
	x172, x173 = bits.Add32(x127, x163, uint32(uint1(x171)))
	var x174 uint32
	var x175 uint32
	x174, x175 = bits.Add32(x128, x164, uint32(uint1(x173)))
	var x176 uint32
	var x177 uint32
	x176, x177 = bits.Add32(x129, x165, uint32(uint1(x175)))
	var x178 uint32
	var x179 uint32
	x178, x179 = bits.Add32(x130, x166, uint32(uint1(x177)))
	var x180 uint32
	var x181 uint32
	x180, x181 = bits.Add32(x131, x167, uint32(uint1(x179)))
	var x182 uint32
	var x183 uint32
	x182, x183 = bits.Add32(x132, x168, uint32(uint1(x181)))
	var x184 uint32
	var x185 uint32
	x184, x185 = bits.Add32(x133, x169, uint32(uint1(x183)))
	var x186 uint32
	var x187 uint32
	x186, x187 = bits.Sub32(x170, 0xffffffff, uint32(0x0))
	var x188 uint32
	var x189 uint32
	x188, x189 = bits.Sub32(x172, 0xffffffff, uint32(uint1(x187)))
	var x190 uint32
	var x191 uint32
	x190, x191 = bits.Sub32(x174, 0xffffffff, uint32(uint1(x189)))
	var x192 uint32
	var x193 uint32
	x192, x193 = bits.Sub32(x176, uint32(0x0), uint32(uint1(x191)))
	var x194 uint32
	var x195 uint32
	x194, x195 = bits.Sub32(x178, uint32(0x0), uint32(uint1(x193)))
	var x196 uint32
	var x197 uint32
	x196, x197 = bits.Sub32(x180, uint32(0x0), uint32(uint1(x195)))
	var x198 uint32
	var x199 uint32
	x198, x199 = bits.Sub32(x182, uint32(0x1), uint32(uint1(x197)))
	var x200 uint32
	var x201 uint32
	x200, x201 = bits.Sub32(x184, 0xffffffff, uint32(uint1(x199)))
	var x203 uint32
	_, x203 = bits.Sub32(uint32(uint1(x185)), uint32(0x0), uint32(uint1(x201)))
	var x204 uint32
	x204, _ = bits.Add32(x6, uint32(0x1), uint32(0x0))
	x206 := ((x144 >> 1) | ((x146 << 31) & 0xffffffff))
	x207 := ((x146 >> 1) | ((x148 << 31) & 0xffffffff))
	x208 := ((x148 >> 1) | ((x150 << 31) & 0xffffffff))
	x209 := ((x150 >> 1) | ((x152 << 31) & 0xffffffff))
	x210 := ((x152 >> 1) | ((x154 << 31) & 0xffffffff))
	x211 := ((x154 >> 1) | ((x156 << 31) & 0xffffffff))
	x212 := ((x156 >> 1) | ((x158 << 31) & 0xffffffff))
	x213 := ((x158 >> 1) | ((x160 << 31) & 0xffffffff))
	x214 := ((x160 & 0x80000000) | (x160 >> 1))
	var x215 uint32
	cmovznzU32(&x215, uint1(x84), x67, x51)
	var x216 uint32
	cmovznzU32(&x216, uint1(x84), x69, x53)
	var x217 uint32
	cmovznzU32(&x217, uint1(x84), x71, x55)
	var x218 uint32
	cmovznzU32(&x218, uint1(x84), x73, x57)
	var x219 uint32
	cmovznzU32(&x219, uint1(x84), x75, x59)
	var x220 uint32
	cmovznzU32(&x220, uint1(x84), x77, x61)
	var x221 uint32
	cmovznzU32(&x221, uint1(x84), x79, x63)
	var x222 uint32
	cmovznzU32(&x222, uint1(x84), x81, x65)
	var x223 uint32
	cmovznzU32(&x223, uint1(x203), x186, x170)
	var x224 uint32
	cmovznzU32(&x224, uint1(x203), x188, x172)
	var x225 uint32
	cmovznzU32(&x225, uint1(x203), x190, x174)
	var x226 uint32
	cmovznzU32(&x226, uint1(x203), x192, x176)
	var x227 uint32
	cmovznzU32(&x227, uint1(x203), x194, x178)
	var x228 uint32
	cmovznzU32(&x228, uint1(x203), x196, x180)
	var x229 uint32
	cmovznzU32(&x229, uint1(x203), x198, x182)
	var x230 uint32
	cmovznzU32(&x230, uint1(x203), x200, x184)
	*out1 = x204
	out2[0] = x7
	out2[1] = x8
	out2[2] = x9
	out2[3] = x10
	out2[4] = x11
	out2[5] = x12
	out2[6] = x13
	out2[7] = x14
	out2[8] = x15
	out3[0] = x206
	out3[1] = x207
	out3[2] = x208
	out3[3] = x209
	out3[4] = x210
	out3[5] = x211
	out3[6] = x212
	out3[7] = x213
	out3[8] = x214
	out4[0] = x215
	out4[1] = x216
	out4[2] = x217
	out4[3] = x218
	out4[4] = x219
	out4[5] = x220
	out4[6] = x221
	out4[7] = x222
	out5[0] = x223
	out5[1] = x224
	out5[2] = x225
	out5[3] = x226
	out5[4] = x227
	out5[5] = x228
	out5[6] = x229
	out5[7] = x230
}

// DivstepPrecomp returns the precomputed value for Bernstein-Yang-inversion (in montgomery form).
//
// Postconditions:
//   eval (from_montgomery out1) = ⌊(m - 1) / 2⌋^(if ⌊log2 m⌋ + 1 < 46 then ⌊(49 * (⌊log2 m⌋ + 1) + 80) / 17⌋ else ⌊(49 * (⌊log2 m⌋ + 1) + 57) / 17⌋)
//   0 ≤ eval out1 < m
//
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func DivstepPrecomp(out1 *[8]uint32) {
	out1[0] = 0xb8000000
	out1[1] = 0x67ffffff
	out1[2] = 0x38000000
	out1[3] = 0xc0000000
	out1[4] = 0x7fffffff
	out1[5] = 0xd8000000
	out1[6] = 0xffffffff
	out1[7] = 0x2fffffff
}

// The function JumpdivstepPrecomp returns the precomputed value for the jump-version of Bernstein-Yang-inversion (in montgomery form).
//
// Postconditions:
//   eval (from_montgomery out1) = ⌊(m - 1) / 2⌋^(if ⌊log2 m⌋ + 1 < 46 then ⌊(49 * (⌊log2 m⌋ + 1) + 80) / 17⌋ else ⌊(49 * (⌊log2 m⌋ + 1) + 57) / 17⌋)
//   0 ≤ eval out1 < m
//
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func JumpdivstepPrecomp(out1 *[8]uint32) {
	out1[0] = 0x316565
	out1[1] = 0x5ad236bf
	out1[2] = 0x20311f0f
	out1[3] = 0x5989f9f3
	out1[4] = 0xad313b89
	out1[5] = 0x920ae1f1
	out1[6] = 0xe1758a9
	out1[7] = 0xee5b1013
}

// The function OuterLoopBody computes the body of the outer loop in BY-inversion (jumpdivstep version).
//
// Postconditions:
//   0 ≤ eval arg1 < m
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   arg4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   out2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   out3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
//   out4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]
func OuterLoopBody(out1 *[9]uint32, out2 *[9]uint32, out3 *[8]uint32, out4 *[8]uint32, arg1 *[9]uint32, arg2 *[9]uint32, arg3 *[8]uint32, arg4 *[8]uint32) {
	var x1 uint32
	cmovznzU32(&x1, (uint1(arg2[0]) & 0x1), uint32(0x1), 0xffffffff)
	var x2 uint32
	cmovznzU32(&x2, (uint1(arg2[0]) & 0x1), arg1[0], arg2[0])
	var x3 uint32
	cmovznzU32(&x3, (uint1(arg2[0]) & 0x1), arg2[0], (uint32((uint64((^arg1[0])) + uint64(0x1))) & 0xffffffff))
	var x4 uint1
	cmovznzU1(&x4, (uint1(arg2[0]) & 0x1), 0x1, 0x0)
	var x5 uint1
	cmovznzU1(&x5, (uint1(arg2[0]) & 0x1), 0x0, 0x1)
	var x6 uint32
	cmovznzU32(&x6, (uint1(arg2[0]) & 0x1), uint32(0x0), 0xffffffff)
	var x7 uint1
	cmovznzU1(&x7, (uint1(arg2[0]) & 0x1), 0x1, 0x0)
	var x8 uint32
	cmovznzU32(&x8, (uint1(x3) & 0x1), uint32(0x0), x2)
	var x9 uint1
	cmovznzU1(&x9, (uint1(x3) & 0x1), 0x0, x4)
	var x10 uint1
	cmovznzU1(&x10, (uint1(x3) & 0x1), 0x0, x5)
	x11 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x1))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x12 uint32
	cmovznzU32(&x12, (uint1((x11 >> 31)) & (uint1((((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x1))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x1))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x13 uint32
	cmovznzU32(&x13, (uint1((x11 >> 31)) & (uint1((((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) >> 1))) & 0x1)), x2, (((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) >> 1)))
	var x14 uint32
	cmovznzU32(&x14, (uint1((x11 >> 31)) & (uint1((((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) >> 1)), (uint32((uint64((^x2)) + uint64(0x1))) & 0xffffffff))
	var x15 uint32
	cmovznzU32(&x15, (uint1((x11 >> 31)) & (uint1((((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) >> 1))) & 0x1)), (uint32(x4) + uint32(x4)), (uint32((uint64(x6) + uint64(x9))) & 0xffffffff))
	var x16 uint32
	cmovznzU32(&x16, (uint1((x11 >> 31)) & (uint1((((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) >> 1))) & 0x1)), (uint32(x5) + uint32(x5)), (uint32(x7) + uint32(x10)))
	var x17 uint32
	cmovznzU32(&x17, (uint1((x11 >> 31)) & (uint1((((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x6) + uint64(x9))) & 0xffffffff), (uint32((uint64((^(uint32(x4) + uint32(x4)))) + uint64(0x1))) & 0xffffffff))
	var x18 uint32
	cmovznzU32(&x18, (uint1((x11 >> 31)) & (uint1((((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x3) + uint64(x8))) & 0xffffffff) >> 1))) & 0x1)), (uint32(x7) + uint32(x10)), (uint32((uint64((^(uint32(x5) + uint32(x5)))) + uint64(0x1))) & 0xffffffff))
	var x19 uint32
	cmovznzU32(&x19, (uint1(x14) & 0x1), uint32(0x0), x13)
	var x20 uint32
	cmovznzU32(&x20, (uint1(x14) & 0x1), uint32(0x0), x15)
	var x21 uint32
	cmovznzU32(&x21, (uint1(x14) & 0x1), uint32(0x0), x16)
	x22 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x12))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x23 uint32
	cmovznzU32(&x23, (uint1((x22 >> 31)) & (uint1((((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x12))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x12))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x24 uint32
	cmovznzU32(&x24, (uint1((x22 >> 31)) & (uint1((((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) >> 1))) & 0x1)), x13, (((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) >> 1)))
	var x25 uint32
	cmovznzU32(&x25, (uint1((x22 >> 31)) & (uint1((((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) >> 1)), (uint32((uint64((^x13)) + uint64(0x1))) & 0xffffffff))
	var x26 uint32
	cmovznzU32(&x26, (uint1((x22 >> 31)) & (uint1((((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x15) + uint64(x15))) & 0xffffffff), (uint32((uint64(x17) + uint64(x20))) & 0xffffffff))
	var x27 uint32
	cmovznzU32(&x27, (uint1((x22 >> 31)) & (uint1((((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) >> 1))) & 0x1)), (x16 + x16), (uint32((uint64(x18) + uint64(x21))) & 0xffffffff))
	var x28 uint32
	cmovznzU32(&x28, (uint1((x22 >> 31)) & (uint1((((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x17) + uint64(x20))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x15) + uint64(x15))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x29 uint32
	cmovznzU32(&x29, (uint1((x22 >> 31)) & (uint1((((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x14) + uint64(x19))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x18) + uint64(x21))) & 0xffffffff), (uint32((uint64((^(x16 + x16))) + uint64(0x1))) & 0xffffffff))
	var x30 uint32
	cmovznzU32(&x30, (uint1(x25) & 0x1), uint32(0x0), x24)
	var x31 uint32
	cmovznzU32(&x31, (uint1(x25) & 0x1), uint32(0x0), x26)
	var x32 uint32
	cmovznzU32(&x32, (uint1(x25) & 0x1), uint32(0x0), x27)
	x33 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x23))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x34 uint32
	cmovznzU32(&x34, (uint1((x33 >> 31)) & (uint1((((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x23))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x23))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x35 uint32
	cmovznzU32(&x35, (uint1((x33 >> 31)) & (uint1((((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) >> 1))) & 0x1)), x24, (((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) >> 1)))
	var x36 uint32
	cmovznzU32(&x36, (uint1((x33 >> 31)) & (uint1((((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) >> 1)), (uint32((uint64((^x24)) + uint64(0x1))) & 0xffffffff))
	var x37 uint32
	cmovznzU32(&x37, (uint1((x33 >> 31)) & (uint1((((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x26) + uint64(x26))) & 0xffffffff), (uint32((uint64(x28) + uint64(x31))) & 0xffffffff))
	var x38 uint32
	cmovznzU32(&x38, (uint1((x33 >> 31)) & (uint1((((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x27) + uint64(x27))) & 0xffffffff), (uint32((uint64(x29) + uint64(x32))) & 0xffffffff))
	var x39 uint32
	cmovznzU32(&x39, (uint1((x33 >> 31)) & (uint1((((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x28) + uint64(x31))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x26) + uint64(x26))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x40 uint32
	cmovznzU32(&x40, (uint1((x33 >> 31)) & (uint1((((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x25) + uint64(x30))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x29) + uint64(x32))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x27) + uint64(x27))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x41 uint32
	cmovznzU32(&x41, (uint1(x36) & 0x1), uint32(0x0), x35)
	var x42 uint32
	cmovznzU32(&x42, (uint1(x36) & 0x1), uint32(0x0), x37)
	var x43 uint32
	cmovznzU32(&x43, (uint1(x36) & 0x1), uint32(0x0), x38)
	x44 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x34))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x45 uint32
	cmovznzU32(&x45, (uint1((x44 >> 31)) & (uint1((((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x34))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x34))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x46 uint32
	cmovznzU32(&x46, (uint1((x44 >> 31)) & (uint1((((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) >> 1))) & 0x1)), x35, (((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) >> 1)))
	var x47 uint32
	cmovznzU32(&x47, (uint1((x44 >> 31)) & (uint1((((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) >> 1)), (uint32((uint64((^x35)) + uint64(0x1))) & 0xffffffff))
	var x48 uint32
	cmovznzU32(&x48, (uint1((x44 >> 31)) & (uint1((((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x37) + uint64(x37))) & 0xffffffff), (uint32((uint64(x39) + uint64(x42))) & 0xffffffff))
	var x49 uint32
	cmovznzU32(&x49, (uint1((x44 >> 31)) & (uint1((((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x38) + uint64(x38))) & 0xffffffff), (uint32((uint64(x40) + uint64(x43))) & 0xffffffff))
	var x50 uint32
	cmovznzU32(&x50, (uint1((x44 >> 31)) & (uint1((((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x39) + uint64(x42))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x37) + uint64(x37))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x51 uint32
	cmovznzU32(&x51, (uint1((x44 >> 31)) & (uint1((((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x36) + uint64(x41))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x40) + uint64(x43))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x38) + uint64(x38))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x52 uint32
	cmovznzU32(&x52, (uint1(x47) & 0x1), uint32(0x0), x46)
	var x53 uint32
	cmovznzU32(&x53, (uint1(x47) & 0x1), uint32(0x0), x48)
	var x54 uint32
	cmovznzU32(&x54, (uint1(x47) & 0x1), uint32(0x0), x49)
	x55 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x45))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x56 uint32
	cmovznzU32(&x56, (uint1((x55 >> 31)) & (uint1((((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x45))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x45))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x57 uint32
	cmovznzU32(&x57, (uint1((x55 >> 31)) & (uint1((((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) >> 1))) & 0x1)), x46, (((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) >> 1)))
	var x58 uint32
	cmovznzU32(&x58, (uint1((x55 >> 31)) & (uint1((((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) >> 1)), (uint32((uint64((^x46)) + uint64(0x1))) & 0xffffffff))
	var x59 uint32
	cmovznzU32(&x59, (uint1((x55 >> 31)) & (uint1((((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x48) + uint64(x48))) & 0xffffffff), (uint32((uint64(x50) + uint64(x53))) & 0xffffffff))
	var x60 uint32
	cmovznzU32(&x60, (uint1((x55 >> 31)) & (uint1((((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x49) + uint64(x49))) & 0xffffffff), (uint32((uint64(x51) + uint64(x54))) & 0xffffffff))
	var x61 uint32
	cmovznzU32(&x61, (uint1((x55 >> 31)) & (uint1((((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x50) + uint64(x53))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x48) + uint64(x48))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x62 uint32
	cmovznzU32(&x62, (uint1((x55 >> 31)) & (uint1((((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x47) + uint64(x52))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x51) + uint64(x54))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x49) + uint64(x49))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x63 uint32
	cmovznzU32(&x63, (uint1(x58) & 0x1), uint32(0x0), x57)
	var x64 uint32
	cmovznzU32(&x64, (uint1(x58) & 0x1), uint32(0x0), x59)
	var x65 uint32
	cmovznzU32(&x65, (uint1(x58) & 0x1), uint32(0x0), x60)
	x66 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x56))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x67 uint32
	cmovznzU32(&x67, (uint1((x66 >> 31)) & (uint1((((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x56))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x56))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x68 uint32
	cmovznzU32(&x68, (uint1((x66 >> 31)) & (uint1((((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) >> 1))) & 0x1)), x57, (((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) >> 1)))
	var x69 uint32
	cmovznzU32(&x69, (uint1((x66 >> 31)) & (uint1((((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) >> 1)), (uint32((uint64((^x57)) + uint64(0x1))) & 0xffffffff))
	var x70 uint32
	cmovznzU32(&x70, (uint1((x66 >> 31)) & (uint1((((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x59) + uint64(x59))) & 0xffffffff), (uint32((uint64(x61) + uint64(x64))) & 0xffffffff))
	var x71 uint32
	cmovznzU32(&x71, (uint1((x66 >> 31)) & (uint1((((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x60) + uint64(x60))) & 0xffffffff), (uint32((uint64(x62) + uint64(x65))) & 0xffffffff))
	var x72 uint32
	cmovznzU32(&x72, (uint1((x66 >> 31)) & (uint1((((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x61) + uint64(x64))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x59) + uint64(x59))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x73 uint32
	cmovznzU32(&x73, (uint1((x66 >> 31)) & (uint1((((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x58) + uint64(x63))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x62) + uint64(x65))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x60) + uint64(x60))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x74 uint32
	cmovznzU32(&x74, (uint1(x69) & 0x1), uint32(0x0), x68)
	var x75 uint32
	cmovznzU32(&x75, (uint1(x69) & 0x1), uint32(0x0), x70)
	var x76 uint32
	cmovznzU32(&x76, (uint1(x69) & 0x1), uint32(0x0), x71)
	x77 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x67))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x78 uint32
	cmovznzU32(&x78, (uint1((x77 >> 31)) & (uint1((((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x67))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x67))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x79 uint32
	cmovznzU32(&x79, (uint1((x77 >> 31)) & (uint1((((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) >> 1))) & 0x1)), x68, (((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) >> 1)))
	var x80 uint32
	cmovznzU32(&x80, (uint1((x77 >> 31)) & (uint1((((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) >> 1)), (uint32((uint64((^x68)) + uint64(0x1))) & 0xffffffff))
	var x81 uint32
	cmovznzU32(&x81, (uint1((x77 >> 31)) & (uint1((((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x70) + uint64(x70))) & 0xffffffff), (uint32((uint64(x72) + uint64(x75))) & 0xffffffff))
	var x82 uint32
	cmovznzU32(&x82, (uint1((x77 >> 31)) & (uint1((((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x71) + uint64(x71))) & 0xffffffff), (uint32((uint64(x73) + uint64(x76))) & 0xffffffff))
	var x83 uint32
	cmovznzU32(&x83, (uint1((x77 >> 31)) & (uint1((((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x72) + uint64(x75))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x70) + uint64(x70))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x84 uint32
	cmovznzU32(&x84, (uint1((x77 >> 31)) & (uint1((((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x69) + uint64(x74))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x73) + uint64(x76))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x71) + uint64(x71))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x85 uint32
	cmovznzU32(&x85, (uint1(x80) & 0x1), uint32(0x0), x79)
	var x86 uint32
	cmovznzU32(&x86, (uint1(x80) & 0x1), uint32(0x0), x81)
	var x87 uint32
	cmovznzU32(&x87, (uint1(x80) & 0x1), uint32(0x0), x82)
	x88 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x78))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x89 uint32
	cmovznzU32(&x89, (uint1((x88 >> 31)) & (uint1((((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x78))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x78))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x90 uint32
	cmovznzU32(&x90, (uint1((x88 >> 31)) & (uint1((((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) >> 1))) & 0x1)), x79, (((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) >> 1)))
	var x91 uint32
	cmovznzU32(&x91, (uint1((x88 >> 31)) & (uint1((((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) >> 1)), (uint32((uint64((^x79)) + uint64(0x1))) & 0xffffffff))
	var x92 uint32
	cmovznzU32(&x92, (uint1((x88 >> 31)) & (uint1((((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x81) + uint64(x81))) & 0xffffffff), (uint32((uint64(x83) + uint64(x86))) & 0xffffffff))
	var x93 uint32
	cmovznzU32(&x93, (uint1((x88 >> 31)) & (uint1((((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x82) + uint64(x82))) & 0xffffffff), (uint32((uint64(x84) + uint64(x87))) & 0xffffffff))
	var x94 uint32
	cmovznzU32(&x94, (uint1((x88 >> 31)) & (uint1((((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x83) + uint64(x86))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x81) + uint64(x81))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x95 uint32
	cmovznzU32(&x95, (uint1((x88 >> 31)) & (uint1((((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x80) + uint64(x85))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x84) + uint64(x87))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x82) + uint64(x82))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x96 uint32
	cmovznzU32(&x96, (uint1(x91) & 0x1), uint32(0x0), x90)
	var x97 uint32
	cmovznzU32(&x97, (uint1(x91) & 0x1), uint32(0x0), x92)
	var x98 uint32
	cmovznzU32(&x98, (uint1(x91) & 0x1), uint32(0x0), x93)
	x99 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x89))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x100 uint32
	cmovznzU32(&x100, (uint1((x99 >> 31)) & (uint1((((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x89))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x89))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x101 uint32
	cmovznzU32(&x101, (uint1((x99 >> 31)) & (uint1((((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) >> 1))) & 0x1)), x90, (((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) >> 1)))
	var x102 uint32
	cmovznzU32(&x102, (uint1((x99 >> 31)) & (uint1((((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) >> 1)), (uint32((uint64((^x90)) + uint64(0x1))) & 0xffffffff))
	var x103 uint32
	cmovznzU32(&x103, (uint1((x99 >> 31)) & (uint1((((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x92) + uint64(x92))) & 0xffffffff), (uint32((uint64(x94) + uint64(x97))) & 0xffffffff))
	var x104 uint32
	cmovznzU32(&x104, (uint1((x99 >> 31)) & (uint1((((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x93) + uint64(x93))) & 0xffffffff), (uint32((uint64(x95) + uint64(x98))) & 0xffffffff))
	var x105 uint32
	cmovznzU32(&x105, (uint1((x99 >> 31)) & (uint1((((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x94) + uint64(x97))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x92) + uint64(x92))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x106 uint32
	cmovznzU32(&x106, (uint1((x99 >> 31)) & (uint1((((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x91) + uint64(x96))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x95) + uint64(x98))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x93) + uint64(x93))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x107 uint32
	cmovznzU32(&x107, (uint1(x102) & 0x1), uint32(0x0), x101)
	var x108 uint32
	cmovznzU32(&x108, (uint1(x102) & 0x1), uint32(0x0), x103)
	var x109 uint32
	cmovznzU32(&x109, (uint1(x102) & 0x1), uint32(0x0), x104)
	x110 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x100))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x111 uint32
	cmovznzU32(&x111, (uint1((x110 >> 31)) & (uint1((((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x100))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x100))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x112 uint32
	cmovznzU32(&x112, (uint1((x110 >> 31)) & (uint1((((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) >> 1))) & 0x1)), x101, (((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) >> 1)))
	var x113 uint32
	cmovznzU32(&x113, (uint1((x110 >> 31)) & (uint1((((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) >> 1)), (uint32((uint64((^x101)) + uint64(0x1))) & 0xffffffff))
	var x114 uint32
	cmovznzU32(&x114, (uint1((x110 >> 31)) & (uint1((((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x103) + uint64(x103))) & 0xffffffff), (uint32((uint64(x105) + uint64(x108))) & 0xffffffff))
	var x115 uint32
	cmovznzU32(&x115, (uint1((x110 >> 31)) & (uint1((((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x104) + uint64(x104))) & 0xffffffff), (uint32((uint64(x106) + uint64(x109))) & 0xffffffff))
	var x116 uint32
	cmovznzU32(&x116, (uint1((x110 >> 31)) & (uint1((((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x105) + uint64(x108))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x103) + uint64(x103))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x117 uint32
	cmovznzU32(&x117, (uint1((x110 >> 31)) & (uint1((((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x102) + uint64(x107))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x106) + uint64(x109))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x104) + uint64(x104))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x118 uint32
	cmovznzU32(&x118, (uint1(x113) & 0x1), uint32(0x0), x112)
	var x119 uint32
	cmovznzU32(&x119, (uint1(x113) & 0x1), uint32(0x0), x114)
	var x120 uint32
	cmovznzU32(&x120, (uint1(x113) & 0x1), uint32(0x0), x115)
	x121 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x111))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x122 uint32
	cmovznzU32(&x122, (uint1((x121 >> 31)) & (uint1((((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x111))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x111))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x123 uint32
	cmovznzU32(&x123, (uint1((x121 >> 31)) & (uint1((((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) >> 1))) & 0x1)), x112, (((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) >> 1)))
	var x124 uint32
	cmovznzU32(&x124, (uint1((x121 >> 31)) & (uint1((((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) >> 1)), (uint32((uint64((^x112)) + uint64(0x1))) & 0xffffffff))
	var x125 uint32
	cmovznzU32(&x125, (uint1((x121 >> 31)) & (uint1((((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x114) + uint64(x114))) & 0xffffffff), (uint32((uint64(x116) + uint64(x119))) & 0xffffffff))
	var x126 uint32
	cmovznzU32(&x126, (uint1((x121 >> 31)) & (uint1((((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x115) + uint64(x115))) & 0xffffffff), (uint32((uint64(x117) + uint64(x120))) & 0xffffffff))
	var x127 uint32
	cmovznzU32(&x127, (uint1((x121 >> 31)) & (uint1((((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x116) + uint64(x119))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x114) + uint64(x114))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x128 uint32
	cmovznzU32(&x128, (uint1((x121 >> 31)) & (uint1((((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x113) + uint64(x118))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x117) + uint64(x120))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x115) + uint64(x115))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x129 uint32
	cmovznzU32(&x129, (uint1(x124) & 0x1), uint32(0x0), x123)
	var x130 uint32
	cmovznzU32(&x130, (uint1(x124) & 0x1), uint32(0x0), x125)
	var x131 uint32
	cmovznzU32(&x131, (uint1(x124) & 0x1), uint32(0x0), x126)
	x132 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x122))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x133 uint32
	cmovznzU32(&x133, (uint1((x132 >> 31)) & (uint1((((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x122))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x122))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x134 uint32
	cmovznzU32(&x134, (uint1((x132 >> 31)) & (uint1((((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) >> 1))) & 0x1)), x123, (((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) >> 1)))
	var x135 uint32
	cmovznzU32(&x135, (uint1((x132 >> 31)) & (uint1((((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) >> 1)), (uint32((uint64((^x123)) + uint64(0x1))) & 0xffffffff))
	var x136 uint32
	cmovznzU32(&x136, (uint1((x132 >> 31)) & (uint1((((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x125) + uint64(x125))) & 0xffffffff), (uint32((uint64(x127) + uint64(x130))) & 0xffffffff))
	var x137 uint32
	cmovznzU32(&x137, (uint1((x132 >> 31)) & (uint1((((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x126) + uint64(x126))) & 0xffffffff), (uint32((uint64(x128) + uint64(x131))) & 0xffffffff))
	var x138 uint32
	cmovznzU32(&x138, (uint1((x132 >> 31)) & (uint1((((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x127) + uint64(x130))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x125) + uint64(x125))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x139 uint32
	cmovznzU32(&x139, (uint1((x132 >> 31)) & (uint1((((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x124) + uint64(x129))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x128) + uint64(x131))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x126) + uint64(x126))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x140 uint32
	cmovznzU32(&x140, (uint1(x135) & 0x1), uint32(0x0), x134)
	var x141 uint32
	cmovznzU32(&x141, (uint1(x135) & 0x1), uint32(0x0), x136)
	var x142 uint32
	cmovznzU32(&x142, (uint1(x135) & 0x1), uint32(0x0), x137)
	x143 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x133))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x144 uint32
	cmovznzU32(&x144, (uint1((x143 >> 31)) & (uint1((((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x133))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x133))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x145 uint32
	cmovznzU32(&x145, (uint1((x143 >> 31)) & (uint1((((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) >> 1))) & 0x1)), x134, (((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) >> 1)))
	var x146 uint32
	cmovznzU32(&x146, (uint1((x143 >> 31)) & (uint1((((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) >> 1)), (uint32((uint64((^x134)) + uint64(0x1))) & 0xffffffff))
	var x147 uint32
	cmovznzU32(&x147, (uint1((x143 >> 31)) & (uint1((((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x136) + uint64(x136))) & 0xffffffff), (uint32((uint64(x138) + uint64(x141))) & 0xffffffff))
	var x148 uint32
	cmovznzU32(&x148, (uint1((x143 >> 31)) & (uint1((((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x137) + uint64(x137))) & 0xffffffff), (uint32((uint64(x139) + uint64(x142))) & 0xffffffff))
	var x149 uint32
	cmovznzU32(&x149, (uint1((x143 >> 31)) & (uint1((((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x138) + uint64(x141))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x136) + uint64(x136))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x150 uint32
	cmovznzU32(&x150, (uint1((x143 >> 31)) & (uint1((((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x135) + uint64(x140))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x139) + uint64(x142))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x137) + uint64(x137))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x151 uint32
	cmovznzU32(&x151, (uint1(x146) & 0x1), uint32(0x0), x145)
	var x152 uint32
	cmovznzU32(&x152, (uint1(x146) & 0x1), uint32(0x0), x147)
	var x153 uint32
	cmovznzU32(&x153, (uint1(x146) & 0x1), uint32(0x0), x148)
	x154 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x144))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x155 uint32
	cmovznzU32(&x155, (uint1((x154 >> 31)) & (uint1((((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x144))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x144))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x156 uint32
	cmovznzU32(&x156, (uint1((x154 >> 31)) & (uint1((((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) >> 1))) & 0x1)), x145, (((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) >> 1)))
	var x157 uint32
	cmovznzU32(&x157, (uint1((x154 >> 31)) & (uint1((((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) >> 1)), (uint32((uint64((^x145)) + uint64(0x1))) & 0xffffffff))
	var x158 uint32
	cmovznzU32(&x158, (uint1((x154 >> 31)) & (uint1((((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x147) + uint64(x147))) & 0xffffffff), (uint32((uint64(x149) + uint64(x152))) & 0xffffffff))
	var x159 uint32
	cmovznzU32(&x159, (uint1((x154 >> 31)) & (uint1((((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x148) + uint64(x148))) & 0xffffffff), (uint32((uint64(x150) + uint64(x153))) & 0xffffffff))
	var x160 uint32
	cmovznzU32(&x160, (uint1((x154 >> 31)) & (uint1((((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x149) + uint64(x152))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x147) + uint64(x147))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x161 uint32
	cmovznzU32(&x161, (uint1((x154 >> 31)) & (uint1((((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x146) + uint64(x151))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x150) + uint64(x153))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x148) + uint64(x148))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x162 uint32
	cmovznzU32(&x162, (uint1(x157) & 0x1), uint32(0x0), x156)
	var x163 uint32
	cmovznzU32(&x163, (uint1(x157) & 0x1), uint32(0x0), x158)
	var x164 uint32
	cmovznzU32(&x164, (uint1(x157) & 0x1), uint32(0x0), x159)
	x165 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x155))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x166 uint32
	cmovznzU32(&x166, (uint1((x165 >> 31)) & (uint1((((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x155))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x155))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x167 uint32
	cmovznzU32(&x167, (uint1((x165 >> 31)) & (uint1((((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) >> 1))) & 0x1)), x156, (((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) >> 1)))
	var x168 uint32
	cmovznzU32(&x168, (uint1((x165 >> 31)) & (uint1((((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) >> 1)), (uint32((uint64((^x156)) + uint64(0x1))) & 0xffffffff))
	var x169 uint32
	cmovznzU32(&x169, (uint1((x165 >> 31)) & (uint1((((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x158) + uint64(x158))) & 0xffffffff), (uint32((uint64(x160) + uint64(x163))) & 0xffffffff))
	var x170 uint32
	cmovznzU32(&x170, (uint1((x165 >> 31)) & (uint1((((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x159) + uint64(x159))) & 0xffffffff), (uint32((uint64(x161) + uint64(x164))) & 0xffffffff))
	var x171 uint32
	cmovznzU32(&x171, (uint1((x165 >> 31)) & (uint1((((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x160) + uint64(x163))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x158) + uint64(x158))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x172 uint32
	cmovznzU32(&x172, (uint1((x165 >> 31)) & (uint1((((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x157) + uint64(x162))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x161) + uint64(x164))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x159) + uint64(x159))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x173 uint32
	cmovznzU32(&x173, (uint1(x168) & 0x1), uint32(0x0), x167)
	var x174 uint32
	cmovznzU32(&x174, (uint1(x168) & 0x1), uint32(0x0), x169)
	var x175 uint32
	cmovznzU32(&x175, (uint1(x168) & 0x1), uint32(0x0), x170)
	x176 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x166))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x177 uint32
	cmovznzU32(&x177, (uint1((x176 >> 31)) & (uint1((((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x166))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x166))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x178 uint32
	cmovznzU32(&x178, (uint1((x176 >> 31)) & (uint1((((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) >> 1))) & 0x1)), x167, (((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) >> 1)))
	var x179 uint32
	cmovznzU32(&x179, (uint1((x176 >> 31)) & (uint1((((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) >> 1)), (uint32((uint64((^x167)) + uint64(0x1))) & 0xffffffff))
	var x180 uint32
	cmovznzU32(&x180, (uint1((x176 >> 31)) & (uint1((((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x169) + uint64(x169))) & 0xffffffff), (uint32((uint64(x171) + uint64(x174))) & 0xffffffff))
	var x181 uint32
	cmovznzU32(&x181, (uint1((x176 >> 31)) & (uint1((((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x170) + uint64(x170))) & 0xffffffff), (uint32((uint64(x172) + uint64(x175))) & 0xffffffff))
	var x182 uint32
	cmovznzU32(&x182, (uint1((x176 >> 31)) & (uint1((((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x171) + uint64(x174))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x169) + uint64(x169))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x183 uint32
	cmovznzU32(&x183, (uint1((x176 >> 31)) & (uint1((((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x168) + uint64(x173))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x172) + uint64(x175))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x170) + uint64(x170))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x184 uint32
	cmovznzU32(&x184, (uint1(x179) & 0x1), uint32(0x0), x178)
	var x185 uint32
	cmovznzU32(&x185, (uint1(x179) & 0x1), uint32(0x0), x180)
	var x186 uint32
	cmovznzU32(&x186, (uint1(x179) & 0x1), uint32(0x0), x181)
	x187 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x177))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x188 uint32
	cmovznzU32(&x188, (uint1((x187 >> 31)) & (uint1((((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x177))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x177))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x189 uint32
	cmovznzU32(&x189, (uint1((x187 >> 31)) & (uint1((((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) >> 1))) & 0x1)), x178, (((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) >> 1)))
	var x190 uint32
	cmovznzU32(&x190, (uint1((x187 >> 31)) & (uint1((((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) >> 1)), (uint32((uint64((^x178)) + uint64(0x1))) & 0xffffffff))
	var x191 uint32
	cmovznzU32(&x191, (uint1((x187 >> 31)) & (uint1((((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x180) + uint64(x180))) & 0xffffffff), (uint32((uint64(x182) + uint64(x185))) & 0xffffffff))
	var x192 uint32
	cmovznzU32(&x192, (uint1((x187 >> 31)) & (uint1((((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x181) + uint64(x181))) & 0xffffffff), (uint32((uint64(x183) + uint64(x186))) & 0xffffffff))
	var x193 uint32
	cmovznzU32(&x193, (uint1((x187 >> 31)) & (uint1((((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x182) + uint64(x185))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x180) + uint64(x180))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x194 uint32
	cmovznzU32(&x194, (uint1((x187 >> 31)) & (uint1((((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x179) + uint64(x184))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x183) + uint64(x186))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x181) + uint64(x181))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x195 uint32
	cmovznzU32(&x195, (uint1(x190) & 0x1), uint32(0x0), x189)
	var x196 uint32
	cmovznzU32(&x196, (uint1(x190) & 0x1), uint32(0x0), x191)
	var x197 uint32
	cmovznzU32(&x197, (uint1(x190) & 0x1), uint32(0x0), x192)
	x198 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x188))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x199 uint32
	cmovznzU32(&x199, (uint1((x198 >> 31)) & (uint1((((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x188))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x188))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x200 uint32
	cmovznzU32(&x200, (uint1((x198 >> 31)) & (uint1((((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) >> 1))) & 0x1)), x189, (((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) >> 1)))
	var x201 uint32
	cmovznzU32(&x201, (uint1((x198 >> 31)) & (uint1((((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) >> 1)), (uint32((uint64((^x189)) + uint64(0x1))) & 0xffffffff))
	var x202 uint32
	cmovznzU32(&x202, (uint1((x198 >> 31)) & (uint1((((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x191) + uint64(x191))) & 0xffffffff), (uint32((uint64(x193) + uint64(x196))) & 0xffffffff))
	var x203 uint32
	cmovznzU32(&x203, (uint1((x198 >> 31)) & (uint1((((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x192) + uint64(x192))) & 0xffffffff), (uint32((uint64(x194) + uint64(x197))) & 0xffffffff))
	var x204 uint32
	cmovznzU32(&x204, (uint1((x198 >> 31)) & (uint1((((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x193) + uint64(x196))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x191) + uint64(x191))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x205 uint32
	cmovznzU32(&x205, (uint1((x198 >> 31)) & (uint1((((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x190) + uint64(x195))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x194) + uint64(x197))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x192) + uint64(x192))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x206 uint32
	cmovznzU32(&x206, (uint1(x201) & 0x1), uint32(0x0), x200)
	var x207 uint32
	cmovznzU32(&x207, (uint1(x201) & 0x1), uint32(0x0), x202)
	var x208 uint32
	cmovznzU32(&x208, (uint1(x201) & 0x1), uint32(0x0), x203)
	x209 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x199))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x210 uint32
	cmovznzU32(&x210, (uint1((x209 >> 31)) & (uint1((((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x199))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x199))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x211 uint32
	cmovznzU32(&x211, (uint1((x209 >> 31)) & (uint1((((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) >> 1))) & 0x1)), x200, (((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) >> 1)))
	var x212 uint32
	cmovznzU32(&x212, (uint1((x209 >> 31)) & (uint1((((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) >> 1)), (uint32((uint64((^x200)) + uint64(0x1))) & 0xffffffff))
	var x213 uint32
	cmovznzU32(&x213, (uint1((x209 >> 31)) & (uint1((((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x202) + uint64(x202))) & 0xffffffff), (uint32((uint64(x204) + uint64(x207))) & 0xffffffff))
	var x214 uint32
	cmovznzU32(&x214, (uint1((x209 >> 31)) & (uint1((((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x203) + uint64(x203))) & 0xffffffff), (uint32((uint64(x205) + uint64(x208))) & 0xffffffff))
	var x215 uint32
	cmovznzU32(&x215, (uint1((x209 >> 31)) & (uint1((((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x204) + uint64(x207))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x202) + uint64(x202))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x216 uint32
	cmovznzU32(&x216, (uint1((x209 >> 31)) & (uint1((((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x201) + uint64(x206))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x205) + uint64(x208))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x203) + uint64(x203))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x217 uint32
	cmovznzU32(&x217, (uint1(x212) & 0x1), uint32(0x0), x211)
	var x218 uint32
	cmovznzU32(&x218, (uint1(x212) & 0x1), uint32(0x0), x213)
	var x219 uint32
	cmovznzU32(&x219, (uint1(x212) & 0x1), uint32(0x0), x214)
	x220 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x210))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x221 uint32
	cmovznzU32(&x221, (uint1((x220 >> 31)) & (uint1((((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x210))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x210))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x222 uint32
	cmovznzU32(&x222, (uint1((x220 >> 31)) & (uint1((((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) >> 1))) & 0x1)), x211, (((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) >> 1)))
	var x223 uint32
	cmovznzU32(&x223, (uint1((x220 >> 31)) & (uint1((((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) >> 1)), (uint32((uint64((^x211)) + uint64(0x1))) & 0xffffffff))
	var x224 uint32
	cmovznzU32(&x224, (uint1((x220 >> 31)) & (uint1((((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x213) + uint64(x213))) & 0xffffffff), (uint32((uint64(x215) + uint64(x218))) & 0xffffffff))
	var x225 uint32
	cmovznzU32(&x225, (uint1((x220 >> 31)) & (uint1((((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x214) + uint64(x214))) & 0xffffffff), (uint32((uint64(x216) + uint64(x219))) & 0xffffffff))
	var x226 uint32
	cmovznzU32(&x226, (uint1((x220 >> 31)) & (uint1((((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x215) + uint64(x218))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x213) + uint64(x213))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x227 uint32
	cmovznzU32(&x227, (uint1((x220 >> 31)) & (uint1((((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x212) + uint64(x217))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x216) + uint64(x219))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x214) + uint64(x214))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x228 uint32
	cmovznzU32(&x228, (uint1(x223) & 0x1), uint32(0x0), x222)
	var x229 uint32
	cmovznzU32(&x229, (uint1(x223) & 0x1), uint32(0x0), x224)
	var x230 uint32
	cmovznzU32(&x230, (uint1(x223) & 0x1), uint32(0x0), x225)
	x231 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x221))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x232 uint32
	cmovznzU32(&x232, (uint1((x231 >> 31)) & (uint1((((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x221))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x221))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x233 uint32
	cmovznzU32(&x233, (uint1((x231 >> 31)) & (uint1((((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) >> 1))) & 0x1)), x222, (((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) >> 1)))
	var x234 uint32
	cmovznzU32(&x234, (uint1((x231 >> 31)) & (uint1((((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) >> 1)), (uint32((uint64((^x222)) + uint64(0x1))) & 0xffffffff))
	var x235 uint32
	cmovznzU32(&x235, (uint1((x231 >> 31)) & (uint1((((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x224) + uint64(x224))) & 0xffffffff), (uint32((uint64(x226) + uint64(x229))) & 0xffffffff))
	var x236 uint32
	cmovznzU32(&x236, (uint1((x231 >> 31)) & (uint1((((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x225) + uint64(x225))) & 0xffffffff), (uint32((uint64(x227) + uint64(x230))) & 0xffffffff))
	var x237 uint32
	cmovznzU32(&x237, (uint1((x231 >> 31)) & (uint1((((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x226) + uint64(x229))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x224) + uint64(x224))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x238 uint32
	cmovznzU32(&x238, (uint1((x231 >> 31)) & (uint1((((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x223) + uint64(x228))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x227) + uint64(x230))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x225) + uint64(x225))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x239 uint32
	cmovznzU32(&x239, (uint1(x234) & 0x1), uint32(0x0), x233)
	var x240 uint32
	cmovznzU32(&x240, (uint1(x234) & 0x1), uint32(0x0), x235)
	var x241 uint32
	cmovznzU32(&x241, (uint1(x234) & 0x1), uint32(0x0), x236)
	x242 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x232))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x243 uint32
	cmovznzU32(&x243, (uint1((x242 >> 31)) & (uint1((((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x232))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x232))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x244 uint32
	cmovznzU32(&x244, (uint1((x242 >> 31)) & (uint1((((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) >> 1))) & 0x1)), x233, (((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) >> 1)))
	var x245 uint32
	cmovznzU32(&x245, (uint1((x242 >> 31)) & (uint1((((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) >> 1)), (uint32((uint64((^x233)) + uint64(0x1))) & 0xffffffff))
	var x246 uint32
	cmovznzU32(&x246, (uint1((x242 >> 31)) & (uint1((((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x235) + uint64(x235))) & 0xffffffff), (uint32((uint64(x237) + uint64(x240))) & 0xffffffff))
	var x247 uint32
	cmovznzU32(&x247, (uint1((x242 >> 31)) & (uint1((((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x236) + uint64(x236))) & 0xffffffff), (uint32((uint64(x238) + uint64(x241))) & 0xffffffff))
	var x248 uint32
	cmovznzU32(&x248, (uint1((x242 >> 31)) & (uint1((((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x237) + uint64(x240))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x235) + uint64(x235))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x249 uint32
	cmovznzU32(&x249, (uint1((x242 >> 31)) & (uint1((((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x234) + uint64(x239))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x238) + uint64(x241))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x236) + uint64(x236))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x250 uint32
	cmovznzU32(&x250, (uint1(x245) & 0x1), uint32(0x0), x244)
	var x251 uint32
	cmovznzU32(&x251, (uint1(x245) & 0x1), uint32(0x0), x246)
	var x252 uint32
	cmovznzU32(&x252, (uint1(x245) & 0x1), uint32(0x0), x247)
	x253 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x243))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x254 uint32
	cmovznzU32(&x254, (uint1((x253 >> 31)) & (uint1((((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x243))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x243))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x255 uint32
	cmovznzU32(&x255, (uint1((x253 >> 31)) & (uint1((((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) >> 1))) & 0x1)), x244, (((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) >> 1)))
	var x256 uint32
	cmovznzU32(&x256, (uint1((x253 >> 31)) & (uint1((((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) >> 1)), (uint32((uint64((^x244)) + uint64(0x1))) & 0xffffffff))
	var x257 uint32
	cmovznzU32(&x257, (uint1((x253 >> 31)) & (uint1((((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x246) + uint64(x246))) & 0xffffffff), (uint32((uint64(x248) + uint64(x251))) & 0xffffffff))
	var x258 uint32
	cmovznzU32(&x258, (uint1((x253 >> 31)) & (uint1((((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x247) + uint64(x247))) & 0xffffffff), (uint32((uint64(x249) + uint64(x252))) & 0xffffffff))
	var x259 uint32
	cmovznzU32(&x259, (uint1((x253 >> 31)) & (uint1((((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x248) + uint64(x251))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x246) + uint64(x246))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x260 uint32
	cmovznzU32(&x260, (uint1((x253 >> 31)) & (uint1((((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x245) + uint64(x250))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x249) + uint64(x252))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x247) + uint64(x247))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x261 uint32
	cmovznzU32(&x261, (uint1(x256) & 0x1), uint32(0x0), x255)
	var x262 uint32
	cmovznzU32(&x262, (uint1(x256) & 0x1), uint32(0x0), x257)
	var x263 uint32
	cmovznzU32(&x263, (uint1(x256) & 0x1), uint32(0x0), x258)
	x264 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x254))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x265 uint32
	cmovznzU32(&x265, (uint1((x264 >> 31)) & (uint1((((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x254))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x254))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x266 uint32
	cmovznzU32(&x266, (uint1((x264 >> 31)) & (uint1((((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) >> 1))) & 0x1)), x255, (((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) >> 1)))
	var x267 uint32
	cmovznzU32(&x267, (uint1((x264 >> 31)) & (uint1((((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) >> 1)), (uint32((uint64((^x255)) + uint64(0x1))) & 0xffffffff))
	var x268 uint32
	cmovznzU32(&x268, (uint1((x264 >> 31)) & (uint1((((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x257) + uint64(x257))) & 0xffffffff), (uint32((uint64(x259) + uint64(x262))) & 0xffffffff))
	var x269 uint32
	cmovznzU32(&x269, (uint1((x264 >> 31)) & (uint1((((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x258) + uint64(x258))) & 0xffffffff), (uint32((uint64(x260) + uint64(x263))) & 0xffffffff))
	var x270 uint32
	cmovznzU32(&x270, (uint1((x264 >> 31)) & (uint1((((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x259) + uint64(x262))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x257) + uint64(x257))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x271 uint32
	cmovznzU32(&x271, (uint1((x264 >> 31)) & (uint1((((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x256) + uint64(x261))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x260) + uint64(x263))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x258) + uint64(x258))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x272 uint32
	cmovznzU32(&x272, (uint1(x267) & 0x1), uint32(0x0), x266)
	var x273 uint32
	cmovznzU32(&x273, (uint1(x267) & 0x1), uint32(0x0), x268)
	var x274 uint32
	cmovznzU32(&x274, (uint1(x267) & 0x1), uint32(0x0), x269)
	x275 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x265))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x276 uint32
	cmovznzU32(&x276, (uint1((x275 >> 31)) & (uint1((((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x265))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x265))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x277 uint32
	cmovznzU32(&x277, (uint1((x275 >> 31)) & (uint1((((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) >> 1))) & 0x1)), x266, (((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) >> 1)))
	var x278 uint32
	cmovznzU32(&x278, (uint1((x275 >> 31)) & (uint1((((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) >> 1)), (uint32((uint64((^x266)) + uint64(0x1))) & 0xffffffff))
	var x279 uint32
	cmovznzU32(&x279, (uint1((x275 >> 31)) & (uint1((((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x268) + uint64(x268))) & 0xffffffff), (uint32((uint64(x270) + uint64(x273))) & 0xffffffff))
	var x280 uint32
	cmovznzU32(&x280, (uint1((x275 >> 31)) & (uint1((((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x269) + uint64(x269))) & 0xffffffff), (uint32((uint64(x271) + uint64(x274))) & 0xffffffff))
	var x281 uint32
	cmovznzU32(&x281, (uint1((x275 >> 31)) & (uint1((((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x270) + uint64(x273))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x268) + uint64(x268))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x282 uint32
	cmovznzU32(&x282, (uint1((x275 >> 31)) & (uint1((((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x267) + uint64(x272))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x271) + uint64(x274))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x269) + uint64(x269))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x283 uint32
	cmovznzU32(&x283, (uint1(x278) & 0x1), uint32(0x0), x277)
	var x284 uint32
	cmovznzU32(&x284, (uint1(x278) & 0x1), uint32(0x0), x279)
	var x285 uint32
	cmovznzU32(&x285, (uint1(x278) & 0x1), uint32(0x0), x280)
	x286 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x276))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x287 uint32
	cmovznzU32(&x287, (uint1((x286 >> 31)) & (uint1((((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x276))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x276))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x288 uint32
	cmovznzU32(&x288, (uint1((x286 >> 31)) & (uint1((((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) >> 1))) & 0x1)), x277, (((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) >> 1)))
	var x289 uint32
	cmovznzU32(&x289, (uint1((x286 >> 31)) & (uint1((((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) >> 1)), (uint32((uint64((^x277)) + uint64(0x1))) & 0xffffffff))
	var x290 uint32
	cmovznzU32(&x290, (uint1((x286 >> 31)) & (uint1((((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x279) + uint64(x279))) & 0xffffffff), (uint32((uint64(x281) + uint64(x284))) & 0xffffffff))
	var x291 uint32
	cmovznzU32(&x291, (uint1((x286 >> 31)) & (uint1((((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x280) + uint64(x280))) & 0xffffffff), (uint32((uint64(x282) + uint64(x285))) & 0xffffffff))
	var x292 uint32
	cmovznzU32(&x292, (uint1((x286 >> 31)) & (uint1((((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x281) + uint64(x284))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x279) + uint64(x279))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x293 uint32
	cmovznzU32(&x293, (uint1((x286 >> 31)) & (uint1((((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x278) + uint64(x283))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x282) + uint64(x285))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x280) + uint64(x280))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x294 uint32
	cmovznzU32(&x294, (uint1(x289) & 0x1), uint32(0x0), x288)
	var x295 uint32
	cmovznzU32(&x295, (uint1(x289) & 0x1), uint32(0x0), x290)
	var x296 uint32
	cmovznzU32(&x296, (uint1(x289) & 0x1), uint32(0x0), x291)
	x297 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x287))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x298 uint32
	cmovznzU32(&x298, (uint1((x297 >> 31)) & (uint1((((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x287))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x287))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x299 uint32
	cmovznzU32(&x299, (uint1((x297 >> 31)) & (uint1((((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) >> 1))) & 0x1)), x288, (((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) >> 1)))
	var x300 uint32
	cmovznzU32(&x300, (uint1((x297 >> 31)) & (uint1((((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) >> 1)), (uint32((uint64((^x288)) + uint64(0x1))) & 0xffffffff))
	var x301 uint32
	cmovznzU32(&x301, (uint1((x297 >> 31)) & (uint1((((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x290) + uint64(x290))) & 0xffffffff), (uint32((uint64(x292) + uint64(x295))) & 0xffffffff))
	var x302 uint32
	cmovznzU32(&x302, (uint1((x297 >> 31)) & (uint1((((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x291) + uint64(x291))) & 0xffffffff), (uint32((uint64(x293) + uint64(x296))) & 0xffffffff))
	var x303 uint32
	cmovznzU32(&x303, (uint1((x297 >> 31)) & (uint1((((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x292) + uint64(x295))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x290) + uint64(x290))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x304 uint32
	cmovznzU32(&x304, (uint1((x297 >> 31)) & (uint1((((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x289) + uint64(x294))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x293) + uint64(x296))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x291) + uint64(x291))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x305 uint32
	cmovznzU32(&x305, (uint1(x300) & 0x1), uint32(0x0), x299)
	var x306 uint32
	cmovznzU32(&x306, (uint1(x300) & 0x1), uint32(0x0), x301)
	var x307 uint32
	cmovznzU32(&x307, (uint1(x300) & 0x1), uint32(0x0), x302)
	x308 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x298))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x309 uint32
	cmovznzU32(&x309, (uint1((x308 >> 31)) & (uint1((((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(0x1) + uint64(x298))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(0x1) + uint64(x298))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x310 uint32
	cmovznzU32(&x310, (uint1((x308 >> 31)) & (uint1((((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) >> 1))) & 0x1)), x299, (((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) >> 1)))
	var x311 uint32
	cmovznzU32(&x311, (uint1((x308 >> 31)) & (uint1((((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) >> 1)), (uint32((uint64((^x299)) + uint64(0x1))) & 0xffffffff))
	var x312 uint32
	cmovznzU32(&x312, (uint1((x308 >> 31)) & (uint1((((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x301) + uint64(x301))) & 0xffffffff), (uint32((uint64(x303) + uint64(x306))) & 0xffffffff))
	var x313 uint32
	cmovznzU32(&x313, (uint1((x308 >> 31)) & (uint1((((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x302) + uint64(x302))) & 0xffffffff), (uint32((uint64(x304) + uint64(x307))) & 0xffffffff))
	var x314 uint32
	cmovznzU32(&x314, (uint1((x308 >> 31)) & (uint1((((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x303) + uint64(x306))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x301) + uint64(x301))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x315 uint32
	cmovznzU32(&x315, (uint1((x308 >> 31)) & (uint1((((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x300) + uint64(x305))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x304) + uint64(x307))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x302) + uint64(x302))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x316 uint32
	cmovznzU32(&x316, (uint1(x311) & 0x1), uint32(0x0), x310)
	var x317 uint32
	cmovznzU32(&x317, (uint1(x311) & 0x1), uint32(0x0), x312)
	var x318 uint32
	cmovznzU32(&x318, (uint1(x311) & 0x1), uint32(0x0), x313)
	x319 := (uint32((uint64((^(uint32((uint64(0x1) + uint64(x309))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	var x320 uint32
	cmovznzU32(&x320, (uint1((x319 >> 31)) & (uint1((((uint32((uint64(x311) + uint64(x316))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x311) + uint64(x316))) & 0xffffffff) >> 1))) & 0x1)), (((uint32((uint64(x311) + uint64(x316))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x311) + uint64(x316))) & 0xffffffff) >> 1)), (uint32((uint64((^x310)) + uint64(0x1))) & 0xffffffff))
	var x321 uint32
	cmovznzU32(&x321, (uint1((x319 >> 31)) & (uint1((((uint32((uint64(x311) + uint64(x316))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x311) + uint64(x316))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x312) + uint64(x312))) & 0xffffffff), (uint32((uint64(x314) + uint64(x317))) & 0xffffffff))
	var x322 uint32
	cmovznzU32(&x322, (uint1((x319 >> 31)) & (uint1((((uint32((uint64(x311) + uint64(x316))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x311) + uint64(x316))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x313) + uint64(x313))) & 0xffffffff), (uint32((uint64(x315) + uint64(x318))) & 0xffffffff))
	var x323 uint32
	cmovznzU32(&x323, (uint1((x319 >> 31)) & (uint1((((uint32((uint64(x311) + uint64(x316))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x311) + uint64(x316))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x314) + uint64(x317))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x312) + uint64(x312))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x324 uint32
	cmovznzU32(&x324, (uint1((x319 >> 31)) & (uint1((((uint32((uint64(x311) + uint64(x316))) & 0xffffffff) & 0x80000000) | ((uint32((uint64(x311) + uint64(x316))) & 0xffffffff) >> 1))) & 0x1)), (uint32((uint64(x315) + uint64(x318))) & 0xffffffff), (uint32((uint64((^(uint32((uint64(x313) + uint64(x313))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff))
	var x325 uint32
	cmovznzU32(&x325, (uint1(x320) & 0x1), uint32(0x0), x321)
	var x326 uint32
	cmovznzU32(&x326, (uint1(x320) & 0x1), uint32(0x0), x322)
	var x327 uint32
	cmovznzU32(&x327, uint1((arg1[8] >> 31)), uint32(0x0), 0xffffffff)
	var x328 uint32
	cmovznzU32(&x328, uint1(((uint32((uint64(x321) + uint64(x321))) & 0xffffffff) >> 31)), uint32(0x0), 0xffffffff)
	var x329 uint32
	_, x329 = bits.Mul32(x328, arg1[0])
	var x331 uint32
	_, x331 = bits.Mul32(x328, arg1[1])
	var x333 uint32
	var x334 uint32
	x334, x333 = bits.Mul32(x328, arg1[0])
	var x335 uint32
	_, x335 = bits.Mul32(x328, arg1[2])
	var x337 uint32
	var x338 uint32
	x338, x337 = bits.Mul32(x328, arg1[1])
	var x339 uint32
	var x340 uint32
	x340, x339 = bits.Mul32(x328, arg1[0])
	var x341 uint32
	_, x341 = bits.Mul32(x328, arg1[3])
	var x343 uint32
	var x344 uint32
	x344, x343 = bits.Mul32(x328, arg1[2])
	var x345 uint32
	var x346 uint32
	x346, x345 = bits.Mul32(x328, arg1[1])
	var x347 uint32
	var x348 uint32
	x348, x347 = bits.Mul32(x328, arg1[0])
	var x349 uint32
	_, x349 = bits.Mul32(x328, arg1[4])
	var x351 uint32
	var x352 uint32
	x352, x351 = bits.Mul32(x328, arg1[3])
	var x353 uint32
	var x354 uint32
	x354, x353 = bits.Mul32(x328, arg1[2])
	var x355 uint32
	var x356 uint32
	x356, x355 = bits.Mul32(x328, arg1[1])
	var x357 uint32
	var x358 uint32
	x358, x357 = bits.Mul32(x328, arg1[0])
	var x359 uint32
	_, x359 = bits.Mul32(x328, arg1[5])
	var x361 uint32
	var x362 uint32
	x362, x361 = bits.Mul32(x328, arg1[4])
	var x363 uint32
	var x364 uint32
	x364, x363 = bits.Mul32(x328, arg1[3])
	var x365 uint32
	var x366 uint32
	x366, x365 = bits.Mul32(x328, arg1[2])
	var x367 uint32
	var x368 uint32
	x368, x367 = bits.Mul32(x328, arg1[1])
	var x369 uint32
	var x370 uint32
	x370, x369 = bits.Mul32(x328, arg1[0])
	var x371 uint32
	_, x371 = bits.Mul32(x328, arg1[6])
	var x373 uint32
	var x374 uint32
	x374, x373 = bits.Mul32(x328, arg1[5])
	var x375 uint32
	var x376 uint32
	x376, x375 = bits.Mul32(x328, arg1[4])
	var x377 uint32
	var x378 uint32
	x378, x377 = bits.Mul32(x328, arg1[3])
	var x379 uint32
	var x380 uint32
	x380, x379 = bits.Mul32(x328, arg1[2])
	var x381 uint32
	var x382 uint32
	x382, x381 = bits.Mul32(x328, arg1[1])
	var x383 uint32
	var x384 uint32
	x384, x383 = bits.Mul32(x328, arg1[0])
	var x385 uint32
	_, x385 = bits.Mul32(x328, arg1[7])
	var x387 uint32
	var x388 uint32
	x388, x387 = bits.Mul32(x328, arg1[6])
	var x389 uint32
	var x390 uint32
	x390, x389 = bits.Mul32(x328, arg1[5])
	var x391 uint32
	var x392 uint32
	x392, x391 = bits.Mul32(x328, arg1[4])
	var x393 uint32
	var x394 uint32
	x394, x393 = bits.Mul32(x328, arg1[3])
	var x395 uint32
	var x396 uint32
	x396, x395 = bits.Mul32(x328, arg1[2])
	var x397 uint32
	var x398 uint32
	x398, x397 = bits.Mul32(x328, arg1[1])
	var x399 uint32
	var x400 uint32
	x400, x399 = bits.Mul32(x328, arg1[0])
	var x401 uint32
	_, x401 = bits.Mul32(x328, arg1[8])
	var x403 uint32
	var x404 uint32
	x404, x403 = bits.Mul32(x328, arg1[7])
	var x405 uint32
	var x406 uint32
	x406, x405 = bits.Mul32(x328, arg1[6])
	var x407 uint32
	var x408 uint32
	x408, x407 = bits.Mul32(x328, arg1[5])
	var x409 uint32
	var x410 uint32
	x410, x409 = bits.Mul32(x328, arg1[4])
	var x411 uint32
	var x412 uint32
	x412, x411 = bits.Mul32(x328, arg1[3])
	var x413 uint32
	var x414 uint32
	x414, x413 = bits.Mul32(x328, arg1[2])
	var x415 uint32
	var x416 uint32
	x416, x415 = bits.Mul32(x328, arg1[1])
	var x417 uint32
	var x418 uint32
	x418, x417 = bits.Mul32(x328, arg1[0])
	var x419 uint32
	_, x419 = bits.Mul32((uint32((uint64(x321) + uint64(x321))) & 0xffffffff), x327)
	var x421 uint32
	var x422 uint32
	x422, x421 = bits.Mul32((uint32((uint64(x321) + uint64(x321))) & 0xffffffff), arg1[8])
	var x423 uint32
	var x424 uint32
	x424, x423 = bits.Mul32((uint32((uint64(x321) + uint64(x321))) & 0xffffffff), arg1[7])
	var x425 uint32
	var x426 uint32
	x426, x425 = bits.Mul32((uint32((uint64(x321) + uint64(x321))) & 0xffffffff), arg1[6])
	var x427 uint32
	var x428 uint32
	x428, x427 = bits.Mul32((uint32((uint64(x321) + uint64(x321))) & 0xffffffff), arg1[5])
	var x429 uint32
	var x430 uint32
	x430, x429 = bits.Mul32((uint32((uint64(x321) + uint64(x321))) & 0xffffffff), arg1[4])
	var x431 uint32
	var x432 uint32
	x432, x431 = bits.Mul32((uint32((uint64(x321) + uint64(x321))) & 0xffffffff), arg1[3])
	var x433 uint32
	var x434 uint32
	x434, x433 = bits.Mul32((uint32((uint64(x321) + uint64(x321))) & 0xffffffff), arg1[2])
	var x435 uint32
	var x436 uint32
	x436, x435 = bits.Mul32((uint32((uint64(x321) + uint64(x321))) & 0xffffffff), arg1[1])
	var x437 uint32
	var x438 uint32
	x438, x437 = bits.Mul32((uint32((uint64(x321) + uint64(x321))) & 0xffffffff), arg1[0])
	var x439 uint32
	x439, _ = bits.Add32(x422, x329, uint32(0x0))
	var x441 uint32
	x441, _ = bits.Add32(x439, x331, uint32(0x0))
	var x443 uint32
	var x444 uint32
	x443, x444 = bits.Add32(x424, x333, uint32(0x0))
	var x445 uint32
	x445, _ = bits.Add32(x441, x334, uint32(uint1(x444)))
	var x447 uint32
	var x448 uint32
	x447, x448 = bits.Add32(x443, x337, uint32(0x0))
	var x449 uint32
	x449, _ = bits.Add32(x445, x335, uint32(uint1(x448)))
	var x451 uint32
	var x452 uint32
	x451, x452 = bits.Add32(x426, x339, uint32(0x0))
	var x453 uint32
	var x454 uint32
	x453, x454 = bits.Add32(x447, x340, uint32(uint1(x452)))
	var x455 uint32
	x455, _ = bits.Add32(x449, x338, uint32(uint1(x454)))
	var x457 uint32
	var x458 uint32
	x457, x458 = bits.Add32(x451, x345, uint32(0x0))
	var x459 uint32
	var x460 uint32
	x459, x460 = bits.Add32(x453, x343, uint32(uint1(x458)))
	var x461 uint32
	x461, _ = bits.Add32(x455, x341, uint32(uint1(x460)))
	var x463 uint32
	var x464 uint32
	x463, x464 = bits.Add32(x428, x347, uint32(0x0))
	var x465 uint32
	var x466 uint32
	x465, x466 = bits.Add32(x457, x348, uint32(uint1(x464)))
	var x467 uint32
	var x468 uint32
	x467, x468 = bits.Add32(x459, x346, uint32(uint1(x466)))
	var x469 uint32
	x469, _ = bits.Add32(x461, x344, uint32(uint1(x468)))
	var x471 uint32
	var x472 uint32
	x471, x472 = bits.Add32(x463, x355, uint32(0x0))
	var x473 uint32
	var x474 uint32
	x473, x474 = bits.Add32(x465, x353, uint32(uint1(x472)))
	var x475 uint32
	var x476 uint32
	x475, x476 = bits.Add32(x467, x351, uint32(uint1(x474)))
	var x477 uint32
	x477, _ = bits.Add32(x469, x349, uint32(uint1(x476)))
	var x479 uint32
	var x480 uint32
	x479, x480 = bits.Add32(x430, x357, uint32(0x0))
	var x481 uint32
	var x482 uint32
	x481, x482 = bits.Add32(x471, x358, uint32(uint1(x480)))
	var x483 uint32
	var x484 uint32
	x483, x484 = bits.Add32(x473, x356, uint32(uint1(x482)))
	var x485 uint32
	var x486 uint32
	x485, x486 = bits.Add32(x475, x354, uint32(uint1(x484)))
	var x487 uint32
	x487, _ = bits.Add32(x477, x352, uint32(uint1(x486)))
	var x489 uint32
	var x490 uint32
	x489, x490 = bits.Add32(x479, x367, uint32(0x0))
	var x491 uint32
	var x492 uint32
	x491, x492 = bits.Add32(x481, x365, uint32(uint1(x490)))
	var x493 uint32
	var x494 uint32
	x493, x494 = bits.Add32(x483, x363, uint32(uint1(x492)))
	var x495 uint32
	var x496 uint32
	x495, x496 = bits.Add32(x485, x361, uint32(uint1(x494)))
	var x497 uint32
	x497, _ = bits.Add32(x487, x359, uint32(uint1(x496)))
	var x499 uint32
	var x500 uint32
	x499, x500 = bits.Add32(x432, x369, uint32(0x0))
	var x501 uint32
	var x502 uint32
	x501, x502 = bits.Add32(x489, x370, uint32(uint1(x500)))
	var x503 uint32
	var x504 uint32
	x503, x504 = bits.Add32(x491, x368, uint32(uint1(x502)))
	var x505 uint32
	var x506 uint32
	x505, x506 = bits.Add32(x493, x366, uint32(uint1(x504)))
	var x507 uint32
	var x508 uint32
	x507, x508 = bits.Add32(x495, x364, uint32(uint1(x506)))
	var x509 uint32
	x509, _ = bits.Add32(x497, x362, uint32(uint1(x508)))
	var x511 uint32
	var x512 uint32
	x511, x512 = bits.Add32(x499, x381, uint32(0x0))
	var x513 uint32
	var x514 uint32
	x513, x514 = bits.Add32(x501, x379, uint32(uint1(x512)))
	var x515 uint32
	var x516 uint32
	x515, x516 = bits.Add32(x503, x377, uint32(uint1(x514)))
	var x517 uint32
	var x518 uint32
	x517, x518 = bits.Add32(x505, x375, uint32(uint1(x516)))
	var x519 uint32
	var x520 uint32
	x519, x520 = bits.Add32(x507, x373, uint32(uint1(x518)))
	var x521 uint32
	x521, _ = bits.Add32(x509, x371, uint32(uint1(x520)))
	var x523 uint32
	var x524 uint32
	x523, x524 = bits.Add32(x434, x383, uint32(0x0))
	var x525 uint32
	var x526 uint32
	x525, x526 = bits.Add32(x511, x384, uint32(uint1(x524)))
	var x527 uint32
	var x528 uint32
	x527, x528 = bits.Add32(x513, x382, uint32(uint1(x526)))
	var x529 uint32
	var x530 uint32
	x529, x530 = bits.Add32(x515, x380, uint32(uint1(x528)))
	var x531 uint32
	var x532 uint32
	x531, x532 = bits.Add32(x517, x378, uint32(uint1(x530)))
	var x533 uint32
	var x534 uint32
	x533, x534 = bits.Add32(x519, x376, uint32(uint1(x532)))
	var x535 uint32
	x535, _ = bits.Add32(x521, x374, uint32(uint1(x534)))
	var x537 uint32
	var x538 uint32
	x537, x538 = bits.Add32(x523, x397, uint32(0x0))
	var x539 uint32
	var x540 uint32
	x539, x540 = bits.Add32(x525, x395, uint32(uint1(x538)))
	var x541 uint32
	var x542 uint32
	x541, x542 = bits.Add32(x527, x393, uint32(uint1(x540)))
	var x543 uint32
	var x544 uint32
	x543, x544 = bits.Add32(x529, x391, uint32(uint1(x542)))
	var x545 uint32
	var x546 uint32
	x545, x546 = bits.Add32(x531, x389, uint32(uint1(x544)))
	var x547 uint32
	var x548 uint32
	x547, x548 = bits.Add32(x533, x387, uint32(uint1(x546)))
	var x549 uint32
	x549, _ = bits.Add32(x535, x385, uint32(uint1(x548)))
	var x551 uint32
	var x552 uint32
	x551, x552 = bits.Add32(x436, x399, uint32(0x0))
	var x553 uint32
	var x554 uint32
	x553, x554 = bits.Add32(x537, x400, uint32(uint1(x552)))
	var x555 uint32
	var x556 uint32
	x555, x556 = bits.Add32(x539, x398, uint32(uint1(x554)))
	var x557 uint32
	var x558 uint32
	x557, x558 = bits.Add32(x541, x396, uint32(uint1(x556)))
	var x559 uint32
	var x560 uint32
	x559, x560 = bits.Add32(x543, x394, uint32(uint1(x558)))
	var x561 uint32
	var x562 uint32
	x561, x562 = bits.Add32(x545, x392, uint32(uint1(x560)))
	var x563 uint32
	var x564 uint32
	x563, x564 = bits.Add32(x547, x390, uint32(uint1(x562)))
	var x565 uint32
	x565, _ = bits.Add32(x549, x388, uint32(uint1(x564)))
	var x567 uint32
	var x568 uint32
	x567, x568 = bits.Add32(x551, x415, uint32(0x0))
	var x569 uint32
	var x570 uint32
	x569, x570 = bits.Add32(x553, x413, uint32(uint1(x568)))
	var x571 uint32
	var x572 uint32
	x571, x572 = bits.Add32(x555, x411, uint32(uint1(x570)))
	var x573 uint32
	var x574 uint32
	x573, x574 = bits.Add32(x557, x409, uint32(uint1(x572)))
	var x575 uint32
	var x576 uint32
	x575, x576 = bits.Add32(x559, x407, uint32(uint1(x574)))
	var x577 uint32
	var x578 uint32
	x577, x578 = bits.Add32(x561, x405, uint32(uint1(x576)))
	var x579 uint32
	var x580 uint32
	x579, x580 = bits.Add32(x563, x403, uint32(uint1(x578)))
	var x581 uint32
	x581, _ = bits.Add32(x565, x401, uint32(uint1(x580)))
	var x583 uint32
	var x584 uint32
	x583, x584 = bits.Add32(x438, x417, uint32(0x0))
	var x585 uint32
	var x586 uint32
	x585, x586 = bits.Add32(x567, x418, uint32(uint1(x584)))
	var x587 uint32
	var x588 uint32
	x587, x588 = bits.Add32(x569, x416, uint32(uint1(x586)))
	var x589 uint32
	var x590 uint32
	x589, x590 = bits.Add32(x571, x414, uint32(uint1(x588)))
	var x591 uint32
	var x592 uint32
	x591, x592 = bits.Add32(x573, x412, uint32(uint1(x590)))
	var x593 uint32
	var x594 uint32
	x593, x594 = bits.Add32(x575, x410, uint32(uint1(x592)))
	var x595 uint32
	var x596 uint32
	x595, x596 = bits.Add32(x577, x408, uint32(uint1(x594)))
	var x597 uint32
	var x598 uint32
	x597, x598 = bits.Add32(x579, x406, uint32(uint1(x596)))
	var x599 uint32
	x599, _ = bits.Add32(x581, x404, uint32(uint1(x598)))
	var x601 uint32
	var x602 uint32
	x601, x602 = bits.Add32(x583, x435, uint32(0x0))
	var x603 uint32
	var x604 uint32
	x603, x604 = bits.Add32(x585, x433, uint32(uint1(x602)))
	var x605 uint32
	var x606 uint32
	x605, x606 = bits.Add32(x587, x431, uint32(uint1(x604)))
	var x607 uint32
	var x608 uint32
	x607, x608 = bits.Add32(x589, x429, uint32(uint1(x606)))
	var x609 uint32
	var x610 uint32
	x609, x610 = bits.Add32(x591, x427, uint32(uint1(x608)))
	var x611 uint32
	var x612 uint32
	x611, x612 = bits.Add32(x593, x425, uint32(uint1(x610)))
	var x613 uint32
	var x614 uint32
	x613, x614 = bits.Add32(x595, x423, uint32(uint1(x612)))
	var x615 uint32
	var x616 uint32
	x615, x616 = bits.Add32(x597, x421, uint32(uint1(x614)))
	var x617 uint32
	x617, _ = bits.Add32(x599, x419, uint32(uint1(x616)))
	var x619 uint32
	cmovznzU32(&x619, uint1((arg2[8] >> 31)), uint32(0x0), 0xffffffff)
	var x620 uint32
	cmovznzU32(&x620, uint1(((uint32((uint64(x322) + uint64(x322))) & 0xffffffff) >> 31)), uint32(0x0), 0xffffffff)
	var x621 uint32
	_, x621 = bits.Mul32(x620, arg2[0])
	var x623 uint32
	_, x623 = bits.Mul32(x620, arg2[1])
	var x625 uint32
	var x626 uint32
	x626, x625 = bits.Mul32(x620, arg2[0])
	var x627 uint32
	_, x627 = bits.Mul32(x620, arg2[2])
	var x629 uint32
	var x630 uint32
	x630, x629 = bits.Mul32(x620, arg2[1])
	var x631 uint32
	var x632 uint32
	x632, x631 = bits.Mul32(x620, arg2[0])
	var x633 uint32
	_, x633 = bits.Mul32(x620, arg2[3])
	var x635 uint32
	var x636 uint32
	x636, x635 = bits.Mul32(x620, arg2[2])
	var x637 uint32
	var x638 uint32
	x638, x637 = bits.Mul32(x620, arg2[1])
	var x639 uint32
	var x640 uint32
	x640, x639 = bits.Mul32(x620, arg2[0])
	var x641 uint32
	_, x641 = bits.Mul32(x620, arg2[4])
	var x643 uint32
	var x644 uint32
	x644, x643 = bits.Mul32(x620, arg2[3])
	var x645 uint32
	var x646 uint32
	x646, x645 = bits.Mul32(x620, arg2[2])
	var x647 uint32
	var x648 uint32
	x648, x647 = bits.Mul32(x620, arg2[1])
	var x649 uint32
	var x650 uint32
	x650, x649 = bits.Mul32(x620, arg2[0])
	var x651 uint32
	_, x651 = bits.Mul32(x620, arg2[5])
	var x653 uint32
	var x654 uint32
	x654, x653 = bits.Mul32(x620, arg2[4])
	var x655 uint32
	var x656 uint32
	x656, x655 = bits.Mul32(x620, arg2[3])
	var x657 uint32
	var x658 uint32
	x658, x657 = bits.Mul32(x620, arg2[2])
	var x659 uint32
	var x660 uint32
	x660, x659 = bits.Mul32(x620, arg2[1])
	var x661 uint32
	var x662 uint32
	x662, x661 = bits.Mul32(x620, arg2[0])
	var x663 uint32
	_, x663 = bits.Mul32(x620, arg2[6])
	var x665 uint32
	var x666 uint32
	x666, x665 = bits.Mul32(x620, arg2[5])
	var x667 uint32
	var x668 uint32
	x668, x667 = bits.Mul32(x620, arg2[4])
	var x669 uint32
	var x670 uint32
	x670, x669 = bits.Mul32(x620, arg2[3])
	var x671 uint32
	var x672 uint32
	x672, x671 = bits.Mul32(x620, arg2[2])
	var x673 uint32
	var x674 uint32
	x674, x673 = bits.Mul32(x620, arg2[1])
	var x675 uint32
	var x676 uint32
	x676, x675 = bits.Mul32(x620, arg2[0])
	var x677 uint32
	_, x677 = bits.Mul32(x620, arg2[7])
	var x679 uint32
	var x680 uint32
	x680, x679 = bits.Mul32(x620, arg2[6])
	var x681 uint32
	var x682 uint32
	x682, x681 = bits.Mul32(x620, arg2[5])
	var x683 uint32
	var x684 uint32
	x684, x683 = bits.Mul32(x620, arg2[4])
	var x685 uint32
	var x686 uint32
	x686, x685 = bits.Mul32(x620, arg2[3])
	var x687 uint32
	var x688 uint32
	x688, x687 = bits.Mul32(x620, arg2[2])
	var x689 uint32
	var x690 uint32
	x690, x689 = bits.Mul32(x620, arg2[1])
	var x691 uint32
	var x692 uint32
	x692, x691 = bits.Mul32(x620, arg2[0])
	var x693 uint32
	_, x693 = bits.Mul32(x620, arg2[8])
	var x695 uint32
	var x696 uint32
	x696, x695 = bits.Mul32(x620, arg2[7])
	var x697 uint32
	var x698 uint32
	x698, x697 = bits.Mul32(x620, arg2[6])
	var x699 uint32
	var x700 uint32
	x700, x699 = bits.Mul32(x620, arg2[5])
	var x701 uint32
	var x702 uint32
	x702, x701 = bits.Mul32(x620, arg2[4])
	var x703 uint32
	var x704 uint32
	x704, x703 = bits.Mul32(x620, arg2[3])
	var x705 uint32
	var x706 uint32
	x706, x705 = bits.Mul32(x620, arg2[2])
	var x707 uint32
	var x708 uint32
	x708, x707 = bits.Mul32(x620, arg2[1])
	var x709 uint32
	var x710 uint32
	x710, x709 = bits.Mul32(x620, arg2[0])
	var x711 uint32
	_, x711 = bits.Mul32((uint32((uint64(x322) + uint64(x322))) & 0xffffffff), x619)
	var x713 uint32
	var x714 uint32
	x714, x713 = bits.Mul32((uint32((uint64(x322) + uint64(x322))) & 0xffffffff), arg2[8])
	var x715 uint32
	var x716 uint32
	x716, x715 = bits.Mul32((uint32((uint64(x322) + uint64(x322))) & 0xffffffff), arg2[7])
	var x717 uint32
	var x718 uint32
	x718, x717 = bits.Mul32((uint32((uint64(x322) + uint64(x322))) & 0xffffffff), arg2[6])
	var x719 uint32
	var x720 uint32
	x720, x719 = bits.Mul32((uint32((uint64(x322) + uint64(x322))) & 0xffffffff), arg2[5])
	var x721 uint32
	var x722 uint32
	x722, x721 = bits.Mul32((uint32((uint64(x322) + uint64(x322))) & 0xffffffff), arg2[4])
	var x723 uint32
	var x724 uint32
	x724, x723 = bits.Mul32((uint32((uint64(x322) + uint64(x322))) & 0xffffffff), arg2[3])
	var x725 uint32
	var x726 uint32
	x726, x725 = bits.Mul32((uint32((uint64(x322) + uint64(x322))) & 0xffffffff), arg2[2])
	var x727 uint32
	var x728 uint32
	x728, x727 = bits.Mul32((uint32((uint64(x322) + uint64(x322))) & 0xffffffff), arg2[1])
	var x729 uint32
	var x730 uint32
	x730, x729 = bits.Mul32((uint32((uint64(x322) + uint64(x322))) & 0xffffffff), arg2[0])
	var x731 uint32
	x731, _ = bits.Add32(x714, x621, uint32(0x0))
	var x733 uint32
	x733, _ = bits.Add32(x731, x623, uint32(0x0))
	var x735 uint32
	var x736 uint32
	x735, x736 = bits.Add32(x716, x625, uint32(0x0))
	var x737 uint32
	x737, _ = bits.Add32(x733, x626, uint32(uint1(x736)))
	var x739 uint32
	var x740 uint32
	x739, x740 = bits.Add32(x735, x629, uint32(0x0))
	var x741 uint32
	x741, _ = bits.Add32(x737, x627, uint32(uint1(x740)))
	var x743 uint32
	var x744 uint32
	x743, x744 = bits.Add32(x718, x631, uint32(0x0))
	var x745 uint32
	var x746 uint32
	x745, x746 = bits.Add32(x739, x632, uint32(uint1(x744)))
	var x747 uint32
	x747, _ = bits.Add32(x741, x630, uint32(uint1(x746)))
	var x749 uint32
	var x750 uint32
	x749, x750 = bits.Add32(x743, x637, uint32(0x0))
	var x751 uint32
	var x752 uint32
	x751, x752 = bits.Add32(x745, x635, uint32(uint1(x750)))
	var x753 uint32
	x753, _ = bits.Add32(x747, x633, uint32(uint1(x752)))
	var x755 uint32
	var x756 uint32
	x755, x756 = bits.Add32(x720, x639, uint32(0x0))
	var x757 uint32
	var x758 uint32
	x757, x758 = bits.Add32(x749, x640, uint32(uint1(x756)))
	var x759 uint32
	var x760 uint32
	x759, x760 = bits.Add32(x751, x638, uint32(uint1(x758)))
	var x761 uint32
	x761, _ = bits.Add32(x753, x636, uint32(uint1(x760)))
	var x763 uint32
	var x764 uint32
	x763, x764 = bits.Add32(x755, x647, uint32(0x0))
	var x765 uint32
	var x766 uint32
	x765, x766 = bits.Add32(x757, x645, uint32(uint1(x764)))
	var x767 uint32
	var x768 uint32
	x767, x768 = bits.Add32(x759, x643, uint32(uint1(x766)))
	var x769 uint32
	x769, _ = bits.Add32(x761, x641, uint32(uint1(x768)))
	var x771 uint32
	var x772 uint32
	x771, x772 = bits.Add32(x722, x649, uint32(0x0))
	var x773 uint32
	var x774 uint32
	x773, x774 = bits.Add32(x763, x650, uint32(uint1(x772)))
	var x775 uint32
	var x776 uint32
	x775, x776 = bits.Add32(x765, x648, uint32(uint1(x774)))
	var x777 uint32
	var x778 uint32
	x777, x778 = bits.Add32(x767, x646, uint32(uint1(x776)))
	var x779 uint32
	x779, _ = bits.Add32(x769, x644, uint32(uint1(x778)))
	var x781 uint32
	var x782 uint32
	x781, x782 = bits.Add32(x771, x659, uint32(0x0))
	var x783 uint32
	var x784 uint32
	x783, x784 = bits.Add32(x773, x657, uint32(uint1(x782)))
	var x785 uint32
	var x786 uint32
	x785, x786 = bits.Add32(x775, x655, uint32(uint1(x784)))
	var x787 uint32
	var x788 uint32
	x787, x788 = bits.Add32(x777, x653, uint32(uint1(x786)))
	var x789 uint32
	x789, _ = bits.Add32(x779, x651, uint32(uint1(x788)))
	var x791 uint32
	var x792 uint32
	x791, x792 = bits.Add32(x724, x661, uint32(0x0))
	var x793 uint32
	var x794 uint32
	x793, x794 = bits.Add32(x781, x662, uint32(uint1(x792)))
	var x795 uint32
	var x796 uint32
	x795, x796 = bits.Add32(x783, x660, uint32(uint1(x794)))
	var x797 uint32
	var x798 uint32
	x797, x798 = bits.Add32(x785, x658, uint32(uint1(x796)))
	var x799 uint32
	var x800 uint32
	x799, x800 = bits.Add32(x787, x656, uint32(uint1(x798)))
	var x801 uint32
	x801, _ = bits.Add32(x789, x654, uint32(uint1(x800)))
	var x803 uint32
	var x804 uint32
	x803, x804 = bits.Add32(x791, x673, uint32(0x0))
	var x805 uint32
	var x806 uint32
	x805, x806 = bits.Add32(x793, x671, uint32(uint1(x804)))
	var x807 uint32
	var x808 uint32
	x807, x808 = bits.Add32(x795, x669, uint32(uint1(x806)))
	var x809 uint32
	var x810 uint32
	x809, x810 = bits.Add32(x797, x667, uint32(uint1(x808)))
	var x811 uint32
	var x812 uint32
	x811, x812 = bits.Add32(x799, x665, uint32(uint1(x810)))
	var x813 uint32
	x813, _ = bits.Add32(x801, x663, uint32(uint1(x812)))
	var x815 uint32
	var x816 uint32
	x815, x816 = bits.Add32(x726, x675, uint32(0x0))
	var x817 uint32
	var x818 uint32
	x817, x818 = bits.Add32(x803, x676, uint32(uint1(x816)))
	var x819 uint32
	var x820 uint32
	x819, x820 = bits.Add32(x805, x674, uint32(uint1(x818)))
	var x821 uint32
	var x822 uint32
	x821, x822 = bits.Add32(x807, x672, uint32(uint1(x820)))
	var x823 uint32
	var x824 uint32
	x823, x824 = bits.Add32(x809, x670, uint32(uint1(x822)))
	var x825 uint32
	var x826 uint32
	x825, x826 = bits.Add32(x811, x668, uint32(uint1(x824)))
	var x827 uint32
	x827, _ = bits.Add32(x813, x666, uint32(uint1(x826)))
	var x829 uint32
	var x830 uint32
	x829, x830 = bits.Add32(x815, x689, uint32(0x0))
	var x831 uint32
	var x832 uint32
	x831, x832 = bits.Add32(x817, x687, uint32(uint1(x830)))
	var x833 uint32
	var x834 uint32
	x833, x834 = bits.Add32(x819, x685, uint32(uint1(x832)))
	var x835 uint32
	var x836 uint32
	x835, x836 = bits.Add32(x821, x683, uint32(uint1(x834)))
	var x837 uint32
	var x838 uint32
	x837, x838 = bits.Add32(x823, x681, uint32(uint1(x836)))
	var x839 uint32
	var x840 uint32
	x839, x840 = bits.Add32(x825, x679, uint32(uint1(x838)))
	var x841 uint32
	x841, _ = bits.Add32(x827, x677, uint32(uint1(x840)))
	var x843 uint32
	var x844 uint32
	x843, x844 = bits.Add32(x728, x691, uint32(0x0))
	var x845 uint32
	var x846 uint32
	x845, x846 = bits.Add32(x829, x692, uint32(uint1(x844)))
	var x847 uint32
	var x848 uint32
	x847, x848 = bits.Add32(x831, x690, uint32(uint1(x846)))
	var x849 uint32
	var x850 uint32
	x849, x850 = bits.Add32(x833, x688, uint32(uint1(x848)))
	var x851 uint32
	var x852 uint32
	x851, x852 = bits.Add32(x835, x686, uint32(uint1(x850)))
	var x853 uint32
	var x854 uint32
	x853, x854 = bits.Add32(x837, x684, uint32(uint1(x852)))
	var x855 uint32
	var x856 uint32
	x855, x856 = bits.Add32(x839, x682, uint32(uint1(x854)))
	var x857 uint32
	x857, _ = bits.Add32(x841, x680, uint32(uint1(x856)))
	var x859 uint32
	var x860 uint32
	x859, x860 = bits.Add32(x843, x707, uint32(0x0))
	var x861 uint32
	var x862 uint32
	x861, x862 = bits.Add32(x845, x705, uint32(uint1(x860)))
	var x863 uint32
	var x864 uint32
	x863, x864 = bits.Add32(x847, x703, uint32(uint1(x862)))
	var x865 uint32
	var x866 uint32
	x865, x866 = bits.Add32(x849, x701, uint32(uint1(x864)))
	var x867 uint32
	var x868 uint32
	x867, x868 = bits.Add32(x851, x699, uint32(uint1(x866)))
	var x869 uint32
	var x870 uint32
	x869, x870 = bits.Add32(x853, x697, uint32(uint1(x868)))
	var x871 uint32
	var x872 uint32
	x871, x872 = bits.Add32(x855, x695, uint32(uint1(x870)))
	var x873 uint32
	x873, _ = bits.Add32(x857, x693, uint32(uint1(x872)))
	var x875 uint32
	var x876 uint32
	x875, x876 = bits.Add32(x730, x709, uint32(0x0))
	var x877 uint32
	var x878 uint32
	x877, x878 = bits.Add32(x859, x710, uint32(uint1(x876)))
	var x879 uint32
	var x880 uint32
	x879, x880 = bits.Add32(x861, x708, uint32(uint1(x878)))
	var x881 uint32
	var x882 uint32
	x881, x882 = bits.Add32(x863, x706, uint32(uint1(x880)))
	var x883 uint32
	var x884 uint32
	x883, x884 = bits.Add32(x865, x704, uint32(uint1(x882)))
	var x885 uint32
	var x886 uint32
	x885, x886 = bits.Add32(x867, x702, uint32(uint1(x884)))
	var x887 uint32
	var x888 uint32
	x887, x888 = bits.Add32(x869, x700, uint32(uint1(x886)))
	var x889 uint32
	var x890 uint32
	x889, x890 = bits.Add32(x871, x698, uint32(uint1(x888)))
	var x891 uint32
	x891, _ = bits.Add32(x873, x696, uint32(uint1(x890)))
	var x893 uint32
	var x894 uint32
	x893, x894 = bits.Add32(x875, x727, uint32(0x0))
	var x895 uint32
	var x896 uint32
	x895, x896 = bits.Add32(x877, x725, uint32(uint1(x894)))
	var x897 uint32
	var x898 uint32
	x897, x898 = bits.Add32(x879, x723, uint32(uint1(x896)))
	var x899 uint32
	var x900 uint32
	x899, x900 = bits.Add32(x881, x721, uint32(uint1(x898)))
	var x901 uint32
	var x902 uint32
	x901, x902 = bits.Add32(x883, x719, uint32(uint1(x900)))
	var x903 uint32
	var x904 uint32
	x903, x904 = bits.Add32(x885, x717, uint32(uint1(x902)))
	var x905 uint32
	var x906 uint32
	x905, x906 = bits.Add32(x887, x715, uint32(uint1(x904)))
	var x907 uint32
	var x908 uint32
	x907, x908 = bits.Add32(x889, x713, uint32(uint1(x906)))
	var x909 uint32
	x909, _ = bits.Add32(x891, x711, uint32(uint1(x908)))
	var x911 uint32
	cmovznzU32(&x911, uint1((arg1[8] >> 31)), uint32(0x0), 0xffffffff)
	var x912 uint32
	cmovznzU32(&x912, uint1(((uint32((uint64(x323) + uint64(x325))) & 0xffffffff) >> 31)), uint32(0x0), 0xffffffff)
	var x913 uint32
	_, x913 = bits.Mul32(x912, arg1[0])
	var x915 uint32
	_, x915 = bits.Mul32(x912, arg1[1])
	var x917 uint32
	var x918 uint32
	x918, x917 = bits.Mul32(x912, arg1[0])
	var x919 uint32
	_, x919 = bits.Mul32(x912, arg1[2])
	var x921 uint32
	var x922 uint32
	x922, x921 = bits.Mul32(x912, arg1[1])
	var x923 uint32
	var x924 uint32
	x924, x923 = bits.Mul32(x912, arg1[0])
	var x925 uint32
	_, x925 = bits.Mul32(x912, arg1[3])
	var x927 uint32
	var x928 uint32
	x928, x927 = bits.Mul32(x912, arg1[2])
	var x929 uint32
	var x930 uint32
	x930, x929 = bits.Mul32(x912, arg1[1])
	var x931 uint32
	var x932 uint32
	x932, x931 = bits.Mul32(x912, arg1[0])
	var x933 uint32
	_, x933 = bits.Mul32(x912, arg1[4])
	var x935 uint32
	var x936 uint32
	x936, x935 = bits.Mul32(x912, arg1[3])
	var x937 uint32
	var x938 uint32
	x938, x937 = bits.Mul32(x912, arg1[2])
	var x939 uint32
	var x940 uint32
	x940, x939 = bits.Mul32(x912, arg1[1])
	var x941 uint32
	var x942 uint32
	x942, x941 = bits.Mul32(x912, arg1[0])
	var x943 uint32
	_, x943 = bits.Mul32(x912, arg1[5])
	var x945 uint32
	var x946 uint32
	x946, x945 = bits.Mul32(x912, arg1[4])
	var x947 uint32
	var x948 uint32
	x948, x947 = bits.Mul32(x912, arg1[3])
	var x949 uint32
	var x950 uint32
	x950, x949 = bits.Mul32(x912, arg1[2])
	var x951 uint32
	var x952 uint32
	x952, x951 = bits.Mul32(x912, arg1[1])
	var x953 uint32
	var x954 uint32
	x954, x953 = bits.Mul32(x912, arg1[0])
	var x955 uint32
	_, x955 = bits.Mul32(x912, arg1[6])
	var x957 uint32
	var x958 uint32
	x958, x957 = bits.Mul32(x912, arg1[5])
	var x959 uint32
	var x960 uint32
	x960, x959 = bits.Mul32(x912, arg1[4])
	var x961 uint32
	var x962 uint32
	x962, x961 = bits.Mul32(x912, arg1[3])
	var x963 uint32
	var x964 uint32
	x964, x963 = bits.Mul32(x912, arg1[2])
	var x965 uint32
	var x966 uint32
	x966, x965 = bits.Mul32(x912, arg1[1])
	var x967 uint32
	var x968 uint32
	x968, x967 = bits.Mul32(x912, arg1[0])
	var x969 uint32
	_, x969 = bits.Mul32(x912, arg1[7])
	var x971 uint32
	var x972 uint32
	x972, x971 = bits.Mul32(x912, arg1[6])
	var x973 uint32
	var x974 uint32
	x974, x973 = bits.Mul32(x912, arg1[5])
	var x975 uint32
	var x976 uint32
	x976, x975 = bits.Mul32(x912, arg1[4])
	var x977 uint32
	var x978 uint32
	x978, x977 = bits.Mul32(x912, arg1[3])
	var x979 uint32
	var x980 uint32
	x980, x979 = bits.Mul32(x912, arg1[2])
	var x981 uint32
	var x982 uint32
	x982, x981 = bits.Mul32(x912, arg1[1])
	var x983 uint32
	var x984 uint32
	x984, x983 = bits.Mul32(x912, arg1[0])
	var x985 uint32
	_, x985 = bits.Mul32(x912, arg1[8])
	var x987 uint32
	var x988 uint32
	x988, x987 = bits.Mul32(x912, arg1[7])
	var x989 uint32
	var x990 uint32
	x990, x989 = bits.Mul32(x912, arg1[6])
	var x991 uint32
	var x992 uint32
	x992, x991 = bits.Mul32(x912, arg1[5])
	var x993 uint32
	var x994 uint32
	x994, x993 = bits.Mul32(x912, arg1[4])
	var x995 uint32
	var x996 uint32
	x996, x995 = bits.Mul32(x912, arg1[3])
	var x997 uint32
	var x998 uint32
	x998, x997 = bits.Mul32(x912, arg1[2])
	var x999 uint32
	var x1000 uint32
	x1000, x999 = bits.Mul32(x912, arg1[1])
	var x1001 uint32
	var x1002 uint32
	x1002, x1001 = bits.Mul32(x912, arg1[0])
	var x1003 uint32
	_, x1003 = bits.Mul32((uint32((uint64(x323) + uint64(x325))) & 0xffffffff), x911)
	var x1005 uint32
	var x1006 uint32
	x1006, x1005 = bits.Mul32((uint32((uint64(x323) + uint64(x325))) & 0xffffffff), arg1[8])
	var x1007 uint32
	var x1008 uint32
	x1008, x1007 = bits.Mul32((uint32((uint64(x323) + uint64(x325))) & 0xffffffff), arg1[7])
	var x1009 uint32
	var x1010 uint32
	x1010, x1009 = bits.Mul32((uint32((uint64(x323) + uint64(x325))) & 0xffffffff), arg1[6])
	var x1011 uint32
	var x1012 uint32
	x1012, x1011 = bits.Mul32((uint32((uint64(x323) + uint64(x325))) & 0xffffffff), arg1[5])
	var x1013 uint32
	var x1014 uint32
	x1014, x1013 = bits.Mul32((uint32((uint64(x323) + uint64(x325))) & 0xffffffff), arg1[4])
	var x1015 uint32
	var x1016 uint32
	x1016, x1015 = bits.Mul32((uint32((uint64(x323) + uint64(x325))) & 0xffffffff), arg1[3])
	var x1017 uint32
	var x1018 uint32
	x1018, x1017 = bits.Mul32((uint32((uint64(x323) + uint64(x325))) & 0xffffffff), arg1[2])
	var x1019 uint32
	var x1020 uint32
	x1020, x1019 = bits.Mul32((uint32((uint64(x323) + uint64(x325))) & 0xffffffff), arg1[1])
	var x1021 uint32
	var x1022 uint32
	x1022, x1021 = bits.Mul32((uint32((uint64(x323) + uint64(x325))) & 0xffffffff), arg1[0])
	var x1023 uint32
	x1023, _ = bits.Add32(x1006, x913, uint32(0x0))
	var x1025 uint32
	x1025, _ = bits.Add32(x1023, x915, uint32(0x0))
	var x1027 uint32
	var x1028 uint32
	x1027, x1028 = bits.Add32(x1008, x917, uint32(0x0))
	var x1029 uint32
	x1029, _ = bits.Add32(x1025, x918, uint32(uint1(x1028)))
	var x1031 uint32
	var x1032 uint32
	x1031, x1032 = bits.Add32(x1027, x921, uint32(0x0))
	var x1033 uint32
	x1033, _ = bits.Add32(x1029, x919, uint32(uint1(x1032)))
	var x1035 uint32
	var x1036 uint32
	x1035, x1036 = bits.Add32(x1010, x923, uint32(0x0))
	var x1037 uint32
	var x1038 uint32
	x1037, x1038 = bits.Add32(x1031, x924, uint32(uint1(x1036)))
	var x1039 uint32
	x1039, _ = bits.Add32(x1033, x922, uint32(uint1(x1038)))
	var x1041 uint32
	var x1042 uint32
	x1041, x1042 = bits.Add32(x1035, x929, uint32(0x0))
	var x1043 uint32
	var x1044 uint32
	x1043, x1044 = bits.Add32(x1037, x927, uint32(uint1(x1042)))
	var x1045 uint32
	x1045, _ = bits.Add32(x1039, x925, uint32(uint1(x1044)))
	var x1047 uint32
	var x1048 uint32
	x1047, x1048 = bits.Add32(x1012, x931, uint32(0x0))
	var x1049 uint32
	var x1050 uint32
	x1049, x1050 = bits.Add32(x1041, x932, uint32(uint1(x1048)))
	var x1051 uint32
	var x1052 uint32
	x1051, x1052 = bits.Add32(x1043, x930, uint32(uint1(x1050)))
	var x1053 uint32
	x1053, _ = bits.Add32(x1045, x928, uint32(uint1(x1052)))
	var x1055 uint32
	var x1056 uint32
	x1055, x1056 = bits.Add32(x1047, x939, uint32(0x0))
	var x1057 uint32
	var x1058 uint32
	x1057, x1058 = bits.Add32(x1049, x937, uint32(uint1(x1056)))
	var x1059 uint32
	var x1060 uint32
	x1059, x1060 = bits.Add32(x1051, x935, uint32(uint1(x1058)))
	var x1061 uint32
	x1061, _ = bits.Add32(x1053, x933, uint32(uint1(x1060)))
	var x1063 uint32
	var x1064 uint32
	x1063, x1064 = bits.Add32(x1014, x941, uint32(0x0))
	var x1065 uint32
	var x1066 uint32
	x1065, x1066 = bits.Add32(x1055, x942, uint32(uint1(x1064)))
	var x1067 uint32
	var x1068 uint32
	x1067, x1068 = bits.Add32(x1057, x940, uint32(uint1(x1066)))
	var x1069 uint32
	var x1070 uint32
	x1069, x1070 = bits.Add32(x1059, x938, uint32(uint1(x1068)))
	var x1071 uint32
	x1071, _ = bits.Add32(x1061, x936, uint32(uint1(x1070)))
	var x1073 uint32
	var x1074 uint32
	x1073, x1074 = bits.Add32(x1063, x951, uint32(0x0))
	var x1075 uint32
	var x1076 uint32
	x1075, x1076 = bits.Add32(x1065, x949, uint32(uint1(x1074)))
	var x1077 uint32
	var x1078 uint32
	x1077, x1078 = bits.Add32(x1067, x947, uint32(uint1(x1076)))
	var x1079 uint32
	var x1080 uint32
	x1079, x1080 = bits.Add32(x1069, x945, uint32(uint1(x1078)))
	var x1081 uint32
	x1081, _ = bits.Add32(x1071, x943, uint32(uint1(x1080)))
	var x1083 uint32
	var x1084 uint32
	x1083, x1084 = bits.Add32(x1016, x953, uint32(0x0))
	var x1085 uint32
	var x1086 uint32
	x1085, x1086 = bits.Add32(x1073, x954, uint32(uint1(x1084)))
	var x1087 uint32
	var x1088 uint32
	x1087, x1088 = bits.Add32(x1075, x952, uint32(uint1(x1086)))
	var x1089 uint32
	var x1090 uint32
	x1089, x1090 = bits.Add32(x1077, x950, uint32(uint1(x1088)))
	var x1091 uint32
	var x1092 uint32
	x1091, x1092 = bits.Add32(x1079, x948, uint32(uint1(x1090)))
	var x1093 uint32
	x1093, _ = bits.Add32(x1081, x946, uint32(uint1(x1092)))
	var x1095 uint32
	var x1096 uint32
	x1095, x1096 = bits.Add32(x1083, x965, uint32(0x0))
	var x1097 uint32
	var x1098 uint32
	x1097, x1098 = bits.Add32(x1085, x963, uint32(uint1(x1096)))
	var x1099 uint32
	var x1100 uint32
	x1099, x1100 = bits.Add32(x1087, x961, uint32(uint1(x1098)))
	var x1101 uint32
	var x1102 uint32
	x1101, x1102 = bits.Add32(x1089, x959, uint32(uint1(x1100)))
	var x1103 uint32
	var x1104 uint32
	x1103, x1104 = bits.Add32(x1091, x957, uint32(uint1(x1102)))
	var x1105 uint32
	x1105, _ = bits.Add32(x1093, x955, uint32(uint1(x1104)))
	var x1107 uint32
	var x1108 uint32
	x1107, x1108 = bits.Add32(x1018, x967, uint32(0x0))
	var x1109 uint32
	var x1110 uint32
	x1109, x1110 = bits.Add32(x1095, x968, uint32(uint1(x1108)))
	var x1111 uint32
	var x1112 uint32
	x1111, x1112 = bits.Add32(x1097, x966, uint32(uint1(x1110)))
	var x1113 uint32
	var x1114 uint32
	x1113, x1114 = bits.Add32(x1099, x964, uint32(uint1(x1112)))
	var x1115 uint32
	var x1116 uint32
	x1115, x1116 = bits.Add32(x1101, x962, uint32(uint1(x1114)))
	var x1117 uint32
	var x1118 uint32
	x1117, x1118 = bits.Add32(x1103, x960, uint32(uint1(x1116)))
	var x1119 uint32
	x1119, _ = bits.Add32(x1105, x958, uint32(uint1(x1118)))
	var x1121 uint32
	var x1122 uint32
	x1121, x1122 = bits.Add32(x1107, x981, uint32(0x0))
	var x1123 uint32
	var x1124 uint32
	x1123, x1124 = bits.Add32(x1109, x979, uint32(uint1(x1122)))
	var x1125 uint32
	var x1126 uint32
	x1125, x1126 = bits.Add32(x1111, x977, uint32(uint1(x1124)))
	var x1127 uint32
	var x1128 uint32
	x1127, x1128 = bits.Add32(x1113, x975, uint32(uint1(x1126)))
	var x1129 uint32
	var x1130 uint32
	x1129, x1130 = bits.Add32(x1115, x973, uint32(uint1(x1128)))
	var x1131 uint32
	var x1132 uint32
	x1131, x1132 = bits.Add32(x1117, x971, uint32(uint1(x1130)))
	var x1133 uint32
	x1133, _ = bits.Add32(x1119, x969, uint32(uint1(x1132)))
	var x1135 uint32
	var x1136 uint32
	x1135, x1136 = bits.Add32(x1020, x983, uint32(0x0))
	var x1137 uint32
	var x1138 uint32
	x1137, x1138 = bits.Add32(x1121, x984, uint32(uint1(x1136)))
	var x1139 uint32
	var x1140 uint32
	x1139, x1140 = bits.Add32(x1123, x982, uint32(uint1(x1138)))
	var x1141 uint32
	var x1142 uint32
	x1141, x1142 = bits.Add32(x1125, x980, uint32(uint1(x1140)))
	var x1143 uint32
	var x1144 uint32
	x1143, x1144 = bits.Add32(x1127, x978, uint32(uint1(x1142)))
	var x1145 uint32
	var x1146 uint32
	x1145, x1146 = bits.Add32(x1129, x976, uint32(uint1(x1144)))
	var x1147 uint32
	var x1148 uint32
	x1147, x1148 = bits.Add32(x1131, x974, uint32(uint1(x1146)))
	var x1149 uint32
	x1149, _ = bits.Add32(x1133, x972, uint32(uint1(x1148)))
	var x1151 uint32
	var x1152 uint32
	x1151, x1152 = bits.Add32(x1135, x999, uint32(0x0))
	var x1153 uint32
	var x1154 uint32
	x1153, x1154 = bits.Add32(x1137, x997, uint32(uint1(x1152)))
	var x1155 uint32
	var x1156 uint32
	x1155, x1156 = bits.Add32(x1139, x995, uint32(uint1(x1154)))
	var x1157 uint32
	var x1158 uint32
	x1157, x1158 = bits.Add32(x1141, x993, uint32(uint1(x1156)))
	var x1159 uint32
	var x1160 uint32
	x1159, x1160 = bits.Add32(x1143, x991, uint32(uint1(x1158)))
	var x1161 uint32
	var x1162 uint32
	x1161, x1162 = bits.Add32(x1145, x989, uint32(uint1(x1160)))
	var x1163 uint32
	var x1164 uint32
	x1163, x1164 = bits.Add32(x1147, x987, uint32(uint1(x1162)))
	var x1165 uint32
	x1165, _ = bits.Add32(x1149, x985, uint32(uint1(x1164)))
	var x1167 uint32
	var x1168 uint32
	x1167, x1168 = bits.Add32(x1022, x1001, uint32(0x0))
	var x1169 uint32
	var x1170 uint32
	x1169, x1170 = bits.Add32(x1151, x1002, uint32(uint1(x1168)))
	var x1171 uint32
	var x1172 uint32
	x1171, x1172 = bits.Add32(x1153, x1000, uint32(uint1(x1170)))
	var x1173 uint32
	var x1174 uint32
	x1173, x1174 = bits.Add32(x1155, x998, uint32(uint1(x1172)))
	var x1175 uint32
	var x1176 uint32
	x1175, x1176 = bits.Add32(x1157, x996, uint32(uint1(x1174)))
	var x1177 uint32
	var x1178 uint32
	x1177, x1178 = bits.Add32(x1159, x994, uint32(uint1(x1176)))
	var x1179 uint32
	var x1180 uint32
	x1179, x1180 = bits.Add32(x1161, x992, uint32(uint1(x1178)))
	var x1181 uint32
	var x1182 uint32
	x1181, x1182 = bits.Add32(x1163, x990, uint32(uint1(x1180)))
	var x1183 uint32
	x1183, _ = bits.Add32(x1165, x988, uint32(uint1(x1182)))
	var x1185 uint32
	var x1186 uint32
	x1185, x1186 = bits.Add32(x1167, x1019, uint32(0x0))
	var x1187 uint32
	var x1188 uint32
	x1187, x1188 = bits.Add32(x1169, x1017, uint32(uint1(x1186)))
	var x1189 uint32
	var x1190 uint32
	x1189, x1190 = bits.Add32(x1171, x1015, uint32(uint1(x1188)))
	var x1191 uint32
	var x1192 uint32
	x1191, x1192 = bits.Add32(x1173, x1013, uint32(uint1(x1190)))
	var x1193 uint32
	var x1194 uint32
	x1193, x1194 = bits.Add32(x1175, x1011, uint32(uint1(x1192)))
	var x1195 uint32
	var x1196 uint32
	x1195, x1196 = bits.Add32(x1177, x1009, uint32(uint1(x1194)))
	var x1197 uint32
	var x1198 uint32
	x1197, x1198 = bits.Add32(x1179, x1007, uint32(uint1(x1196)))
	var x1199 uint32
	var x1200 uint32
	x1199, x1200 = bits.Add32(x1181, x1005, uint32(uint1(x1198)))
	var x1201 uint32
	x1201, _ = bits.Add32(x1183, x1003, uint32(uint1(x1200)))
	var x1203 uint32
	cmovznzU32(&x1203, uint1((arg2[8] >> 31)), uint32(0x0), 0xffffffff)
	var x1204 uint32
	cmovznzU32(&x1204, uint1(((uint32((uint64(x324) + uint64(x326))) & 0xffffffff) >> 31)), uint32(0x0), 0xffffffff)
	var x1205 uint32
	_, x1205 = bits.Mul32(x1204, arg2[0])
	var x1207 uint32
	_, x1207 = bits.Mul32(x1204, arg2[1])
	var x1209 uint32
	var x1210 uint32
	x1210, x1209 = bits.Mul32(x1204, arg2[0])
	var x1211 uint32
	_, x1211 = bits.Mul32(x1204, arg2[2])
	var x1213 uint32
	var x1214 uint32
	x1214, x1213 = bits.Mul32(x1204, arg2[1])
	var x1215 uint32
	var x1216 uint32
	x1216, x1215 = bits.Mul32(x1204, arg2[0])
	var x1217 uint32
	_, x1217 = bits.Mul32(x1204, arg2[3])
	var x1219 uint32
	var x1220 uint32
	x1220, x1219 = bits.Mul32(x1204, arg2[2])
	var x1221 uint32
	var x1222 uint32
	x1222, x1221 = bits.Mul32(x1204, arg2[1])
	var x1223 uint32
	var x1224 uint32
	x1224, x1223 = bits.Mul32(x1204, arg2[0])
	var x1225 uint32
	_, x1225 = bits.Mul32(x1204, arg2[4])
	var x1227 uint32
	var x1228 uint32
	x1228, x1227 = bits.Mul32(x1204, arg2[3])
	var x1229 uint32
	var x1230 uint32
	x1230, x1229 = bits.Mul32(x1204, arg2[2])
	var x1231 uint32
	var x1232 uint32
	x1232, x1231 = bits.Mul32(x1204, arg2[1])
	var x1233 uint32
	var x1234 uint32
	x1234, x1233 = bits.Mul32(x1204, arg2[0])
	var x1235 uint32
	_, x1235 = bits.Mul32(x1204, arg2[5])
	var x1237 uint32
	var x1238 uint32
	x1238, x1237 = bits.Mul32(x1204, arg2[4])
	var x1239 uint32
	var x1240 uint32
	x1240, x1239 = bits.Mul32(x1204, arg2[3])
	var x1241 uint32
	var x1242 uint32
	x1242, x1241 = bits.Mul32(x1204, arg2[2])
	var x1243 uint32
	var x1244 uint32
	x1244, x1243 = bits.Mul32(x1204, arg2[1])
	var x1245 uint32
	var x1246 uint32
	x1246, x1245 = bits.Mul32(x1204, arg2[0])
	var x1247 uint32
	_, x1247 = bits.Mul32(x1204, arg2[6])
	var x1249 uint32
	var x1250 uint32
	x1250, x1249 = bits.Mul32(x1204, arg2[5])
	var x1251 uint32
	var x1252 uint32
	x1252, x1251 = bits.Mul32(x1204, arg2[4])
	var x1253 uint32
	var x1254 uint32
	x1254, x1253 = bits.Mul32(x1204, arg2[3])
	var x1255 uint32
	var x1256 uint32
	x1256, x1255 = bits.Mul32(x1204, arg2[2])
	var x1257 uint32
	var x1258 uint32
	x1258, x1257 = bits.Mul32(x1204, arg2[1])
	var x1259 uint32
	var x1260 uint32
	x1260, x1259 = bits.Mul32(x1204, arg2[0])
	var x1261 uint32
	_, x1261 = bits.Mul32(x1204, arg2[7])
	var x1263 uint32
	var x1264 uint32
	x1264, x1263 = bits.Mul32(x1204, arg2[6])
	var x1265 uint32
	var x1266 uint32
	x1266, x1265 = bits.Mul32(x1204, arg2[5])
	var x1267 uint32
	var x1268 uint32
	x1268, x1267 = bits.Mul32(x1204, arg2[4])
	var x1269 uint32
	var x1270 uint32
	x1270, x1269 = bits.Mul32(x1204, arg2[3])
	var x1271 uint32
	var x1272 uint32
	x1272, x1271 = bits.Mul32(x1204, arg2[2])
	var x1273 uint32
	var x1274 uint32
	x1274, x1273 = bits.Mul32(x1204, arg2[1])
	var x1275 uint32
	var x1276 uint32
	x1276, x1275 = bits.Mul32(x1204, arg2[0])
	var x1277 uint32
	_, x1277 = bits.Mul32(x1204, arg2[8])
	var x1279 uint32
	var x1280 uint32
	x1280, x1279 = bits.Mul32(x1204, arg2[7])
	var x1281 uint32
	var x1282 uint32
	x1282, x1281 = bits.Mul32(x1204, arg2[6])
	var x1283 uint32
	var x1284 uint32
	x1284, x1283 = bits.Mul32(x1204, arg2[5])
	var x1285 uint32
	var x1286 uint32
	x1286, x1285 = bits.Mul32(x1204, arg2[4])
	var x1287 uint32
	var x1288 uint32
	x1288, x1287 = bits.Mul32(x1204, arg2[3])
	var x1289 uint32
	var x1290 uint32
	x1290, x1289 = bits.Mul32(x1204, arg2[2])
	var x1291 uint32
	var x1292 uint32
	x1292, x1291 = bits.Mul32(x1204, arg2[1])
	var x1293 uint32
	var x1294 uint32
	x1294, x1293 = bits.Mul32(x1204, arg2[0])
	var x1295 uint32
	_, x1295 = bits.Mul32((uint32((uint64(x324) + uint64(x326))) & 0xffffffff), x1203)
	var x1297 uint32
	var x1298 uint32
	x1298, x1297 = bits.Mul32((uint32((uint64(x324) + uint64(x326))) & 0xffffffff), arg2[8])
	var x1299 uint32
	var x1300 uint32
	x1300, x1299 = bits.Mul32((uint32((uint64(x324) + uint64(x326))) & 0xffffffff), arg2[7])
	var x1301 uint32
	var x1302 uint32
	x1302, x1301 = bits.Mul32((uint32((uint64(x324) + uint64(x326))) & 0xffffffff), arg2[6])
	var x1303 uint32
	var x1304 uint32
	x1304, x1303 = bits.Mul32((uint32((uint64(x324) + uint64(x326))) & 0xffffffff), arg2[5])
	var x1305 uint32
	var x1306 uint32
	x1306, x1305 = bits.Mul32((uint32((uint64(x324) + uint64(x326))) & 0xffffffff), arg2[4])
	var x1307 uint32
	var x1308 uint32
	x1308, x1307 = bits.Mul32((uint32((uint64(x324) + uint64(x326))) & 0xffffffff), arg2[3])
	var x1309 uint32
	var x1310 uint32
	x1310, x1309 = bits.Mul32((uint32((uint64(x324) + uint64(x326))) & 0xffffffff), arg2[2])
	var x1311 uint32
	var x1312 uint32
	x1312, x1311 = bits.Mul32((uint32((uint64(x324) + uint64(x326))) & 0xffffffff), arg2[1])
	var x1313 uint32
	var x1314 uint32
	x1314, x1313 = bits.Mul32((uint32((uint64(x324) + uint64(x326))) & 0xffffffff), arg2[0])
	var x1315 uint32
	x1315, _ = bits.Add32(x1298, x1205, uint32(0x0))
	var x1317 uint32
	x1317, _ = bits.Add32(x1315, x1207, uint32(0x0))
	var x1319 uint32
	var x1320 uint32
	x1319, x1320 = bits.Add32(x1300, x1209, uint32(0x0))
	var x1321 uint32
	x1321, _ = bits.Add32(x1317, x1210, uint32(uint1(x1320)))
	var x1323 uint32
	var x1324 uint32
	x1323, x1324 = bits.Add32(x1319, x1213, uint32(0x0))
	var x1325 uint32
	x1325, _ = bits.Add32(x1321, x1211, uint32(uint1(x1324)))
	var x1327 uint32
	var x1328 uint32
	x1327, x1328 = bits.Add32(x1302, x1215, uint32(0x0))
	var x1329 uint32
	var x1330 uint32
	x1329, x1330 = bits.Add32(x1323, x1216, uint32(uint1(x1328)))
	var x1331 uint32
	x1331, _ = bits.Add32(x1325, x1214, uint32(uint1(x1330)))
	var x1333 uint32
	var x1334 uint32
	x1333, x1334 = bits.Add32(x1327, x1221, uint32(0x0))
	var x1335 uint32
	var x1336 uint32
	x1335, x1336 = bits.Add32(x1329, x1219, uint32(uint1(x1334)))
	var x1337 uint32
	x1337, _ = bits.Add32(x1331, x1217, uint32(uint1(x1336)))
	var x1339 uint32
	var x1340 uint32
	x1339, x1340 = bits.Add32(x1304, x1223, uint32(0x0))
	var x1341 uint32
	var x1342 uint32
	x1341, x1342 = bits.Add32(x1333, x1224, uint32(uint1(x1340)))
	var x1343 uint32
	var x1344 uint32
	x1343, x1344 = bits.Add32(x1335, x1222, uint32(uint1(x1342)))
	var x1345 uint32
	x1345, _ = bits.Add32(x1337, x1220, uint32(uint1(x1344)))
	var x1347 uint32
	var x1348 uint32
	x1347, x1348 = bits.Add32(x1339, x1231, uint32(0x0))
	var x1349 uint32
	var x1350 uint32
	x1349, x1350 = bits.Add32(x1341, x1229, uint32(uint1(x1348)))
	var x1351 uint32
	var x1352 uint32
	x1351, x1352 = bits.Add32(x1343, x1227, uint32(uint1(x1350)))
	var x1353 uint32
	x1353, _ = bits.Add32(x1345, x1225, uint32(uint1(x1352)))
	var x1355 uint32
	var x1356 uint32
	x1355, x1356 = bits.Add32(x1306, x1233, uint32(0x0))
	var x1357 uint32
	var x1358 uint32
	x1357, x1358 = bits.Add32(x1347, x1234, uint32(uint1(x1356)))
	var x1359 uint32
	var x1360 uint32
	x1359, x1360 = bits.Add32(x1349, x1232, uint32(uint1(x1358)))
	var x1361 uint32
	var x1362 uint32
	x1361, x1362 = bits.Add32(x1351, x1230, uint32(uint1(x1360)))
	var x1363 uint32
	x1363, _ = bits.Add32(x1353, x1228, uint32(uint1(x1362)))
	var x1365 uint32
	var x1366 uint32
	x1365, x1366 = bits.Add32(x1355, x1243, uint32(0x0))
	var x1367 uint32
	var x1368 uint32
	x1367, x1368 = bits.Add32(x1357, x1241, uint32(uint1(x1366)))
	var x1369 uint32
	var x1370 uint32
	x1369, x1370 = bits.Add32(x1359, x1239, uint32(uint1(x1368)))
	var x1371 uint32
	var x1372 uint32
	x1371, x1372 = bits.Add32(x1361, x1237, uint32(uint1(x1370)))
	var x1373 uint32
	x1373, _ = bits.Add32(x1363, x1235, uint32(uint1(x1372)))
	var x1375 uint32
	var x1376 uint32
	x1375, x1376 = bits.Add32(x1308, x1245, uint32(0x0))
	var x1377 uint32
	var x1378 uint32
	x1377, x1378 = bits.Add32(x1365, x1246, uint32(uint1(x1376)))
	var x1379 uint32
	var x1380 uint32
	x1379, x1380 = bits.Add32(x1367, x1244, uint32(uint1(x1378)))
	var x1381 uint32
	var x1382 uint32
	x1381, x1382 = bits.Add32(x1369, x1242, uint32(uint1(x1380)))
	var x1383 uint32
	var x1384 uint32
	x1383, x1384 = bits.Add32(x1371, x1240, uint32(uint1(x1382)))
	var x1385 uint32
	x1385, _ = bits.Add32(x1373, x1238, uint32(uint1(x1384)))
	var x1387 uint32
	var x1388 uint32
	x1387, x1388 = bits.Add32(x1375, x1257, uint32(0x0))
	var x1389 uint32
	var x1390 uint32
	x1389, x1390 = bits.Add32(x1377, x1255, uint32(uint1(x1388)))
	var x1391 uint32
	var x1392 uint32
	x1391, x1392 = bits.Add32(x1379, x1253, uint32(uint1(x1390)))
	var x1393 uint32
	var x1394 uint32
	x1393, x1394 = bits.Add32(x1381, x1251, uint32(uint1(x1392)))
	var x1395 uint32
	var x1396 uint32
	x1395, x1396 = bits.Add32(x1383, x1249, uint32(uint1(x1394)))
	var x1397 uint32
	x1397, _ = bits.Add32(x1385, x1247, uint32(uint1(x1396)))
	var x1399 uint32
	var x1400 uint32
	x1399, x1400 = bits.Add32(x1310, x1259, uint32(0x0))
	var x1401 uint32
	var x1402 uint32
	x1401, x1402 = bits.Add32(x1387, x1260, uint32(uint1(x1400)))
	var x1403 uint32
	var x1404 uint32
	x1403, x1404 = bits.Add32(x1389, x1258, uint32(uint1(x1402)))
	var x1405 uint32
	var x1406 uint32
	x1405, x1406 = bits.Add32(x1391, x1256, uint32(uint1(x1404)))
	var x1407 uint32
	var x1408 uint32
	x1407, x1408 = bits.Add32(x1393, x1254, uint32(uint1(x1406)))
	var x1409 uint32
	var x1410 uint32
	x1409, x1410 = bits.Add32(x1395, x1252, uint32(uint1(x1408)))
	var x1411 uint32
	x1411, _ = bits.Add32(x1397, x1250, uint32(uint1(x1410)))
	var x1413 uint32
	var x1414 uint32
	x1413, x1414 = bits.Add32(x1399, x1273, uint32(0x0))
	var x1415 uint32
	var x1416 uint32
	x1415, x1416 = bits.Add32(x1401, x1271, uint32(uint1(x1414)))
	var x1417 uint32
	var x1418 uint32
	x1417, x1418 = bits.Add32(x1403, x1269, uint32(uint1(x1416)))
	var x1419 uint32
	var x1420 uint32
	x1419, x1420 = bits.Add32(x1405, x1267, uint32(uint1(x1418)))
	var x1421 uint32
	var x1422 uint32
	x1421, x1422 = bits.Add32(x1407, x1265, uint32(uint1(x1420)))
	var x1423 uint32
	var x1424 uint32
	x1423, x1424 = bits.Add32(x1409, x1263, uint32(uint1(x1422)))
	var x1425 uint32
	x1425, _ = bits.Add32(x1411, x1261, uint32(uint1(x1424)))
	var x1427 uint32
	var x1428 uint32
	x1427, x1428 = bits.Add32(x1312, x1275, uint32(0x0))
	var x1429 uint32
	var x1430 uint32
	x1429, x1430 = bits.Add32(x1413, x1276, uint32(uint1(x1428)))
	var x1431 uint32
	var x1432 uint32
	x1431, x1432 = bits.Add32(x1415, x1274, uint32(uint1(x1430)))
	var x1433 uint32
	var x1434 uint32
	x1433, x1434 = bits.Add32(x1417, x1272, uint32(uint1(x1432)))
	var x1435 uint32
	var x1436 uint32
	x1435, x1436 = bits.Add32(x1419, x1270, uint32(uint1(x1434)))
	var x1437 uint32
	var x1438 uint32
	x1437, x1438 = bits.Add32(x1421, x1268, uint32(uint1(x1436)))
	var x1439 uint32
	var x1440 uint32
	x1439, x1440 = bits.Add32(x1423, x1266, uint32(uint1(x1438)))
	var x1441 uint32
	x1441, _ = bits.Add32(x1425, x1264, uint32(uint1(x1440)))
	var x1443 uint32
	var x1444 uint32
	x1443, x1444 = bits.Add32(x1427, x1291, uint32(0x0))
	var x1445 uint32
	var x1446 uint32
	x1445, x1446 = bits.Add32(x1429, x1289, uint32(uint1(x1444)))
	var x1447 uint32
	var x1448 uint32
	x1447, x1448 = bits.Add32(x1431, x1287, uint32(uint1(x1446)))
	var x1449 uint32
	var x1450 uint32
	x1449, x1450 = bits.Add32(x1433, x1285, uint32(uint1(x1448)))
	var x1451 uint32
	var x1452 uint32
	x1451, x1452 = bits.Add32(x1435, x1283, uint32(uint1(x1450)))
	var x1453 uint32
	var x1454 uint32
	x1453, x1454 = bits.Add32(x1437, x1281, uint32(uint1(x1452)))
	var x1455 uint32
	var x1456 uint32
	x1455, x1456 = bits.Add32(x1439, x1279, uint32(uint1(x1454)))
	var x1457 uint32
	x1457, _ = bits.Add32(x1441, x1277, uint32(uint1(x1456)))
	var x1459 uint32
	var x1460 uint32
	x1459, x1460 = bits.Add32(x1314, x1293, uint32(0x0))
	var x1461 uint32
	var x1462 uint32
	x1461, x1462 = bits.Add32(x1443, x1294, uint32(uint1(x1460)))
	var x1463 uint32
	var x1464 uint32
	x1463, x1464 = bits.Add32(x1445, x1292, uint32(uint1(x1462)))
	var x1465 uint32
	var x1466 uint32
	x1465, x1466 = bits.Add32(x1447, x1290, uint32(uint1(x1464)))
	var x1467 uint32
	var x1468 uint32
	x1467, x1468 = bits.Add32(x1449, x1288, uint32(uint1(x1466)))
	var x1469 uint32
	var x1470 uint32
	x1469, x1470 = bits.Add32(x1451, x1286, uint32(uint1(x1468)))
	var x1471 uint32
	var x1472 uint32
	x1471, x1472 = bits.Add32(x1453, x1284, uint32(uint1(x1470)))
	var x1473 uint32
	var x1474 uint32
	x1473, x1474 = bits.Add32(x1455, x1282, uint32(uint1(x1472)))
	var x1475 uint32
	x1475, _ = bits.Add32(x1457, x1280, uint32(uint1(x1474)))
	var x1477 uint32
	var x1478 uint32
	x1477, x1478 = bits.Add32(x1459, x1311, uint32(0x0))
	var x1479 uint32
	var x1480 uint32
	x1479, x1480 = bits.Add32(x1461, x1309, uint32(uint1(x1478)))
	var x1481 uint32
	var x1482 uint32
	x1481, x1482 = bits.Add32(x1463, x1307, uint32(uint1(x1480)))
	var x1483 uint32
	var x1484 uint32
	x1483, x1484 = bits.Add32(x1465, x1305, uint32(uint1(x1482)))
	var x1485 uint32
	var x1486 uint32
	x1485, x1486 = bits.Add32(x1467, x1303, uint32(uint1(x1484)))
	var x1487 uint32
	var x1488 uint32
	x1487, x1488 = bits.Add32(x1469, x1301, uint32(uint1(x1486)))
	var x1489 uint32
	var x1490 uint32
	x1489, x1490 = bits.Add32(x1471, x1299, uint32(uint1(x1488)))
	var x1491 uint32
	var x1492 uint32
	x1491, x1492 = bits.Add32(x1473, x1297, uint32(uint1(x1490)))
	var x1493 uint32
	x1493, _ = bits.Add32(x1475, x1295, uint32(uint1(x1492)))
	var x1495 uint32
	var x1496 uint32
	x1495, x1496 = bits.Add32(x437, x729, uint32(0x0))
	var x1497 uint32
	var x1498 uint32
	x1497, x1498 = bits.Add32(x601, x893, uint32(uint1(x1496)))
	var x1499 uint32
	var x1500 uint32
	x1499, x1500 = bits.Add32(x603, x895, uint32(uint1(x1498)))
	var x1501 uint32
	var x1502 uint32
	x1501, x1502 = bits.Add32(x605, x897, uint32(uint1(x1500)))
	var x1503 uint32
	var x1504 uint32
	x1503, x1504 = bits.Add32(x607, x899, uint32(uint1(x1502)))
	var x1505 uint32
	var x1506 uint32
	x1505, x1506 = bits.Add32(x609, x901, uint32(uint1(x1504)))
	var x1507 uint32
	var x1508 uint32
	x1507, x1508 = bits.Add32(x611, x903, uint32(uint1(x1506)))
	var x1509 uint32
	var x1510 uint32
	x1509, x1510 = bits.Add32(x613, x905, uint32(uint1(x1508)))
	var x1511 uint32
	var x1512 uint32
	x1511, x1512 = bits.Add32(x615, x907, uint32(uint1(x1510)))
	var x1513 uint32
	x1513, _ = bits.Add32(x617, x909, uint32(uint1(x1512)))
	var x1515 uint32
	var x1516 uint32
	x1515, x1516 = bits.Add32(x1021, x1313, uint32(0x0))
	var x1517 uint32
	var x1518 uint32
	x1517, x1518 = bits.Add32(x1185, x1477, uint32(uint1(x1516)))
	var x1519 uint32
	var x1520 uint32
	x1519, x1520 = bits.Add32(x1187, x1479, uint32(uint1(x1518)))
	var x1521 uint32
	var x1522 uint32
	x1521, x1522 = bits.Add32(x1189, x1481, uint32(uint1(x1520)))
	var x1523 uint32
	var x1524 uint32
	x1523, x1524 = bits.Add32(x1191, x1483, uint32(uint1(x1522)))
	var x1525 uint32
	var x1526 uint32
	x1525, x1526 = bits.Add32(x1193, x1485, uint32(uint1(x1524)))
	var x1527 uint32
	var x1528 uint32
	x1527, x1528 = bits.Add32(x1195, x1487, uint32(uint1(x1526)))
	var x1529 uint32
	var x1530 uint32
	x1529, x1530 = bits.Add32(x1197, x1489, uint32(uint1(x1528)))
	var x1531 uint32
	var x1532 uint32
	x1531, x1532 = bits.Add32(x1199, x1491, uint32(uint1(x1530)))
	var x1533 uint32
	x1533, _ = bits.Add32(x1201, x1493, uint32(uint1(x1532)))
	x1535 := ((x1495 >> 30) | ((x1497 << 2) & 0xffffffff))
	x1536 := ((x1497 >> 30) | ((x1499 << 2) & 0xffffffff))
	x1537 := ((x1499 >> 30) | ((x1501 << 2) & 0xffffffff))
	x1538 := ((x1501 >> 30) | ((x1503 << 2) & 0xffffffff))
	x1539 := ((x1503 >> 30) | ((x1505 << 2) & 0xffffffff))
	x1540 := ((x1505 >> 30) | ((x1507 << 2) & 0xffffffff))
	x1541 := ((x1507 >> 30) | ((x1509 << 2) & 0xffffffff))
	x1542 := ((x1509 >> 30) | ((x1511 << 2) & 0xffffffff))
	x1543 := ((x1511 >> 30) | ((x1513 << 2) & 0xffffffff))
	x1544 := ((x1515 >> 30) | ((x1517 << 2) & 0xffffffff))
	x1545 := ((x1517 >> 30) | ((x1519 << 2) & 0xffffffff))
	x1546 := ((x1519 >> 30) | ((x1521 << 2) & 0xffffffff))
	x1547 := ((x1521 >> 30) | ((x1523 << 2) & 0xffffffff))
	x1548 := ((x1523 >> 30) | ((x1525 << 2) & 0xffffffff))
	x1549 := ((x1525 >> 30) | ((x1527 << 2) & 0xffffffff))
	x1550 := ((x1527 >> 30) | ((x1529 << 2) & 0xffffffff))
	x1551 := ((x1529 >> 30) | ((x1531 << 2) & 0xffffffff))
	x1552 := ((x1531 >> 30) | ((x1533 << 2) & 0xffffffff))
	x1553 := uint1(((uint32((uint64(x321) + uint64(x321))) & 0xffffffff) >> 31))
	x1554 := (uint32((uint64((^(uint32((uint64(x321) + uint64(x321))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	x1555 := (uint32((uint64(x321) + uint64(x321))) & 0xffffffff)
	var x1556 uint32
	var x1557 uint32
	x1556, x1557 = bits.Sub32(uint32(0x0), x1554, uint32(0x0))
	var x1558 uint32
	var x1559 uint32
	x1558, x1559 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1557)))
	var x1560 uint32
	var x1561 uint32
	x1560, x1561 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1559)))
	var x1562 uint32
	var x1563 uint32
	x1562, x1563 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1561)))
	var x1564 uint32
	var x1565 uint32
	x1564, x1565 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1563)))
	var x1566 uint32
	var x1567 uint32
	x1566, x1567 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1565)))
	var x1568 uint32
	var x1569 uint32
	x1568, x1569 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1567)))
	var x1570 uint32
	var x1571 uint32
	x1570, x1571 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1569)))
	var x1572 uint32
	cmovznzU32(&x1572, uint1(x1571), uint32(0x0), 0xffffffff)
	var x1573 uint32
	var x1574 uint32
	x1573, x1574 = bits.Add32(x1556, x1572, uint32(0x0))
	var x1575 uint32
	var x1576 uint32
	x1575, x1576 = bits.Add32(x1558, x1572, uint32(uint1(x1574)))
	var x1577 uint32
	var x1578 uint32
	x1577, x1578 = bits.Add32(x1560, x1572, uint32(uint1(x1576)))
	var x1579 uint32
	var x1580 uint32
	x1579, x1580 = bits.Add32(x1562, uint32(0x0), uint32(uint1(x1578)))
	var x1581 uint32
	var x1582 uint32
	x1581, x1582 = bits.Add32(x1564, uint32(0x0), uint32(uint1(x1580)))
	var x1583 uint32
	var x1584 uint32
	x1583, x1584 = bits.Add32(x1566, uint32(0x0), uint32(uint1(x1582)))
	var x1585 uint32
	var x1586 uint32
	x1585, x1586 = bits.Add32(x1568, uint32((uint1(x1572) & 0x1)), uint32(uint1(x1584)))
	var x1587 uint32
	x1587, _ = bits.Add32(x1570, x1572, uint32(uint1(x1586)))
	var x1589 uint32
	cmovznzU32(&x1589, x1553, x1555, x1573)
	var x1590 uint32
	cmovznzU32(&x1590, x1553, uint32(0x0), x1575)
	var x1591 uint32
	cmovznzU32(&x1591, x1553, uint32(0x0), x1577)
	var x1592 uint32
	cmovznzU32(&x1592, x1553, uint32(0x0), x1579)
	var x1593 uint32
	cmovznzU32(&x1593, x1553, uint32(0x0), x1581)
	var x1594 uint32
	cmovznzU32(&x1594, x1553, uint32(0x0), x1583)
	var x1595 uint32
	cmovznzU32(&x1595, x1553, uint32(0x0), x1585)
	var x1596 uint32
	cmovznzU32(&x1596, x1553, uint32(0x0), x1587)
	x1597 := uint1(((uint32((uint64(x322) + uint64(x322))) & 0xffffffff) >> 31))
	x1598 := (uint32((uint64((^(uint32((uint64(x322) + uint64(x322))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	x1599 := (uint32((uint64(x322) + uint64(x322))) & 0xffffffff)
	var x1600 uint32
	var x1601 uint32
	x1600, x1601 = bits.Sub32(uint32(0x0), x1598, uint32(0x0))
	var x1602 uint32
	var x1603 uint32
	x1602, x1603 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1601)))
	var x1604 uint32
	var x1605 uint32
	x1604, x1605 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1603)))
	var x1606 uint32
	var x1607 uint32
	x1606, x1607 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1605)))
	var x1608 uint32
	var x1609 uint32
	x1608, x1609 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1607)))
	var x1610 uint32
	var x1611 uint32
	x1610, x1611 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1609)))
	var x1612 uint32
	var x1613 uint32
	x1612, x1613 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1611)))
	var x1614 uint32
	var x1615 uint32
	x1614, x1615 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1613)))
	var x1616 uint32
	cmovznzU32(&x1616, uint1(x1615), uint32(0x0), 0xffffffff)
	var x1617 uint32
	var x1618 uint32
	x1617, x1618 = bits.Add32(x1600, x1616, uint32(0x0))
	var x1619 uint32
	var x1620 uint32
	x1619, x1620 = bits.Add32(x1602, x1616, uint32(uint1(x1618)))
	var x1621 uint32
	var x1622 uint32
	x1621, x1622 = bits.Add32(x1604, x1616, uint32(uint1(x1620)))
	var x1623 uint32
	var x1624 uint32
	x1623, x1624 = bits.Add32(x1606, uint32(0x0), uint32(uint1(x1622)))
	var x1625 uint32
	var x1626 uint32
	x1625, x1626 = bits.Add32(x1608, uint32(0x0), uint32(uint1(x1624)))
	var x1627 uint32
	var x1628 uint32
	x1627, x1628 = bits.Add32(x1610, uint32(0x0), uint32(uint1(x1626)))
	var x1629 uint32
	var x1630 uint32
	x1629, x1630 = bits.Add32(x1612, uint32((uint1(x1616) & 0x1)), uint32(uint1(x1628)))
	var x1631 uint32
	x1631, _ = bits.Add32(x1614, x1616, uint32(uint1(x1630)))
	var x1633 uint32
	cmovznzU32(&x1633, x1597, x1599, x1617)
	var x1634 uint32
	cmovznzU32(&x1634, x1597, uint32(0x0), x1619)
	var x1635 uint32
	cmovznzU32(&x1635, x1597, uint32(0x0), x1621)
	var x1636 uint32
	cmovznzU32(&x1636, x1597, uint32(0x0), x1623)
	var x1637 uint32
	cmovznzU32(&x1637, x1597, uint32(0x0), x1625)
	var x1638 uint32
	cmovznzU32(&x1638, x1597, uint32(0x0), x1627)
	var x1639 uint32
	cmovznzU32(&x1639, x1597, uint32(0x0), x1629)
	var x1640 uint32
	cmovznzU32(&x1640, x1597, uint32(0x0), x1631)
	x1641 := uint1(((uint32((uint64(x323) + uint64(x325))) & 0xffffffff) >> 31))
	x1642 := (uint32((uint64((^(uint32((uint64(x323) + uint64(x325))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	x1643 := (uint32((uint64(x323) + uint64(x325))) & 0xffffffff)
	var x1644 uint32
	var x1645 uint32
	x1644, x1645 = bits.Sub32(uint32(0x0), x1642, uint32(0x0))
	var x1646 uint32
	var x1647 uint32
	x1646, x1647 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1645)))
	var x1648 uint32
	var x1649 uint32
	x1648, x1649 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1647)))
	var x1650 uint32
	var x1651 uint32
	x1650, x1651 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1649)))
	var x1652 uint32
	var x1653 uint32
	x1652, x1653 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1651)))
	var x1654 uint32
	var x1655 uint32
	x1654, x1655 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1653)))
	var x1656 uint32
	var x1657 uint32
	x1656, x1657 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1655)))
	var x1658 uint32
	var x1659 uint32
	x1658, x1659 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1657)))
	var x1660 uint32
	cmovznzU32(&x1660, uint1(x1659), uint32(0x0), 0xffffffff)
	var x1661 uint32
	var x1662 uint32
	x1661, x1662 = bits.Add32(x1644, x1660, uint32(0x0))
	var x1663 uint32
	var x1664 uint32
	x1663, x1664 = bits.Add32(x1646, x1660, uint32(uint1(x1662)))
	var x1665 uint32
	var x1666 uint32
	x1665, x1666 = bits.Add32(x1648, x1660, uint32(uint1(x1664)))
	var x1667 uint32
	var x1668 uint32
	x1667, x1668 = bits.Add32(x1650, uint32(0x0), uint32(uint1(x1666)))
	var x1669 uint32
	var x1670 uint32
	x1669, x1670 = bits.Add32(x1652, uint32(0x0), uint32(uint1(x1668)))
	var x1671 uint32
	var x1672 uint32
	x1671, x1672 = bits.Add32(x1654, uint32(0x0), uint32(uint1(x1670)))
	var x1673 uint32
	var x1674 uint32
	x1673, x1674 = bits.Add32(x1656, uint32((uint1(x1660) & 0x1)), uint32(uint1(x1672)))
	var x1675 uint32
	x1675, _ = bits.Add32(x1658, x1660, uint32(uint1(x1674)))
	var x1677 uint32
	cmovznzU32(&x1677, x1641, x1643, x1661)
	var x1678 uint32
	cmovznzU32(&x1678, x1641, uint32(0x0), x1663)
	var x1679 uint32
	cmovznzU32(&x1679, x1641, uint32(0x0), x1665)
	var x1680 uint32
	cmovznzU32(&x1680, x1641, uint32(0x0), x1667)
	var x1681 uint32
	cmovznzU32(&x1681, x1641, uint32(0x0), x1669)
	var x1682 uint32
	cmovznzU32(&x1682, x1641, uint32(0x0), x1671)
	var x1683 uint32
	cmovznzU32(&x1683, x1641, uint32(0x0), x1673)
	var x1684 uint32
	cmovznzU32(&x1684, x1641, uint32(0x0), x1675)
	x1685 := uint1(((uint32((uint64(x324) + uint64(x326))) & 0xffffffff) >> 31))
	x1686 := (uint32((uint64((^(uint32((uint64(x324) + uint64(x326))) & 0xffffffff))) + uint64(0x1))) & 0xffffffff)
	x1687 := (uint32((uint64(x324) + uint64(x326))) & 0xffffffff)
	var x1688 uint32
	var x1689 uint32
	x1688, x1689 = bits.Sub32(uint32(0x0), x1686, uint32(0x0))
	var x1690 uint32
	var x1691 uint32
	x1690, x1691 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1689)))
	var x1692 uint32
	var x1693 uint32
	x1692, x1693 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1691)))
	var x1694 uint32
	var x1695 uint32
	x1694, x1695 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1693)))
	var x1696 uint32
	var x1697 uint32
	x1696, x1697 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1695)))
	var x1698 uint32
	var x1699 uint32
	x1698, x1699 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1697)))
	var x1700 uint32
	var x1701 uint32
	x1700, x1701 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1699)))
	var x1702 uint32
	var x1703 uint32
	x1702, x1703 = bits.Sub32(uint32(0x0), uint32(0x0), uint32(uint1(x1701)))
	var x1704 uint32
	cmovznzU32(&x1704, uint1(x1703), uint32(0x0), 0xffffffff)
	var x1705 uint32
	var x1706 uint32
	x1705, x1706 = bits.Add32(x1688, x1704, uint32(0x0))
	var x1707 uint32
	var x1708 uint32
	x1707, x1708 = bits.Add32(x1690, x1704, uint32(uint1(x1706)))
	var x1709 uint32
	var x1710 uint32
	x1709, x1710 = bits.Add32(x1692, x1704, uint32(uint1(x1708)))
	var x1711 uint32
	var x1712 uint32
	x1711, x1712 = bits.Add32(x1694, uint32(0x0), uint32(uint1(x1710)))
	var x1713 uint32
	var x1714 uint32
	x1713, x1714 = bits.Add32(x1696, uint32(0x0), uint32(uint1(x1712)))
	var x1715 uint32
	var x1716 uint32
	x1715, x1716 = bits.Add32(x1698, uint32(0x0), uint32(uint1(x1714)))
	var x1717 uint32
	var x1718 uint32
	x1717, x1718 = bits.Add32(x1700, uint32((uint1(x1704) & 0x1)), uint32(uint1(x1716)))
	var x1719 uint32
	x1719, _ = bits.Add32(x1702, x1704, uint32(uint1(x1718)))
	var x1721 uint32
	cmovznzU32(&x1721, x1685, x1687, x1705)
	var x1722 uint32
	cmovznzU32(&x1722, x1685, uint32(0x0), x1707)
	var x1723 uint32
	cmovznzU32(&x1723, x1685, uint32(0x0), x1709)
	var x1724 uint32
	cmovznzU32(&x1724, x1685, uint32(0x0), x1711)
	var x1725 uint32
	cmovznzU32(&x1725, x1685, uint32(0x0), x1713)
	var x1726 uint32
	cmovznzU32(&x1726, x1685, uint32(0x0), x1715)
	var x1727 uint32
	cmovznzU32(&x1727, x1685, uint32(0x0), x1717)
	var x1728 uint32
	cmovznzU32(&x1728, x1685, uint32(0x0), x1719)
	var x1729 uint32
	var x1730 uint32
	x1730, x1729 = bits.Mul32(x1589, arg3[7])
	var x1731 uint32
	var x1732 uint32
	x1732, x1731 = bits.Mul32(x1589, arg3[6])
	var x1733 uint32
	var x1734 uint32
	x1734, x1733 = bits.Mul32(x1589, arg3[5])
	var x1735 uint32
	var x1736 uint32
	x1736, x1735 = bits.Mul32(x1589, arg3[4])
	var x1737 uint32
	var x1738 uint32
	x1738, x1737 = bits.Mul32(x1589, arg3[3])
	var x1739 uint32
	var x1740 uint32
	x1740, x1739 = bits.Mul32(x1589, arg3[2])
	var x1741 uint32
	var x1742 uint32
	x1742, x1741 = bits.Mul32(x1589, arg3[1])
	var x1743 uint32
	var x1744 uint32
	x1744, x1743 = bits.Mul32(x1589, arg3[0])
	var x1745 uint32
	var x1746 uint32
	x1745, x1746 = bits.Add32(x1744, x1741, uint32(0x0))
	var x1747 uint32
	var x1748 uint32
	x1747, x1748 = bits.Add32(x1742, x1739, uint32(uint1(x1746)))
	var x1749 uint32
	var x1750 uint32
	x1749, x1750 = bits.Add32(x1740, x1737, uint32(uint1(x1748)))
	var x1751 uint32
	var x1752 uint32
	x1751, x1752 = bits.Add32(x1738, x1735, uint32(uint1(x1750)))
	var x1753 uint32
	var x1754 uint32
	x1753, x1754 = bits.Add32(x1736, x1733, uint32(uint1(x1752)))
	var x1755 uint32
	var x1756 uint32
	x1755, x1756 = bits.Add32(x1734, x1731, uint32(uint1(x1754)))
	var x1757 uint32
	var x1758 uint32
	x1757, x1758 = bits.Add32(x1732, x1729, uint32(uint1(x1756)))
	x1759 := (uint32(uint1(x1758)) + x1730)
	var x1760 uint32
	var x1761 uint32
	x1761, x1760 = bits.Mul32(x1743, 0xffffffff)
	var x1762 uint32
	var x1763 uint32
	x1763, x1762 = bits.Mul32(x1743, 0xffffffff)
	var x1764 uint32
	var x1765 uint32
	x1765, x1764 = bits.Mul32(x1743, 0xffffffff)
	var x1766 uint32
	var x1767 uint32
	x1767, x1766 = bits.Mul32(x1743, 0xffffffff)
	var x1768 uint32
	var x1769 uint32
	x1768, x1769 = bits.Add32(x1767, x1764, uint32(0x0))
	var x1770 uint32
	var x1771 uint32
	x1770, x1771 = bits.Add32(x1765, x1762, uint32(uint1(x1769)))
	x1772 := (uint32(uint1(x1771)) + x1763)
	var x1774 uint32
	_, x1774 = bits.Add32(x1743, x1766, uint32(0x0))
	var x1775 uint32
	var x1776 uint32
	x1775, x1776 = bits.Add32(x1745, x1768, uint32(uint1(x1774)))
	var x1777 uint32
	var x1778 uint32
	x1777, x1778 = bits.Add32(x1747, x1770, uint32(uint1(x1776)))
	var x1779 uint32
	var x1780 uint32
	x1779, x1780 = bits.Add32(x1749, x1772, uint32(uint1(x1778)))
	var x1781 uint32
	var x1782 uint32
	x1781, x1782 = bits.Add32(x1751, uint32(0x0), uint32(uint1(x1780)))
	var x1783 uint32
	var x1784 uint32
	x1783, x1784 = bits.Add32(x1753, uint32(0x0), uint32(uint1(x1782)))
	var x1785 uint32
	var x1786 uint32
	x1785, x1786 = bits.Add32(x1755, x1743, uint32(uint1(x1784)))
	var x1787 uint32
	var x1788 uint32
	x1787, x1788 = bits.Add32(x1757, x1760, uint32(uint1(x1786)))
	var x1789 uint32
	var x1790 uint32
	x1789, x1790 = bits.Add32(x1759, x1761, uint32(uint1(x1788)))
	var x1791 uint32
	var x1792 uint32
	x1792, x1791 = bits.Mul32(x1590, arg3[7])
	var x1793 uint32
	var x1794 uint32
	x1794, x1793 = bits.Mul32(x1590, arg3[6])
	var x1795 uint32
	var x1796 uint32
	x1796, x1795 = bits.Mul32(x1590, arg3[5])
	var x1797 uint32
	var x1798 uint32
	x1798, x1797 = bits.Mul32(x1590, arg3[4])
	var x1799 uint32
	var x1800 uint32
	x1800, x1799 = bits.Mul32(x1590, arg3[3])
	var x1801 uint32
	var x1802 uint32
	x1802, x1801 = bits.Mul32(x1590, arg3[2])
	var x1803 uint32
	var x1804 uint32
	x1804, x1803 = bits.Mul32(x1590, arg3[1])
	var x1805 uint32
	var x1806 uint32
	x1806, x1805 = bits.Mul32(x1590, arg3[0])
	var x1807 uint32
	var x1808 uint32
	x1807, x1808 = bits.Add32(x1806, x1803, uint32(0x0))
	var x1809 uint32
	var x1810 uint32
	x1809, x1810 = bits.Add32(x1804, x1801, uint32(uint1(x1808)))
	var x1811 uint32
	var x1812 uint32
	x1811, x1812 = bits.Add32(x1802, x1799, uint32(uint1(x1810)))
	var x1813 uint32
	var x1814 uint32
	x1813, x1814 = bits.Add32(x1800, x1797, uint32(uint1(x1812)))
	var x1815 uint32
	var x1816 uint32
	x1815, x1816 = bits.Add32(x1798, x1795, uint32(uint1(x1814)))
	var x1817 uint32
	var x1818 uint32
	x1817, x1818 = bits.Add32(x1796, x1793, uint32(uint1(x1816)))
	var x1819 uint32
	var x1820 uint32
	x1819, x1820 = bits.Add32(x1794, x1791, uint32(uint1(x1818)))
	x1821 := (uint32(uint1(x1820)) + x1792)
	var x1822 uint32
	var x1823 uint32
	x1822, x1823 = bits.Add32(x1775, x1805, uint32(0x0))
	var x1824 uint32
	var x1825 uint32
	x1824, x1825 = bits.Add32(x1777, x1807, uint32(uint1(x1823)))
	var x1826 uint32
	var x1827 uint32
	x1826, x1827 = bits.Add32(x1779, x1809, uint32(uint1(x1825)))
	var x1828 uint32
	var x1829 uint32
	x1828, x1829 = bits.Add32(x1781, x1811, uint32(uint1(x1827)))
	var x1830 uint32
	var x1831 uint32
	x1830, x1831 = bits.Add32(x1783, x1813, uint32(uint1(x1829)))
	var x1832 uint32
	var x1833 uint32
	x1832, x1833 = bits.Add32(x1785, x1815, uint32(uint1(x1831)))
	var x1834 uint32
	var x1835 uint32
	x1834, x1835 = bits.Add32(x1787, x1817, uint32(uint1(x1833)))
	var x1836 uint32
	var x1837 uint32
	x1836, x1837 = bits.Add32(x1789, x1819, uint32(uint1(x1835)))
	var x1838 uint32
	var x1839 uint32
	x1838, x1839 = bits.Add32(uint32(uint1(x1790)), x1821, uint32(uint1(x1837)))
	var x1840 uint32
	var x1841 uint32
	x1841, x1840 = bits.Mul32(x1822, 0xffffffff)
	var x1842 uint32
	var x1843 uint32
	x1843, x1842 = bits.Mul32(x1822, 0xffffffff)
	var x1844 uint32
	var x1845 uint32
	x1845, x1844 = bits.Mul32(x1822, 0xffffffff)
	var x1846 uint32
	var x1847 uint32
	x1847, x1846 = bits.Mul32(x1822, 0xffffffff)
	var x1848 uint32
	var x1849 uint32
	x1848, x1849 = bits.Add32(x1847, x1844, uint32(0x0))
	var x1850 uint32
	var x1851 uint32
	x1850, x1851 = bits.Add32(x1845, x1842, uint32(uint1(x1849)))
	x1852 := (uint32(uint1(x1851)) + x1843)
	var x1854 uint32
	_, x1854 = bits.Add32(x1822, x1846, uint32(0x0))
	var x1855 uint32
	var x1856 uint32
	x1855, x1856 = bits.Add32(x1824, x1848, uint32(uint1(x1854)))
	var x1857 uint32
	var x1858 uint32
	x1857, x1858 = bits.Add32(x1826, x1850, uint32(uint1(x1856)))
	var x1859 uint32
	var x1860 uint32
	x1859, x1860 = bits.Add32(x1828, x1852, uint32(uint1(x1858)))
	var x1861 uint32
	var x1862 uint32
	x1861, x1862 = bits.Add32(x1830, uint32(0x0), uint32(uint1(x1860)))
	var x1863 uint32
	var x1864 uint32
	x1863, x1864 = bits.Add32(x1832, uint32(0x0), uint32(uint1(x1862)))
	var x1865 uint32
	var x1866 uint32
	x1865, x1866 = bits.Add32(x1834, x1822, uint32(uint1(x1864)))
	var x1867 uint32
	var x1868 uint32
	x1867, x1868 = bits.Add32(x1836, x1840, uint32(uint1(x1866)))
	var x1869 uint32
	var x1870 uint32
	x1869, x1870 = bits.Add32(x1838, x1841, uint32(uint1(x1868)))
	x1871 := (uint32(uint1(x1870)) + uint32(uint1(x1839)))
	var x1872 uint32
	var x1873 uint32
	x1873, x1872 = bits.Mul32(x1591, arg3[7])
	var x1874 uint32
	var x1875 uint32
	x1875, x1874 = bits.Mul32(x1591, arg3[6])
	var x1876 uint32
	var x1877 uint32
	x1877, x1876 = bits.Mul32(x1591, arg3[5])
	var x1878 uint32
	var x1879 uint32
	x1879, x1878 = bits.Mul32(x1591, arg3[4])
	var x1880 uint32
	var x1881 uint32
	x1881, x1880 = bits.Mul32(x1591, arg3[3])
	var x1882 uint32
	var x1883 uint32
	x1883, x1882 = bits.Mul32(x1591, arg3[2])
	var x1884 uint32
	var x1885 uint32
	x1885, x1884 = bits.Mul32(x1591, arg3[1])
	var x1886 uint32
	var x1887 uint32
	x1887, x1886 = bits.Mul32(x1591, arg3[0])
	var x1888 uint32
	var x1889 uint32
	x1888, x1889 = bits.Add32(x1887, x1884, uint32(0x0))
	var x1890 uint32
	var x1891 uint32
	x1890, x1891 = bits.Add32(x1885, x1882, uint32(uint1(x1889)))
	var x1892 uint32
	var x1893 uint32
	x1892, x1893 = bits.Add32(x1883, x1880, uint32(uint1(x1891)))
	var x1894 uint32
	var x1895 uint32
	x1894, x1895 = bits.Add32(x1881, x1878, uint32(uint1(x1893)))
	var x1896 uint32
	var x1897 uint32
	x1896, x1897 = bits.Add32(x1879, x1876, uint32(uint1(x1895)))
	var x1898 uint32
	var x1899 uint32
	x1898, x1899 = bits.Add32(x1877, x1874, uint32(uint1(x1897)))
	var x1900 uint32
	var x1901 uint32
	x1900, x1901 = bits.Add32(x1875, x1872, uint32(uint1(x1899)))
	x1902 := (uint32(uint1(x1901)) + x1873)
	var x1903 uint32
	var x1904 uint32
	x1903, x1904 = bits.Add32(x1855, x1886, uint32(0x0))
	var x1905 uint32
	var x1906 uint32
	x1905, x1906 = bits.Add32(x1857, x1888, uint32(uint1(x1904)))
	var x1907 uint32
	var x1908 uint32
	x1907, x1908 = bits.Add32(x1859, x1890, uint32(uint1(x1906)))
	var x1909 uint32
	var x1910 uint32
	x1909, x1910 = bits.Add32(x1861, x1892, uint32(uint1(x1908)))
	var x1911 uint32
	var x1912 uint32
	x1911, x1912 = bits.Add32(x1863, x1894, uint32(uint1(x1910)))
	var x1913 uint32
	var x1914 uint32
	x1913, x1914 = bits.Add32(x1865, x1896, uint32(uint1(x1912)))
	var x1915 uint32
	var x1916 uint32
	x1915, x1916 = bits.Add32(x1867, x1898, uint32(uint1(x1914)))
	var x1917 uint32
	var x1918 uint32
	x1917, x1918 = bits.Add32(x1869, x1900, uint32(uint1(x1916)))
	var x1919 uint32
	var x1920 uint32
	x1919, x1920 = bits.Add32(x1871, x1902, uint32(uint1(x1918)))
	var x1921 uint32
	var x1922 uint32
	x1922, x1921 = bits.Mul32(x1903, 0xffffffff)
	var x1923 uint32
	var x1924 uint32
	x1924, x1923 = bits.Mul32(x1903, 0xffffffff)
	var x1925 uint32
	var x1926 uint32
	x1926, x1925 = bits.Mul32(x1903, 0xffffffff)
	var x1927 uint32
	var x1928 uint32
	x1928, x1927 = bits.Mul32(x1903, 0xffffffff)
	var x1929 uint32
	var x1930 uint32
	x1929, x1930 = bits.Add32(x1928, x1925, uint32(0x0))
	var x1931 uint32
	var x1932 uint32
	x1931, x1932 = bits.Add32(x1926, x1923, uint32(uint1(x1930)))
	x1933 := (uint32(uint1(x1932)) + x1924)
	var x1935 uint32
	_, x1935 = bits.Add32(x1903, x1927, uint32(0x0))
	var x1936 uint32
	var x1937 uint32
	x1936, x1937 = bits.Add32(x1905, x1929, uint32(uint1(x1935)))
	var x1938 uint32
	var x1939 uint32
	x1938, x1939 = bits.Add32(x1907, x1931, uint32(uint1(x1937)))
	var x1940 uint32
	var x1941 uint32
	x1940, x1941 = bits.Add32(x1909, x1933, uint32(uint1(x1939)))
	var x1942 uint32
	var x1943 uint32
	x1942, x1943 = bits.Add32(x1911, uint32(0x0), uint32(uint1(x1941)))
	var x1944 uint32
	var x1945 uint32
	x1944, x1945 = bits.Add32(x1913, uint32(0x0), uint32(uint1(x1943)))
	var x1946 uint32
	var x1947 uint32
	x1946, x1947 = bits.Add32(x1915, x1903, uint32(uint1(x1945)))
	var x1948 uint32
	var x1949 uint32
	x1948, x1949 = bits.Add32(x1917, x1921, uint32(uint1(x1947)))
	var x1950 uint32
	var x1951 uint32
	x1950, x1951 = bits.Add32(x1919, x1922, uint32(uint1(x1949)))
	x1952 := (uint32(uint1(x1951)) + uint32(uint1(x1920)))
	var x1953 uint32
	var x1954 uint32
	x1954, x1953 = bits.Mul32(x1592, arg3[7])
	var x1955 uint32
	var x1956 uint32
	x1956, x1955 = bits.Mul32(x1592, arg3[6])
	var x1957 uint32
	var x1958 uint32
	x1958, x1957 = bits.Mul32(x1592, arg3[5])
	var x1959 uint32
	var x1960 uint32
	x1960, x1959 = bits.Mul32(x1592, arg3[4])
	var x1961 uint32
	var x1962 uint32
	x1962, x1961 = bits.Mul32(x1592, arg3[3])
	var x1963 uint32
	var x1964 uint32
	x1964, x1963 = bits.Mul32(x1592, arg3[2])
	var x1965 uint32
	var x1966 uint32
	x1966, x1965 = bits.Mul32(x1592, arg3[1])
	var x1967 uint32
	var x1968 uint32
	x1968, x1967 = bits.Mul32(x1592, arg3[0])
	var x1969 uint32
	var x1970 uint32
	x1969, x1970 = bits.Add32(x1968, x1965, uint32(0x0))
	var x1971 uint32
	var x1972 uint32
	x1971, x1972 = bits.Add32(x1966, x1963, uint32(uint1(x1970)))
	var x1973 uint32
	var x1974 uint32
	x1973, x1974 = bits.Add32(x1964, x1961, uint32(uint1(x1972)))
	var x1975 uint32
	var x1976 uint32
	x1975, x1976 = bits.Add32(x1962, x1959, uint32(uint1(x1974)))
	var x1977 uint32
	var x1978 uint32
	x1977, x1978 = bits.Add32(x1960, x1957, uint32(uint1(x1976)))
	var x1979 uint32
	var x1980 uint32
	x1979, x1980 = bits.Add32(x1958, x1955, uint32(uint1(x1978)))
	var x1981 uint32
	var x1982 uint32
	x1981, x1982 = bits.Add32(x1956, x1953, uint32(uint1(x1980)))
	x1983 := (uint32(uint1(x1982)) + x1954)
	var x1984 uint32
	var x1985 uint32
	x1984, x1985 = bits.Add32(x1936, x1967, uint32(0x0))
	var x1986 uint32
	var x1987 uint32
	x1986, x1987 = bits.Add32(x1938, x1969, uint32(uint1(x1985)))
	var x1988 uint32
	var x1989 uint32
	x1988, x1989 = bits.Add32(x1940, x1971, uint32(uint1(x1987)))
	var x1990 uint32
	var x1991 uint32
	x1990, x1991 = bits.Add32(x1942, x1973, uint32(uint1(x1989)))
	var x1992 uint32
	var x1993 uint32
	x1992, x1993 = bits.Add32(x1944, x1975, uint32(uint1(x1991)))
	var x1994 uint32
	var x1995 uint32
	x1994, x1995 = bits.Add32(x1946, x1977, uint32(uint1(x1993)))
	var x1996 uint32
	var x1997 uint32
	x1996, x1997 = bits.Add32(x1948, x1979, uint32(uint1(x1995)))
	var x1998 uint32
	var x1999 uint32
	x1998, x1999 = bits.Add32(x1950, x1981, uint32(uint1(x1997)))
	var x2000 uint32
	var x2001 uint32
	x2000, x2001 = bits.Add32(x1952, x1983, uint32(uint1(x1999)))
	var x2002 uint32
	var x2003 uint32
	x2003, x2002 = bits.Mul32(x1984, 0xffffffff)
	var x2004 uint32
	var x2005 uint32
	x2005, x2004 = bits.Mul32(x1984, 0xffffffff)
	var x2006 uint32
	var x2007 uint32
	x2007, x2006 = bits.Mul32(x1984, 0xffffffff)
	var x2008 uint32
	var x2009 uint32
	x2009, x2008 = bits.Mul32(x1984, 0xffffffff)
	var x2010 uint32
	var x2011 uint32
	x2010, x2011 = bits.Add32(x2009, x2006, uint32(0x0))
	var x2012 uint32
	var x2013 uint32
	x2012, x2013 = bits.Add32(x2007, x2004, uint32(uint1(x2011)))
	x2014 := (uint32(uint1(x2013)) + x2005)
	var x2016 uint32
	_, x2016 = bits.Add32(x1984, x2008, uint32(0x0))
	var x2017 uint32
	var x2018 uint32
	x2017, x2018 = bits.Add32(x1986, x2010, uint32(uint1(x2016)))
	var x2019 uint32
	var x2020 uint32
	x2019, x2020 = bits.Add32(x1988, x2012, uint32(uint1(x2018)))
	var x2021 uint32
	var x2022 uint32
	x2021, x2022 = bits.Add32(x1990, x2014, uint32(uint1(x2020)))
	var x2023 uint32
	var x2024 uint32
	x2023, x2024 = bits.Add32(x1992, uint32(0x0), uint32(uint1(x2022)))
	var x2025 uint32
	var x2026 uint32
	x2025, x2026 = bits.Add32(x1994, uint32(0x0), uint32(uint1(x2024)))
	var x2027 uint32
	var x2028 uint32
	x2027, x2028 = bits.Add32(x1996, x1984, uint32(uint1(x2026)))
	var x2029 uint32
	var x2030 uint32
	x2029, x2030 = bits.Add32(x1998, x2002, uint32(uint1(x2028)))
	var x2031 uint32
	var x2032 uint32
	x2031, x2032 = bits.Add32(x2000, x2003, uint32(uint1(x2030)))
	x2033 := (uint32(uint1(x2032)) + uint32(uint1(x2001)))
	var x2034 uint32
	var x2035 uint32
	x2035, x2034 = bits.Mul32(x1593, arg3[7])
	var x2036 uint32
	var x2037 uint32
	x2037, x2036 = bits.Mul32(x1593, arg3[6])
	var x2038 uint32
	var x2039 uint32
	x2039, x2038 = bits.Mul32(x1593, arg3[5])
	var x2040 uint32
	var x2041 uint32
	x2041, x2040 = bits.Mul32(x1593, arg3[4])
	var x2042 uint32
	var x2043 uint32
	x2043, x2042 = bits.Mul32(x1593, arg3[3])
	var x2044 uint32
	var x2045 uint32
	x2045, x2044 = bits.Mul32(x1593, arg3[2])
	var x2046 uint32
	var x2047 uint32
	x2047, x2046 = bits.Mul32(x1593, arg3[1])
	var x2048 uint32
	var x2049 uint32
	x2049, x2048 = bits.Mul32(x1593, arg3[0])
	var x2050 uint32
	var x2051 uint32
	x2050, x2051 = bits.Add32(x2049, x2046, uint32(0x0))
	var x2052 uint32
	var x2053 uint32
	x2052, x2053 = bits.Add32(x2047, x2044, uint32(uint1(x2051)))
	var x2054 uint32
	var x2055 uint32
	x2054, x2055 = bits.Add32(x2045, x2042, uint32(uint1(x2053)))
	var x2056 uint32
	var x2057 uint32
	x2056, x2057 = bits.Add32(x2043, x2040, uint32(uint1(x2055)))
	var x2058 uint32
	var x2059 uint32
	x2058, x2059 = bits.Add32(x2041, x2038, uint32(uint1(x2057)))
	var x2060 uint32
	var x2061 uint32
	x2060, x2061 = bits.Add32(x2039, x2036, uint32(uint1(x2059)))
	var x2062 uint32
	var x2063 uint32
	x2062, x2063 = bits.Add32(x2037, x2034, uint32(uint1(x2061)))
	x2064 := (uint32(uint1(x2063)) + x2035)
	var x2065 uint32
	var x2066 uint32
	x2065, x2066 = bits.Add32(x2017, x2048, uint32(0x0))
	var x2067 uint32
	var x2068 uint32
	x2067, x2068 = bits.Add32(x2019, x2050, uint32(uint1(x2066)))
	var x2069 uint32
	var x2070 uint32
	x2069, x2070 = bits.Add32(x2021, x2052, uint32(uint1(x2068)))
	var x2071 uint32
	var x2072 uint32
	x2071, x2072 = bits.Add32(x2023, x2054, uint32(uint1(x2070)))
	var x2073 uint32
	var x2074 uint32
	x2073, x2074 = bits.Add32(x2025, x2056, uint32(uint1(x2072)))
	var x2075 uint32
	var x2076 uint32
	x2075, x2076 = bits.Add32(x2027, x2058, uint32(uint1(x2074)))
	var x2077 uint32
	var x2078 uint32
	x2077, x2078 = bits.Add32(x2029, x2060, uint32(uint1(x2076)))
	var x2079 uint32
	var x2080 uint32
	x2079, x2080 = bits.Add32(x2031, x2062, uint32(uint1(x2078)))
	var x2081 uint32
	var x2082 uint32
	x2081, x2082 = bits.Add32(x2033, x2064, uint32(uint1(x2080)))
	var x2083 uint32
	var x2084 uint32
	x2084, x2083 = bits.Mul32(x2065, 0xffffffff)
	var x2085 uint32
	var x2086 uint32
	x2086, x2085 = bits.Mul32(x2065, 0xffffffff)
	var x2087 uint32
	var x2088 uint32
	x2088, x2087 = bits.Mul32(x2065, 0xffffffff)
	var x2089 uint32
	var x2090 uint32
	x2090, x2089 = bits.Mul32(x2065, 0xffffffff)
	var x2091 uint32
	var x2092 uint32
	x2091, x2092 = bits.Add32(x2090, x2087, uint32(0x0))
	var x2093 uint32
	var x2094 uint32
	x2093, x2094 = bits.Add32(x2088, x2085, uint32(uint1(x2092)))
	x2095 := (uint32(uint1(x2094)) + x2086)
	var x2097 uint32
	_, x2097 = bits.Add32(x2065, x2089, uint32(0x0))
	var x2098 uint32
	var x2099 uint32
	x2098, x2099 = bits.Add32(x2067, x2091, uint32(uint1(x2097)))
	var x2100 uint32
	var x2101 uint32
	x2100, x2101 = bits.Add32(x2069, x2093, uint32(uint1(x2099)))
	var x2102 uint32
	var x2103 uint32
	x2102, x2103 = bits.Add32(x2071, x2095, uint32(uint1(x2101)))
	var x2104 uint32
	var x2105 uint32
	x2104, x2105 = bits.Add32(x2073, uint32(0x0), uint32(uint1(x2103)))
	var x2106 uint32
	var x2107 uint32
	x2106, x2107 = bits.Add32(x2075, uint32(0x0), uint32(uint1(x2105)))
	var x2108 uint32
	var x2109 uint32
	x2108, x2109 = bits.Add32(x2077, x2065, uint32(uint1(x2107)))
	var x2110 uint32
	var x2111 uint32
	x2110, x2111 = bits.Add32(x2079, x2083, uint32(uint1(x2109)))
	var x2112 uint32
	var x2113 uint32
	x2112, x2113 = bits.Add32(x2081, x2084, uint32(uint1(x2111)))
	x2114 := (uint32(uint1(x2113)) + uint32(uint1(x2082)))
	var x2115 uint32
	var x2116 uint32
	x2116, x2115 = bits.Mul32(x1594, arg3[7])
	var x2117 uint32
	var x2118 uint32
	x2118, x2117 = bits.Mul32(x1594, arg3[6])
	var x2119 uint32
	var x2120 uint32
	x2120, x2119 = bits.Mul32(x1594, arg3[5])
	var x2121 uint32
	var x2122 uint32
	x2122, x2121 = bits.Mul32(x1594, arg3[4])
	var x2123 uint32
	var x2124 uint32
	x2124, x2123 = bits.Mul32(x1594, arg3[3])
	var x2125 uint32
	var x2126 uint32
	x2126, x2125 = bits.Mul32(x1594, arg3[2])
	var x2127 uint32
	var x2128 uint32
	x2128, x2127 = bits.Mul32(x1594, arg3[1])
	var x2129 uint32
	var x2130 uint32
	x2130, x2129 = bits.Mul32(x1594, arg3[0])
	var x2131 uint32
	var x2132 uint32
	x2131, x2132 = bits.Add32(x2130, x2127, uint32(0x0))
	var x2133 uint32
	var x2134 uint32
	x2133, x2134 = bits.Add32(x2128, x2125, uint32(uint1(x2132)))
	var x2135 uint32
	var x2136 uint32
	x2135, x2136 = bits.Add32(x2126, x2123, uint32(uint1(x2134)))
	var x2137 uint32
	var x2138 uint32
	x2137, x2138 = bits.Add32(x2124, x2121, uint32(uint1(x2136)))
	var x2139 uint32
	var x2140 uint32
	x2139, x2140 = bits.Add32(x2122, x2119, uint32(uint1(x2138)))
	var x2141 uint32
	var x2142 uint32
	x2141, x2142 = bits.Add32(x2120, x2117, uint32(uint1(x2140)))
	var x2143 uint32
	var x2144 uint32
	x2143, x2144 = bits.Add32(x2118, x2115, uint32(uint1(x2142)))
	x2145 := (uint32(uint1(x2144)) + x2116)
	var x2146 uint32
	var x2147 uint32
	x2146, x2147 = bits.Add32(x2098, x2129, uint32(0x0))
	var x2148 uint32
	var x2149 uint32
	x2148, x2149 = bits.Add32(x2100, x2131, uint32(uint1(x2147)))
	var x2150 uint32
	var x2151 uint32
	x2150, x2151 = bits.Add32(x2102, x2133, uint32(uint1(x2149)))
	var x2152 uint32
	var x2153 uint32
	x2152, x2153 = bits.Add32(x2104, x2135, uint32(uint1(x2151)))
	var x2154 uint32
	var x2155 uint32
	x2154, x2155 = bits.Add32(x2106, x2137, uint32(uint1(x2153)))
	var x2156 uint32
	var x2157 uint32
	x2156, x2157 = bits.Add32(x2108, x2139, uint32(uint1(x2155)))
	var x2158 uint32
	var x2159 uint32
	x2158, x2159 = bits.Add32(x2110, x2141, uint32(uint1(x2157)))
	var x2160 uint32
	var x2161 uint32
	x2160, x2161 = bits.Add32(x2112, x2143, uint32(uint1(x2159)))
	var x2162 uint32
	var x2163 uint32
	x2162, x2163 = bits.Add32(x2114, x2145, uint32(uint1(x2161)))
	var x2164 uint32
	var x2165 uint32
	x2165, x2164 = bits.Mul32(x2146, 0xffffffff)
	var x2166 uint32
	var x2167 uint32
	x2167, x2166 = bits.Mul32(x2146, 0xffffffff)
	var x2168 uint32
	var x2169 uint32
	x2169, x2168 = bits.Mul32(x2146, 0xffffffff)
	var x2170 uint32
	var x2171 uint32
	x2171, x2170 = bits.Mul32(x2146, 0xffffffff)
	var x2172 uint32
	var x2173 uint32
	x2172, x2173 = bits.Add32(x2171, x2168, uint32(0x0))
	var x2174 uint32
	var x2175 uint32
	x2174, x2175 = bits.Add32(x2169, x2166, uint32(uint1(x2173)))
	x2176 := (uint32(uint1(x2175)) + x2167)
	var x2178 uint32
	_, x2178 = bits.Add32(x2146, x2170, uint32(0x0))
	var x2179 uint32
	var x2180 uint32
	x2179, x2180 = bits.Add32(x2148, x2172, uint32(uint1(x2178)))
	var x2181 uint32
	var x2182 uint32
	x2181, x2182 = bits.Add32(x2150, x2174, uint32(uint1(x2180)))
	var x2183 uint32
	var x2184 uint32
	x2183, x2184 = bits.Add32(x2152, x2176, uint32(uint1(x2182)))
	var x2185 uint32
	var x2186 uint32
	x2185, x2186 = bits.Add32(x2154, uint32(0x0), uint32(uint1(x2184)))
	var x2187 uint32
	var x2188 uint32
	x2187, x2188 = bits.Add32(x2156, uint32(0x0), uint32(uint1(x2186)))
	var x2189 uint32
	var x2190 uint32
	x2189, x2190 = bits.Add32(x2158, x2146, uint32(uint1(x2188)))
	var x2191 uint32
	var x2192 uint32
	x2191, x2192 = bits.Add32(x2160, x2164, uint32(uint1(x2190)))
	var x2193 uint32
	var x2194 uint32
	x2193, x2194 = bits.Add32(x2162, x2165, uint32(uint1(x2192)))
	x2195 := (uint32(uint1(x2194)) + uint32(uint1(x2163)))
	var x2196 uint32
	var x2197 uint32
	x2197, x2196 = bits.Mul32(x1595, arg3[7])
	var x2198 uint32
	var x2199 uint32
	x2199, x2198 = bits.Mul32(x1595, arg3[6])
	var x2200 uint32
	var x2201 uint32
	x2201, x2200 = bits.Mul32(x1595, arg3[5])
	var x2202 uint32
	var x2203 uint32
	x2203, x2202 = bits.Mul32(x1595, arg3[4])
	var x2204 uint32
	var x2205 uint32
	x2205, x2204 = bits.Mul32(x1595, arg3[3])
	var x2206 uint32
	var x2207 uint32
	x2207, x2206 = bits.Mul32(x1595, arg3[2])
	var x2208 uint32
	var x2209 uint32
	x2209, x2208 = bits.Mul32(x1595, arg3[1])
	var x2210 uint32
	var x2211 uint32
	x2211, x2210 = bits.Mul32(x1595, arg3[0])
	var x2212 uint32
	var x2213 uint32
	x2212, x2213 = bits.Add32(x2211, x2208, uint32(0x0))
	var x2214 uint32
	var x2215 uint32
	x2214, x2215 = bits.Add32(x2209, x2206, uint32(uint1(x2213)))
	var x2216 uint32
	var x2217 uint32
	x2216, x2217 = bits.Add32(x2207, x2204, uint32(uint1(x2215)))
	var x2218 uint32
	var x2219 uint32
	x2218, x2219 = bits.Add32(x2205, x2202, uint32(uint1(x2217)))
	var x2220 uint32
	var x2221 uint32
	x2220, x2221 = bits.Add32(x2203, x2200, uint32(uint1(x2219)))
	var x2222 uint32
	var x2223 uint32
	x2222, x2223 = bits.Add32(x2201, x2198, uint32(uint1(x2221)))
	var x2224 uint32
	var x2225 uint32
	x2224, x2225 = bits.Add32(x2199, x2196, uint32(uint1(x2223)))
	x2226 := (uint32(uint1(x2225)) + x2197)
	var x2227 uint32
	var x2228 uint32
	x2227, x2228 = bits.Add32(x2179, x2210, uint32(0x0))
	var x2229 uint32
	var x2230 uint32
	x2229, x2230 = bits.Add32(x2181, x2212, uint32(uint1(x2228)))
	var x2231 uint32
	var x2232 uint32
	x2231, x2232 = bits.Add32(x2183, x2214, uint32(uint1(x2230)))
	var x2233 uint32
	var x2234 uint32
	x2233, x2234 = bits.Add32(x2185, x2216, uint32(uint1(x2232)))
	var x2235 uint32
	var x2236 uint32
	x2235, x2236 = bits.Add32(x2187, x2218, uint32(uint1(x2234)))
	var x2237 uint32
	var x2238 uint32
	x2237, x2238 = bits.Add32(x2189, x2220, uint32(uint1(x2236)))
	var x2239 uint32
	var x2240 uint32
	x2239, x2240 = bits.Add32(x2191, x2222, uint32(uint1(x2238)))
	var x2241 uint32
	var x2242 uint32
	x2241, x2242 = bits.Add32(x2193, x2224, uint32(uint1(x2240)))
	var x2243 uint32
	var x2244 uint32
	x2243, x2244 = bits.Add32(x2195, x2226, uint32(uint1(x2242)))
	var x2245 uint32
	var x2246 uint32
	x2246, x2245 = bits.Mul32(x2227, 0xffffffff)
	var x2247 uint32
	var x2248 uint32
	x2248, x2247 = bits.Mul32(x2227, 0xffffffff)
	var x2249 uint32
	var x2250 uint32
	x2250, x2249 = bits.Mul32(x2227, 0xffffffff)
	var x2251 uint32
	var x2252 uint32
	x2252, x2251 = bits.Mul32(x2227, 0xffffffff)
	var x2253 uint32
	var x2254 uint32
	x2253, x2254 = bits.Add32(x2252, x2249, uint32(0x0))
	var x2255 uint32
	var x2256 uint32
	x2255, x2256 = bits.Add32(x2250, x2247, uint32(uint1(x2254)))
	x2257 := (uint32(uint1(x2256)) + x2248)
	var x2259 uint32
	_, x2259 = bits.Add32(x2227, x2251, uint32(0x0))
	var x2260 uint32
	var x2261 uint32
	x2260, x2261 = bits.Add32(x2229, x2253, uint32(uint1(x2259)))
	var x2262 uint32
	var x2263 uint32
	x2262, x2263 = bits.Add32(x2231, x2255, uint32(uint1(x2261)))
	var x2264 uint32
	var x2265 uint32
	x2264, x2265 = bits.Add32(x2233, x2257, uint32(uint1(x2263)))
	var x2266 uint32
	var x2267 uint32
	x2266, x2267 = bits.Add32(x2235, uint32(0x0), uint32(uint1(x2265)))
	var x2268 uint32
	var x2269 uint32
	x2268, x2269 = bits.Add32(x2237, uint32(0x0), uint32(uint1(x2267)))
	var x2270 uint32
	var x2271 uint32
	x2270, x2271 = bits.Add32(x2239, x2227, uint32(uint1(x2269)))
	var x2272 uint32
	var x2273 uint32
	x2272, x2273 = bits.Add32(x2241, x2245, uint32(uint1(x2271)))
	var x2274 uint32
	var x2275 uint32
	x2274, x2275 = bits.Add32(x2243, x2246, uint32(uint1(x2273)))
	x2276 := (uint32(uint1(x2275)) + uint32(uint1(x2244)))
	var x2277 uint32
	var x2278 uint32
	x2278, x2277 = bits.Mul32(x1596, arg3[7])
	var x2279 uint32
	var x2280 uint32
	x2280, x2279 = bits.Mul32(x1596, arg3[6])
	var x2281 uint32
	var x2282 uint32
	x2282, x2281 = bits.Mul32(x1596, arg3[5])
	var x2283 uint32
	var x2284 uint32
	x2284, x2283 = bits.Mul32(x1596, arg3[4])
	var x2285 uint32
	var x2286 uint32
	x2286, x2285 = bits.Mul32(x1596, arg3[3])
	var x2287 uint32
	var x2288 uint32
	x2288, x2287 = bits.Mul32(x1596, arg3[2])
	var x2289 uint32
	var x2290 uint32
	x2290, x2289 = bits.Mul32(x1596, arg3[1])
	var x2291 uint32
	var x2292 uint32
	x2292, x2291 = bits.Mul32(x1596, arg3[0])
	var x2293 uint32
	var x2294 uint32
	x2293, x2294 = bits.Add32(x2292, x2289, uint32(0x0))
	var x2295 uint32
	var x2296 uint32
	x2295, x2296 = bits.Add32(x2290, x2287, uint32(uint1(x2294)))
	var x2297 uint32
	var x2298 uint32
	x2297, x2298 = bits.Add32(x2288, x2285, uint32(uint1(x2296)))
	var x2299 uint32
	var x2300 uint32
	x2299, x2300 = bits.Add32(x2286, x2283, uint32(uint1(x2298)))
	var x2301 uint32
	var x2302 uint32
	x2301, x2302 = bits.Add32(x2284, x2281, uint32(uint1(x2300)))
	var x2303 uint32
	var x2304 uint32
	x2303, x2304 = bits.Add32(x2282, x2279, uint32(uint1(x2302)))
	var x2305 uint32
	var x2306 uint32
	x2305, x2306 = bits.Add32(x2280, x2277, uint32(uint1(x2304)))
	x2307 := (uint32(uint1(x2306)) + x2278)
	var x2308 uint32
	var x2309 uint32
	x2308, x2309 = bits.Add32(x2260, x2291, uint32(0x0))
	var x2310 uint32
	var x2311 uint32
	x2310, x2311 = bits.Add32(x2262, x2293, uint32(uint1(x2309)))
	var x2312 uint32
	var x2313 uint32
	x2312, x2313 = bits.Add32(x2264, x2295, uint32(uint1(x2311)))
	var x2314 uint32
	var x2315 uint32
	x2314, x2315 = bits.Add32(x2266, x2297, uint32(uint1(x2313)))
	var x2316 uint32
	var x2317 uint32
	x2316, x2317 = bits.Add32(x2268, x2299, uint32(uint1(x2315)))
	var x2318 uint32
	var x2319 uint32
	x2318, x2319 = bits.Add32(x2270, x2301, uint32(uint1(x2317)))
	var x2320 uint32
	var x2321 uint32
	x2320, x2321 = bits.Add32(x2272, x2303, uint32(uint1(x2319)))
	var x2322 uint32
	var x2323 uint32
	x2322, x2323 = bits.Add32(x2274, x2305, uint32(uint1(x2321)))
	var x2324 uint32
	var x2325 uint32
	x2324, x2325 = bits.Add32(x2276, x2307, uint32(uint1(x2323)))
	var x2326 uint32
	var x2327 uint32
	x2327, x2326 = bits.Mul32(x2308, 0xffffffff)
	var x2328 uint32
	var x2329 uint32
	x2329, x2328 = bits.Mul32(x2308, 0xffffffff)
	var x2330 uint32
	var x2331 uint32
	x2331, x2330 = bits.Mul32(x2308, 0xffffffff)
	var x2332 uint32
	var x2333 uint32
	x2333, x2332 = bits.Mul32(x2308, 0xffffffff)
	var x2334 uint32
	var x2335 uint32
	x2334, x2335 = bits.Add32(x2333, x2330, uint32(0x0))
	var x2336 uint32
	var x2337 uint32
	x2336, x2337 = bits.Add32(x2331, x2328, uint32(uint1(x2335)))
	x2338 := (uint32(uint1(x2337)) + x2329)
	var x2340 uint32
	_, x2340 = bits.Add32(x2308, x2332, uint32(0x0))
	var x2341 uint32
	var x2342 uint32
	x2341, x2342 = bits.Add32(x2310, x2334, uint32(uint1(x2340)))
	var x2343 uint32
	var x2344 uint32
	x2343, x2344 = bits.Add32(x2312, x2336, uint32(uint1(x2342)))
	var x2345 uint32
	var x2346 uint32
	x2345, x2346 = bits.Add32(x2314, x2338, uint32(uint1(x2344)))
	var x2347 uint32
	var x2348 uint32
	x2347, x2348 = bits.Add32(x2316, uint32(0x0), uint32(uint1(x2346)))
	var x2349 uint32
	var x2350 uint32
	x2349, x2350 = bits.Add32(x2318, uint32(0x0), uint32(uint1(x2348)))
	var x2351 uint32
	var x2352 uint32
	x2351, x2352 = bits.Add32(x2320, x2308, uint32(uint1(x2350)))
	var x2353 uint32
	var x2354 uint32
	x2353, x2354 = bits.Add32(x2322, x2326, uint32(uint1(x2352)))
	var x2355 uint32
	var x2356 uint32
	x2355, x2356 = bits.Add32(x2324, x2327, uint32(uint1(x2354)))
	x2357 := (uint32(uint1(x2356)) + uint32(uint1(x2325)))
	var x2358 uint32
	var x2359 uint32
	x2358, x2359 = bits.Sub32(x2341, 0xffffffff, uint32(0x0))
	var x2360 uint32
	var x2361 uint32
	x2360, x2361 = bits.Sub32(x2343, 0xffffffff, uint32(uint1(x2359)))
	var x2362 uint32
	var x2363 uint32
	x2362, x2363 = bits.Sub32(x2345, 0xffffffff, uint32(uint1(x2361)))
	var x2364 uint32
	var x2365 uint32
	x2364, x2365 = bits.Sub32(x2347, uint32(0x0), uint32(uint1(x2363)))
	var x2366 uint32
	var x2367 uint32
	x2366, x2367 = bits.Sub32(x2349, uint32(0x0), uint32(uint1(x2365)))
	var x2368 uint32
	var x2369 uint32
	x2368, x2369 = bits.Sub32(x2351, uint32(0x0), uint32(uint1(x2367)))
	var x2370 uint32
	var x2371 uint32
	x2370, x2371 = bits.Sub32(x2353, uint32(0x1), uint32(uint1(x2369)))
	var x2372 uint32
	var x2373 uint32
	x2372, x2373 = bits.Sub32(x2355, 0xffffffff, uint32(uint1(x2371)))
	var x2375 uint32
	_, x2375 = bits.Sub32(x2357, uint32(0x0), uint32(uint1(x2373)))
	var x2376 uint32
	cmovznzU32(&x2376, uint1(x2375), x2358, x2341)
	var x2377 uint32
	cmovznzU32(&x2377, uint1(x2375), x2360, x2343)
	var x2378 uint32
	cmovznzU32(&x2378, uint1(x2375), x2362, x2345)
	var x2379 uint32
	cmovznzU32(&x2379, uint1(x2375), x2364, x2347)
	var x2380 uint32
	cmovznzU32(&x2380, uint1(x2375), x2366, x2349)
	var x2381 uint32
	cmovznzU32(&x2381, uint1(x2375), x2368, x2351)
	var x2382 uint32
	cmovznzU32(&x2382, uint1(x2375), x2370, x2353)
	var x2383 uint32
	cmovznzU32(&x2383, uint1(x2375), x2372, x2355)
	var x2384 uint32
	var x2385 uint32
	x2385, x2384 = bits.Mul32(x1633, arg4[7])
	var x2386 uint32
	var x2387 uint32
	x2387, x2386 = bits.Mul32(x1633, arg4[6])
	var x2388 uint32
	var x2389 uint32
	x2389, x2388 = bits.Mul32(x1633, arg4[5])
	var x2390 uint32
	var x2391 uint32
	x2391, x2390 = bits.Mul32(x1633, arg4[4])
	var x2392 uint32
	var x2393 uint32
	x2393, x2392 = bits.Mul32(x1633, arg4[3])
	var x2394 uint32
	var x2395 uint32
	x2395, x2394 = bits.Mul32(x1633, arg4[2])
	var x2396 uint32
	var x2397 uint32
	x2397, x2396 = bits.Mul32(x1633, arg4[1])
	var x2398 uint32
	var x2399 uint32
	x2399, x2398 = bits.Mul32(x1633, arg4[0])
	var x2400 uint32
	var x2401 uint32
	x2400, x2401 = bits.Add32(x2399, x2396, uint32(0x0))
	var x2402 uint32
	var x2403 uint32
	x2402, x2403 = bits.Add32(x2397, x2394, uint32(uint1(x2401)))
	var x2404 uint32
	var x2405 uint32
	x2404, x2405 = bits.Add32(x2395, x2392, uint32(uint1(x2403)))
	var x2406 uint32
	var x2407 uint32
	x2406, x2407 = bits.Add32(x2393, x2390, uint32(uint1(x2405)))
	var x2408 uint32
	var x2409 uint32
	x2408, x2409 = bits.Add32(x2391, x2388, uint32(uint1(x2407)))
	var x2410 uint32
	var x2411 uint32
	x2410, x2411 = bits.Add32(x2389, x2386, uint32(uint1(x2409)))
	var x2412 uint32
	var x2413 uint32
	x2412, x2413 = bits.Add32(x2387, x2384, uint32(uint1(x2411)))
	x2414 := (uint32(uint1(x2413)) + x2385)
	var x2415 uint32
	var x2416 uint32
	x2416, x2415 = bits.Mul32(x2398, 0xffffffff)
	var x2417 uint32
	var x2418 uint32
	x2418, x2417 = bits.Mul32(x2398, 0xffffffff)
	var x2419 uint32
	var x2420 uint32
	x2420, x2419 = bits.Mul32(x2398, 0xffffffff)
	var x2421 uint32
	var x2422 uint32
	x2422, x2421 = bits.Mul32(x2398, 0xffffffff)
	var x2423 uint32
	var x2424 uint32
	x2423, x2424 = bits.Add32(x2422, x2419, uint32(0x0))
	var x2425 uint32
	var x2426 uint32
	x2425, x2426 = bits.Add32(x2420, x2417, uint32(uint1(x2424)))
	x2427 := (uint32(uint1(x2426)) + x2418)
	var x2429 uint32
	_, x2429 = bits.Add32(x2398, x2421, uint32(0x0))
	var x2430 uint32
	var x2431 uint32
	x2430, x2431 = bits.Add32(x2400, x2423, uint32(uint1(x2429)))
	var x2432 uint32
	var x2433 uint32
	x2432, x2433 = bits.Add32(x2402, x2425, uint32(uint1(x2431)))
	var x2434 uint32
	var x2435 uint32
	x2434, x2435 = bits.Add32(x2404, x2427, uint32(uint1(x2433)))
	var x2436 uint32
	var x2437 uint32
	x2436, x2437 = bits.Add32(x2406, uint32(0x0), uint32(uint1(x2435)))
	var x2438 uint32
	var x2439 uint32
	x2438, x2439 = bits.Add32(x2408, uint32(0x0), uint32(uint1(x2437)))
	var x2440 uint32
	var x2441 uint32
	x2440, x2441 = bits.Add32(x2410, x2398, uint32(uint1(x2439)))
	var x2442 uint32
	var x2443 uint32
	x2442, x2443 = bits.Add32(x2412, x2415, uint32(uint1(x2441)))
	var x2444 uint32
	var x2445 uint32
	x2444, x2445 = bits.Add32(x2414, x2416, uint32(uint1(x2443)))
	var x2446 uint32
	var x2447 uint32
	x2447, x2446 = bits.Mul32(x1634, arg4[7])
	var x2448 uint32
	var x2449 uint32
	x2449, x2448 = bits.Mul32(x1634, arg4[6])
	var x2450 uint32
	var x2451 uint32
	x2451, x2450 = bits.Mul32(x1634, arg4[5])
	var x2452 uint32
	var x2453 uint32
	x2453, x2452 = bits.Mul32(x1634, arg4[4])
	var x2454 uint32
	var x2455 uint32
	x2455, x2454 = bits.Mul32(x1634, arg4[3])
	var x2456 uint32
	var x2457 uint32
	x2457, x2456 = bits.Mul32(x1634, arg4[2])
	var x2458 uint32
	var x2459 uint32
	x2459, x2458 = bits.Mul32(x1634, arg4[1])
	var x2460 uint32
	var x2461 uint32
	x2461, x2460 = bits.Mul32(x1634, arg4[0])
	var x2462 uint32
	var x2463 uint32
	x2462, x2463 = bits.Add32(x2461, x2458, uint32(0x0))
	var x2464 uint32
	var x2465 uint32
	x2464, x2465 = bits.Add32(x2459, x2456, uint32(uint1(x2463)))
	var x2466 uint32
	var x2467 uint32
	x2466, x2467 = bits.Add32(x2457, x2454, uint32(uint1(x2465)))
	var x2468 uint32
	var x2469 uint32
	x2468, x2469 = bits.Add32(x2455, x2452, uint32(uint1(x2467)))
	var x2470 uint32
	var x2471 uint32
	x2470, x2471 = bits.Add32(x2453, x2450, uint32(uint1(x2469)))
	var x2472 uint32
	var x2473 uint32
	x2472, x2473 = bits.Add32(x2451, x2448, uint32(uint1(x2471)))
	var x2474 uint32
	var x2475 uint32
	x2474, x2475 = bits.Add32(x2449, x2446, uint32(uint1(x2473)))
	x2476 := (uint32(uint1(x2475)) + x2447)
	var x2477 uint32
	var x2478 uint32
	x2477, x2478 = bits.Add32(x2430, x2460, uint32(0x0))
	var x2479 uint32
	var x2480 uint32
	x2479, x2480 = bits.Add32(x2432, x2462, uint32(uint1(x2478)))
	var x2481 uint32
	var x2482 uint32
	x2481, x2482 = bits.Add32(x2434, x2464, uint32(uint1(x2480)))
	var x2483 uint32
	var x2484 uint32
	x2483, x2484 = bits.Add32(x2436, x2466, uint32(uint1(x2482)))
	var x2485 uint32
	var x2486 uint32
	x2485, x2486 = bits.Add32(x2438, x2468, uint32(uint1(x2484)))
	var x2487 uint32
	var x2488 uint32
	x2487, x2488 = bits.Add32(x2440, x2470, uint32(uint1(x2486)))
	var x2489 uint32
	var x2490 uint32
	x2489, x2490 = bits.Add32(x2442, x2472, uint32(uint1(x2488)))
	var x2491 uint32
	var x2492 uint32
	x2491, x2492 = bits.Add32(x2444, x2474, uint32(uint1(x2490)))
	var x2493 uint32
	var x2494 uint32
	x2493, x2494 = bits.Add32(uint32(uint1(x2445)), x2476, uint32(uint1(x2492)))
	var x2495 uint32
	var x2496 uint32
	x2496, x2495 = bits.Mul32(x2477, 0xffffffff)
	var x2497 uint32
	var x2498 uint32
	x2498, x2497 = bits.Mul32(x2477, 0xffffffff)
	var x2499 uint32
	var x2500 uint32
	x2500, x2499 = bits.Mul32(x2477, 0xffffffff)
	var x2501 uint32
	var x2502 uint32
	x2502, x2501 = bits.Mul32(x2477, 0xffffffff)
	var x2503 uint32
	var x2504 uint32
	x2503, x2504 = bits.Add32(x2502, x2499, uint32(0x0))
	var x2505 uint32
	var x2506 uint32
	x2505, x2506 = bits.Add32(x2500, x2497, uint32(uint1(x2504)))
	x2507 := (uint32(uint1(x2506)) + x2498)
	var x2509 uint32
	_, x2509 = bits.Add32(x2477, x2501, uint32(0x0))
	var x2510 uint32
	var x2511 uint32
	x2510, x2511 = bits.Add32(x2479, x2503, uint32(uint1(x2509)))
	var x2512 uint32
	var x2513 uint32
	x2512, x2513 = bits.Add32(x2481, x2505, uint32(uint1(x2511)))
	var x2514 uint32
	var x2515 uint32
	x2514, x2515 = bits.Add32(x2483, x2507, uint32(uint1(x2513)))
	var x2516 uint32
	var x2517 uint32
	x2516, x2517 = bits.Add32(x2485, uint32(0x0), uint32(uint1(x2515)))
	var x2518 uint32
	var x2519 uint32
	x2518, x2519 = bits.Add32(x2487, uint32(0x0), uint32(uint1(x2517)))
	var x2520 uint32
	var x2521 uint32
	x2520, x2521 = bits.Add32(x2489, x2477, uint32(uint1(x2519)))
	var x2522 uint32
	var x2523 uint32
	x2522, x2523 = bits.Add32(x2491, x2495, uint32(uint1(x2521)))
	var x2524 uint32
	var x2525 uint32
	x2524, x2525 = bits.Add32(x2493, x2496, uint32(uint1(x2523)))
	x2526 := (uint32(uint1(x2525)) + uint32(uint1(x2494)))
	var x2527 uint32
	var x2528 uint32
	x2528, x2527 = bits.Mul32(x1635, arg4[7])
	var x2529 uint32
	var x2530 uint32
	x2530, x2529 = bits.Mul32(x1635, arg4[6])
	var x2531 uint32
	var x2532 uint32
	x2532, x2531 = bits.Mul32(x1635, arg4[5])
	var x2533 uint32
	var x2534 uint32
	x2534, x2533 = bits.Mul32(x1635, arg4[4])
	var x2535 uint32
	var x2536 uint32
	x2536, x2535 = bits.Mul32(x1635, arg4[3])
	var x2537 uint32
	var x2538 uint32
	x2538, x2537 = bits.Mul32(x1635, arg4[2])
	var x2539 uint32
	var x2540 uint32
	x2540, x2539 = bits.Mul32(x1635, arg4[1])
	var x2541 uint32
	var x2542 uint32
	x2542, x2541 = bits.Mul32(x1635, arg4[0])
	var x2543 uint32
	var x2544 uint32
	x2543, x2544 = bits.Add32(x2542, x2539, uint32(0x0))
	var x2545 uint32
	var x2546 uint32
	x2545, x2546 = bits.Add32(x2540, x2537, uint32(uint1(x2544)))
	var x2547 uint32
	var x2548 uint32
	x2547, x2548 = bits.Add32(x2538, x2535, uint32(uint1(x2546)))
	var x2549 uint32
	var x2550 uint32
	x2549, x2550 = bits.Add32(x2536, x2533, uint32(uint1(x2548)))
	var x2551 uint32
	var x2552 uint32
	x2551, x2552 = bits.Add32(x2534, x2531, uint32(uint1(x2550)))
	var x2553 uint32
	var x2554 uint32
	x2553, x2554 = bits.Add32(x2532, x2529, uint32(uint1(x2552)))
	var x2555 uint32
	var x2556 uint32
	x2555, x2556 = bits.Add32(x2530, x2527, uint32(uint1(x2554)))
	x2557 := (uint32(uint1(x2556)) + x2528)
	var x2558 uint32
	var x2559 uint32
	x2558, x2559 = bits.Add32(x2510, x2541, uint32(0x0))
	var x2560 uint32
	var x2561 uint32
	x2560, x2561 = bits.Add32(x2512, x2543, uint32(uint1(x2559)))
	var x2562 uint32
	var x2563 uint32
	x2562, x2563 = bits.Add32(x2514, x2545, uint32(uint1(x2561)))
	var x2564 uint32
	var x2565 uint32
	x2564, x2565 = bits.Add32(x2516, x2547, uint32(uint1(x2563)))
	var x2566 uint32
	var x2567 uint32
	x2566, x2567 = bits.Add32(x2518, x2549, uint32(uint1(x2565)))
	var x2568 uint32
	var x2569 uint32
	x2568, x2569 = bits.Add32(x2520, x2551, uint32(uint1(x2567)))
	var x2570 uint32
	var x2571 uint32
	x2570, x2571 = bits.Add32(x2522, x2553, uint32(uint1(x2569)))
	var x2572 uint32
	var x2573 uint32
	x2572, x2573 = bits.Add32(x2524, x2555, uint32(uint1(x2571)))
	var x2574 uint32
	var x2575 uint32
	x2574, x2575 = bits.Add32(x2526, x2557, uint32(uint1(x2573)))
	var x2576 uint32
	var x2577 uint32
	x2577, x2576 = bits.Mul32(x2558, 0xffffffff)
	var x2578 uint32
	var x2579 uint32
	x2579, x2578 = bits.Mul32(x2558, 0xffffffff)
	var x2580 uint32
	var x2581 uint32
	x2581, x2580 = bits.Mul32(x2558, 0xffffffff)
	var x2582 uint32
	var x2583 uint32
	x2583, x2582 = bits.Mul32(x2558, 0xffffffff)
	var x2584 uint32
	var x2585 uint32
	x2584, x2585 = bits.Add32(x2583, x2580, uint32(0x0))
	var x2586 uint32
	var x2587 uint32
	x2586, x2587 = bits.Add32(x2581, x2578, uint32(uint1(x2585)))
	x2588 := (uint32(uint1(x2587)) + x2579)
	var x2590 uint32
	_, x2590 = bits.Add32(x2558, x2582, uint32(0x0))
	var x2591 uint32
	var x2592 uint32
	x2591, x2592 = bits.Add32(x2560, x2584, uint32(uint1(x2590)))
	var x2593 uint32
	var x2594 uint32
	x2593, x2594 = bits.Add32(x2562, x2586, uint32(uint1(x2592)))
	var x2595 uint32
	var x2596 uint32
	x2595, x2596 = bits.Add32(x2564, x2588, uint32(uint1(x2594)))
	var x2597 uint32
	var x2598 uint32
	x2597, x2598 = bits.Add32(x2566, uint32(0x0), uint32(uint1(x2596)))
	var x2599 uint32
	var x2600 uint32
	x2599, x2600 = bits.Add32(x2568, uint32(0x0), uint32(uint1(x2598)))
	var x2601 uint32
	var x2602 uint32
	x2601, x2602 = bits.Add32(x2570, x2558, uint32(uint1(x2600)))
	var x2603 uint32
	var x2604 uint32
	x2603, x2604 = bits.Add32(x2572, x2576, uint32(uint1(x2602)))
	var x2605 uint32
	var x2606 uint32
	x2605, x2606 = bits.Add32(x2574, x2577, uint32(uint1(x2604)))
	x2607 := (uint32(uint1(x2606)) + uint32(uint1(x2575)))
	var x2608 uint32
	var x2609 uint32
	x2609, x2608 = bits.Mul32(x1636, arg4[7])
	var x2610 uint32
	var x2611 uint32
	x2611, x2610 = bits.Mul32(x1636, arg4[6])
	var x2612 uint32
	var x2613 uint32
	x2613, x2612 = bits.Mul32(x1636, arg4[5])
	var x2614 uint32
	var x2615 uint32
	x2615, x2614 = bits.Mul32(x1636, arg4[4])
	var x2616 uint32
	var x2617 uint32
	x2617, x2616 = bits.Mul32(x1636, arg4[3])
	var x2618 uint32
	var x2619 uint32
	x2619, x2618 = bits.Mul32(x1636, arg4[2])
	var x2620 uint32
	var x2621 uint32
	x2621, x2620 = bits.Mul32(x1636, arg4[1])
	var x2622 uint32
	var x2623 uint32
	x2623, x2622 = bits.Mul32(x1636, arg4[0])
	var x2624 uint32
	var x2625 uint32
	x2624, x2625 = bits.Add32(x2623, x2620, uint32(0x0))
	var x2626 uint32
	var x2627 uint32
	x2626, x2627 = bits.Add32(x2621, x2618, uint32(uint1(x2625)))
	var x2628 uint32
	var x2629 uint32
	x2628, x2629 = bits.Add32(x2619, x2616, uint32(uint1(x2627)))
	var x2630 uint32
	var x2631 uint32
	x2630, x2631 = bits.Add32(x2617, x2614, uint32(uint1(x2629)))
	var x2632 uint32
	var x2633 uint32
	x2632, x2633 = bits.Add32(x2615, x2612, uint32(uint1(x2631)))
	var x2634 uint32
	var x2635 uint32
	x2634, x2635 = bits.Add32(x2613, x2610, uint32(uint1(x2633)))
	var x2636 uint32
	var x2637 uint32
	x2636, x2637 = bits.Add32(x2611, x2608, uint32(uint1(x2635)))
	x2638 := (uint32(uint1(x2637)) + x2609)
	var x2639 uint32
	var x2640 uint32
	x2639, x2640 = bits.Add32(x2591, x2622, uint32(0x0))
	var x2641 uint32
	var x2642 uint32
	x2641, x2642 = bits.Add32(x2593, x2624, uint32(uint1(x2640)))
	var x2643 uint32
	var x2644 uint32
	x2643, x2644 = bits.Add32(x2595, x2626, uint32(uint1(x2642)))
	var x2645 uint32
	var x2646 uint32
	x2645, x2646 = bits.Add32(x2597, x2628, uint32(uint1(x2644)))
	var x2647 uint32
	var x2648 uint32
	x2647, x2648 = bits.Add32(x2599, x2630, uint32(uint1(x2646)))
	var x2649 uint32
	var x2650 uint32
	x2649, x2650 = bits.Add32(x2601, x2632, uint32(uint1(x2648)))
	var x2651 uint32
	var x2652 uint32
	x2651, x2652 = bits.Add32(x2603, x2634, uint32(uint1(x2650)))
	var x2653 uint32
	var x2654 uint32
	x2653, x2654 = bits.Add32(x2605, x2636, uint32(uint1(x2652)))
	var x2655 uint32
	var x2656 uint32
	x2655, x2656 = bits.Add32(x2607, x2638, uint32(uint1(x2654)))
	var x2657 uint32
	var x2658 uint32
	x2658, x2657 = bits.Mul32(x2639, 0xffffffff)
	var x2659 uint32
	var x2660 uint32
	x2660, x2659 = bits.Mul32(x2639, 0xffffffff)
	var x2661 uint32
	var x2662 uint32
	x2662, x2661 = bits.Mul32(x2639, 0xffffffff)
	var x2663 uint32
	var x2664 uint32
	x2664, x2663 = bits.Mul32(x2639, 0xffffffff)
	var x2665 uint32
	var x2666 uint32
	x2665, x2666 = bits.Add32(x2664, x2661, uint32(0x0))
	var x2667 uint32
	var x2668 uint32
	x2667, x2668 = bits.Add32(x2662, x2659, uint32(uint1(x2666)))
	x2669 := (uint32(uint1(x2668)) + x2660)
	var x2671 uint32
	_, x2671 = bits.Add32(x2639, x2663, uint32(0x0))
	var x2672 uint32
	var x2673 uint32
	x2672, x2673 = bits.Add32(x2641, x2665, uint32(uint1(x2671)))
	var x2674 uint32
	var x2675 uint32
	x2674, x2675 = bits.Add32(x2643, x2667, uint32(uint1(x2673)))
	var x2676 uint32
	var x2677 uint32
	x2676, x2677 = bits.Add32(x2645, x2669, uint32(uint1(x2675)))
	var x2678 uint32
	var x2679 uint32
	x2678, x2679 = bits.Add32(x2647, uint32(0x0), uint32(uint1(x2677)))
	var x2680 uint32
	var x2681 uint32
	x2680, x2681 = bits.Add32(x2649, uint32(0x0), uint32(uint1(x2679)))
	var x2682 uint32
	var x2683 uint32
	x2682, x2683 = bits.Add32(x2651, x2639, uint32(uint1(x2681)))
	var x2684 uint32
	var x2685 uint32
	x2684, x2685 = bits.Add32(x2653, x2657, uint32(uint1(x2683)))
	var x2686 uint32
	var x2687 uint32
	x2686, x2687 = bits.Add32(x2655, x2658, uint32(uint1(x2685)))
	x2688 := (uint32(uint1(x2687)) + uint32(uint1(x2656)))
	var x2689 uint32
	var x2690 uint32
	x2690, x2689 = bits.Mul32(x1637, arg4[7])
	var x2691 uint32
	var x2692 uint32
	x2692, x2691 = bits.Mul32(x1637, arg4[6])
	var x2693 uint32
	var x2694 uint32
	x2694, x2693 = bits.Mul32(x1637, arg4[5])
	var x2695 uint32
	var x2696 uint32
	x2696, x2695 = bits.Mul32(x1637, arg4[4])
	var x2697 uint32
	var x2698 uint32
	x2698, x2697 = bits.Mul32(x1637, arg4[3])
	var x2699 uint32
	var x2700 uint32
	x2700, x2699 = bits.Mul32(x1637, arg4[2])
	var x2701 uint32
	var x2702 uint32
	x2702, x2701 = bits.Mul32(x1637, arg4[1])
	var x2703 uint32
	var x2704 uint32
	x2704, x2703 = bits.Mul32(x1637, arg4[0])
	var x2705 uint32
	var x2706 uint32
	x2705, x2706 = bits.Add32(x2704, x2701, uint32(0x0))
	var x2707 uint32
	var x2708 uint32
	x2707, x2708 = bits.Add32(x2702, x2699, uint32(uint1(x2706)))
	var x2709 uint32
	var x2710 uint32
	x2709, x2710 = bits.Add32(x2700, x2697, uint32(uint1(x2708)))
	var x2711 uint32
	var x2712 uint32
	x2711, x2712 = bits.Add32(x2698, x2695, uint32(uint1(x2710)))
	var x2713 uint32
	var x2714 uint32
	x2713, x2714 = bits.Add32(x2696, x2693, uint32(uint1(x2712)))
	var x2715 uint32
	var x2716 uint32
	x2715, x2716 = bits.Add32(x2694, x2691, uint32(uint1(x2714)))
	var x2717 uint32
	var x2718 uint32
	x2717, x2718 = bits.Add32(x2692, x2689, uint32(uint1(x2716)))
	x2719 := (uint32(uint1(x2718)) + x2690)
	var x2720 uint32
	var x2721 uint32
	x2720, x2721 = bits.Add32(x2672, x2703, uint32(0x0))
	var x2722 uint32
	var x2723 uint32
	x2722, x2723 = bits.Add32(x2674, x2705, uint32(uint1(x2721)))
	var x2724 uint32
	var x2725 uint32
	x2724, x2725 = bits.Add32(x2676, x2707, uint32(uint1(x2723)))
	var x2726 uint32
	var x2727 uint32
	x2726, x2727 = bits.Add32(x2678, x2709, uint32(uint1(x2725)))
	var x2728 uint32
	var x2729 uint32
	x2728, x2729 = bits.Add32(x2680, x2711, uint32(uint1(x2727)))
	var x2730 uint32
	var x2731 uint32
	x2730, x2731 = bits.Add32(x2682, x2713, uint32(uint1(x2729)))
	var x2732 uint32
	var x2733 uint32
	x2732, x2733 = bits.Add32(x2684, x2715, uint32(uint1(x2731)))
	var x2734 uint32
	var x2735 uint32
	x2734, x2735 = bits.Add32(x2686, x2717, uint32(uint1(x2733)))
	var x2736 uint32
	var x2737 uint32
	x2736, x2737 = bits.Add32(x2688, x2719, uint32(uint1(x2735)))
	var x2738 uint32
	var x2739 uint32
	x2739, x2738 = bits.Mul32(x2720, 0xffffffff)
	var x2740 uint32
	var x2741 uint32
	x2741, x2740 = bits.Mul32(x2720, 0xffffffff)
	var x2742 uint32
	var x2743 uint32
	x2743, x2742 = bits.Mul32(x2720, 0xffffffff)
	var x2744 uint32
	var x2745 uint32
	x2745, x2744 = bits.Mul32(x2720, 0xffffffff)
	var x2746 uint32
	var x2747 uint32
	x2746, x2747 = bits.Add32(x2745, x2742, uint32(0x0))
	var x2748 uint32
	var x2749 uint32
	x2748, x2749 = bits.Add32(x2743, x2740, uint32(uint1(x2747)))
	x2750 := (uint32(uint1(x2749)) + x2741)
	var x2752 uint32
	_, x2752 = bits.Add32(x2720, x2744, uint32(0x0))
	var x2753 uint32
	var x2754 uint32
	x2753, x2754 = bits.Add32(x2722, x2746, uint32(uint1(x2752)))
	var x2755 uint32
	var x2756 uint32
	x2755, x2756 = bits.Add32(x2724, x2748, uint32(uint1(x2754)))
	var x2757 uint32
	var x2758 uint32
	x2757, x2758 = bits.Add32(x2726, x2750, uint32(uint1(x2756)))
	var x2759 uint32
	var x2760 uint32
	x2759, x2760 = bits.Add32(x2728, uint32(0x0), uint32(uint1(x2758)))
	var x2761 uint32
	var x2762 uint32
	x2761, x2762 = bits.Add32(x2730, uint32(0x0), uint32(uint1(x2760)))
	var x2763 uint32
	var x2764 uint32
	x2763, x2764 = bits.Add32(x2732, x2720, uint32(uint1(x2762)))
	var x2765 uint32
	var x2766 uint32
	x2765, x2766 = bits.Add32(x2734, x2738, uint32(uint1(x2764)))
	var x2767 uint32
	var x2768 uint32
	x2767, x2768 = bits.Add32(x2736, x2739, uint32(uint1(x2766)))
	x2769 := (uint32(uint1(x2768)) + uint32(uint1(x2737)))
	var x2770 uint32
	var x2771 uint32
	x2771, x2770 = bits.Mul32(x1638, arg4[7])
	var x2772 uint32
	var x2773 uint32
	x2773, x2772 = bits.Mul32(x1638, arg4[6])
	var x2774 uint32
	var x2775 uint32
	x2775, x2774 = bits.Mul32(x1638, arg4[5])
	var x2776 uint32
	var x2777 uint32
	x2777, x2776 = bits.Mul32(x1638, arg4[4])
	var x2778 uint32
	var x2779 uint32
	x2779, x2778 = bits.Mul32(x1638, arg4[3])
	var x2780 uint32
	var x2781 uint32
	x2781, x2780 = bits.Mul32(x1638, arg4[2])
	var x2782 uint32
	var x2783 uint32
	x2783, x2782 = bits.Mul32(x1638, arg4[1])
	var x2784 uint32
	var x2785 uint32
	x2785, x2784 = bits.Mul32(x1638, arg4[0])
	var x2786 uint32
	var x2787 uint32
	x2786, x2787 = bits.Add32(x2785, x2782, uint32(0x0))
	var x2788 uint32
	var x2789 uint32
	x2788, x2789 = bits.Add32(x2783, x2780, uint32(uint1(x2787)))
	var x2790 uint32
	var x2791 uint32
	x2790, x2791 = bits.Add32(x2781, x2778, uint32(uint1(x2789)))
	var x2792 uint32
	var x2793 uint32
	x2792, x2793 = bits.Add32(x2779, x2776, uint32(uint1(x2791)))
	var x2794 uint32
	var x2795 uint32
	x2794, x2795 = bits.Add32(x2777, x2774, uint32(uint1(x2793)))
	var x2796 uint32
	var x2797 uint32
	x2796, x2797 = bits.Add32(x2775, x2772, uint32(uint1(x2795)))
	var x2798 uint32
	var x2799 uint32
	x2798, x2799 = bits.Add32(x2773, x2770, uint32(uint1(x2797)))
	x2800 := (uint32(uint1(x2799)) + x2771)
	var x2801 uint32
	var x2802 uint32
	x2801, x2802 = bits.Add32(x2753, x2784, uint32(0x0))
	var x2803 uint32
	var x2804 uint32
	x2803, x2804 = bits.Add32(x2755, x2786, uint32(uint1(x2802)))
	var x2805 uint32
	var x2806 uint32
	x2805, x2806 = bits.Add32(x2757, x2788, uint32(uint1(x2804)))
	var x2807 uint32
	var x2808 uint32
	x2807, x2808 = bits.Add32(x2759, x2790, uint32(uint1(x2806)))
	var x2809 uint32
	var x2810 uint32
	x2809, x2810 = bits.Add32(x2761, x2792, uint32(uint1(x2808)))
	var x2811 uint32
	var x2812 uint32
	x2811, x2812 = bits.Add32(x2763, x2794, uint32(uint1(x2810)))
	var x2813 uint32
	var x2814 uint32
	x2813, x2814 = bits.Add32(x2765, x2796, uint32(uint1(x2812)))
	var x2815 uint32
	var x2816 uint32
	x2815, x2816 = bits.Add32(x2767, x2798, uint32(uint1(x2814)))
	var x2817 uint32
	var x2818 uint32
	x2817, x2818 = bits.Add32(x2769, x2800, uint32(uint1(x2816)))
	var x2819 uint32
	var x2820 uint32
	x2820, x2819 = bits.Mul32(x2801, 0xffffffff)
	var x2821 uint32
	var x2822 uint32
	x2822, x2821 = bits.Mul32(x2801, 0xffffffff)
	var x2823 uint32
	var x2824 uint32
	x2824, x2823 = bits.Mul32(x2801, 0xffffffff)
	var x2825 uint32
	var x2826 uint32
	x2826, x2825 = bits.Mul32(x2801, 0xffffffff)
	var x2827 uint32
	var x2828 uint32
	x2827, x2828 = bits.Add32(x2826, x2823, uint32(0x0))
	var x2829 uint32
	var x2830 uint32
	x2829, x2830 = bits.Add32(x2824, x2821, uint32(uint1(x2828)))
	x2831 := (uint32(uint1(x2830)) + x2822)
	var x2833 uint32
	_, x2833 = bits.Add32(x2801, x2825, uint32(0x0))
	var x2834 uint32
	var x2835 uint32
	x2834, x2835 = bits.Add32(x2803, x2827, uint32(uint1(x2833)))
	var x2836 uint32
	var x2837 uint32
	x2836, x2837 = bits.Add32(x2805, x2829, uint32(uint1(x2835)))
	var x2838 uint32
	var x2839 uint32
	x2838, x2839 = bits.Add32(x2807, x2831, uint32(uint1(x2837)))
	var x2840 uint32
	var x2841 uint32
	x2840, x2841 = bits.Add32(x2809, uint32(0x0), uint32(uint1(x2839)))
	var x2842 uint32
	var x2843 uint32
	x2842, x2843 = bits.Add32(x2811, uint32(0x0), uint32(uint1(x2841)))
	var x2844 uint32
	var x2845 uint32
	x2844, x2845 = bits.Add32(x2813, x2801, uint32(uint1(x2843)))
	var x2846 uint32
	var x2847 uint32
	x2846, x2847 = bits.Add32(x2815, x2819, uint32(uint1(x2845)))
	var x2848 uint32
	var x2849 uint32
	x2848, x2849 = bits.Add32(x2817, x2820, uint32(uint1(x2847)))
	x2850 := (uint32(uint1(x2849)) + uint32(uint1(x2818)))
	var x2851 uint32
	var x2852 uint32
	x2852, x2851 = bits.Mul32(x1639, arg4[7])
	var x2853 uint32
	var x2854 uint32
	x2854, x2853 = bits.Mul32(x1639, arg4[6])
	var x2855 uint32
	var x2856 uint32
	x2856, x2855 = bits.Mul32(x1639, arg4[5])
	var x2857 uint32
	var x2858 uint32
	x2858, x2857 = bits.Mul32(x1639, arg4[4])
	var x2859 uint32
	var x2860 uint32
	x2860, x2859 = bits.Mul32(x1639, arg4[3])
	var x2861 uint32
	var x2862 uint32
	x2862, x2861 = bits.Mul32(x1639, arg4[2])
	var x2863 uint32
	var x2864 uint32
	x2864, x2863 = bits.Mul32(x1639, arg4[1])
	var x2865 uint32
	var x2866 uint32
	x2866, x2865 = bits.Mul32(x1639, arg4[0])
	var x2867 uint32
	var x2868 uint32
	x2867, x2868 = bits.Add32(x2866, x2863, uint32(0x0))
	var x2869 uint32
	var x2870 uint32
	x2869, x2870 = bits.Add32(x2864, x2861, uint32(uint1(x2868)))
	var x2871 uint32
	var x2872 uint32
	x2871, x2872 = bits.Add32(x2862, x2859, uint32(uint1(x2870)))
	var x2873 uint32
	var x2874 uint32
	x2873, x2874 = bits.Add32(x2860, x2857, uint32(uint1(x2872)))
	var x2875 uint32
	var x2876 uint32
	x2875, x2876 = bits.Add32(x2858, x2855, uint32(uint1(x2874)))
	var x2877 uint32
	var x2878 uint32
	x2877, x2878 = bits.Add32(x2856, x2853, uint32(uint1(x2876)))
	var x2879 uint32
	var x2880 uint32
	x2879, x2880 = bits.Add32(x2854, x2851, uint32(uint1(x2878)))
	x2881 := (uint32(uint1(x2880)) + x2852)
	var x2882 uint32
	var x2883 uint32
	x2882, x2883 = bits.Add32(x2834, x2865, uint32(0x0))
	var x2884 uint32
	var x2885 uint32
	x2884, x2885 = bits.Add32(x2836, x2867, uint32(uint1(x2883)))
	var x2886 uint32
	var x2887 uint32
	x2886, x2887 = bits.Add32(x2838, x2869, uint32(uint1(x2885)))
	var x2888 uint32
	var x2889 uint32
	x2888, x2889 = bits.Add32(x2840, x2871, uint32(uint1(x2887)))
	var x2890 uint32
	var x2891 uint32
	x2890, x2891 = bits.Add32(x2842, x2873, uint32(uint1(x2889)))
	var x2892 uint32
	var x2893 uint32
	x2892, x2893 = bits.Add32(x2844, x2875, uint32(uint1(x2891)))
	var x2894 uint32
	var x2895 uint32
	x2894, x2895 = bits.Add32(x2846, x2877, uint32(uint1(x2893)))
	var x2896 uint32
	var x2897 uint32
	x2896, x2897 = bits.Add32(x2848, x2879, uint32(uint1(x2895)))
	var x2898 uint32
	var x2899 uint32
	x2898, x2899 = bits.Add32(x2850, x2881, uint32(uint1(x2897)))
	var x2900 uint32
	var x2901 uint32
	x2901, x2900 = bits.Mul32(x2882, 0xffffffff)
	var x2902 uint32
	var x2903 uint32
	x2903, x2902 = bits.Mul32(x2882, 0xffffffff)
	var x2904 uint32
	var x2905 uint32
	x2905, x2904 = bits.Mul32(x2882, 0xffffffff)
	var x2906 uint32
	var x2907 uint32
	x2907, x2906 = bits.Mul32(x2882, 0xffffffff)
	var x2908 uint32
	var x2909 uint32
	x2908, x2909 = bits.Add32(x2907, x2904, uint32(0x0))
	var x2910 uint32
	var x2911 uint32
	x2910, x2911 = bits.Add32(x2905, x2902, uint32(uint1(x2909)))
	x2912 := (uint32(uint1(x2911)) + x2903)
	var x2914 uint32
	_, x2914 = bits.Add32(x2882, x2906, uint32(0x0))
	var x2915 uint32
	var x2916 uint32
	x2915, x2916 = bits.Add32(x2884, x2908, uint32(uint1(x2914)))
	var x2917 uint32
	var x2918 uint32
	x2917, x2918 = bits.Add32(x2886, x2910, uint32(uint1(x2916)))
	var x2919 uint32
	var x2920 uint32
	x2919, x2920 = bits.Add32(x2888, x2912, uint32(uint1(x2918)))
	var x2921 uint32
	var x2922 uint32
	x2921, x2922 = bits.Add32(x2890, uint32(0x0), uint32(uint1(x2920)))
	var x2923 uint32
	var x2924 uint32
	x2923, x2924 = bits.Add32(x2892, uint32(0x0), uint32(uint1(x2922)))
	var x2925 uint32
	var x2926 uint32
	x2925, x2926 = bits.Add32(x2894, x2882, uint32(uint1(x2924)))
	var x2927 uint32
	var x2928 uint32
	x2927, x2928 = bits.Add32(x2896, x2900, uint32(uint1(x2926)))
	var x2929 uint32
	var x2930 uint32
	x2929, x2930 = bits.Add32(x2898, x2901, uint32(uint1(x2928)))
	x2931 := (uint32(uint1(x2930)) + uint32(uint1(x2899)))
	var x2932 uint32
	var x2933 uint32
	x2933, x2932 = bits.Mul32(x1640, arg4[7])
	var x2934 uint32
	var x2935 uint32
	x2935, x2934 = bits.Mul32(x1640, arg4[6])
	var x2936 uint32
	var x2937 uint32
	x2937, x2936 = bits.Mul32(x1640, arg4[5])
	var x2938 uint32
	var x2939 uint32
	x2939, x2938 = bits.Mul32(x1640, arg4[4])
	var x2940 uint32
	var x2941 uint32
	x2941, x2940 = bits.Mul32(x1640, arg4[3])
	var x2942 uint32
	var x2943 uint32
	x2943, x2942 = bits.Mul32(x1640, arg4[2])
	var x2944 uint32
	var x2945 uint32
	x2945, x2944 = bits.Mul32(x1640, arg4[1])
	var x2946 uint32
	var x2947 uint32
	x2947, x2946 = bits.Mul32(x1640, arg4[0])
	var x2948 uint32
	var x2949 uint32
	x2948, x2949 = bits.Add32(x2947, x2944, uint32(0x0))
	var x2950 uint32
	var x2951 uint32
	x2950, x2951 = bits.Add32(x2945, x2942, uint32(uint1(x2949)))
	var x2952 uint32
	var x2953 uint32
	x2952, x2953 = bits.Add32(x2943, x2940, uint32(uint1(x2951)))
	var x2954 uint32
	var x2955 uint32
	x2954, x2955 = bits.Add32(x2941, x2938, uint32(uint1(x2953)))
	var x2956 uint32
	var x2957 uint32
	x2956, x2957 = bits.Add32(x2939, x2936, uint32(uint1(x2955)))
	var x2958 uint32
	var x2959 uint32
	x2958, x2959 = bits.Add32(x2937, x2934, uint32(uint1(x2957)))
	var x2960 uint32
	var x2961 uint32
	x2960, x2961 = bits.Add32(x2935, x2932, uint32(uint1(x2959)))
	x2962 := (uint32(uint1(x2961)) + x2933)
	var x2963 uint32
	var x2964 uint32
	x2963, x2964 = bits.Add32(x2915, x2946, uint32(0x0))
	var x2965 uint32
	var x2966 uint32
	x2965, x2966 = bits.Add32(x2917, x2948, uint32(uint1(x2964)))
	var x2967 uint32
	var x2968 uint32
	x2967, x2968 = bits.Add32(x2919, x2950, uint32(uint1(x2966)))
	var x2969 uint32
	var x2970 uint32
	x2969, x2970 = bits.Add32(x2921, x2952, uint32(uint1(x2968)))
	var x2971 uint32
	var x2972 uint32
	x2971, x2972 = bits.Add32(x2923, x2954, uint32(uint1(x2970)))
	var x2973 uint32
	var x2974 uint32
	x2973, x2974 = bits.Add32(x2925, x2956, uint32(uint1(x2972)))
	var x2975 uint32
	var x2976 uint32
	x2975, x2976 = bits.Add32(x2927, x2958, uint32(uint1(x2974)))
	var x2977 uint32
	var x2978 uint32
	x2977, x2978 = bits.Add32(x2929, x2960, uint32(uint1(x2976)))
	var x2979 uint32
	var x2980 uint32
	x2979, x2980 = bits.Add32(x2931, x2962, uint32(uint1(x2978)))
	var x2981 uint32
	var x2982 uint32
	x2982, x2981 = bits.Mul32(x2963, 0xffffffff)
	var x2983 uint32
	var x2984 uint32
	x2984, x2983 = bits.Mul32(x2963, 0xffffffff)
	var x2985 uint32
	var x2986 uint32
	x2986, x2985 = bits.Mul32(x2963, 0xffffffff)
	var x2987 uint32
	var x2988 uint32
	x2988, x2987 = bits.Mul32(x2963, 0xffffffff)
	var x2989 uint32
	var x2990 uint32
	x2989, x2990 = bits.Add32(x2988, x2985, uint32(0x0))
	var x2991 uint32
	var x2992 uint32
	x2991, x2992 = bits.Add32(x2986, x2983, uint32(uint1(x2990)))
	x2993 := (uint32(uint1(x2992)) + x2984)
	var x2995 uint32
	_, x2995 = bits.Add32(x2963, x2987, uint32(0x0))
	var x2996 uint32
	var x2997 uint32
	x2996, x2997 = bits.Add32(x2965, x2989, uint32(uint1(x2995)))
	var x2998 uint32
	var x2999 uint32
	x2998, x2999 = bits.Add32(x2967, x2991, uint32(uint1(x2997)))
	var x3000 uint32
	var x3001 uint32
	x3000, x3001 = bits.Add32(x2969, x2993, uint32(uint1(x2999)))
	var x3002 uint32
	var x3003 uint32
	x3002, x3003 = bits.Add32(x2971, uint32(0x0), uint32(uint1(x3001)))
	var x3004 uint32
	var x3005 uint32
	x3004, x3005 = bits.Add32(x2973, uint32(0x0), uint32(uint1(x3003)))
	var x3006 uint32
	var x3007 uint32
	x3006, x3007 = bits.Add32(x2975, x2963, uint32(uint1(x3005)))
	var x3008 uint32
	var x3009 uint32
	x3008, x3009 = bits.Add32(x2977, x2981, uint32(uint1(x3007)))
	var x3010 uint32
	var x3011 uint32
	x3010, x3011 = bits.Add32(x2979, x2982, uint32(uint1(x3009)))
	x3012 := (uint32(uint1(x3011)) + uint32(uint1(x2980)))
	var x3013 uint32
	var x3014 uint32
	x3013, x3014 = bits.Sub32(x2996, 0xffffffff, uint32(0x0))
	var x3015 uint32
	var x3016 uint32
	x3015, x3016 = bits.Sub32(x2998, 0xffffffff, uint32(uint1(x3014)))
	var x3017 uint32
	var x3018 uint32
	x3017, x3018 = bits.Sub32(x3000, 0xffffffff, uint32(uint1(x3016)))
	var x3019 uint32
	var x3020 uint32
	x3019, x3020 = bits.Sub32(x3002, uint32(0x0), uint32(uint1(x3018)))
	var x3021 uint32
	var x3022 uint32
	x3021, x3022 = bits.Sub32(x3004, uint32(0x0), uint32(uint1(x3020)))
	var x3023 uint32
	var x3024 uint32
	x3023, x3024 = bits.Sub32(x3006, uint32(0x0), uint32(uint1(x3022)))
	var x3025 uint32
	var x3026 uint32
	x3025, x3026 = bits.Sub32(x3008, uint32(0x1), uint32(uint1(x3024)))
	var x3027 uint32
	var x3028 uint32
	x3027, x3028 = bits.Sub32(x3010, 0xffffffff, uint32(uint1(x3026)))
	var x3030 uint32
	_, x3030 = bits.Sub32(x3012, uint32(0x0), uint32(uint1(x3028)))
	var x3031 uint32
	cmovznzU32(&x3031, uint1(x3030), x3013, x2996)
	var x3032 uint32
	cmovznzU32(&x3032, uint1(x3030), x3015, x2998)
	var x3033 uint32
	cmovznzU32(&x3033, uint1(x3030), x3017, x3000)
	var x3034 uint32
	cmovznzU32(&x3034, uint1(x3030), x3019, x3002)
	var x3035 uint32
	cmovznzU32(&x3035, uint1(x3030), x3021, x3004)
	var x3036 uint32
	cmovznzU32(&x3036, uint1(x3030), x3023, x3006)
	var x3037 uint32
	cmovznzU32(&x3037, uint1(x3030), x3025, x3008)
	var x3038 uint32
	cmovznzU32(&x3038, uint1(x3030), x3027, x3010)
	var x3039 uint32
	var x3040 uint32
	x3040, x3039 = bits.Mul32(x1677, arg3[7])
	var x3041 uint32
	var x3042 uint32
	x3042, x3041 = bits.Mul32(x1677, arg3[6])
	var x3043 uint32
	var x3044 uint32
	x3044, x3043 = bits.Mul32(x1677, arg3[5])
	var x3045 uint32
	var x3046 uint32
	x3046, x3045 = bits.Mul32(x1677, arg3[4])
	var x3047 uint32
	var x3048 uint32
	x3048, x3047 = bits.Mul32(x1677, arg3[3])
	var x3049 uint32
	var x3050 uint32
	x3050, x3049 = bits.Mul32(x1677, arg3[2])
	var x3051 uint32
	var x3052 uint32
	x3052, x3051 = bits.Mul32(x1677, arg3[1])
	var x3053 uint32
	var x3054 uint32
	x3054, x3053 = bits.Mul32(x1677, arg3[0])
	var x3055 uint32
	var x3056 uint32
	x3055, x3056 = bits.Add32(x3054, x3051, uint32(0x0))
	var x3057 uint32
	var x3058 uint32
	x3057, x3058 = bits.Add32(x3052, x3049, uint32(uint1(x3056)))
	var x3059 uint32
	var x3060 uint32
	x3059, x3060 = bits.Add32(x3050, x3047, uint32(uint1(x3058)))
	var x3061 uint32
	var x3062 uint32
	x3061, x3062 = bits.Add32(x3048, x3045, uint32(uint1(x3060)))
	var x3063 uint32
	var x3064 uint32
	x3063, x3064 = bits.Add32(x3046, x3043, uint32(uint1(x3062)))
	var x3065 uint32
	var x3066 uint32
	x3065, x3066 = bits.Add32(x3044, x3041, uint32(uint1(x3064)))
	var x3067 uint32
	var x3068 uint32
	x3067, x3068 = bits.Add32(x3042, x3039, uint32(uint1(x3066)))
	x3069 := (uint32(uint1(x3068)) + x3040)
	var x3070 uint32
	var x3071 uint32
	x3071, x3070 = bits.Mul32(x3053, 0xffffffff)
	var x3072 uint32
	var x3073 uint32
	x3073, x3072 = bits.Mul32(x3053, 0xffffffff)
	var x3074 uint32
	var x3075 uint32
	x3075, x3074 = bits.Mul32(x3053, 0xffffffff)
	var x3076 uint32
	var x3077 uint32
	x3077, x3076 = bits.Mul32(x3053, 0xffffffff)
	var x3078 uint32
	var x3079 uint32
	x3078, x3079 = bits.Add32(x3077, x3074, uint32(0x0))
	var x3080 uint32
	var x3081 uint32
	x3080, x3081 = bits.Add32(x3075, x3072, uint32(uint1(x3079)))
	x3082 := (uint32(uint1(x3081)) + x3073)
	var x3084 uint32
	_, x3084 = bits.Add32(x3053, x3076, uint32(0x0))
	var x3085 uint32
	var x3086 uint32
	x3085, x3086 = bits.Add32(x3055, x3078, uint32(uint1(x3084)))
	var x3087 uint32
	var x3088 uint32
	x3087, x3088 = bits.Add32(x3057, x3080, uint32(uint1(x3086)))
	var x3089 uint32
	var x3090 uint32
	x3089, x3090 = bits.Add32(x3059, x3082, uint32(uint1(x3088)))
	var x3091 uint32
	var x3092 uint32
	x3091, x3092 = bits.Add32(x3061, uint32(0x0), uint32(uint1(x3090)))
	var x3093 uint32
	var x3094 uint32
	x3093, x3094 = bits.Add32(x3063, uint32(0x0), uint32(uint1(x3092)))
	var x3095 uint32
	var x3096 uint32
	x3095, x3096 = bits.Add32(x3065, x3053, uint32(uint1(x3094)))
	var x3097 uint32
	var x3098 uint32
	x3097, x3098 = bits.Add32(x3067, x3070, uint32(uint1(x3096)))
	var x3099 uint32
	var x3100 uint32
	x3099, x3100 = bits.Add32(x3069, x3071, uint32(uint1(x3098)))
	var x3101 uint32
	var x3102 uint32
	x3102, x3101 = bits.Mul32(x1678, arg3[7])
	var x3103 uint32
	var x3104 uint32
	x3104, x3103 = bits.Mul32(x1678, arg3[6])
	var x3105 uint32
	var x3106 uint32
	x3106, x3105 = bits.Mul32(x1678, arg3[5])
	var x3107 uint32
	var x3108 uint32
	x3108, x3107 = bits.Mul32(x1678, arg3[4])
	var x3109 uint32
	var x3110 uint32
	x3110, x3109 = bits.Mul32(x1678, arg3[3])
	var x3111 uint32
	var x3112 uint32
	x3112, x3111 = bits.Mul32(x1678, arg3[2])
	var x3113 uint32
	var x3114 uint32
	x3114, x3113 = bits.Mul32(x1678, arg3[1])
	var x3115 uint32
	var x3116 uint32
	x3116, x3115 = bits.Mul32(x1678, arg3[0])
	var x3117 uint32
	var x3118 uint32
	x3117, x3118 = bits.Add32(x3116, x3113, uint32(0x0))
	var x3119 uint32
	var x3120 uint32
	x3119, x3120 = bits.Add32(x3114, x3111, uint32(uint1(x3118)))
	var x3121 uint32
	var x3122 uint32
	x3121, x3122 = bits.Add32(x3112, x3109, uint32(uint1(x3120)))
	var x3123 uint32
	var x3124 uint32
	x3123, x3124 = bits.Add32(x3110, x3107, uint32(uint1(x3122)))
	var x3125 uint32
	var x3126 uint32
	x3125, x3126 = bits.Add32(x3108, x3105, uint32(uint1(x3124)))
	var x3127 uint32
	var x3128 uint32
	x3127, x3128 = bits.Add32(x3106, x3103, uint32(uint1(x3126)))
	var x3129 uint32
	var x3130 uint32
	x3129, x3130 = bits.Add32(x3104, x3101, uint32(uint1(x3128)))
	x3131 := (uint32(uint1(x3130)) + x3102)
	var x3132 uint32
	var x3133 uint32
	x3132, x3133 = bits.Add32(x3085, x3115, uint32(0x0))
	var x3134 uint32
	var x3135 uint32
	x3134, x3135 = bits.Add32(x3087, x3117, uint32(uint1(x3133)))
	var x3136 uint32
	var x3137 uint32
	x3136, x3137 = bits.Add32(x3089, x3119, uint32(uint1(x3135)))
	var x3138 uint32
	var x3139 uint32
	x3138, x3139 = bits.Add32(x3091, x3121, uint32(uint1(x3137)))
	var x3140 uint32
	var x3141 uint32
	x3140, x3141 = bits.Add32(x3093, x3123, uint32(uint1(x3139)))
	var x3142 uint32
	var x3143 uint32
	x3142, x3143 = bits.Add32(x3095, x3125, uint32(uint1(x3141)))
	var x3144 uint32
	var x3145 uint32
	x3144, x3145 = bits.Add32(x3097, x3127, uint32(uint1(x3143)))
	var x3146 uint32
	var x3147 uint32
	x3146, x3147 = bits.Add32(x3099, x3129, uint32(uint1(x3145)))
	var x3148 uint32
	var x3149 uint32
	x3148, x3149 = bits.Add32(uint32(uint1(x3100)), x3131, uint32(uint1(x3147)))
	var x3150 uint32
	var x3151 uint32
	x3151, x3150 = bits.Mul32(x3132, 0xffffffff)
	var x3152 uint32
	var x3153 uint32
	x3153, x3152 = bits.Mul32(x3132, 0xffffffff)
	var x3154 uint32
	var x3155 uint32
	x3155, x3154 = bits.Mul32(x3132, 0xffffffff)
	var x3156 uint32
	var x3157 uint32
	x3157, x3156 = bits.Mul32(x3132, 0xffffffff)
	var x3158 uint32
	var x3159 uint32
	x3158, x3159 = bits.Add32(x3157, x3154, uint32(0x0))
	var x3160 uint32
	var x3161 uint32
	x3160, x3161 = bits.Add32(x3155, x3152, uint32(uint1(x3159)))
	x3162 := (uint32(uint1(x3161)) + x3153)
	var x3164 uint32
	_, x3164 = bits.Add32(x3132, x3156, uint32(0x0))
	var x3165 uint32
	var x3166 uint32
	x3165, x3166 = bits.Add32(x3134, x3158, uint32(uint1(x3164)))
	var x3167 uint32
	var x3168 uint32
	x3167, x3168 = bits.Add32(x3136, x3160, uint32(uint1(x3166)))
	var x3169 uint32
	var x3170 uint32
	x3169, x3170 = bits.Add32(x3138, x3162, uint32(uint1(x3168)))
	var x3171 uint32
	var x3172 uint32
	x3171, x3172 = bits.Add32(x3140, uint32(0x0), uint32(uint1(x3170)))
	var x3173 uint32
	var x3174 uint32
	x3173, x3174 = bits.Add32(x3142, uint32(0x0), uint32(uint1(x3172)))
	var x3175 uint32
	var x3176 uint32
	x3175, x3176 = bits.Add32(x3144, x3132, uint32(uint1(x3174)))
	var x3177 uint32
	var x3178 uint32
	x3177, x3178 = bits.Add32(x3146, x3150, uint32(uint1(x3176)))
	var x3179 uint32
	var x3180 uint32
	x3179, x3180 = bits.Add32(x3148, x3151, uint32(uint1(x3178)))
	x3181 := (uint32(uint1(x3180)) + uint32(uint1(x3149)))
	var x3182 uint32
	var x3183 uint32
	x3183, x3182 = bits.Mul32(x1679, arg3[7])
	var x3184 uint32
	var x3185 uint32
	x3185, x3184 = bits.Mul32(x1679, arg3[6])
	var x3186 uint32
	var x3187 uint32
	x3187, x3186 = bits.Mul32(x1679, arg3[5])
	var x3188 uint32
	var x3189 uint32
	x3189, x3188 = bits.Mul32(x1679, arg3[4])
	var x3190 uint32
	var x3191 uint32
	x3191, x3190 = bits.Mul32(x1679, arg3[3])
	var x3192 uint32
	var x3193 uint32
	x3193, x3192 = bits.Mul32(x1679, arg3[2])
	var x3194 uint32
	var x3195 uint32
	x3195, x3194 = bits.Mul32(x1679, arg3[1])
	var x3196 uint32
	var x3197 uint32
	x3197, x3196 = bits.Mul32(x1679, arg3[0])
	var x3198 uint32
	var x3199 uint32
	x3198, x3199 = bits.Add32(x3197, x3194, uint32(0x0))
	var x3200 uint32
	var x3201 uint32
	x3200, x3201 = bits.Add32(x3195, x3192, uint32(uint1(x3199)))
	var x3202 uint32
	var x3203 uint32
	x3202, x3203 = bits.Add32(x3193, x3190, uint32(uint1(x3201)))
	var x3204 uint32
	var x3205 uint32
	x3204, x3205 = bits.Add32(x3191, x3188, uint32(uint1(x3203)))
	var x3206 uint32
	var x3207 uint32
	x3206, x3207 = bits.Add32(x3189, x3186, uint32(uint1(x3205)))
	var x3208 uint32
	var x3209 uint32
	x3208, x3209 = bits.Add32(x3187, x3184, uint32(uint1(x3207)))
	var x3210 uint32
	var x3211 uint32
	x3210, x3211 = bits.Add32(x3185, x3182, uint32(uint1(x3209)))
	x3212 := (uint32(uint1(x3211)) + x3183)
	var x3213 uint32
	var x3214 uint32
	x3213, x3214 = bits.Add32(x3165, x3196, uint32(0x0))
	var x3215 uint32
	var x3216 uint32
	x3215, x3216 = bits.Add32(x3167, x3198, uint32(uint1(x3214)))
	var x3217 uint32
	var x3218 uint32
	x3217, x3218 = bits.Add32(x3169, x3200, uint32(uint1(x3216)))
	var x3219 uint32
	var x3220 uint32
	x3219, x3220 = bits.Add32(x3171, x3202, uint32(uint1(x3218)))
	var x3221 uint32
	var x3222 uint32
	x3221, x3222 = bits.Add32(x3173, x3204, uint32(uint1(x3220)))
	var x3223 uint32
	var x3224 uint32
	x3223, x3224 = bits.Add32(x3175, x3206, uint32(uint1(x3222)))
	var x3225 uint32
	var x3226 uint32
	x3225, x3226 = bits.Add32(x3177, x3208, uint32(uint1(x3224)))
	var x3227 uint32
	var x3228 uint32
	x3227, x3228 = bits.Add32(x3179, x3210, uint32(uint1(x3226)))
	var x3229 uint32
	var x3230 uint32
	x3229, x3230 = bits.Add32(x3181, x3212, uint32(uint1(x3228)))
	var x3231 uint32
	var x3232 uint32
	x3232, x3231 = bits.Mul32(x3213, 0xffffffff)
	var x3233 uint32
	var x3234 uint32
	x3234, x3233 = bits.Mul32(x3213, 0xffffffff)
	var x3235 uint32
	var x3236 uint32
	x3236, x3235 = bits.Mul32(x3213, 0xffffffff)
	var x3237 uint32
	var x3238 uint32
	x3238, x3237 = bits.Mul32(x3213, 0xffffffff)
	var x3239 uint32
	var x3240 uint32
	x3239, x3240 = bits.Add32(x3238, x3235, uint32(0x0))
	var x3241 uint32
	var x3242 uint32
	x3241, x3242 = bits.Add32(x3236, x3233, uint32(uint1(x3240)))
	x3243 := (uint32(uint1(x3242)) + x3234)
	var x3245 uint32
	_, x3245 = bits.Add32(x3213, x3237, uint32(0x0))
	var x3246 uint32
	var x3247 uint32
	x3246, x3247 = bits.Add32(x3215, x3239, uint32(uint1(x3245)))
	var x3248 uint32
	var x3249 uint32
	x3248, x3249 = bits.Add32(x3217, x3241, uint32(uint1(x3247)))
	var x3250 uint32
	var x3251 uint32
	x3250, x3251 = bits.Add32(x3219, x3243, uint32(uint1(x3249)))
	var x3252 uint32
	var x3253 uint32
	x3252, x3253 = bits.Add32(x3221, uint32(0x0), uint32(uint1(x3251)))
	var x3254 uint32
	var x3255 uint32
	x3254, x3255 = bits.Add32(x3223, uint32(0x0), uint32(uint1(x3253)))
	var x3256 uint32
	var x3257 uint32
	x3256, x3257 = bits.Add32(x3225, x3213, uint32(uint1(x3255)))
	var x3258 uint32
	var x3259 uint32
	x3258, x3259 = bits.Add32(x3227, x3231, uint32(uint1(x3257)))
	var x3260 uint32
	var x3261 uint32
	x3260, x3261 = bits.Add32(x3229, x3232, uint32(uint1(x3259)))
	x3262 := (uint32(uint1(x3261)) + uint32(uint1(x3230)))
	var x3263 uint32
	var x3264 uint32
	x3264, x3263 = bits.Mul32(x1680, arg3[7])
	var x3265 uint32
	var x3266 uint32
	x3266, x3265 = bits.Mul32(x1680, arg3[6])
	var x3267 uint32
	var x3268 uint32
	x3268, x3267 = bits.Mul32(x1680, arg3[5])
	var x3269 uint32
	var x3270 uint32
	x3270, x3269 = bits.Mul32(x1680, arg3[4])
	var x3271 uint32
	var x3272 uint32
	x3272, x3271 = bits.Mul32(x1680, arg3[3])
	var x3273 uint32
	var x3274 uint32
	x3274, x3273 = bits.Mul32(x1680, arg3[2])
	var x3275 uint32
	var x3276 uint32
	x3276, x3275 = bits.Mul32(x1680, arg3[1])
	var x3277 uint32
	var x3278 uint32
	x3278, x3277 = bits.Mul32(x1680, arg3[0])
	var x3279 uint32
	var x3280 uint32
	x3279, x3280 = bits.Add32(x3278, x3275, uint32(0x0))
	var x3281 uint32
	var x3282 uint32
	x3281, x3282 = bits.Add32(x3276, x3273, uint32(uint1(x3280)))
	var x3283 uint32
	var x3284 uint32
	x3283, x3284 = bits.Add32(x3274, x3271, uint32(uint1(x3282)))
	var x3285 uint32
	var x3286 uint32
	x3285, x3286 = bits.Add32(x3272, x3269, uint32(uint1(x3284)))
	var x3287 uint32
	var x3288 uint32
	x3287, x3288 = bits.Add32(x3270, x3267, uint32(uint1(x3286)))
	var x3289 uint32
	var x3290 uint32
	x3289, x3290 = bits.Add32(x3268, x3265, uint32(uint1(x3288)))
	var x3291 uint32
	var x3292 uint32
	x3291, x3292 = bits.Add32(x3266, x3263, uint32(uint1(x3290)))
	x3293 := (uint32(uint1(x3292)) + x3264)
	var x3294 uint32
	var x3295 uint32
	x3294, x3295 = bits.Add32(x3246, x3277, uint32(0x0))
	var x3296 uint32
	var x3297 uint32
	x3296, x3297 = bits.Add32(x3248, x3279, uint32(uint1(x3295)))
	var x3298 uint32
	var x3299 uint32
	x3298, x3299 = bits.Add32(x3250, x3281, uint32(uint1(x3297)))
	var x3300 uint32
	var x3301 uint32
	x3300, x3301 = bits.Add32(x3252, x3283, uint32(uint1(x3299)))
	var x3302 uint32
	var x3303 uint32
	x3302, x3303 = bits.Add32(x3254, x3285, uint32(uint1(x3301)))
	var x3304 uint32
	var x3305 uint32
	x3304, x3305 = bits.Add32(x3256, x3287, uint32(uint1(x3303)))
	var x3306 uint32
	var x3307 uint32
	x3306, x3307 = bits.Add32(x3258, x3289, uint32(uint1(x3305)))
	var x3308 uint32
	var x3309 uint32
	x3308, x3309 = bits.Add32(x3260, x3291, uint32(uint1(x3307)))
	var x3310 uint32
	var x3311 uint32
	x3310, x3311 = bits.Add32(x3262, x3293, uint32(uint1(x3309)))
	var x3312 uint32
	var x3313 uint32
	x3313, x3312 = bits.Mul32(x3294, 0xffffffff)
	var x3314 uint32
	var x3315 uint32
	x3315, x3314 = bits.Mul32(x3294, 0xffffffff)
	var x3316 uint32
	var x3317 uint32
	x3317, x3316 = bits.Mul32(x3294, 0xffffffff)
	var x3318 uint32
	var x3319 uint32
	x3319, x3318 = bits.Mul32(x3294, 0xffffffff)
	var x3320 uint32
	var x3321 uint32
	x3320, x3321 = bits.Add32(x3319, x3316, uint32(0x0))
	var x3322 uint32
	var x3323 uint32
	x3322, x3323 = bits.Add32(x3317, x3314, uint32(uint1(x3321)))
	x3324 := (uint32(uint1(x3323)) + x3315)
	var x3326 uint32
	_, x3326 = bits.Add32(x3294, x3318, uint32(0x0))
	var x3327 uint32
	var x3328 uint32
	x3327, x3328 = bits.Add32(x3296, x3320, uint32(uint1(x3326)))
	var x3329 uint32
	var x3330 uint32
	x3329, x3330 = bits.Add32(x3298, x3322, uint32(uint1(x3328)))
	var x3331 uint32
	var x3332 uint32
	x3331, x3332 = bits.Add32(x3300, x3324, uint32(uint1(x3330)))
	var x3333 uint32
	var x3334 uint32
	x3333, x3334 = bits.Add32(x3302, uint32(0x0), uint32(uint1(x3332)))
	var x3335 uint32
	var x3336 uint32
	x3335, x3336 = bits.Add32(x3304, uint32(0x0), uint32(uint1(x3334)))
	var x3337 uint32
	var x3338 uint32
	x3337, x3338 = bits.Add32(x3306, x3294, uint32(uint1(x3336)))
	var x3339 uint32
	var x3340 uint32
	x3339, x3340 = bits.Add32(x3308, x3312, uint32(uint1(x3338)))
	var x3341 uint32
	var x3342 uint32
	x3341, x3342 = bits.Add32(x3310, x3313, uint32(uint1(x3340)))
	x3343 := (uint32(uint1(x3342)) + uint32(uint1(x3311)))
	var x3344 uint32
	var x3345 uint32
	x3345, x3344 = bits.Mul32(x1681, arg3[7])
	var x3346 uint32
	var x3347 uint32
	x3347, x3346 = bits.Mul32(x1681, arg3[6])
	var x3348 uint32
	var x3349 uint32
	x3349, x3348 = bits.Mul32(x1681, arg3[5])
	var x3350 uint32
	var x3351 uint32
	x3351, x3350 = bits.Mul32(x1681, arg3[4])
	var x3352 uint32
	var x3353 uint32
	x3353, x3352 = bits.Mul32(x1681, arg3[3])
	var x3354 uint32
	var x3355 uint32
	x3355, x3354 = bits.Mul32(x1681, arg3[2])
	var x3356 uint32
	var x3357 uint32
	x3357, x3356 = bits.Mul32(x1681, arg3[1])
	var x3358 uint32
	var x3359 uint32
	x3359, x3358 = bits.Mul32(x1681, arg3[0])
	var x3360 uint32
	var x3361 uint32
	x3360, x3361 = bits.Add32(x3359, x3356, uint32(0x0))
	var x3362 uint32
	var x3363 uint32
	x3362, x3363 = bits.Add32(x3357, x3354, uint32(uint1(x3361)))
	var x3364 uint32
	var x3365 uint32
	x3364, x3365 = bits.Add32(x3355, x3352, uint32(uint1(x3363)))
	var x3366 uint32
	var x3367 uint32
	x3366, x3367 = bits.Add32(x3353, x3350, uint32(uint1(x3365)))
	var x3368 uint32
	var x3369 uint32
	x3368, x3369 = bits.Add32(x3351, x3348, uint32(uint1(x3367)))
	var x3370 uint32
	var x3371 uint32
	x3370, x3371 = bits.Add32(x3349, x3346, uint32(uint1(x3369)))
	var x3372 uint32
	var x3373 uint32
	x3372, x3373 = bits.Add32(x3347, x3344, uint32(uint1(x3371)))
	x3374 := (uint32(uint1(x3373)) + x3345)
	var x3375 uint32
	var x3376 uint32
	x3375, x3376 = bits.Add32(x3327, x3358, uint32(0x0))
	var x3377 uint32
	var x3378 uint32
	x3377, x3378 = bits.Add32(x3329, x3360, uint32(uint1(x3376)))
	var x3379 uint32
	var x3380 uint32
	x3379, x3380 = bits.Add32(x3331, x3362, uint32(uint1(x3378)))
	var x3381 uint32
	var x3382 uint32
	x3381, x3382 = bits.Add32(x3333, x3364, uint32(uint1(x3380)))
	var x3383 uint32
	var x3384 uint32
	x3383, x3384 = bits.Add32(x3335, x3366, uint32(uint1(x3382)))
	var x3385 uint32
	var x3386 uint32
	x3385, x3386 = bits.Add32(x3337, x3368, uint32(uint1(x3384)))
	var x3387 uint32
	var x3388 uint32
	x3387, x3388 = bits.Add32(x3339, x3370, uint32(uint1(x3386)))
	var x3389 uint32
	var x3390 uint32
	x3389, x3390 = bits.Add32(x3341, x3372, uint32(uint1(x3388)))
	var x3391 uint32
	var x3392 uint32
	x3391, x3392 = bits.Add32(x3343, x3374, uint32(uint1(x3390)))
	var x3393 uint32
	var x3394 uint32
	x3394, x3393 = bits.Mul32(x3375, 0xffffffff)
	var x3395 uint32
	var x3396 uint32
	x3396, x3395 = bits.Mul32(x3375, 0xffffffff)
	var x3397 uint32
	var x3398 uint32
	x3398, x3397 = bits.Mul32(x3375, 0xffffffff)
	var x3399 uint32
	var x3400 uint32
	x3400, x3399 = bits.Mul32(x3375, 0xffffffff)
	var x3401 uint32
	var x3402 uint32
	x3401, x3402 = bits.Add32(x3400, x3397, uint32(0x0))
	var x3403 uint32
	var x3404 uint32
	x3403, x3404 = bits.Add32(x3398, x3395, uint32(uint1(x3402)))
	x3405 := (uint32(uint1(x3404)) + x3396)
	var x3407 uint32
	_, x3407 = bits.Add32(x3375, x3399, uint32(0x0))
	var x3408 uint32
	var x3409 uint32
	x3408, x3409 = bits.Add32(x3377, x3401, uint32(uint1(x3407)))
	var x3410 uint32
	var x3411 uint32
	x3410, x3411 = bits.Add32(x3379, x3403, uint32(uint1(x3409)))
	var x3412 uint32
	var x3413 uint32
	x3412, x3413 = bits.Add32(x3381, x3405, uint32(uint1(x3411)))
	var x3414 uint32
	var x3415 uint32
	x3414, x3415 = bits.Add32(x3383, uint32(0x0), uint32(uint1(x3413)))
	var x3416 uint32
	var x3417 uint32
	x3416, x3417 = bits.Add32(x3385, uint32(0x0), uint32(uint1(x3415)))
	var x3418 uint32
	var x3419 uint32
	x3418, x3419 = bits.Add32(x3387, x3375, uint32(uint1(x3417)))
	var x3420 uint32
	var x3421 uint32
	x3420, x3421 = bits.Add32(x3389, x3393, uint32(uint1(x3419)))
	var x3422 uint32
	var x3423 uint32
	x3422, x3423 = bits.Add32(x3391, x3394, uint32(uint1(x3421)))
	x3424 := (uint32(uint1(x3423)) + uint32(uint1(x3392)))
	var x3425 uint32
	var x3426 uint32
	x3426, x3425 = bits.Mul32(x1682, arg3[7])
	var x3427 uint32
	var x3428 uint32
	x3428, x3427 = bits.Mul32(x1682, arg3[6])
	var x3429 uint32
	var x3430 uint32
	x3430, x3429 = bits.Mul32(x1682, arg3[5])
	var x3431 uint32
	var x3432 uint32
	x3432, x3431 = bits.Mul32(x1682, arg3[4])
	var x3433 uint32
	var x3434 uint32
	x3434, x3433 = bits.Mul32(x1682, arg3[3])
	var x3435 uint32
	var x3436 uint32
	x3436, x3435 = bits.Mul32(x1682, arg3[2])
	var x3437 uint32
	var x3438 uint32
	x3438, x3437 = bits.Mul32(x1682, arg3[1])
	var x3439 uint32
	var x3440 uint32
	x3440, x3439 = bits.Mul32(x1682, arg3[0])
	var x3441 uint32
	var x3442 uint32
	x3441, x3442 = bits.Add32(x3440, x3437, uint32(0x0))
	var x3443 uint32
	var x3444 uint32
	x3443, x3444 = bits.Add32(x3438, x3435, uint32(uint1(x3442)))
	var x3445 uint32
	var x3446 uint32
	x3445, x3446 = bits.Add32(x3436, x3433, uint32(uint1(x3444)))
	var x3447 uint32
	var x3448 uint32
	x3447, x3448 = bits.Add32(x3434, x3431, uint32(uint1(x3446)))
	var x3449 uint32
	var x3450 uint32
	x3449, x3450 = bits.Add32(x3432, x3429, uint32(uint1(x3448)))
	var x3451 uint32
	var x3452 uint32
	x3451, x3452 = bits.Add32(x3430, x3427, uint32(uint1(x3450)))
	var x3453 uint32
	var x3454 uint32
	x3453, x3454 = bits.Add32(x3428, x3425, uint32(uint1(x3452)))
	x3455 := (uint32(uint1(x3454)) + x3426)
	var x3456 uint32
	var x3457 uint32
	x3456, x3457 = bits.Add32(x3408, x3439, uint32(0x0))
	var x3458 uint32
	var x3459 uint32
	x3458, x3459 = bits.Add32(x3410, x3441, uint32(uint1(x3457)))
	var x3460 uint32
	var x3461 uint32
	x3460, x3461 = bits.Add32(x3412, x3443, uint32(uint1(x3459)))
	var x3462 uint32
	var x3463 uint32
	x3462, x3463 = bits.Add32(x3414, x3445, uint32(uint1(x3461)))
	var x3464 uint32
	var x3465 uint32
	x3464, x3465 = bits.Add32(x3416, x3447, uint32(uint1(x3463)))
	var x3466 uint32
	var x3467 uint32
	x3466, x3467 = bits.Add32(x3418, x3449, uint32(uint1(x3465)))
	var x3468 uint32
	var x3469 uint32
	x3468, x3469 = bits.Add32(x3420, x3451, uint32(uint1(x3467)))
	var x3470 uint32
	var x3471 uint32
	x3470, x3471 = bits.Add32(x3422, x3453, uint32(uint1(x3469)))
	var x3472 uint32
	var x3473 uint32
	x3472, x3473 = bits.Add32(x3424, x3455, uint32(uint1(x3471)))
	var x3474 uint32
	var x3475 uint32
	x3475, x3474 = bits.Mul32(x3456, 0xffffffff)
	var x3476 uint32
	var x3477 uint32
	x3477, x3476 = bits.Mul32(x3456, 0xffffffff)
	var x3478 uint32
	var x3479 uint32
	x3479, x3478 = bits.Mul32(x3456, 0xffffffff)
	var x3480 uint32
	var x3481 uint32
	x3481, x3480 = bits.Mul32(x3456, 0xffffffff)
	var x3482 uint32
	var x3483 uint32
	x3482, x3483 = bits.Add32(x3481, x3478, uint32(0x0))
	var x3484 uint32
	var x3485 uint32
	x3484, x3485 = bits.Add32(x3479, x3476, uint32(uint1(x3483)))
	x3486 := (uint32(uint1(x3485)) + x3477)
	var x3488 uint32
	_, x3488 = bits.Add32(x3456, x3480, uint32(0x0))
	var x3489 uint32
	var x3490 uint32
	x3489, x3490 = bits.Add32(x3458, x3482, uint32(uint1(x3488)))
	var x3491 uint32
	var x3492 uint32
	x3491, x3492 = bits.Add32(x3460, x3484, uint32(uint1(x3490)))
	var x3493 uint32
	var x3494 uint32
	x3493, x3494 = bits.Add32(x3462, x3486, uint32(uint1(x3492)))
	var x3495 uint32
	var x3496 uint32
	x3495, x3496 = bits.Add32(x3464, uint32(0x0), uint32(uint1(x3494)))
	var x3497 uint32
	var x3498 uint32
	x3497, x3498 = bits.Add32(x3466, uint32(0x0), uint32(uint1(x3496)))
	var x3499 uint32
	var x3500 uint32
	x3499, x3500 = bits.Add32(x3468, x3456, uint32(uint1(x3498)))
	var x3501 uint32
	var x3502 uint32
	x3501, x3502 = bits.Add32(x3470, x3474, uint32(uint1(x3500)))
	var x3503 uint32
	var x3504 uint32
	x3503, x3504 = bits.Add32(x3472, x3475, uint32(uint1(x3502)))
	x3505 := (uint32(uint1(x3504)) + uint32(uint1(x3473)))
	var x3506 uint32
	var x3507 uint32
	x3507, x3506 = bits.Mul32(x1683, arg3[7])
	var x3508 uint32
	var x3509 uint32
	x3509, x3508 = bits.Mul32(x1683, arg3[6])
	var x3510 uint32
	var x3511 uint32
	x3511, x3510 = bits.Mul32(x1683, arg3[5])
	var x3512 uint32
	var x3513 uint32
	x3513, x3512 = bits.Mul32(x1683, arg3[4])
	var x3514 uint32
	var x3515 uint32
	x3515, x3514 = bits.Mul32(x1683, arg3[3])
	var x3516 uint32
	var x3517 uint32
	x3517, x3516 = bits.Mul32(x1683, arg3[2])
	var x3518 uint32
	var x3519 uint32
	x3519, x3518 = bits.Mul32(x1683, arg3[1])
	var x3520 uint32
	var x3521 uint32
	x3521, x3520 = bits.Mul32(x1683, arg3[0])
	var x3522 uint32
	var x3523 uint32
	x3522, x3523 = bits.Add32(x3521, x3518, uint32(0x0))
	var x3524 uint32
	var x3525 uint32
	x3524, x3525 = bits.Add32(x3519, x3516, uint32(uint1(x3523)))
	var x3526 uint32
	var x3527 uint32
	x3526, x3527 = bits.Add32(x3517, x3514, uint32(uint1(x3525)))
	var x3528 uint32
	var x3529 uint32
	x3528, x3529 = bits.Add32(x3515, x3512, uint32(uint1(x3527)))
	var x3530 uint32
	var x3531 uint32
	x3530, x3531 = bits.Add32(x3513, x3510, uint32(uint1(x3529)))
	var x3532 uint32
	var x3533 uint32
	x3532, x3533 = bits.Add32(x3511, x3508, uint32(uint1(x3531)))
	var x3534 uint32
	var x3535 uint32
	x3534, x3535 = bits.Add32(x3509, x3506, uint32(uint1(x3533)))
	x3536 := (uint32(uint1(x3535)) + x3507)
	var x3537 uint32
	var x3538 uint32
	x3537, x3538 = bits.Add32(x3489, x3520, uint32(0x0))
	var x3539 uint32
	var x3540 uint32
	x3539, x3540 = bits.Add32(x3491, x3522, uint32(uint1(x3538)))
	var x3541 uint32
	var x3542 uint32
	x3541, x3542 = bits.Add32(x3493, x3524, uint32(uint1(x3540)))
	var x3543 uint32
	var x3544 uint32
	x3543, x3544 = bits.Add32(x3495, x3526, uint32(uint1(x3542)))
	var x3545 uint32
	var x3546 uint32
	x3545, x3546 = bits.Add32(x3497, x3528, uint32(uint1(x3544)))
	var x3547 uint32
	var x3548 uint32
	x3547, x3548 = bits.Add32(x3499, x3530, uint32(uint1(x3546)))
	var x3549 uint32
	var x3550 uint32
	x3549, x3550 = bits.Add32(x3501, x3532, uint32(uint1(x3548)))
	var x3551 uint32
	var x3552 uint32
	x3551, x3552 = bits.Add32(x3503, x3534, uint32(uint1(x3550)))
	var x3553 uint32
	var x3554 uint32
	x3553, x3554 = bits.Add32(x3505, x3536, uint32(uint1(x3552)))
	var x3555 uint32
	var x3556 uint32
	x3556, x3555 = bits.Mul32(x3537, 0xffffffff)
	var x3557 uint32
	var x3558 uint32
	x3558, x3557 = bits.Mul32(x3537, 0xffffffff)
	var x3559 uint32
	var x3560 uint32
	x3560, x3559 = bits.Mul32(x3537, 0xffffffff)
	var x3561 uint32
	var x3562 uint32
	x3562, x3561 = bits.Mul32(x3537, 0xffffffff)
	var x3563 uint32
	var x3564 uint32
	x3563, x3564 = bits.Add32(x3562, x3559, uint32(0x0))
	var x3565 uint32
	var x3566 uint32
	x3565, x3566 = bits.Add32(x3560, x3557, uint32(uint1(x3564)))
	x3567 := (uint32(uint1(x3566)) + x3558)
	var x3569 uint32
	_, x3569 = bits.Add32(x3537, x3561, uint32(0x0))
	var x3570 uint32
	var x3571 uint32
	x3570, x3571 = bits.Add32(x3539, x3563, uint32(uint1(x3569)))
	var x3572 uint32
	var x3573 uint32
	x3572, x3573 = bits.Add32(x3541, x3565, uint32(uint1(x3571)))
	var x3574 uint32
	var x3575 uint32
	x3574, x3575 = bits.Add32(x3543, x3567, uint32(uint1(x3573)))
	var x3576 uint32
	var x3577 uint32
	x3576, x3577 = bits.Add32(x3545, uint32(0x0), uint32(uint1(x3575)))
	var x3578 uint32
	var x3579 uint32
	x3578, x3579 = bits.Add32(x3547, uint32(0x0), uint32(uint1(x3577)))
	var x3580 uint32
	var x3581 uint32
	x3580, x3581 = bits.Add32(x3549, x3537, uint32(uint1(x3579)))
	var x3582 uint32
	var x3583 uint32
	x3582, x3583 = bits.Add32(x3551, x3555, uint32(uint1(x3581)))
	var x3584 uint32
	var x3585 uint32
	x3584, x3585 = bits.Add32(x3553, x3556, uint32(uint1(x3583)))
	x3586 := (uint32(uint1(x3585)) + uint32(uint1(x3554)))
	var x3587 uint32
	var x3588 uint32
	x3588, x3587 = bits.Mul32(x1684, arg3[7])
	var x3589 uint32
	var x3590 uint32
	x3590, x3589 = bits.Mul32(x1684, arg3[6])
	var x3591 uint32
	var x3592 uint32
	x3592, x3591 = bits.Mul32(x1684, arg3[5])
	var x3593 uint32
	var x3594 uint32
	x3594, x3593 = bits.Mul32(x1684, arg3[4])
	var x3595 uint32
	var x3596 uint32
	x3596, x3595 = bits.Mul32(x1684, arg3[3])
	var x3597 uint32
	var x3598 uint32
	x3598, x3597 = bits.Mul32(x1684, arg3[2])
	var x3599 uint32
	var x3600 uint32
	x3600, x3599 = bits.Mul32(x1684, arg3[1])
	var x3601 uint32
	var x3602 uint32
	x3602, x3601 = bits.Mul32(x1684, arg3[0])
	var x3603 uint32
	var x3604 uint32
	x3603, x3604 = bits.Add32(x3602, x3599, uint32(0x0))
	var x3605 uint32
	var x3606 uint32
	x3605, x3606 = bits.Add32(x3600, x3597, uint32(uint1(x3604)))
	var x3607 uint32
	var x3608 uint32
	x3607, x3608 = bits.Add32(x3598, x3595, uint32(uint1(x3606)))
	var x3609 uint32
	var x3610 uint32
	x3609, x3610 = bits.Add32(x3596, x3593, uint32(uint1(x3608)))
	var x3611 uint32
	var x3612 uint32
	x3611, x3612 = bits.Add32(x3594, x3591, uint32(uint1(x3610)))
	var x3613 uint32
	var x3614 uint32
	x3613, x3614 = bits.Add32(x3592, x3589, uint32(uint1(x3612)))
	var x3615 uint32
	var x3616 uint32
	x3615, x3616 = bits.Add32(x3590, x3587, uint32(uint1(x3614)))
	x3617 := (uint32(uint1(x3616)) + x3588)
	var x3618 uint32
	var x3619 uint32
	x3618, x3619 = bits.Add32(x3570, x3601, uint32(0x0))
	var x3620 uint32
	var x3621 uint32
	x3620, x3621 = bits.Add32(x3572, x3603, uint32(uint1(x3619)))
	var x3622 uint32
	var x3623 uint32
	x3622, x3623 = bits.Add32(x3574, x3605, uint32(uint1(x3621)))
	var x3624 uint32
	var x3625 uint32
	x3624, x3625 = bits.Add32(x3576, x3607, uint32(uint1(x3623)))
	var x3626 uint32
	var x3627 uint32
	x3626, x3627 = bits.Add32(x3578, x3609, uint32(uint1(x3625)))
	var x3628 uint32
	var x3629 uint32
	x3628, x3629 = bits.Add32(x3580, x3611, uint32(uint1(x3627)))
	var x3630 uint32
	var x3631 uint32
	x3630, x3631 = bits.Add32(x3582, x3613, uint32(uint1(x3629)))
	var x3632 uint32
	var x3633 uint32
	x3632, x3633 = bits.Add32(x3584, x3615, uint32(uint1(x3631)))
	var x3634 uint32
	var x3635 uint32
	x3634, x3635 = bits.Add32(x3586, x3617, uint32(uint1(x3633)))
	var x3636 uint32
	var x3637 uint32
	x3637, x3636 = bits.Mul32(x3618, 0xffffffff)
	var x3638 uint32
	var x3639 uint32
	x3639, x3638 = bits.Mul32(x3618, 0xffffffff)
	var x3640 uint32
	var x3641 uint32
	x3641, x3640 = bits.Mul32(x3618, 0xffffffff)
	var x3642 uint32
	var x3643 uint32
	x3643, x3642 = bits.Mul32(x3618, 0xffffffff)
	var x3644 uint32
	var x3645 uint32
	x3644, x3645 = bits.Add32(x3643, x3640, uint32(0x0))
	var x3646 uint32
	var x3647 uint32
	x3646, x3647 = bits.Add32(x3641, x3638, uint32(uint1(x3645)))
	x3648 := (uint32(uint1(x3647)) + x3639)
	var x3650 uint32
	_, x3650 = bits.Add32(x3618, x3642, uint32(0x0))
	var x3651 uint32
	var x3652 uint32
	x3651, x3652 = bits.Add32(x3620, x3644, uint32(uint1(x3650)))
	var x3653 uint32
	var x3654 uint32
	x3653, x3654 = bits.Add32(x3622, x3646, uint32(uint1(x3652)))
	var x3655 uint32
	var x3656 uint32
	x3655, x3656 = bits.Add32(x3624, x3648, uint32(uint1(x3654)))
	var x3657 uint32
	var x3658 uint32
	x3657, x3658 = bits.Add32(x3626, uint32(0x0), uint32(uint1(x3656)))
	var x3659 uint32
	var x3660 uint32
	x3659, x3660 = bits.Add32(x3628, uint32(0x0), uint32(uint1(x3658)))
	var x3661 uint32
	var x3662 uint32
	x3661, x3662 = bits.Add32(x3630, x3618, uint32(uint1(x3660)))
	var x3663 uint32
	var x3664 uint32
	x3663, x3664 = bits.Add32(x3632, x3636, uint32(uint1(x3662)))
	var x3665 uint32
	var x3666 uint32
	x3665, x3666 = bits.Add32(x3634, x3637, uint32(uint1(x3664)))
	x3667 := (uint32(uint1(x3666)) + uint32(uint1(x3635)))
	var x3668 uint32
	var x3669 uint32
	x3668, x3669 = bits.Sub32(x3651, 0xffffffff, uint32(0x0))
	var x3670 uint32
	var x3671 uint32
	x3670, x3671 = bits.Sub32(x3653, 0xffffffff, uint32(uint1(x3669)))
	var x3672 uint32
	var x3673 uint32
	x3672, x3673 = bits.Sub32(x3655, 0xffffffff, uint32(uint1(x3671)))
	var x3674 uint32
	var x3675 uint32
	x3674, x3675 = bits.Sub32(x3657, uint32(0x0), uint32(uint1(x3673)))
	var x3676 uint32
	var x3677 uint32
	x3676, x3677 = bits.Sub32(x3659, uint32(0x0), uint32(uint1(x3675)))
	var x3678 uint32
	var x3679 uint32
	x3678, x3679 = bits.Sub32(x3661, uint32(0x0), uint32(uint1(x3677)))
	var x3680 uint32
	var x3681 uint32
	x3680, x3681 = bits.Sub32(x3663, uint32(0x1), uint32(uint1(x3679)))
	var x3682 uint32
	var x3683 uint32
	x3682, x3683 = bits.Sub32(x3665, 0xffffffff, uint32(uint1(x3681)))
	var x3685 uint32
	_, x3685 = bits.Sub32(x3667, uint32(0x0), uint32(uint1(x3683)))
	var x3686 uint32
	cmovznzU32(&x3686, uint1(x3685), x3668, x3651)
	var x3687 uint32
	cmovznzU32(&x3687, uint1(x3685), x3670, x3653)
	var x3688 uint32
	cmovznzU32(&x3688, uint1(x3685), x3672, x3655)
	var x3689 uint32
	cmovznzU32(&x3689, uint1(x3685), x3674, x3657)
	var x3690 uint32
	cmovznzU32(&x3690, uint1(x3685), x3676, x3659)
	var x3691 uint32
	cmovznzU32(&x3691, uint1(x3685), x3678, x3661)
	var x3692 uint32
	cmovznzU32(&x3692, uint1(x3685), x3680, x3663)
	var x3693 uint32
	cmovznzU32(&x3693, uint1(x3685), x3682, x3665)
	var x3694 uint32
	var x3695 uint32
	x3695, x3694 = bits.Mul32(x1721, arg4[7])
	var x3696 uint32
	var x3697 uint32
	x3697, x3696 = bits.Mul32(x1721, arg4[6])
	var x3698 uint32
	var x3699 uint32
	x3699, x3698 = bits.Mul32(x1721, arg4[5])
	var x3700 uint32
	var x3701 uint32
	x3701, x3700 = bits.Mul32(x1721, arg4[4])
	var x3702 uint32
	var x3703 uint32
	x3703, x3702 = bits.Mul32(x1721, arg4[3])
	var x3704 uint32
	var x3705 uint32
	x3705, x3704 = bits.Mul32(x1721, arg4[2])
	var x3706 uint32
	var x3707 uint32
	x3707, x3706 = bits.Mul32(x1721, arg4[1])
	var x3708 uint32
	var x3709 uint32
	x3709, x3708 = bits.Mul32(x1721, arg4[0])
	var x3710 uint32
	var x3711 uint32
	x3710, x3711 = bits.Add32(x3709, x3706, uint32(0x0))
	var x3712 uint32
	var x3713 uint32
	x3712, x3713 = bits.Add32(x3707, x3704, uint32(uint1(x3711)))
	var x3714 uint32
	var x3715 uint32
	x3714, x3715 = bits.Add32(x3705, x3702, uint32(uint1(x3713)))
	var x3716 uint32
	var x3717 uint32
	x3716, x3717 = bits.Add32(x3703, x3700, uint32(uint1(x3715)))
	var x3718 uint32
	var x3719 uint32
	x3718, x3719 = bits.Add32(x3701, x3698, uint32(uint1(x3717)))
	var x3720 uint32
	var x3721 uint32
	x3720, x3721 = bits.Add32(x3699, x3696, uint32(uint1(x3719)))
	var x3722 uint32
	var x3723 uint32
	x3722, x3723 = bits.Add32(x3697, x3694, uint32(uint1(x3721)))
	x3724 := (uint32(uint1(x3723)) + x3695)
	var x3725 uint32
	var x3726 uint32
	x3726, x3725 = bits.Mul32(x3708, 0xffffffff)
	var x3727 uint32
	var x3728 uint32
	x3728, x3727 = bits.Mul32(x3708, 0xffffffff)
	var x3729 uint32
	var x3730 uint32
	x3730, x3729 = bits.Mul32(x3708, 0xffffffff)
	var x3731 uint32
	var x3732 uint32
	x3732, x3731 = bits.Mul32(x3708, 0xffffffff)
	var x3733 uint32
	var x3734 uint32
	x3733, x3734 = bits.Add32(x3732, x3729, uint32(0x0))
	var x3735 uint32
	var x3736 uint32
	x3735, x3736 = bits.Add32(x3730, x3727, uint32(uint1(x3734)))
	x3737 := (uint32(uint1(x3736)) + x3728)
	var x3739 uint32
	_, x3739 = bits.Add32(x3708, x3731, uint32(0x0))
	var x3740 uint32
	var x3741 uint32
	x3740, x3741 = bits.Add32(x3710, x3733, uint32(uint1(x3739)))
	var x3742 uint32
	var x3743 uint32
	x3742, x3743 = bits.Add32(x3712, x3735, uint32(uint1(x3741)))
	var x3744 uint32
	var x3745 uint32
	x3744, x3745 = bits.Add32(x3714, x3737, uint32(uint1(x3743)))
	var x3746 uint32
	var x3747 uint32
	x3746, x3747 = bits.Add32(x3716, uint32(0x0), uint32(uint1(x3745)))
	var x3748 uint32
	var x3749 uint32
	x3748, x3749 = bits.Add32(x3718, uint32(0x0), uint32(uint1(x3747)))
	var x3750 uint32
	var x3751 uint32
	x3750, x3751 = bits.Add32(x3720, x3708, uint32(uint1(x3749)))
	var x3752 uint32
	var x3753 uint32
	x3752, x3753 = bits.Add32(x3722, x3725, uint32(uint1(x3751)))
	var x3754 uint32
	var x3755 uint32
	x3754, x3755 = bits.Add32(x3724, x3726, uint32(uint1(x3753)))
	var x3756 uint32
	var x3757 uint32
	x3757, x3756 = bits.Mul32(x1722, arg4[7])
	var x3758 uint32
	var x3759 uint32
	x3759, x3758 = bits.Mul32(x1722, arg4[6])
	var x3760 uint32
	var x3761 uint32
	x3761, x3760 = bits.Mul32(x1722, arg4[5])
	var x3762 uint32
	var x3763 uint32
	x3763, x3762 = bits.Mul32(x1722, arg4[4])
	var x3764 uint32
	var x3765 uint32
	x3765, x3764 = bits.Mul32(x1722, arg4[3])
	var x3766 uint32
	var x3767 uint32
	x3767, x3766 = bits.Mul32(x1722, arg4[2])
	var x3768 uint32
	var x3769 uint32
	x3769, x3768 = bits.Mul32(x1722, arg4[1])
	var x3770 uint32
	var x3771 uint32
	x3771, x3770 = bits.Mul32(x1722, arg4[0])
	var x3772 uint32
	var x3773 uint32
	x3772, x3773 = bits.Add32(x3771, x3768, uint32(0x0))
	var x3774 uint32
	var x3775 uint32
	x3774, x3775 = bits.Add32(x3769, x3766, uint32(uint1(x3773)))
	var x3776 uint32
	var x3777 uint32
	x3776, x3777 = bits.Add32(x3767, x3764, uint32(uint1(x3775)))
	var x3778 uint32
	var x3779 uint32
	x3778, x3779 = bits.Add32(x3765, x3762, uint32(uint1(x3777)))
	var x3780 uint32
	var x3781 uint32
	x3780, x3781 = bits.Add32(x3763, x3760, uint32(uint1(x3779)))
	var x3782 uint32
	var x3783 uint32
	x3782, x3783 = bits.Add32(x3761, x3758, uint32(uint1(x3781)))
	var x3784 uint32
	var x3785 uint32
	x3784, x3785 = bits.Add32(x3759, x3756, uint32(uint1(x3783)))
	x3786 := (uint32(uint1(x3785)) + x3757)
	var x3787 uint32
	var x3788 uint32
	x3787, x3788 = bits.Add32(x3740, x3770, uint32(0x0))
	var x3789 uint32
	var x3790 uint32
	x3789, x3790 = bits.Add32(x3742, x3772, uint32(uint1(x3788)))
	var x3791 uint32
	var x3792 uint32
	x3791, x3792 = bits.Add32(x3744, x3774, uint32(uint1(x3790)))
	var x3793 uint32
	var x3794 uint32
	x3793, x3794 = bits.Add32(x3746, x3776, uint32(uint1(x3792)))
	var x3795 uint32
	var x3796 uint32
	x3795, x3796 = bits.Add32(x3748, x3778, uint32(uint1(x3794)))
	var x3797 uint32
	var x3798 uint32
	x3797, x3798 = bits.Add32(x3750, x3780, uint32(uint1(x3796)))
	var x3799 uint32
	var x3800 uint32
	x3799, x3800 = bits.Add32(x3752, x3782, uint32(uint1(x3798)))
	var x3801 uint32
	var x3802 uint32
	x3801, x3802 = bits.Add32(x3754, x3784, uint32(uint1(x3800)))
	var x3803 uint32
	var x3804 uint32
	x3803, x3804 = bits.Add32(uint32(uint1(x3755)), x3786, uint32(uint1(x3802)))
	var x3805 uint32
	var x3806 uint32
	x3806, x3805 = bits.Mul32(x3787, 0xffffffff)
	var x3807 uint32
	var x3808 uint32
	x3808, x3807 = bits.Mul32(x3787, 0xffffffff)
	var x3809 uint32
	var x3810 uint32
	x3810, x3809 = bits.Mul32(x3787, 0xffffffff)
	var x3811 uint32
	var x3812 uint32
	x3812, x3811 = bits.Mul32(x3787, 0xffffffff)
	var x3813 uint32
	var x3814 uint32
	x3813, x3814 = bits.Add32(x3812, x3809, uint32(0x0))
	var x3815 uint32
	var x3816 uint32
	x3815, x3816 = bits.Add32(x3810, x3807, uint32(uint1(x3814)))
	x3817 := (uint32(uint1(x3816)) + x3808)
	var x3819 uint32
	_, x3819 = bits.Add32(x3787, x3811, uint32(0x0))
	var x3820 uint32
	var x3821 uint32
	x3820, x3821 = bits.Add32(x3789, x3813, uint32(uint1(x3819)))
	var x3822 uint32
	var x3823 uint32
	x3822, x3823 = bits.Add32(x3791, x3815, uint32(uint1(x3821)))
	var x3824 uint32
	var x3825 uint32
	x3824, x3825 = bits.Add32(x3793, x3817, uint32(uint1(x3823)))
	var x3826 uint32
	var x3827 uint32
	x3826, x3827 = bits.Add32(x3795, uint32(0x0), uint32(uint1(x3825)))
	var x3828 uint32
	var x3829 uint32
	x3828, x3829 = bits.Add32(x3797, uint32(0x0), uint32(uint1(x3827)))
	var x3830 uint32
	var x3831 uint32
	x3830, x3831 = bits.Add32(x3799, x3787, uint32(uint1(x3829)))
	var x3832 uint32
	var x3833 uint32
	x3832, x3833 = bits.Add32(x3801, x3805, uint32(uint1(x3831)))
	var x3834 uint32
	var x3835 uint32
	x3834, x3835 = bits.Add32(x3803, x3806, uint32(uint1(x3833)))
	x3836 := (uint32(uint1(x3835)) + uint32(uint1(x3804)))
	var x3837 uint32
	var x3838 uint32
	x3838, x3837 = bits.Mul32(x1723, arg4[7])
	var x3839 uint32
	var x3840 uint32
	x3840, x3839 = bits.Mul32(x1723, arg4[6])
	var x3841 uint32
	var x3842 uint32
	x3842, x3841 = bits.Mul32(x1723, arg4[5])
	var x3843 uint32
	var x3844 uint32
	x3844, x3843 = bits.Mul32(x1723, arg4[4])
	var x3845 uint32
	var x3846 uint32
	x3846, x3845 = bits.Mul32(x1723, arg4[3])
	var x3847 uint32
	var x3848 uint32
	x3848, x3847 = bits.Mul32(x1723, arg4[2])
	var x3849 uint32
	var x3850 uint32
	x3850, x3849 = bits.Mul32(x1723, arg4[1])
	var x3851 uint32
	var x3852 uint32
	x3852, x3851 = bits.Mul32(x1723, arg4[0])
	var x3853 uint32
	var x3854 uint32
	x3853, x3854 = bits.Add32(x3852, x3849, uint32(0x0))
	var x3855 uint32
	var x3856 uint32
	x3855, x3856 = bits.Add32(x3850, x3847, uint32(uint1(x3854)))
	var x3857 uint32
	var x3858 uint32
	x3857, x3858 = bits.Add32(x3848, x3845, uint32(uint1(x3856)))
	var x3859 uint32
	var x3860 uint32
	x3859, x3860 = bits.Add32(x3846, x3843, uint32(uint1(x3858)))
	var x3861 uint32
	var x3862 uint32
	x3861, x3862 = bits.Add32(x3844, x3841, uint32(uint1(x3860)))
	var x3863 uint32
	var x3864 uint32
	x3863, x3864 = bits.Add32(x3842, x3839, uint32(uint1(x3862)))
	var x3865 uint32
	var x3866 uint32
	x3865, x3866 = bits.Add32(x3840, x3837, uint32(uint1(x3864)))
	x3867 := (uint32(uint1(x3866)) + x3838)
	var x3868 uint32
	var x3869 uint32
	x3868, x3869 = bits.Add32(x3820, x3851, uint32(0x0))
	var x3870 uint32
	var x3871 uint32
	x3870, x3871 = bits.Add32(x3822, x3853, uint32(uint1(x3869)))
	var x3872 uint32
	var x3873 uint32
	x3872, x3873 = bits.Add32(x3824, x3855, uint32(uint1(x3871)))
	var x3874 uint32
	var x3875 uint32
	x3874, x3875 = bits.Add32(x3826, x3857, uint32(uint1(x3873)))
	var x3876 uint32
	var x3877 uint32
	x3876, x3877 = bits.Add32(x3828, x3859, uint32(uint1(x3875)))
	var x3878 uint32
	var x3879 uint32
	x3878, x3879 = bits.Add32(x3830, x3861, uint32(uint1(x3877)))
	var x3880 uint32
	var x3881 uint32
	x3880, x3881 = bits.Add32(x3832, x3863, uint32(uint1(x3879)))
	var x3882 uint32
	var x3883 uint32
	x3882, x3883 = bits.Add32(x3834, x3865, uint32(uint1(x3881)))
	var x3884 uint32
	var x3885 uint32
	x3884, x3885 = bits.Add32(x3836, x3867, uint32(uint1(x3883)))
	var x3886 uint32
	var x3887 uint32
	x3887, x3886 = bits.Mul32(x3868, 0xffffffff)
	var x3888 uint32
	var x3889 uint32
	x3889, x3888 = bits.Mul32(x3868, 0xffffffff)
	var x3890 uint32
	var x3891 uint32
	x3891, x3890 = bits.Mul32(x3868, 0xffffffff)
	var x3892 uint32
	var x3893 uint32
	x3893, x3892 = bits.Mul32(x3868, 0xffffffff)
	var x3894 uint32
	var x3895 uint32
	x3894, x3895 = bits.Add32(x3893, x3890, uint32(0x0))
	var x3896 uint32
	var x3897 uint32
	x3896, x3897 = bits.Add32(x3891, x3888, uint32(uint1(x3895)))
	x3898 := (uint32(uint1(x3897)) + x3889)
	var x3900 uint32
	_, x3900 = bits.Add32(x3868, x3892, uint32(0x0))
	var x3901 uint32
	var x3902 uint32
	x3901, x3902 = bits.Add32(x3870, x3894, uint32(uint1(x3900)))
	var x3903 uint32
	var x3904 uint32
	x3903, x3904 = bits.Add32(x3872, x3896, uint32(uint1(x3902)))
	var x3905 uint32
	var x3906 uint32
	x3905, x3906 = bits.Add32(x3874, x3898, uint32(uint1(x3904)))
	var x3907 uint32
	var x3908 uint32
	x3907, x3908 = bits.Add32(x3876, uint32(0x0), uint32(uint1(x3906)))
	var x3909 uint32
	var x3910 uint32
	x3909, x3910 = bits.Add32(x3878, uint32(0x0), uint32(uint1(x3908)))
	var x3911 uint32
	var x3912 uint32
	x3911, x3912 = bits.Add32(x3880, x3868, uint32(uint1(x3910)))
	var x3913 uint32
	var x3914 uint32
	x3913, x3914 = bits.Add32(x3882, x3886, uint32(uint1(x3912)))
	var x3915 uint32
	var x3916 uint32
	x3915, x3916 = bits.Add32(x3884, x3887, uint32(uint1(x3914)))
	x3917 := (uint32(uint1(x3916)) + uint32(uint1(x3885)))
	var x3918 uint32
	var x3919 uint32
	x3919, x3918 = bits.Mul32(x1724, arg4[7])
	var x3920 uint32
	var x3921 uint32
	x3921, x3920 = bits.Mul32(x1724, arg4[6])
	var x3922 uint32
	var x3923 uint32
	x3923, x3922 = bits.Mul32(x1724, arg4[5])
	var x3924 uint32
	var x3925 uint32
	x3925, x3924 = bits.Mul32(x1724, arg4[4])
	var x3926 uint32
	var x3927 uint32
	x3927, x3926 = bits.Mul32(x1724, arg4[3])
	var x3928 uint32
	var x3929 uint32
	x3929, x3928 = bits.Mul32(x1724, arg4[2])
	var x3930 uint32
	var x3931 uint32
	x3931, x3930 = bits.Mul32(x1724, arg4[1])
	var x3932 uint32
	var x3933 uint32
	x3933, x3932 = bits.Mul32(x1724, arg4[0])
	var x3934 uint32
	var x3935 uint32
	x3934, x3935 = bits.Add32(x3933, x3930, uint32(0x0))
	var x3936 uint32
	var x3937 uint32
	x3936, x3937 = bits.Add32(x3931, x3928, uint32(uint1(x3935)))
	var x3938 uint32
	var x3939 uint32
	x3938, x3939 = bits.Add32(x3929, x3926, uint32(uint1(x3937)))
	var x3940 uint32
	var x3941 uint32
	x3940, x3941 = bits.Add32(x3927, x3924, uint32(uint1(x3939)))
	var x3942 uint32
	var x3943 uint32
	x3942, x3943 = bits.Add32(x3925, x3922, uint32(uint1(x3941)))
	var x3944 uint32
	var x3945 uint32
	x3944, x3945 = bits.Add32(x3923, x3920, uint32(uint1(x3943)))
	var x3946 uint32
	var x3947 uint32
	x3946, x3947 = bits.Add32(x3921, x3918, uint32(uint1(x3945)))
	x3948 := (uint32(uint1(x3947)) + x3919)
	var x3949 uint32
	var x3950 uint32
	x3949, x3950 = bits.Add32(x3901, x3932, uint32(0x0))
	var x3951 uint32
	var x3952 uint32
	x3951, x3952 = bits.Add32(x3903, x3934, uint32(uint1(x3950)))
	var x3953 uint32
	var x3954 uint32
	x3953, x3954 = bits.Add32(x3905, x3936, uint32(uint1(x3952)))
	var x3955 uint32
	var x3956 uint32
	x3955, x3956 = bits.Add32(x3907, x3938, uint32(uint1(x3954)))
	var x3957 uint32
	var x3958 uint32
	x3957, x3958 = bits.Add32(x3909, x3940, uint32(uint1(x3956)))
	var x3959 uint32
	var x3960 uint32
	x3959, x3960 = bits.Add32(x3911, x3942, uint32(uint1(x3958)))
	var x3961 uint32
	var x3962 uint32
	x3961, x3962 = bits.Add32(x3913, x3944, uint32(uint1(x3960)))
	var x3963 uint32
	var x3964 uint32
	x3963, x3964 = bits.Add32(x3915, x3946, uint32(uint1(x3962)))
	var x3965 uint32
	var x3966 uint32
	x3965, x3966 = bits.Add32(x3917, x3948, uint32(uint1(x3964)))
	var x3967 uint32
	var x3968 uint32
	x3968, x3967 = bits.Mul32(x3949, 0xffffffff)
	var x3969 uint32
	var x3970 uint32
	x3970, x3969 = bits.Mul32(x3949, 0xffffffff)
	var x3971 uint32
	var x3972 uint32
	x3972, x3971 = bits.Mul32(x3949, 0xffffffff)
	var x3973 uint32
	var x3974 uint32
	x3974, x3973 = bits.Mul32(x3949, 0xffffffff)
	var x3975 uint32
	var x3976 uint32
	x3975, x3976 = bits.Add32(x3974, x3971, uint32(0x0))
	var x3977 uint32
	var x3978 uint32
	x3977, x3978 = bits.Add32(x3972, x3969, uint32(uint1(x3976)))
	x3979 := (uint32(uint1(x3978)) + x3970)
	var x3981 uint32
	_, x3981 = bits.Add32(x3949, x3973, uint32(0x0))
	var x3982 uint32
	var x3983 uint32
	x3982, x3983 = bits.Add32(x3951, x3975, uint32(uint1(x3981)))
	var x3984 uint32
	var x3985 uint32
	x3984, x3985 = bits.Add32(x3953, x3977, uint32(uint1(x3983)))
	var x3986 uint32
	var x3987 uint32
	x3986, x3987 = bits.Add32(x3955, x3979, uint32(uint1(x3985)))
	var x3988 uint32
	var x3989 uint32
	x3988, x3989 = bits.Add32(x3957, uint32(0x0), uint32(uint1(x3987)))
	var x3990 uint32
	var x3991 uint32
	x3990, x3991 = bits.Add32(x3959, uint32(0x0), uint32(uint1(x3989)))
	var x3992 uint32
	var x3993 uint32
	x3992, x3993 = bits.Add32(x3961, x3949, uint32(uint1(x3991)))
	var x3994 uint32
	var x3995 uint32
	x3994, x3995 = bits.Add32(x3963, x3967, uint32(uint1(x3993)))
	var x3996 uint32
	var x3997 uint32
	x3996, x3997 = bits.Add32(x3965, x3968, uint32(uint1(x3995)))
	x3998 := (uint32(uint1(x3997)) + uint32(uint1(x3966)))
	var x3999 uint32
	var x4000 uint32
	x4000, x3999 = bits.Mul32(x1725, arg4[7])
	var x4001 uint32
	var x4002 uint32
	x4002, x4001 = bits.Mul32(x1725, arg4[6])
	var x4003 uint32
	var x4004 uint32
	x4004, x4003 = bits.Mul32(x1725, arg4[5])
	var x4005 uint32
	var x4006 uint32
	x4006, x4005 = bits.Mul32(x1725, arg4[4])
	var x4007 uint32
	var x4008 uint32
	x4008, x4007 = bits.Mul32(x1725, arg4[3])
	var x4009 uint32
	var x4010 uint32
	x4010, x4009 = bits.Mul32(x1725, arg4[2])
	var x4011 uint32
	var x4012 uint32
	x4012, x4011 = bits.Mul32(x1725, arg4[1])
	var x4013 uint32
	var x4014 uint32
	x4014, x4013 = bits.Mul32(x1725, arg4[0])
	var x4015 uint32
	var x4016 uint32
	x4015, x4016 = bits.Add32(x4014, x4011, uint32(0x0))
	var x4017 uint32
	var x4018 uint32
	x4017, x4018 = bits.Add32(x4012, x4009, uint32(uint1(x4016)))
	var x4019 uint32
	var x4020 uint32
	x4019, x4020 = bits.Add32(x4010, x4007, uint32(uint1(x4018)))
	var x4021 uint32
	var x4022 uint32
	x4021, x4022 = bits.Add32(x4008, x4005, uint32(uint1(x4020)))
	var x4023 uint32
	var x4024 uint32
	x4023, x4024 = bits.Add32(x4006, x4003, uint32(uint1(x4022)))
	var x4025 uint32
	var x4026 uint32
	x4025, x4026 = bits.Add32(x4004, x4001, uint32(uint1(x4024)))
	var x4027 uint32
	var x4028 uint32
	x4027, x4028 = bits.Add32(x4002, x3999, uint32(uint1(x4026)))
	x4029 := (uint32(uint1(x4028)) + x4000)
	var x4030 uint32
	var x4031 uint32
	x4030, x4031 = bits.Add32(x3982, x4013, uint32(0x0))
	var x4032 uint32
	var x4033 uint32
	x4032, x4033 = bits.Add32(x3984, x4015, uint32(uint1(x4031)))
	var x4034 uint32
	var x4035 uint32
	x4034, x4035 = bits.Add32(x3986, x4017, uint32(uint1(x4033)))
	var x4036 uint32
	var x4037 uint32
	x4036, x4037 = bits.Add32(x3988, x4019, uint32(uint1(x4035)))
	var x4038 uint32
	var x4039 uint32
	x4038, x4039 = bits.Add32(x3990, x4021, uint32(uint1(x4037)))
	var x4040 uint32
	var x4041 uint32
	x4040, x4041 = bits.Add32(x3992, x4023, uint32(uint1(x4039)))
	var x4042 uint32
	var x4043 uint32
	x4042, x4043 = bits.Add32(x3994, x4025, uint32(uint1(x4041)))
	var x4044 uint32
	var x4045 uint32
	x4044, x4045 = bits.Add32(x3996, x4027, uint32(uint1(x4043)))
	var x4046 uint32
	var x4047 uint32
	x4046, x4047 = bits.Add32(x3998, x4029, uint32(uint1(x4045)))
	var x4048 uint32
	var x4049 uint32
	x4049, x4048 = bits.Mul32(x4030, 0xffffffff)
	var x4050 uint32
	var x4051 uint32
	x4051, x4050 = bits.Mul32(x4030, 0xffffffff)
	var x4052 uint32
	var x4053 uint32
	x4053, x4052 = bits.Mul32(x4030, 0xffffffff)
	var x4054 uint32
	var x4055 uint32
	x4055, x4054 = bits.Mul32(x4030, 0xffffffff)
	var x4056 uint32
	var x4057 uint32
	x4056, x4057 = bits.Add32(x4055, x4052, uint32(0x0))
	var x4058 uint32
	var x4059 uint32
	x4058, x4059 = bits.Add32(x4053, x4050, uint32(uint1(x4057)))
	x4060 := (uint32(uint1(x4059)) + x4051)
	var x4062 uint32
	_, x4062 = bits.Add32(x4030, x4054, uint32(0x0))
	var x4063 uint32
	var x4064 uint32
	x4063, x4064 = bits.Add32(x4032, x4056, uint32(uint1(x4062)))
	var x4065 uint32
	var x4066 uint32
	x4065, x4066 = bits.Add32(x4034, x4058, uint32(uint1(x4064)))
	var x4067 uint32
	var x4068 uint32
	x4067, x4068 = bits.Add32(x4036, x4060, uint32(uint1(x4066)))
	var x4069 uint32
	var x4070 uint32
	x4069, x4070 = bits.Add32(x4038, uint32(0x0), uint32(uint1(x4068)))
	var x4071 uint32
	var x4072 uint32
	x4071, x4072 = bits.Add32(x4040, uint32(0x0), uint32(uint1(x4070)))
	var x4073 uint32
	var x4074 uint32
	x4073, x4074 = bits.Add32(x4042, x4030, uint32(uint1(x4072)))
	var x4075 uint32
	var x4076 uint32
	x4075, x4076 = bits.Add32(x4044, x4048, uint32(uint1(x4074)))
	var x4077 uint32
	var x4078 uint32
	x4077, x4078 = bits.Add32(x4046, x4049, uint32(uint1(x4076)))
	x4079 := (uint32(uint1(x4078)) + uint32(uint1(x4047)))
	var x4080 uint32
	var x4081 uint32
	x4081, x4080 = bits.Mul32(x1726, arg4[7])
	var x4082 uint32
	var x4083 uint32
	x4083, x4082 = bits.Mul32(x1726, arg4[6])
	var x4084 uint32
	var x4085 uint32
	x4085, x4084 = bits.Mul32(x1726, arg4[5])
	var x4086 uint32
	var x4087 uint32
	x4087, x4086 = bits.Mul32(x1726, arg4[4])
	var x4088 uint32
	var x4089 uint32
	x4089, x4088 = bits.Mul32(x1726, arg4[3])
	var x4090 uint32
	var x4091 uint32
	x4091, x4090 = bits.Mul32(x1726, arg4[2])
	var x4092 uint32
	var x4093 uint32
	x4093, x4092 = bits.Mul32(x1726, arg4[1])
	var x4094 uint32
	var x4095 uint32
	x4095, x4094 = bits.Mul32(x1726, arg4[0])
	var x4096 uint32
	var x4097 uint32
	x4096, x4097 = bits.Add32(x4095, x4092, uint32(0x0))
	var x4098 uint32
	var x4099 uint32
	x4098, x4099 = bits.Add32(x4093, x4090, uint32(uint1(x4097)))
	var x4100 uint32
	var x4101 uint32
	x4100, x4101 = bits.Add32(x4091, x4088, uint32(uint1(x4099)))
	var x4102 uint32
	var x4103 uint32
	x4102, x4103 = bits.Add32(x4089, x4086, uint32(uint1(x4101)))
	var x4104 uint32
	var x4105 uint32
	x4104, x4105 = bits.Add32(x4087, x4084, uint32(uint1(x4103)))
	var x4106 uint32
	var x4107 uint32
	x4106, x4107 = bits.Add32(x4085, x4082, uint32(uint1(x4105)))
	var x4108 uint32
	var x4109 uint32
	x4108, x4109 = bits.Add32(x4083, x4080, uint32(uint1(x4107)))
	x4110 := (uint32(uint1(x4109)) + x4081)
	var x4111 uint32
	var x4112 uint32
	x4111, x4112 = bits.Add32(x4063, x4094, uint32(0x0))
	var x4113 uint32
	var x4114 uint32
	x4113, x4114 = bits.Add32(x4065, x4096, uint32(uint1(x4112)))
	var x4115 uint32
	var x4116 uint32
	x4115, x4116 = bits.Add32(x4067, x4098, uint32(uint1(x4114)))
	var x4117 uint32
	var x4118 uint32
	x4117, x4118 = bits.Add32(x4069, x4100, uint32(uint1(x4116)))
	var x4119 uint32
	var x4120 uint32
	x4119, x4120 = bits.Add32(x4071, x4102, uint32(uint1(x4118)))
	var x4121 uint32
	var x4122 uint32
	x4121, x4122 = bits.Add32(x4073, x4104, uint32(uint1(x4120)))
	var x4123 uint32
	var x4124 uint32
	x4123, x4124 = bits.Add32(x4075, x4106, uint32(uint1(x4122)))
	var x4125 uint32
	var x4126 uint32
	x4125, x4126 = bits.Add32(x4077, x4108, uint32(uint1(x4124)))
	var x4127 uint32
	var x4128 uint32
	x4127, x4128 = bits.Add32(x4079, x4110, uint32(uint1(x4126)))
	var x4129 uint32
	var x4130 uint32
	x4130, x4129 = bits.Mul32(x4111, 0xffffffff)
	var x4131 uint32
	var x4132 uint32
	x4132, x4131 = bits.Mul32(x4111, 0xffffffff)
	var x4133 uint32
	var x4134 uint32
	x4134, x4133 = bits.Mul32(x4111, 0xffffffff)
	var x4135 uint32
	var x4136 uint32
	x4136, x4135 = bits.Mul32(x4111, 0xffffffff)
	var x4137 uint32
	var x4138 uint32
	x4137, x4138 = bits.Add32(x4136, x4133, uint32(0x0))
	var x4139 uint32
	var x4140 uint32
	x4139, x4140 = bits.Add32(x4134, x4131, uint32(uint1(x4138)))
	x4141 := (uint32(uint1(x4140)) + x4132)
	var x4143 uint32
	_, x4143 = bits.Add32(x4111, x4135, uint32(0x0))
	var x4144 uint32
	var x4145 uint32
	x4144, x4145 = bits.Add32(x4113, x4137, uint32(uint1(x4143)))
	var x4146 uint32
	var x4147 uint32
	x4146, x4147 = bits.Add32(x4115, x4139, uint32(uint1(x4145)))
	var x4148 uint32
	var x4149 uint32
	x4148, x4149 = bits.Add32(x4117, x4141, uint32(uint1(x4147)))
	var x4150 uint32
	var x4151 uint32
	x4150, x4151 = bits.Add32(x4119, uint32(0x0), uint32(uint1(x4149)))
	var x4152 uint32
	var x4153 uint32
	x4152, x4153 = bits.Add32(x4121, uint32(0x0), uint32(uint1(x4151)))
	var x4154 uint32
	var x4155 uint32
	x4154, x4155 = bits.Add32(x4123, x4111, uint32(uint1(x4153)))
	var x4156 uint32
	var x4157 uint32
	x4156, x4157 = bits.Add32(x4125, x4129, uint32(uint1(x4155)))
	var x4158 uint32
	var x4159 uint32
	x4158, x4159 = bits.Add32(x4127, x4130, uint32(uint1(x4157)))
	x4160 := (uint32(uint1(x4159)) + uint32(uint1(x4128)))
	var x4161 uint32
	var x4162 uint32
	x4162, x4161 = bits.Mul32(x1727, arg4[7])
	var x4163 uint32
	var x4164 uint32
	x4164, x4163 = bits.Mul32(x1727, arg4[6])
	var x4165 uint32
	var x4166 uint32
	x4166, x4165 = bits.Mul32(x1727, arg4[5])
	var x4167 uint32
	var x4168 uint32
	x4168, x4167 = bits.Mul32(x1727, arg4[4])
	var x4169 uint32
	var x4170 uint32
	x4170, x4169 = bits.Mul32(x1727, arg4[3])
	var x4171 uint32
	var x4172 uint32
	x4172, x4171 = bits.Mul32(x1727, arg4[2])
	var x4173 uint32
	var x4174 uint32
	x4174, x4173 = bits.Mul32(x1727, arg4[1])
	var x4175 uint32
	var x4176 uint32
	x4176, x4175 = bits.Mul32(x1727, arg4[0])
	var x4177 uint32
	var x4178 uint32
	x4177, x4178 = bits.Add32(x4176, x4173, uint32(0x0))
	var x4179 uint32
	var x4180 uint32
	x4179, x4180 = bits.Add32(x4174, x4171, uint32(uint1(x4178)))
	var x4181 uint32
	var x4182 uint32
	x4181, x4182 = bits.Add32(x4172, x4169, uint32(uint1(x4180)))
	var x4183 uint32
	var x4184 uint32
	x4183, x4184 = bits.Add32(x4170, x4167, uint32(uint1(x4182)))
	var x4185 uint32
	var x4186 uint32
	x4185, x4186 = bits.Add32(x4168, x4165, uint32(uint1(x4184)))
	var x4187 uint32
	var x4188 uint32
	x4187, x4188 = bits.Add32(x4166, x4163, uint32(uint1(x4186)))
	var x4189 uint32
	var x4190 uint32
	x4189, x4190 = bits.Add32(x4164, x4161, uint32(uint1(x4188)))
	x4191 := (uint32(uint1(x4190)) + x4162)
	var x4192 uint32
	var x4193 uint32
	x4192, x4193 = bits.Add32(x4144, x4175, uint32(0x0))
	var x4194 uint32
	var x4195 uint32
	x4194, x4195 = bits.Add32(x4146, x4177, uint32(uint1(x4193)))
	var x4196 uint32
	var x4197 uint32
	x4196, x4197 = bits.Add32(x4148, x4179, uint32(uint1(x4195)))
	var x4198 uint32
	var x4199 uint32
	x4198, x4199 = bits.Add32(x4150, x4181, uint32(uint1(x4197)))
	var x4200 uint32
	var x4201 uint32
	x4200, x4201 = bits.Add32(x4152, x4183, uint32(uint1(x4199)))
	var x4202 uint32
	var x4203 uint32
	x4202, x4203 = bits.Add32(x4154, x4185, uint32(uint1(x4201)))
	var x4204 uint32
	var x4205 uint32
	x4204, x4205 = bits.Add32(x4156, x4187, uint32(uint1(x4203)))
	var x4206 uint32
	var x4207 uint32
	x4206, x4207 = bits.Add32(x4158, x4189, uint32(uint1(x4205)))
	var x4208 uint32
	var x4209 uint32
	x4208, x4209 = bits.Add32(x4160, x4191, uint32(uint1(x4207)))
	var x4210 uint32
	var x4211 uint32
	x4211, x4210 = bits.Mul32(x4192, 0xffffffff)
	var x4212 uint32
	var x4213 uint32
	x4213, x4212 = bits.Mul32(x4192, 0xffffffff)
	var x4214 uint32
	var x4215 uint32
	x4215, x4214 = bits.Mul32(x4192, 0xffffffff)
	var x4216 uint32
	var x4217 uint32
	x4217, x4216 = bits.Mul32(x4192, 0xffffffff)
	var x4218 uint32
	var x4219 uint32
	x4218, x4219 = bits.Add32(x4217, x4214, uint32(0x0))
	var x4220 uint32
	var x4221 uint32
	x4220, x4221 = bits.Add32(x4215, x4212, uint32(uint1(x4219)))
	x4222 := (uint32(uint1(x4221)) + x4213)
	var x4224 uint32
	_, x4224 = bits.Add32(x4192, x4216, uint32(0x0))
	var x4225 uint32
	var x4226 uint32
	x4225, x4226 = bits.Add32(x4194, x4218, uint32(uint1(x4224)))
	var x4227 uint32
	var x4228 uint32
	x4227, x4228 = bits.Add32(x4196, x4220, uint32(uint1(x4226)))
	var x4229 uint32
	var x4230 uint32
	x4229, x4230 = bits.Add32(x4198, x4222, uint32(uint1(x4228)))
	var x4231 uint32
	var x4232 uint32
	x4231, x4232 = bits.Add32(x4200, uint32(0x0), uint32(uint1(x4230)))
	var x4233 uint32
	var x4234 uint32
	x4233, x4234 = bits.Add32(x4202, uint32(0x0), uint32(uint1(x4232)))
	var x4235 uint32
	var x4236 uint32
	x4235, x4236 = bits.Add32(x4204, x4192, uint32(uint1(x4234)))
	var x4237 uint32
	var x4238 uint32
	x4237, x4238 = bits.Add32(x4206, x4210, uint32(uint1(x4236)))
	var x4239 uint32
	var x4240 uint32
	x4239, x4240 = bits.Add32(x4208, x4211, uint32(uint1(x4238)))
	x4241 := (uint32(uint1(x4240)) + uint32(uint1(x4209)))
	var x4242 uint32
	var x4243 uint32
	x4243, x4242 = bits.Mul32(x1728, arg4[7])
	var x4244 uint32
	var x4245 uint32
	x4245, x4244 = bits.Mul32(x1728, arg4[6])
	var x4246 uint32
	var x4247 uint32
	x4247, x4246 = bits.Mul32(x1728, arg4[5])
	var x4248 uint32
	var x4249 uint32
	x4249, x4248 = bits.Mul32(x1728, arg4[4])
	var x4250 uint32
	var x4251 uint32
	x4251, x4250 = bits.Mul32(x1728, arg4[3])
	var x4252 uint32
	var x4253 uint32
	x4253, x4252 = bits.Mul32(x1728, arg4[2])
	var x4254 uint32
	var x4255 uint32
	x4255, x4254 = bits.Mul32(x1728, arg4[1])
	var x4256 uint32
	var x4257 uint32
	x4257, x4256 = bits.Mul32(x1728, arg4[0])
	var x4258 uint32
	var x4259 uint32
	x4258, x4259 = bits.Add32(x4257, x4254, uint32(0x0))
	var x4260 uint32
	var x4261 uint32
	x4260, x4261 = bits.Add32(x4255, x4252, uint32(uint1(x4259)))
	var x4262 uint32
	var x4263 uint32
	x4262, x4263 = bits.Add32(x4253, x4250, uint32(uint1(x4261)))
	var x4264 uint32
	var x4265 uint32
	x4264, x4265 = bits.Add32(x4251, x4248, uint32(uint1(x4263)))
	var x4266 uint32
	var x4267 uint32
	x4266, x4267 = bits.Add32(x4249, x4246, uint32(uint1(x4265)))
	var x4268 uint32
	var x4269 uint32
	x4268, x4269 = bits.Add32(x4247, x4244, uint32(uint1(x4267)))
	var x4270 uint32
	var x4271 uint32
	x4270, x4271 = bits.Add32(x4245, x4242, uint32(uint1(x4269)))
	x4272 := (uint32(uint1(x4271)) + x4243)
	var x4273 uint32
	var x4274 uint32
	x4273, x4274 = bits.Add32(x4225, x4256, uint32(0x0))
	var x4275 uint32
	var x4276 uint32
	x4275, x4276 = bits.Add32(x4227, x4258, uint32(uint1(x4274)))
	var x4277 uint32
	var x4278 uint32
	x4277, x4278 = bits.Add32(x4229, x4260, uint32(uint1(x4276)))
	var x4279 uint32
	var x4280 uint32
	x4279, x4280 = bits.Add32(x4231, x4262, uint32(uint1(x4278)))
	var x4281 uint32
	var x4282 uint32
	x4281, x4282 = bits.Add32(x4233, x4264, uint32(uint1(x4280)))
	var x4283 uint32
	var x4284 uint32
	x4283, x4284 = bits.Add32(x4235, x4266, uint32(uint1(x4282)))
	var x4285 uint32
	var x4286 uint32
	x4285, x4286 = bits.Add32(x4237, x4268, uint32(uint1(x4284)))
	var x4287 uint32
	var x4288 uint32
	x4287, x4288 = bits.Add32(x4239, x4270, uint32(uint1(x4286)))
	var x4289 uint32
	var x4290 uint32
	x4289, x4290 = bits.Add32(x4241, x4272, uint32(uint1(x4288)))
	var x4291 uint32
	var x4292 uint32
	x4292, x4291 = bits.Mul32(x4273, 0xffffffff)
	var x4293 uint32
	var x4294 uint32
	x4294, x4293 = bits.Mul32(x4273, 0xffffffff)
	var x4295 uint32
	var x4296 uint32
	x4296, x4295 = bits.Mul32(x4273, 0xffffffff)
	var x4297 uint32
	var x4298 uint32
	x4298, x4297 = bits.Mul32(x4273, 0xffffffff)
	var x4299 uint32
	var x4300 uint32
	x4299, x4300 = bits.Add32(x4298, x4295, uint32(0x0))
	var x4301 uint32
	var x4302 uint32
	x4301, x4302 = bits.Add32(x4296, x4293, uint32(uint1(x4300)))
	x4303 := (uint32(uint1(x4302)) + x4294)
	var x4305 uint32
	_, x4305 = bits.Add32(x4273, x4297, uint32(0x0))
	var x4306 uint32
	var x4307 uint32
	x4306, x4307 = bits.Add32(x4275, x4299, uint32(uint1(x4305)))
	var x4308 uint32
	var x4309 uint32
	x4308, x4309 = bits.Add32(x4277, x4301, uint32(uint1(x4307)))
	var x4310 uint32
	var x4311 uint32
	x4310, x4311 = bits.Add32(x4279, x4303, uint32(uint1(x4309)))
	var x4312 uint32
	var x4313 uint32
	x4312, x4313 = bits.Add32(x4281, uint32(0x0), uint32(uint1(x4311)))
	var x4314 uint32
	var x4315 uint32
	x4314, x4315 = bits.Add32(x4283, uint32(0x0), uint32(uint1(x4313)))
	var x4316 uint32
	var x4317 uint32
	x4316, x4317 = bits.Add32(x4285, x4273, uint32(uint1(x4315)))
	var x4318 uint32
	var x4319 uint32
	x4318, x4319 = bits.Add32(x4287, x4291, uint32(uint1(x4317)))
	var x4320 uint32
	var x4321 uint32
	x4320, x4321 = bits.Add32(x4289, x4292, uint32(uint1(x4319)))
	x4322 := (uint32(uint1(x4321)) + uint32(uint1(x4290)))
	var x4323 uint32
	var x4324 uint32
	x4323, x4324 = bits.Sub32(x4306, 0xffffffff, uint32(0x0))
	var x4325 uint32
	var x4326 uint32
	x4325, x4326 = bits.Sub32(x4308, 0xffffffff, uint32(uint1(x4324)))
	var x4327 uint32
	var x4328 uint32
	x4327, x4328 = bits.Sub32(x4310, 0xffffffff, uint32(uint1(x4326)))
	var x4329 uint32
	var x4330 uint32
	x4329, x4330 = bits.Sub32(x4312, uint32(0x0), uint32(uint1(x4328)))
	var x4331 uint32
	var x4332 uint32
	x4331, x4332 = bits.Sub32(x4314, uint32(0x0), uint32(uint1(x4330)))
	var x4333 uint32
	var x4334 uint32
	x4333, x4334 = bits.Sub32(x4316, uint32(0x0), uint32(uint1(x4332)))
	var x4335 uint32
	var x4336 uint32
	x4335, x4336 = bits.Sub32(x4318, uint32(0x1), uint32(uint1(x4334)))
	var x4337 uint32
	var x4338 uint32
	x4337, x4338 = bits.Sub32(x4320, 0xffffffff, uint32(uint1(x4336)))
	var x4340 uint32
	_, x4340 = bits.Sub32(x4322, uint32(0x0), uint32(uint1(x4338)))
	var x4341 uint32
	cmovznzU32(&x4341, uint1(x4340), x4323, x4306)
	var x4342 uint32
	cmovznzU32(&x4342, uint1(x4340), x4325, x4308)
	var x4343 uint32
	cmovznzU32(&x4343, uint1(x4340), x4327, x4310)
	var x4344 uint32
	cmovznzU32(&x4344, uint1(x4340), x4329, x4312)
	var x4345 uint32
	cmovznzU32(&x4345, uint1(x4340), x4331, x4314)
	var x4346 uint32
	cmovznzU32(&x4346, uint1(x4340), x4333, x4316)
	var x4347 uint32
	cmovznzU32(&x4347, uint1(x4340), x4335, x4318)
	var x4348 uint32
	cmovznzU32(&x4348, uint1(x4340), x4337, x4320)
	var x4349 uint32
	var x4350 uint32
	x4349, x4350 = bits.Add32(x2376, x3031, uint32(0x0))
	var x4351 uint32
	var x4352 uint32
	x4351, x4352 = bits.Add32(x2377, x3032, uint32(uint1(x4350)))
	var x4353 uint32
	var x4354 uint32
	x4353, x4354 = bits.Add32(x2378, x3033, uint32(uint1(x4352)))
	var x4355 uint32
	var x4356 uint32
	x4355, x4356 = bits.Add32(x2379, x3034, uint32(uint1(x4354)))
	var x4357 uint32
	var x4358 uint32
	x4357, x4358 = bits.Add32(x2380, x3035, uint32(uint1(x4356)))
	var x4359 uint32
	var x4360 uint32
	x4359, x4360 = bits.Add32(x2381, x3036, uint32(uint1(x4358)))
	var x4361 uint32
	var x4362 uint32
	x4361, x4362 = bits.Add32(x2382, x3037, uint32(uint1(x4360)))
	var x4363 uint32
	var x4364 uint32
	x4363, x4364 = bits.Add32(x2383, x3038, uint32(uint1(x4362)))
	var x4365 uint32
	var x4366 uint32
	x4365, x4366 = bits.Sub32(x4349, 0xffffffff, uint32(0x0))
	var x4367 uint32
	var x4368 uint32
	x4367, x4368 = bits.Sub32(x4351, 0xffffffff, uint32(uint1(x4366)))
	var x4369 uint32
	var x4370 uint32
	x4369, x4370 = bits.Sub32(x4353, 0xffffffff, uint32(uint1(x4368)))
	var x4371 uint32
	var x4372 uint32
	x4371, x4372 = bits.Sub32(x4355, uint32(0x0), uint32(uint1(x4370)))
	var x4373 uint32
	var x4374 uint32
	x4373, x4374 = bits.Sub32(x4357, uint32(0x0), uint32(uint1(x4372)))
	var x4375 uint32
	var x4376 uint32
	x4375, x4376 = bits.Sub32(x4359, uint32(0x0), uint32(uint1(x4374)))
	var x4377 uint32
	var x4378 uint32
	x4377, x4378 = bits.Sub32(x4361, uint32(0x1), uint32(uint1(x4376)))
	var x4379 uint32
	var x4380 uint32
	x4379, x4380 = bits.Sub32(x4363, 0xffffffff, uint32(uint1(x4378)))
	var x4382 uint32
	_, x4382 = bits.Sub32(uint32(uint1(x4364)), uint32(0x0), uint32(uint1(x4380)))
	var x4383 uint32
	cmovznzU32(&x4383, uint1(x4382), x4365, x4349)
	var x4384 uint32
	cmovznzU32(&x4384, uint1(x4382), x4367, x4351)
	var x4385 uint32
	cmovznzU32(&x4385, uint1(x4382), x4369, x4353)
	var x4386 uint32
	cmovznzU32(&x4386, uint1(x4382), x4371, x4355)
	var x4387 uint32
	cmovznzU32(&x4387, uint1(x4382), x4373, x4357)
	var x4388 uint32
	cmovznzU32(&x4388, uint1(x4382), x4375, x4359)
	var x4389 uint32
	cmovznzU32(&x4389, uint1(x4382), x4377, x4361)
	var x4390 uint32
	cmovznzU32(&x4390, uint1(x4382), x4379, x4363)
	var x4391 uint32
	var x4392 uint32
	x4391, x4392 = bits.Add32(x3686, x4341, uint32(0x0))
	var x4393 uint32
	var x4394 uint32
	x4393, x4394 = bits.Add32(x3687, x4342, uint32(uint1(x4392)))
	var x4395 uint32
	var x4396 uint32
	x4395, x4396 = bits.Add32(x3688, x4343, uint32(uint1(x4394)))
	var x4397 uint32
	var x4398 uint32
	x4397, x4398 = bits.Add32(x3689, x4344, uint32(uint1(x4396)))
	var x4399 uint32
	var x4400 uint32
	x4399, x4400 = bits.Add32(x3690, x4345, uint32(uint1(x4398)))
	var x4401 uint32
	var x4402 uint32
	x4401, x4402 = bits.Add32(x3691, x4346, uint32(uint1(x4400)))
	var x4403 uint32
	var x4404 uint32
	x4403, x4404 = bits.Add32(x3692, x4347, uint32(uint1(x4402)))
	var x4405 uint32
	var x4406 uint32
	x4405, x4406 = bits.Add32(x3693, x4348, uint32(uint1(x4404)))
	var x4407 uint32
	var x4408 uint32
	x4407, x4408 = bits.Sub32(x4391, 0xffffffff, uint32(0x0))
	var x4409 uint32
	var x4410 uint32
	x4409, x4410 = bits.Sub32(x4393, 0xffffffff, uint32(uint1(x4408)))
	var x4411 uint32
	var x4412 uint32
	x4411, x4412 = bits.Sub32(x4395, 0xffffffff, uint32(uint1(x4410)))
	var x4413 uint32
	var x4414 uint32
	x4413, x4414 = bits.Sub32(x4397, uint32(0x0), uint32(uint1(x4412)))
	var x4415 uint32
	var x4416 uint32
	x4415, x4416 = bits.Sub32(x4399, uint32(0x0), uint32(uint1(x4414)))
	var x4417 uint32
	var x4418 uint32
	x4417, x4418 = bits.Sub32(x4401, uint32(0x0), uint32(uint1(x4416)))
	var x4419 uint32
	var x4420 uint32
	x4419, x4420 = bits.Sub32(x4403, uint32(0x1), uint32(uint1(x4418)))
	var x4421 uint32
	var x4422 uint32
	x4421, x4422 = bits.Sub32(x4405, 0xffffffff, uint32(uint1(x4420)))
	var x4424 uint32
	_, x4424 = bits.Sub32(uint32(uint1(x4406)), uint32(0x0), uint32(uint1(x4422)))
	var x4425 uint32
	cmovznzU32(&x4425, uint1(x4424), x4407, x4391)
	var x4426 uint32
	cmovznzU32(&x4426, uint1(x4424), x4409, x4393)
	var x4427 uint32
	cmovznzU32(&x4427, uint1(x4424), x4411, x4395)
	var x4428 uint32
	cmovznzU32(&x4428, uint1(x4424), x4413, x4397)
	var x4429 uint32
	cmovznzU32(&x4429, uint1(x4424), x4415, x4399)
	var x4430 uint32
	cmovznzU32(&x4430, uint1(x4424), x4417, x4401)
	var x4431 uint32
	cmovznzU32(&x4431, uint1(x4424), x4419, x4403)
	var x4432 uint32
	cmovznzU32(&x4432, uint1(x4424), x4421, x4405)
	out1[0] = x1535
	out1[1] = x1536
	out1[2] = x1537
	out1[3] = x1538
	out1[4] = x1539
	out1[5] = x1540
	out1[6] = x1541
	out1[7] = x1542
	out1[8] = x1543
	out2[0] = x1544
	out2[1] = x1545
	out2[2] = x1546
	out2[3] = x1547
	out2[4] = x1548
	out2[5] = x1549
	out2[6] = x1550
	out2[7] = x1551
	out2[8] = x1552
	out3[0] = x4383
	out3[1] = x4384
	out3[2] = x4385
	out3[3] = x4386
	out3[4] = x4387
	out3[5] = x4388
	out3[6] = x4389
	out3[7] = x4390
	out4[0] = x4425
	out4[1] = x4426
	out4[2] = x4427
	out4[3] = x4428
	out4[4] = x4429
	out4[5] = x4430
	out4[6] = x4431
	out4[7] = x4432
}
